:- style_check(-singleton).

resolveallanaphora(Topics,[],[],[]):-!.
resolveallanaphora(Topics,[[]-S-F/I|Tops],Resolved,Rest):-
   resolveallanaphora(Topics,Tops,Resolved,Rest),
   !.

resolveallanaphora(Topics,[W-S-F/I|Tops],[Resol|Resolved],[Unmatched|Rest]):-
   resolveanaph(W-S-F,Topics,Resol,Unmatched),
   resolveallanaphora(Topics,Tops,Resolved,Rest),
   !.

resolveanaph(W-S-F,[],[],W-S-F):-!.

resolveanaph(W-S-F,[Score-[]-Ind-F1|Topics],Resolved,Rest):-
   resolveanaph(W-S-F,Topics,Resolved,Rest),
   !.
resolveanaph(W-S-F,[Score-W1-0-F1|Topics],Resolved,Rest):-
   resolveanaph(W-S-F,Topics,Resolved,Rest),
   !.
resolveanaph(W-S-F,[Score-[]-Ind-F1/_|Topics],Resolved,Rest):-
   resolveanaph(W-S-F,Topics,Resolved,Rest),
   !.
resolveanaph(W-S-F,[Score-W1-0-F1/_|Topics],Resolved,Rest):-
   resolveanaph(W-S-F,Topics,Resolved,Rest),
   !.
resolveanaph(W-S-F,[Score-W1-Ind-F1|Topics],Resolved,Rest):-
     (j(W1);fct(W1);r(W1);grammw(W1,_);integer(W1)),
   resolveanaph(W-S-F,Topics,Resolved,Rest),
   !.

resolveanaph(W-S-F,[Score-W1-Ind-F1/_|Topics],Id-W-W1-F1,[]):-
     (j(W1);fct(W1);r(W1);grammw(W1,_);integer(W1)),
   resolveanaph(W-S-F,Topics,Resolved,Rest),
   !.
resolveanaph(W-S-F,[Score-(Cat-W2)-W1-F1|Topics],Resolved,Rest):-
   resolveanaph(W-S-F,[Score-W2-Cat-F1|Topics],Resolved,Rest),
   !.
resolveanaph(W-S-F,[Score-W-Ind-F1/_|Topics],Id-W-W-F1,[]):-
   match_feats_cats(F, F1), atom(Ind),
   stringof([A,B|_],Ind), (A=i,B=d,Id=Ind;var(Id)),
   !.
resolveanaph(W-S-F,[Score-W-Ind-F1|Topics],Id-W-W-F1,[]):-
   match_feats_cats(F, F1),atom(Ind),
   stringof([A,B|_],Ind), (A=i,B=d,Id=Ind;var(Id)),
   !.
resolveanaph(W-S-F,[Score-W1-Ind-F1/_|Topics],Id-W-W1-F1,[]):-
   match_feats_cats(F, F1),
   matchmainsec(W,W1),atom(Ind),
   stringof([A,B|_],Ind), (A=i,B=d,Id=Ind;var(Id)),
   !.
resolveanaph(W-S-F,[Score-W1-Ind-F1|Topics],Id-W-W1-F1,[]):-
   match_feats_cats(F, F1),
   matchmainsec(W,W1),atom(Ind),
   stringof([A,B|_],Ind), (A=i,B=d,Id=Ind;var(Id)),
   !.
resolveanaph(W-S-F,[Score-W1-Ind-F1/_|Topics],Id-W-W1-F1,[]):-
   matchmainsec(W,W1),
   stringof([A,B|_],Ind), (A=i,B=d,Id=Ind;var(Id)),
   !.
resolveanaph(W-S-F,[Score-W1-Ind-F1|Topics],Id-W-W1-F1,[]):-
   matchmainsec(W,W1),atom(Ind),
   stringof([A,B|_],Ind), (A=i,B=d,Id=Ind;var(Id)),
   !.
resolveanaph(W-S-F,[Score-W1-Ind-F1|Topics],Resolved,Rest):-
   resolveanaph(W-S-F,Topics,Resolved,Rest),
   !.

check_coord_compls:-!.
check_coord_compls:-
     findall(Coord, 
              (dgrs(N,Dgr),
              (term_to_atom(ccomp-Coor,FunctR),
                Dgr=..[FunctR|_];
               term_to_atom(adj-mod,FunctR),
                Dgr=..[FunctR,Cong|_],sub_w(Cong))),
                           Coords),
      Coords\=[],!.

%[Clause,Prons,Noms,RefList]

collect_all_refs_weghts(N,Clauses,Prons,NTops,Refs,OldArgs):-
    collects_mains_secs(N,Clauses,Tops,Mains),
    reorg_weight_mains(Mains,Args,Prons,Refsort),
%    compute_distance_weights(Refsort, WeightedRefs),
    appiattisci(Args,OldArgs),
    binding_weighted_prons(Prons,OldArgs,Refsort,NewMain,Exts,Refss),
    collect_prons_tops(Prons,Tops,NTops),
    appiattisci(NewMain,RefList),
    appiattisci(Refss,Refs),
    !.

binding_weighted_prons(Prons,Args,Refsort,NewMain,Exts,Refs):-
    appiattisci(Refsort,Refsor),
    reorg_sort_mains(Refsor,Refs),
    find_antes_mains(Prons,Args, Refs,Ante,NewMain,Exts),
    !.
    
fetch_pred([],Args,[]):-!.
fetch_pred(B,Args,[Pre-Pron-Ind|Pres]):-
     Args\=[],
     elimina(Pron-Sco-Fea/Ind, B, B1),
     nogen_member(Cl-Pre-Ars, Args),
     nogen_member(Role/Ind, Ars),
     fetch_pred(B1,Args,Pres),
     !.
fetch_pred(B,Args,[Pre-Pron-Ind|Pres]):-
     Args\=[],
     elimina(Pron-Sco-Fea/Ind, B, B1),
     nogen_member(Cl-Pre-Ars, Args),
     appiattisci(Ars,Arss),
     nogen_member(Role/Ind, Arss),
     fetch_pred(B1,Args,Pres),
     !.
fetch_pred(B,Args,[Pre-Pron-Ind|Pres]):-
     elimina(Pron-Sco-Fea/Ind, B, B1),
    fetch_pred(B1,Args,Pres),
     !.
     
disjoint_chain(W,W1,Ind):-
    ante(Pred,Pro,Ante),
    (Ante\=W
     ;
     Ante=W,
     term_to_atom(ncmod-poss,Fun),
    Body=..[Fun,'_', W1-Ind, Pro],
    Dgr=..[dgrs, N, Body],    
    \+ Dgr),
     !.
disjoint_chain(W,W1,Ind):-
    \+ ante(Pred,Pro,Ante),
     !.


find_antes_mains(Prons,Args, Refs,Ante,NewRefs, Exts):-
   find_Mantes_all(Prons,Args, Refs, Ante,B1),
   substitute_headss(Pred,Refs, Ante, NewRefs),
   appiattisci(B1,B),
   fetch_pred(B,Args,Pre),
   passert_externals(Ante,Pre,B,Exts),
    !.

find_Mantes_all([],Args, Refs, [],[]):-!.
find_Mantes_all([_-[]|Prons],Args, Refs, Antes,B1):-
    find_Mantes_all(Prons,Args, Refs, Antes,B1),
    !.
find_Mantes_all([Cl-[W-0-F/I]|Prons],Args, Refs, [Ante|Antes],[Pros|B1]):-
    check_argument_pron(W,Refs,F,F1),
    find_Mantes(Cl,W-0-F1/I,Args,Refs, Ante,Pros),
    find_Mantes_all(Prons,Args, Refs, Antes,B1),
    !.

find_Mantes_all([Cl-[W-0-F/I|Prons]],Args, Refs, [Ante|Antes],[Pros|B1]):-
    find_Mantes(Cl,W-0-F/I,Args,Refs, Ante,Pros),
    (Prons=[Cl1-[W-0-F/I]|Pro],
      find_Mantes_all(Prons,Args, Refs, Antes,B1);
      Prons\=[Cl1-[_-0-_/_]|Pro],
      find_Mantes_all_Cl(Cl1,Prons,Args, Refs, Antes,B1)),
    !.

find_Mantes_all([Cl-[W-0-F/I|Prons]|Rest],Args, Refs, AnteAll,ProAll):-
     find_Mantes(Cl,W-0-F/I,Args,Refs, Ante,Pros),
     Prons=[W1-0-F1/I1|Pro],
     find_Mantes_all([Cl-[W1-0-F1/I1]],Args, Refs, Antes,B1),
    find_Mantes_all(Rest,Args, Refs, Antess,B2),
    append(Ante,Antes,Ante1),
    append([Pros],B1,B11),
    append(Ante1,Antess,AnteAll),
    append(B11,B2,ProAll),
    !.

find_Mantes_all_Cl(Cl,[],Args, Refs, [],[]):-!.
find_Mantes_all_Cl(Cl,[W-0-F/I|Prons],Args, Refs, [Ante|Antes],[Pros|B1]):-
    find_Mantes(Cl,W-0-F/I,Args,Refs, Ante,Pros),
    find_Mantes_all(Prons,Args, Refs, Antes,B1),
    !.

get_T([+ref, def0, _, _, _, _, -class],npr).
get_T(_,n).

reorgsort([],[]):-!.
reorgsort([P-F/Snx-N|NTop],[F/Snx-N|NTops]):-
   reorgsort(NTop,NTops),
   !.

reorg_sort_mains(Refs,Refsort):-
   sort(Refs,Refss),
   reorgsort(Refss,Refsort),
   !.
reorg_weight_mains([],[],[],[]):-!.
reorg_weight_mains([[Main]|Mains],[N-Pred-Args|Rest],[N-Prons|Pros],[Ref|Refs]):-
    Main=[N,Pred-Args, Prons,NTops,RefList],
    appiattisci(RefList,RefLis),
    reorg_sort_weight(RefLis,N,Ref),
    reorg_weight_mains(Mains,Rest,Pros,Refs),
    !.
reorg_weight_mains([Main|Mains],[N-Pred-Args|Rest],[N-Prons|Pros],[Ref|Refs]):-
    Main=[N,Pred-Args, Prons,NTops,RefList],
    appiattisci(RefList,RefLis),
    reorg_sort_weight(RefLis,N,Ref),
    reorg_weight_mains(Mains,Rest,Pros,Refs),
    !.
reorg_weight_mains([Main|Mains],[N-Pred-Args|Rest],Pros,[Ref|Refs]):-
    Main=[N,Pred-Args, Prons,NTops,[RList|RefList]],
    reorg_sort_weight(RList,N,Ref),
    N1 is N - 1,
    Main1=[N1,Pred-Args, Prons,NTops,RefList],
    reorg_weight_mains([Main1|Mains],Rest,Pros,Refs),
    !.
reorg_weight_mains([[]|Mains],Rest,Pros,Refs):-
    reorg_weight_mains(Mains,Rest,Pros,Refs),
    !.

reorg_sort_weight([],N,[]):-!.
reorg_sort_weight([H/P|RefList],N,[P1-H/P-N|Refs]):-
    P1 is P * N,
   reorg_sort_weight(RefList,N,Refs),
    !.
pbinding(N,Main,AllArgs,RestProns,NTops,RefList,Pred):-
     take_main(Main,Clause),
  (Clause=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs]
         ;
   Clause=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],         
         Mods=[]), 
   (atomic(Pred), Pre=Pred; Pred=Pre-In),
   extract_all_refs(Refs, OutAdjs,RefList,OutArgs),
   appiattisci(RefList,Refss),
   collect_allrheadss(Refss, NTopss),
   sort_reorg(NTopss,NTops),
   appiattisci(OutArgs,Outsa),
   (is_list(Args),
    append(Args,Outsa,AllArgs); AllArgs=Outsa),
   select_pronominals(Pre,AllArgs,NTops, Prons,Noms),
   recover_poss_mods(Pre,Refs,Mods,Poss),
   eliminate_double_poss(Poss,Prons,Pross),
   find_poss_antecedents(Pross, Pre,Refss,Noms, RestProns,Ante),
   assert_externals(Pre,RestProns),
   !.
pbinding(N,Main,Args,RestProns,NTops,RefList,Pred):-
   take_main(Main,Clause),
   Pred=be,
   extract_all_refs([Clause], [],RefList,Args),
   appiattisci(RefList,Refss),
   collect_allrheadss(Refss, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,Args,NTops, Prons,Noms),
   (on(Ind-Head-Mod,Clause),Mods=Ind-Head-Mod;
          get_mods_refs(Clause, Mods);
          Mods=[]),
   recover_poss_mods(Pre,Refs,Mods,Poss),
   eliminate_double_poss(Poss,Prons,Pross),
   find_poss_antecedents(Pross, Pre,Refss,Noms, RestProns,Ante),
   assert_externals(Pre,RestProns),
   !.

pronominal_binding(N,[],[]):-!.
pronominal_binding(N,Clauses,[Prons,Noms,RefList]):-
   remove(main-Main,Clauses,Rest),
   N1 is N + 1,
   p_binding(N1,main,Main,Rest,NewClauses,Prons,Args,Noms,RefList),
   !.
pronominal_binding(N,Clauses,[Prons,Noms,RefList]):-
   remove(second-Main,Clauses,Rest),
   N1 is N + 1,
   p_binding(N1,second,Main,Rest,NewClauses,Prons,Args,Noms,RefList),
   !.
pronominal_binding(N,Clauses,[Prons,Noms,RefList]):-
   remove(comp-Main,Clauses,Rest),
   N1 is N + 1,
   p_binding(N1,comp,Main,Rest,NewClauses,Prons,Args,Noms,RefList),
   !.

p_binding(N,main,Main,[],Main,Pros,N-Pred-Args,Noms,RefList):-
     take_main(Main,Clause),
  (Clause=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs]
         ;
   Clause=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],         
         Mods=[]), 
   extract_all_refs(Refs, OutAdjs,RefList, OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,Args,NTops, Prons,Noms),
   recover_poss_mods(Pred,Refs,Mods,Poss),
   append(Poss,Prons,Pross),
   find_poss_antecedents(Pross,Pred,RefList, Noms, Pros,Ante),
   assert_externals(Pred,Pros),
   !.

p_binding(N,comp,Main,[],NewMain,Pros,[N-Pred-Args|E],[Noms|C],RefLists):-
     take_main(Main,Clause),
  (Clause=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs]
         ;
   Clause=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],         
         Mods=[]), 
   pronominal_binding(N,Second,Out),
   (Out=[],B=[],C=[];Out\=[],Out=[A,B,E,C,D]),
   extract_all_refs(Refs, OutAdjs,RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,Args,NTops, Prons,Noms),
   NewMain=[Neg,Pred-Args,Mods,  Refs,OutAdjs],
   recover_poss_mods(Pred,Refs,Mods,Poss),
   append(Poss,Prons,Pross),
   find_poss_antecedents(Pross,Pred,RefList, Noms, RestProns,Ante),
   assert_externals(Pred,RestProns),
   append(RestProns,B,Pros),
   append(RefList,D,RefLists),
   !.

p_binding(N,comp,Main,Second,NewMain,Pros,[N-Pred-Args|E],[Noms|C],RefLists):-
     take_main(Main,Clause),
  (Clause=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs]
         ;
   Clause=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],         
         Mods=[]), 
   pronominal_binding(N,Second,Out),
   (Out=[],B=[],C=[];
    Out\=[],Out=[A,B,E,C,D],
     A=[Ne, Pre-Arg,Mod, Ref, OutAdj]),
   extract_all_refs(Refs, OutAdjs,RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,Args,NTops, Prons,Noms),
   (N=1, Nomss=NTops;N\=1, Nomss=Noms),
   recover_all_ants(Nomss,C,CNoms),
   recover_poss_mods(Pred,Refs,Mods,Poss),
   find_poss_antecedents(Poss, Pred,RefList,Nomss, RestProns,AnteP),
   sfind_antecedents(B,Arg,Args, CNoms, Ante,B1),
   append(Ref,Refs,RefsAl),
   append(D,RefsAl,RefsAll),
   append(Ante,AnteP,Antes),
   substitute_heads(Pred,RefsAll, Antes, NewRefs),
   NewMain=[Neg,Pred-Args,Mods,  NewRefs,OutAdjs],
   assert_externals(Pred,Prons),
   append(Prons,B1,Pros),
   append(RefList,D,RefLists),
   !.
p_binding(N,comp,Main,Second,NewMain,Pros,[N-Pred-Args|E],[Noms|C],RefLists):-
   pronominal_binding(N,Second,Out),
   (Out=[],B=[],C=[];Out\=[],Out=[A,B,E,C,D]),
     take_main(Main,Clause),
   extract_all_refs(Clause, [],RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,[],NTops, Prons,Noms),
   NewMain=[Neg,Pred-Args,Mods,  Refs,OutAdjs],
   append(Prons,B,Pros),
   append(RefList,D,RefLists),
   !.
p_binding(N,comp,Main,Second,NewMain,Pros,N-Pred-Args,[Noms|C],RefList):-
     take_main(Main,Clause),
   extract_all_refs([Clause], [],RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,Args,NTops, Prons,Noms),
   NewMain=[Neg,Pred-Args,Mods,  Refs,OutAdjs],
   append(Prons,B,Pros),
   !.
p_binding(N,second,Main,[],NewMain,Pros,[N-Pred-Args|E],[Noms|C],RefLists):-
     take_main(Main,Clause),
  (Clause=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs]
         ;
   Clause=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],         
         Mods=[]), 
   pronominal_binding(N,Second,Out),
   (Out=[],B=[],C=[];Out\=[],Out=[A,B,E,C,D]),
   extract_all_refs(Refs, OutAdjs,RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,Args,NTops, Prons,Noms),
   NewMain=[Neg,Pred-Args,Mods,  Refs,OutAdjs],
   recover_poss_mods(Pred,Refs,Mods,Poss),
   append(Poss,Prons,Pross),
   find_poss_antecedents(Pross, Pred,RefList,Noms, RestProns,Ante),
   assert_externals(Pred,RestProns),
   append(RestProns,B,Pros),
   append(RefList,D,RefLists),
   !.
p_binding(N,second,Main,Second,NewMain,Pros,[N-Pred-Args|E],[Noms|C],RefLists):-
     take_main(Main,Clause),
  (Clause=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs]
         ;
   Clause=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],         
         Mods=[]), 
   pronominal_binding(N,Second,Out),
   (Out=[],B=[],C=[];
     Out\=[],Out=[A,B,E,C,D],
     A=[Ne, Pre-Arg,Mod, Ref, OutAdj]),
   extract_all_refs(Refs, OutAdjs,RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,Args,NTops, Prons,Noms),
   (N=1, Nomss=NTops;N\=1, Nomss=Noms),
   recover_all_ants(Nomss,C,CNoms),
   recover_poss_mods(Pred,Refs,Mods,Poss),
   find_poss_antecedents(Poss, Pred,RefList,Nomss, RestProns,AnteP),
   sfind_antecedents(B, Arg,Args,CNoms, Ante,B1),
   append(Ref,Refs,RefsAl),
   append(D,RefsAl,RefsAll),
   append(Ante,AnteP,Antes),
   substitute_heads(Pred,RefsAll, Antes, NewRefs),
   NewMain=[Neg,Pred-Args,Mods,  NewRefs,OutAdjs],
   assert_externals(Pred,Prons),
   append(Prons,B1,Pros),
   append(RefList,D,RefLists),
   !.
p_binding(N,second,Main,Second,NewMain,Pros,[N-Pred-Args|E],[Noms|C],RefLists):-
   pronominal_binding(N,Second,Out),
   (Out=[],B=[],C=[];Out\=[],Out=[A,B,E,C,D],
     A=[Neg, Pred-Args,Mods, Ref, OutAdjs]),
     take_main(Main,Clause),
   extract_all_refs(Clause, [],RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,[],NTops, Prons,Noms),
   NewMain=[Neg,Pred-Args,Mods,  Refs,OutAdjs],
   recover_poss_mods(Pred,Refs,Mods,Poss),
   find_poss_antecedents(Poss, Pred,RefList,Noms, RestProns,AnteP),
   append(RestProns,Prons,Pross),
   append(Pross,B,Pros),
   append(RefList,D,RefLists),
   !.
p_binding(N,second,Main,Second,NewMain,Pros,N-Pred-Args,[Noms],RefList):-
     take_main(Main,Clause),
  (Clause=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs]
         ;
   Clause=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],         
         Mods=[]), 
   extract_all_refs([Clause], [],RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,[],NTops, Prons,Noms),
   NewMain=[Neg,Pred-Args,Mods,  Refs,OutAdjs],
   recover_poss_mods(Pred,Refs,Mods,Poss),
   find_poss_antecedents(Poss, Pred,RefList,Noms, RestProns,AnteP),
   append(RestProns,Prons,Pros),
   !.
p_binding(N,main,Main,Second,NewMain,Pros,[N-Pred-Args|E],[Noms|C],RefLists):-
  take_main(Main,Clause),
  (Clause=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs]
         ;
   Clause=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],         
         Mods=[]), 
   pronominal_binding(N,Second,Out),
   (Out=[],B=[],C=[];
    Out\=[],Out=[A,B,E,C,D],
     A=[Ne, Pre-Arg,Mod, Ref, OutAdj]),
   extract_all_refs(Refs, OutAdjs,RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,Args,NTops, Prons,Noms),
   recover_poss_mods(Pred,Refs,Mods,Poss),
   (N=1, Nomss=NTops;N\=1, Nomss=Noms),
   recover_all_ants(Nomss,C,CNoms),
   find_poss_antecedents(Poss, Pred,RefList,Nomss, RestProns,AnteP),
   sfind_antecedents(B, Arg,Args,CNoms, Ante,B1),
   append(Ref,Refs,RefsAl),
   append(D,RefsAl,RefsAll),
   append(Ante,AnteP,Antes),
   substitute_heads(Pred,RefsAll, Antes, NewRefs),
   NewMain=[Neg,Pred-Args,Mods,  NewRefs,OutAdjs],
   assert_externals(Pred,Prons),
   append(Prons,B1,Pros),
   append(RefList,D,RefLists),
   !.

p_binding(N,main,Main,Second,NewMain,Pros,[N-Pred-Args|E],[Noms|C],RefLists):-
   pronominal_binding(N,Second,Out),
   (Out=[],B=[],C=[];Out\=[],Out=[A,B,E,C,D],
     A=[Neg, Pred-Args,Mods, Ref, OutAdjs]
    ),
   take_main(Main,Clause),
   extract_all_refs([Clause], [],RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,[],NTops, Prons,Noms),
   append(Ref,RefList,NewRefs),
   NewMain=[Neg,Pred-Args,Mods,  NewRefs,OutAdjs],
   recover_poss_mods(Pred,Refs,Mods,Poss),
   find_poss_antecedents(Poss, Pred,RefList,Noms, RestProns,AnteP),
   append(RestProns,B,Pross),
   append(Pross,Prons,Pros),
   append(RefList,D,RefLists),
   !.

p_binding(N,main,Main,Second,Main,Pros,N-Pred-Args,[Noms],RefList):-
  take_main(Main,Clause),
   extract_all_refs([Clause], [],RefList,OutArgs),
   collect_allrheads(RefList, NTopss),
   sort_reorg(NTopss,NTops),
   select_pronominals(Pred,[],NTops, Prons,Noms),
   recover_poss_mods(Pred,Refs,Mods,Poss),
   find_poss_antecedents(Poss, Pred,RefList,Noms, RestProns,AnteP),
   append(Prons,RestProns,Pros),
   !.

recover_all_ants(Noms,C,CNom):-
   append(Noms,C,CNoms),
   appiattisci(CNoms,CNom),
   !.

sort_reorg(NTopss,NTops):-
   sort(NTopss,NTop),
   reorgNtops(NTop,NTops),!.

reorgNtops([],[]):-!.
reorgNtops([P-T-D-F/Snx|NTop],[T-D-F/Snx|NTops]):-
   reorgNtops(NTop,NTops),
   !.
take_main(Main,Main):-
   Main=[Neg,
         Pred-Args,
         Mods, 
         Refs,
         OutAdjs],
      !.
take_main(Main,Main):-
   Main=[Neg,
         Pred-Args,
         Refs,
         OutAdjs],
      !.
take_main(Main,Clause):-
   elimina(Sec-Claus,Main,[]),
   remove(S-Clause, Claus, []),
    !.
take_main(Main,Clause):-
   elimina(second-Clause,Main,[]),
    !.
take_main(Main,Clause):-
   appiattisci(Main, Mainn),
   remove(S-Clause, Mainn, Rest),
    !.
take_main(Main,Clause):-
   appiattisci(Main,Clauss),
   remove(S-Clause, Clauss, Rest),
    !.
take_main(Main,Clause):-
   appiattisci(Main,Claus),
   remove(S-Clause, Claus, Rest),
    !.
take_main(Main,Clause):-
   appiattisci(Main,Clause),
    !.
take_main(Main,Main):-!.
take_mains(Main,Clause, Rest):-
   appiattisci(Main, Mainn),
   remove(S-Clause, Mainn, Rest),
    !.
take_mains(Main,Clause, Rest):-
   appiattisci(Main,Clauss),
   remove(S-Clause, Clauss, Rest),
    !.
take_mains(Main,Clause, Rest):-
   appiattisci(Main,Claus),
   remove(S-Clause, Claus, Rest),
    !.

findantecedents(Prons,OldArgs,Args, [], [],Prons):-!.
findantecedents(Prons,OldArgs,Args,[[]], [],Prons):-!.
findantecedents(Prons,OldArgs,Args,[[],[]], [],Prons):-!.
findantecedents([], OldArgs,Args,RefList, [I-W1|Antes],[A-0-Feat/I|Pros]):-
     findall(Anaf, p_anaf(Anaf, Feats, Head), Anafs),
     findall(Pron, on([Pron]-Sco-Feat/_, RefList), Prons),
     findall(Anf, (on(Anf,Anafs), on(Anf,Prons)), Anfs),
     Anfs\=[], Anfs=[A|_],
      nth(RefList, N, [A]-Sco-Feat/I),
      N1 is N - 1,
      (nth(RefList, N1, [W1]-Sc-Fea/_);nth(RefList, N1, W1-Sc-Fea/_)),
     match_feats_cats(Feat, Fea),
     elimina([A]-Sco-Feat/I,RefList, Refs),
      findantecedents([], OldArgs,Args,Refs, Antes,Pros),
       !.
findantecedents([], OldArgs,Args,RefList, [I-W1|Antes],[A-0-Feat/I|Pros]):-
     findall(Anaf, o_pron(Anaf, Feats, Head), Anafs),
     findall(Pron, on([Pron]-Sco-Feat/_, RefList), Prons),
     findall(Anf, (on(Anf,Anafs), on(Anf,Prons)), Anfs),
     Anfs\=[], Anfs=[A|_],
      on(V-Arg,Args), list(Arg),
      nth(RefList, N, [A]-Sco-Feat/I),
      N1 is N - 1,
      (nth(RefList, N1, [W1]-Sc-Fea/_);nth(RefList, N1, W1-Sc-Fea/_)),
     match_feats_cats(Feat, Fea),
     elimina([A]-Sco-Feat/I,RefList, Refs),
      findantecedents([], OldArgs,Args,Refs, Antes,Pros),
       !.
findantecedents([],OldArgs,Args, RefList, [],[]):-!.
findantecedents([W-0-F/I|Prons], OldArgs,Args, [W1-T-F1/I1|RefList], [I-W1|Antes],Pros):-
     check_obviation(OldArgs,I1),
     match_feats_cats(F, F1),
    findantecedents(Prons,OldArgs,Args, RefList, Antes,Pros),
    !.
findantecedents([W-0-F/I|Prons], OldArgs,Args, [W1-T-F1/I1|RefList], [I-W1|Antes],Pros):-
     check_obviation(OldArgs,I1),
     match_feats_cats(F, T),
    F1=[P,G,N,Tratti],  (Tratti=[];Tratti=nil), 
   findantecedents(Prons, OldArgs,Args, RefList, Antes,Pros),
    !.
findantecedents([W-0-F/I|Prons], OldArgs,Args, [W1-T-F1/I1|RefList], [I-W1|Antes],Pros):-
     check_obviation(OldArgs,I1),
     F=[P,G,N,Tratti],F1=[P,G,N1,Tratti1],
      N1=sing, N=plur,
      generic_head1(W1,CatSem),
      F2=[P,G,N,Tratti1], 
     match_feats_cats(F, F2),
   findantecedents(Prons, OldArgs,Args, RefList, Antes,Pros),
    !.
findantecedents([W-0-F/I|Prons], OldArgs,Args, [W1-T-F1/I1|RefList], [I-W1|Antes],Pros):-
     check_obviation(OldArgs,I1),
     F1=[P,G,N1,Tratti1], Tratti1=nil,
     match_extract_roles(Args,Role,I1),
      pbrol(Role,Score,_,Feats),
      F2=[P,G,N1,Feats], 
     match_feats_cats(F, F2),
    findantecedents(Prons, OldArgs,Args, RefList, Antes,Pros),
    !.

findantecedents(Prons, OldArgs,Args, [W1-T-F1/I1|RefList], Ante,Pros):-
   findantecedents(Prons, OldArgs,Args, RefList, Ante,Pros),
    !.
findantecedents(Prons, OldArgs,Args, RefList, Ante,Prons).

match_extract_roles(Args,Role,I1):-
    elimina(Pred-Subs,Args, Rest),
    (on(Role/I1, Subs);
      on(Role/I1, Rest)),
    !.
match_extract_roles(Args,Role,I1):-
      on(Role/I1, Args),
    !.

sfind_antecedents([],OldArgs,Args, RefList, [],[]):-!.
sfind_antecedents(Prons,OldArgs,Args, RefList, Antess,Pross)
   :-
   findantecedents(Prons,OldArgs,Args, RefList, Antes,Pros),
    (Antes\=[],Pros=[],
      Antess=Antes, Pross=Pros
      ;
     Antes\=[],Pros\=[],
      Antess=Antes, Pross=Pros
      ;
     Antes=[],Pros=[],
      Antess=Antes, Pross=Pros
      ;
     Antes=[],Pros\=[],
     ( length(Prons,1),!,
      Antess=Antes, Pross=Pros
        ;
        length(Prons,L),
        1<L, reverse(Prons,RevP),
       findantecedents(RevP,OldArgs,Args, RefList, Ante,Pro),
      Antess=Ante, Pross=Pro)
      ),!.
check_obviation([],I1):-
    !.
check_obviation(Args,I1):-
    elimina(Pred-Subs,Args, Rest),
   findall(Role, (
                          on(Role/I1,Subs);
                          on(Role/I1,Rest)), Roles),
     Roles=[],
     !.
check_obviation(Args,I1):-
   findall(Role, on(Role/I1,Args), Roles),
     Roles=[],
     !.

check_poss_feats(its,Fea,F1):-
   nogen_member(num=Num, Fea),
   nogen_member(gen=Gen, Fea),
   nogen_member(Num,F1),
   \+ nogen_member([umano],F1),
   !.
check_poss_feats(their,Fea,F1):-
   nogen_member(num=Num, Fea),
   nogen_member(gen=Gen, Fea),
   nogen_member(Num,F1),
   !.
check_poss_feats(Ww,Fea,[A,B,C,D,R]):-
   nogen_member(num=Num, Fea),
   nogen_member(gen=Gen, Fea),
   Gen\=fem,
   (Num=C;Num=sing,C=s;Num=plur,C=p),
   nogen_member(umano,D),
   !.
check_poss_feats(Ww,Fea,[A,B,C,D]):-
   nogen_member(num=Num, Fea),
   nogen_member(gen=Gen, Fea),
   Gen\=fem,
   (Num=C;Num=sing,C=s;Num=plur,C=p),
   (Ww\=its,
    nogen_member(umano,D)
    ;
    Ww=its,    
    \+ nogen_member(umano,D)
    ),
   
   !.
  
find_poss_antecedents([], Pred,Ref,Noms, [], []):-!.
find_poss_antecedents(Prons,Pred, [],Noms, Prons, []):-!.
find_poss_antecedents([W-0-F/I|Prons],Pred,Noms,  [],[W-0-F/I|Pros], Antes):-
   find_poss_antecedents(Prons, Pred,Noms,RefList, Pros,Antes),
    !.
find_poss_antecedents([], Pred,RefList,Noms, [], []):-!.
find_poss_antecedents(Prons,Pred,RefList,Noms, Pros,[I-W1|Antes]):-
     findall(Anaf, p_anaf(Anaf, Feats, Head), Anafs),
     findall(Anf, (on(Anf,Anafs), on([Anf]-Sco-Feat/I,Prons)), Anfs),
     Anfs\=[], Anfs=[A|_],
     elimina( [A]-Sco-Feat/I,Prons,Pross),
      nth(RefList, N, ref_ex(I,A,Tab,P,Ge,Nu,Ca,Fu/Ru)/We),
      match_reflexives(N,RefList, Feat,W1),
     assert(ante(Pred,A,W1)),
     find_poss_antecedents(Pross, Pred,RefList,Noms, Pros,Antes),
       !.
find_poss_antecedents([W-0-F/I|Prons],Pred,Noms, [W1-T-F1/I1|RefList], Pros,[I-W1|Antes]):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
   (atomic(W1),Ww1=W1;is_list(W1),on(Ww1,W1)),
   Ww\=Ww1,
   I\=I1,
   filter_pos_ag(Ww,Fea,L),
    on(pred=Pro,F), pred_p(pro, Pro, nil,Cats, []),
    append(F,Cats,FCats),
    (match_feats_cats(FCats, F1);
      check_poss_feats(Ww,Fea,F1)),
   check_disj(W-F-I, W1-I1),
   poss_in_subj(Pred,Ww,I,I1),
   assert(ante(Pred,Ww,W1)),
   find_poss_antecedents(Prons, Pred,Noms,RefList, Pros,Antes),
    !.

find_poss_antecedents([W-0-F/I|Prons],Pred,Noms, [W1-T-F1/I1|RefList], Pros,[I-W1|Antes]):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
   (atomic(W1),Ww1=W1;is_list(W1),on(Ww1,W1)),
   Ww\=Ww1,
   I\=I1,
   filter_pos_ag(Ww,Fea,L),
    on(pred=Pro,F), pred_p(pro, Pro, nil,Cats, []),
    append(F,Cats,FCats),
    match_feats_cats(FCats, T),
    F1=[P,G,N,Tratti,Ro], (Tratti=[];Tratti=nil), 
    var(N),
   check_disj(W-F-I, W1-I1),
   poss_in_subj(Pred,Ww,I,I1),
   assert(ante(Pred,Ww,W1)),
   find_poss_antecedents(Prons, Pred,Noms,RefList, Pros,Antes),
    !.

find_poss_antecedents([W-0-F/I|Prons],Pred,Noms, [W1-T-F1/I1|RefList], Pros,[I-W1|Antes]):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
   (atomic(W1),Ww1=W1;is_list(W1),on(Ww1,W1)),
   Ww\=Ww1,
   I\=I1,
   filter_pos_ag(Ww,Fea,L),
    on(Cats,F), list(Cats),
    on(umano,Cats),
    append(F,Cats,FCats),
    (match_feats_cats(FCats, F1);
      check_poss_feats(Ww,Fea,F1)),
   Ref=..[ref_ex,I,Ww,Ta,P,G,N,C,Fu/Ro],
%   \+ remove(Ref/_,Noms, Rest),
   check_disj(W-F-I, W1-I1),
   poss_in_subj(Pred,Ww,I,I1),
   assert(ante(Pred,Ww,W1)),
   find_poss_antecedents(Prons, Pred,Noms,RefList, Pros,Antes),
    !.

find_poss_antecedents([W-0-F/I|Prons],Pred,Noms, [W1-T-F1/I1|RefList], Pros,[I-W1|Antes]):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
   (atomic(W1),Ww1=W1;is_list(W1),on(Ww1,W1)),
   Ww\=Ww1,
   I\=I1,
   filter_pos_ag(Ww,Fea,L),
    on(Cats,F), list(Cats),
    on(oggetto,Cats),
    append(F,Cats,FCats),
    (match_feats_cats(FCats, F1);
      check_poss_feats(Ww,Fea,F1)),
   Ref=..[ref_ex,I,Ww,Ta,P,G,N,C,Fu/Ro],
%   \+ remove(Ref/_,Noms, Rest),
   check_disj(W-F-I, W1-I1),
   poss_in_subj(Pred,Ww,I,I1),
   assert(ante(Pred,Ww,W1)),
   find_poss_antecedents(Prons, Pred,Noms,RefList, Pros,Antes),
    !.


find_poss_antecedents(Prons,Pred,Noms, [W1-T-F1/I1|RefList], Pros,Ante):-
   find_poss_antecedents(Prons, Pred,Noms,RefList, Pros,Ante),
    !.

o_pron(it, [cat=pron, pred=it, type=pers, pers=3, num=sing, gen=neu], it).
o_pron(you, [cat=pron, pred=you, type=pers, pers=2, num=N, gen=any], you).
o_pron(us, [cat=pron, pred=we, type=pers, pers=1, num=plur, gen=any], we).
o_pron(her, [cat=pron, pred=she, type=pers, pers=3, num=sing, gen=fem], she).
o_pron(him, [cat=pron, pred=she, type=pers, pers=3, num=sing, gen=mas], he).
o_pron(me, [cat=pron, pred=i, type=pers, pers=1, num=sing, gen=any], i).
o_pron(them, [cat=pron, pred=they, type=pers, pers=3, num=plur, gen=any], they).
o_pron(one, [cat=pron, pred=one, type=pers, pers=3, num=N, gen=any], one).

p_anaf(oneself, [cat=pron, pred=one, type=ana, pers=3, num=sing, gen=any], one).
p_anaf(itself, [cat=pron, pred=it, type=ana, pers=3, num=sing, gen=neu], it).
p_anaf(yourself, [cat=pron, pred=you, type=ana, pers=2, num=sing, gen=any], you).
p_anaf(ourselves, [cat=pron, pred=we, type=ana, pers=1, num=plur, gen=any], we).
p_anaf(herself, [cat=pron, pred=she, type=ana, pers=3, num=sing, gen=fem], she).
p_anaf(himself, [cat=pron, pred=she, type=ana, pers=3, num=sing, gen=mas], he).
p_anaf(myself, [cat=pron, pred=i, type=ana, pers=1, num=sing, gen=any], i).
p_anaf(yourselves, [cat=pron, pred=you, type=ana, pers=2, num=plur, gen=any], you).
p_anaf(themselves, [cat=pron, pred=they, type=ana, pers=3, num=plur, gen=any], they).

substitute_heads(Pred,Args, [], []):-!.
substitute_heads(Pred,Args, [I-Ante|Antes], [NewRef|NewRefs]):-
   (elimina(Ref,Args, Rest);
   elimina(Ref/_,Args, Rest)),
   Ref=..[ref_ex,I,W|Re],
   p_anaf(W, Feats, Head), 
   (list(Ante),on(Ant,Ante);atomic(Ante),Ant=Ante),
   Ref1=..[ref_ex,I,Ant|Re],
   append([Ref1],Rest,NewRef),
   assert(ante(Pred,W,Ant)),
   substitute_heads(Pred,Args, Antes, NewRefs),
   !.
substitute_heads(Pred,Args, [I-Ante|Antes], [NewRef|NewRefs]):-
   (elimina(Ref,Args, Rest);
   elimina(Ref/_,Args, Rest)),
   Ref=..[ref_ex,I,W|Re],
   (W=[Head];atomic(W),Head=W),
   (list(Ante),on(Ant,Ante);atomic(Ante),Ant=Ante),
   Ref1=..[ref_ex,I,Ant|Re],
   append([Ref1],Rest,NewRef),
  (retract(ext(Pred1,W));retract(ext(Pred1,[W]));true),
   assert(ante(Pred1,Head,Ant)),
   substitute_heads(Pred,Args, Antes, NewRefs),
   !.
substitute_heads(Pred,Args, [I-Ante|Antes], [NewRef|NewRefs]):-
   (elimina(Ref,Args, Rest);
   elimina(Ref/_,Args, Rest)),
   Ref=..[ref_ex,I,W|Re],
   (W=[Pro];atomic(W),Pro=W),
   o_pron(Pro, Feats, Head), 
   (list(Ante),on(Ant,Ante);atomic(Ante),Ant=Ante),
   Ref1=..[ref_ex,I,Ant|Re],
   append([Ref1],Rest,NewRef),
   assert(ante(Pred,Pro,Ant)),
   substitute_heads(Pred,Args, Antes, NewRefs),
   !.
substitute_heads(Pred,Args, [I-Ante|Antes], NewRefs):-
    substitute_heads(Pred,Args, Antes, NewRefs),
   !.

substitute_headss(Pred,Args, [], []):-!.
substitute_headss(Pred,Args, [[]|[]], []):-!.
substitute_headss(Pred,Args, _-I-Ante-Pred, NewRef):-
   (elimina(Ref,Args, Rest);
   elimina(Ref/_-_,Args, Rest)),
   Ref=..[ref_ex,I,W|Re],
   p_anaf(W, Feats, Head), 
   (list(Ante),on(Ant,Ante);atomic(Ante),Ant=Ante),
   Ref1=..[ref_ex,I,Ant|Re],
   append([Ref1],Rest,NewRef),
   assert(ante(Pred,W,Ant)),
   !.
substitute_headss(Pred,Args, _-I-Ante-Pred, NewRef):-
   (elimina(Ref,Args, Rest);
   elimina(Ref/_-_,Args, Rest)),
   Ref=..[ref_ex,I,W|Re],
   (W=[Head];atomic(W),Head=W),
   (list(Ante),on(Ant,Ante);atomic(Ante),Ant=Ante),
   Ref1=..[ref_ex,I,Ant|Re],
   append([Ref1],Rest,NewRef),
  (retract(ext(Pre,W));retract(ext(Pre,[W]));true),
   assert(ante(Pred,Head,Ant)),
   !.
substitute_headss(Pred,Args, _-I-Ante-Pred, NewRef):-
   (elimina(Ref,Args, Rest);
   elimina(Ref/_-_,Args, Rest)),
   Ref=..[ref_ex,I,W|Re],
   (W=[Pro];atomic(W),Pro=W),
   o_pron(Pro, Feats, Head), 
   (list(Ante),on(Ant,Ante);atomic(Ante),Ant=Ante),
   Ref1=..[ref_ex,I,Ant|Re],
   append([Ref1],Rest,NewRef),
   assert(ante(Pred,Pro,Ant)),
   !.
substitute_headss(Pred,Args, I-W-Ante-Pred, Args):-
   (elimina(Ref,Args, Rest);
   elimina(Ref/_-_,Args, Rest)),
   Ref=..[ref_ex,I,Ante|Re],
   filter_pos_ag(W,Fea,L), 
   (list(Ante),on(Ant,Ante);atomic(Ante),Ant=Ante),
   assert(ante(Pred,W,Ant)),
   !.

substitute_headss(Pre,Args, [Ante|Antes], [NewR|NewRefs]):-
    Ante\=[],
    choose_best_candidate_ante(Args, Ante, Score-I-Ant-Pred),
    check_disjointness(Score-I-Ant-Pred,Antes, NewAntes),
    substitute_headss(Pred,Args, Score-I-Ant-Pred, NewR),
    substitute_headss(Pre,Args, NewAntes, NewRefs),
   !.
substitute_headss(Pre,Args, [[]|Antes], [NewR|NewRefs]):-
    substitute_headss(Pre,Args, Antes, NewRefs),
   !.
substitute_headss(Pre,Args, Antes, []).

definefeatures(H,Feats):-
    recover_descs(H,Des), 
    (is_list(Des),
     on(Name,Des),
     wn_gend(Name,Gend),
     Gend\=neu,
     Feats=[umano,istituzione,legale]
     ;
     Feats=[umano,istituzione,luogo]),
    !.
definefeatures(H,Feats):-
     Feats=[umano,istituzione,luogo],
    !.
  
evalhuman(Refs,[], []):-!.
evalhuman(Refs,[E-H-Def-F/I|Heads], [E3-H-Def-F1/I|EvalHeads]):-
     health(H),
     F=[P,G,N,Cats,Role],
     E1 is E - 52,    
     RefEx=..[ref_ex,I,H,Tab,Pe,Ge,Nu,Ca,Fu/Ro],
     elimina(RefEx/E2-Cl,Refs, Refs1),
     E3 is E1 + E2,
     definefeatures(H,Feats),
     F1=[P,G,N,Feats,Role],
     evalhuman(Refs1,Heads, EvalHeads),
     !.
evalhuman(Refs,[E-H-Def-F/I|Heads], [E3-H-Def-F1/I|EvalHeads]):-
     Def=npr,
     F=[P,G,N,Cats,Role],
     discover_names(H),
     \+nogen_member(luogo,Cats),
     \+nogen_member(place,Cats),
     \+nogen_member(oggetto,Cats),
     \+nogen_member(stato,Cats),
     E1 is E - 26,    
     RefEx=..[ref_ex,I,H,Tab,Pe,Ge,Nu,Ca,Fu/Ro],
     elimina(RefEx/E2-Cl,Refs, Refs1),
     E3 is E1 + E2,
     definefeatures(H,Feats),
     F1=[P,G,N,Feats,Role],
     evalhuman(Refs1,Heads, EvalHeads),
     !.
evalhuman(Refs,[E-H-Def-F/I|Heads], [E3-H-Def-F/I|EvalHeads]):-
     (F=[P,G,N,Cats];F=[P,G,N,Cats,Role]),
     (nogen_member(umano,Cats);
     nogen_member(danger,Cats);
     nogen_member(informa,Cats)),
     \+nogen_member(luogo,Cats),
     \+nogen_member(place,Cats),
     \+nogen_member(oggetto,Cats),
     \+nogen_member(stato,Cats),
     E1 is E - 18,
     RefEx=..[ref_ex,I,H,Tab,Pe,Ge,Nu,Ca,Fu/Ro],
     elimina(RefEx/E2-Cl,Refs, Refs1),
     E3 is E1 + E2,
     evalhuman(Refs1,Heads, EvalHeads),
     !.
evalhuman(Refs,[E-H-Def-F/I|Heads], [E3-H-Def-F/I|EvalHeads]):-
     RefEx=..[ref_ex,I,H,Tab,Pe,Ge,Nu,Ca,Fu/Ro],
     elimina(RefEx/E2-Cl,Refs, Refs1),
     E3 is E + E2,
     evalhuman(Refs1,Heads, EvalHeads),
     !.
evalhuman(Refs,[E-H-Def-F|Heads], [E-H-Def-F|EvalHeads]):-
     evalhuman(Refs,Heads, EvalHeads),
     !.

eval_sort(Refs,Heads, EvalHeads):-
      evalhuman(Refs,Heads, NHeads),
      sort(NHeads, SortHeads),
      evalsort(SortHeads, EvalHeads),
      !.

evalsort([E-H-0-F|Heads], [E-H-0-F|Heads]):-!.

evalsort([E-H-Def-F|Heads], NewHeads):-
     Def\=0,
     elimina(E1-H1-0-F1, Heads,Rest),
     E1<10,
     append([E1-H1-0-F1],[E-H-Def-F|Rest],NewHeads),
     !.

evalsort(Heads, Heads):-!.



/* l'antecedente deve trovarsi in una Clause piu' alta: quindi P deve essere maggiore di I, la clause che contiene il pronome - questo va bene per complement-clause e relative - nelle subordinate vale il contrario*/
check_positive_negative(Ind,I,P,Args):-
     0<I,
     (I<P;
     P<I,
     Dgr=..[dgrs,N,H],
     Dgr,
     H=..[Fun,Pred,Pro-Ind],
     term_to_atom(F-_,Fun),
     F \= subj),
    !.
check_positive_negative(Ind,I,P,Args):-
     I<0,
     (P<I;
     I<P),
    !.
check_positive_negative(Ind,I,P,Args):-
     P=0, 0<I
     ;
     I=0, 0<P,!.
check_positive_negative(Ind,I,I,Args):-
    appiattisci(Args,AArgs),
    length(AArgs,N),
    3=<N,
    !.

poss_in_subj(Pred,W,Ind,Id):-
     term_to_atom(subj-_,Fun),
     H=..[Fun,Pred,Pro-In],
     Dgr=..[dgrs,N,H],
%     \+ Dgr,
     term_to_atom(ncmod-poss,Fun1),
     Body=..[Fun1,'_', W-In, Pro1],
     Dgr1=..[dgrs, N1, Body],    
     \+ Dgr1,
%     \+ coplbh(Pred),
     !.

extract_args_roles(I1,Ind,I,P,AllArgs,Roles,Predd):-
     remove(I-Pred-Args,AllArgs,RestArgs),
     Args\=[],
     remove(P1-Pred1-Args1,RestArgs,RestArgss),
     Args1\=[],
     check_positive_negative(I1,I,P1,Args),
     explore_argsadjs(Args,Subs,Pred),
     Subs\=[],
     explore_argsadjs(Args1,Subs1,Pred1),
     Subs1\=[],
     findall(Role-Role1, (
                     nogen_member(Role/I1,Subs), 
                     \+ nogen_member(Role/Ind,Subs), 
                     nogen_member(Role1/Ind,Subs1), 
                     \+ nogen_member(Role1/I1,Subs1)), 
                     Roles1),
     findall(Role-Role1, (
                     nogen_member(Role/I1,Subs1), 
                     \+ nogen_member(Role/Ind,Subs1), 
                     nogen_member(Role1/Ind,Subs), 
                     \+ nogen_member(Role1/I1,Subs)), 
                     Roles2),
     (Roles1\=[],Predd=Pred;Roles2\=[],Predd=Pred1),
    !.
/*
extract_args_roles(I1,Ind,I,P,AllArgs,Roles,Pred):-
     remove(I-Pred-Args,AllArgs,RestArgs),
     Args\=[],
     remove(P1-Pred1-Args1,RestArgs,RestArgss),
     Args1\=[],
     remove(I2-Pred2-Args2,Args,ResArgs),
     check_positive_negative(I1,I,P1,Args),
     explore_argsadjs(Args,Subs,Pred),
     Subs\=[],
     explore_argsadjs(Args2,Subs1,Pred2),
     Subs1\=[],
     findall(Role-Role1, (
                     nogen_member(Role/I1,Subs), 
                     \+ nogen_member(Role/Ind,Subs), 
                     nogen_member(Role1/Ind,Subs1), 
                     \+ nogen_member(Role1/I1,Subs1)), 
                     Roles1),
     findall(Role-Role1, (
                     nogen_member(Role/I1,Subs1), 
                     \+ nogen_member(Role/Ind,Subs1), 
                     nogen_member(Role1/Ind,Subs), 
                     \+ nogen_member(Role1/I1,Subs)), 
                     Roles2),
     (Roles1\=[];Roles2\=[]),
    !.
*/
check_obviation_mains(I1,Ind,[],I):-
    !.

check_obviation_mains(I1,Ind,AllArgs,P,Pred):-
     extract_dgr_pred(cmod,Pred),
     AllArgs\=[],
     extract_args_roles(I1,Ind,I,P,AllArgs,Roles,Pred),
     !,
     (I<P;
      on(R-R1,Roles),
      strict_opposing_roles(R,R1)),!.
    
check_obviation_mains(I1,Ind,AllArgs,P,Pred):-
     AllArgs\=[],
     extract_args_roles(I1,Ind,I,P,AllArgs,Roles,Pred),
     !.

check_obviation_mains(I1,Ind,AllArgs,P,Pred):-
     AllArgs\=[],
     elimina(I-Pre-Args,AllArgs,RestArgs),
     check_positive_negative(I1,P,I,Args),
     Args\=[],
     explore_args_adjs(Args,Subs,Pred),
     Subs\=[],
     findall(Role, (
                     nogen_member(Role/Ind,Subs), 
                     \+ nogen_member(Role/I1,Subs)), 
                     Roles),
     Roles\=[],
     !.

extract_dgr_pred(Fun,Pred):-
     Dgr=..[dgrs,N,H],
     Dgr,
     (H=..[FunR,Subord, Pr-_, Pred];
     H=..[FunR,Subord, Pred, Pr-_];
     H=..[FunR,Subord, Pred]),
     term_to_atom(Fun-Role,FunR),
     !.

extract_tops_refs(Out,NTops,Refs):-
      Out=[Clause,Prons,Args,NTops,Refs],
      Refs\=[],
      !.
extract_tops_refs(Outs,NTops,Refs):-
      appiattisci(Outs,Out),
      Out=[Clause,Prons,Args,NTops,Refs],
      Refs\=[],
      !.
extract_tops_refs(Outs,NTops,Refs):-
      Out=[Clause,Args,Prons,NTops,Refs],
      on(Out,Outs),
      Refs\=[],
      !.

compute_distance_weights([], []):-!.
compute_distance_weights([NewClauses,Prons,Noms,RefList], WeightedRefs):-
   compute_distance_weight(RefList, WeightedRefs),!.

compute_distance_weight([], []):-!.


compute_distance_weight([Ref|Refs], [NRef/NewS|WeightedRefs]):-
     Ref=ref_ex(Ind,Lemma,Tab,P,G,N,CatSem,Func/Ruolo)/S,
     ref_funcs(Fun, Ind, Testa, First),
     funcs(Fun, K, Head, [Fun-First]), 
        (Func=subj, compute_score(K, 1, Score); 
            Func=obj, compute_score(K, 2, Score);
              Func=obl, compute_score(K, 3, Score);
                 compute_score(K, 4, Score)),
     NewS is S*Score,
     NRef=..[ref_ex,Ind,Lemma,Tab,[P,G,N],CatSem,Func/Ruolo],
     compute_distance_weight(Refs, WeightedRefs),
      !.

compute_distance_weight([Ref|Refs], [NRef/NewS|WeightedRefs]):-
     Ref=ref_ex(Ind,Lemma,Tab,P,G,N,CatSem,Func/Ruolo)/S,
     ref_funcs(Fun, Ind, Testa, First),
     NewS is 16*S,
     NRef=..[ref_ex,Ind,Lemma,Tab,[P,G,N],CatSem,Func/Ruolo],
     compute_distance_weight(Refs, WeightedRefs),
      !.
compute_distance_weight([Ref|Refs],WeightedRefs):-
     compute_distance_weight(Refs, WeightedRefs),
      !.

write_anaphora(Win,[],Exts):-!.
write_anaphora(Win,[Prons,NTops,Refs],Exts):-
   appiattisci(Prons,Pron),
   writenl(Win,all_prons(Pron)),
   write_exts(Win,Exts),
   write_anafs(Win),
   write_expls(Win),
%   writenl(Win,nominals(Nom)),
   !.

disc_anaphors([]):-!.
disc_anaphors([Anaf-Ante|AT]):-
   Dgr=..[dsa,Anaf,Ante],
   asserta(dgrs(0,Dgr)),
    disc_anaphors(AT),
   !.

write_exts(Win,Exts):-
   findall(Pred-Pron, (ext(Pred,Pron),
                                   ante(Pred,Pron,Ant)), Preds),
   Preds\=[],
   sort(Preds,Pres),
   findall(Pre, (on(Pre-Pro,Pres),
                         retract(ext(Pre,Pro))), K),
   write_exts(Win,Exts),
   !.
write_exts(Win,Exts):-
   findall(Pred-Pron, (ext(Pred,Pron),  Pron=[Pro],
                                   ante(Pred,Pro,Ant)), Preds),
   Preds\=[],
   sort(Preds,Pres),
   findall(Pre-Pro, (on(Pre-Pro,Pres),
                         retract(ext(Pre,Pro))), K),
   write_exts(Win,Exts),
   !.
write_exts(Win,Exts):-
   ext(Pred,Pron),
   Dgr=..[ext,Pred,Pron],
   asserta(dgrs(0,Dgr)),
   writenl(Win,ext_pron(Pred,Pron)),
   fail,!.
write_exts(Win,Preds):-
   findall(Pred-Pron, ext(Pred,Pron), Preds),
   !.
write_anafs(Win):-
   ante(Pred,Head,Ant),
   Dgrs=..[ante,Pred,Head,Ant],
   asserta(dgrs(_,Dgrs)),
   writenl(Win,ante(Pred,Head,Ant)),
   fail,!.
write_anafs(Win):-!.
write_expls(Win):-
   expl(Pred,Head),
   Dgrs=..[expl,Pred,Head],
   asserta(dgrs(_,Dgrs)),
   writenl(Win,expletive(Pred,Head)),
   fail,!.
write_expls(Win):-!.

pronominal_bindings(N,Clauses,[Prons,NTops,Refsort],PredArgs):-
     appiattisci(Clauses,Clauss),
     length(Clauss,L),
%     3=<L,
     check_coord_compls,
%     collect_all_refs_weghts(L,Clauses,Refs,Out),
     collect_all_refs_weghts(1,Clauses,Prons,NTops,Refsort,PredArgs),
     !.
pronominal_bindings(N,Clauses,Out,PredArgs):-
     pronominal_binding(N,Clauses,Out),
     !.

s_sh_sn_ref([N-[]],[]).
s_sh_sn_ref(N-[],[]).
s_sh_sn_ref([],[]).
s_sh_sn_ref([N-[ref_ex([],[],[],[],[],[],F/R)]|Rest],Altri) :-
   s_sh_sn_ref(Rest,Altri).
s_sh_sn_ref([N-ref_ex(Snx,Pred,Tab,[Pers,Gen,Num],Cat,Mod,F/R)],
									        ref_ex(Snx,Pred,Tab,Pers,Gen,Num,Cat,Mod,F/R)/N) :-
         sh_isa_sn_ref(Pred, Tab),
         nonvar(Pred),!.

s_sh_sn_ref([N-[ref_ex(Snx,Pred,Tab,[Pers,Gen,Num],Cat,Mod,F/R)]|Rest],
									[ref_ex(Snx,Pred,Tab,Pers,Gen,Num,Cat,Mod,F/R)/N|Altri]) :-
   nonvar(Pred),
   sh_isa_sn_ref(Pred, Tab),
   s_sh_sn_ref(Rest,Altri).

s_sh_sn_ref([N-[ref_ex(Snx,Pred,Tab,[Pers,Gen,Num],Cat,Mod,F/R)|Rest]|Refs],
									[ref_ex(Snx,Pred,Tab,Pers,Gen,Num,Cat,Mod,F/R)/N|Altri]) :-
   nonvar(Pred),
   sh_isa_sn_ref(Pred, Tab),
   s_sh_sn_refs(Rest,N,Altri1),
   s_sh_sn_ref(Refs,Altri2),
   append(Altri1,Altri2,Altri).

s_sh_sn_ref([N-[ref_ex(Snx,Pred,Tab,Pers,Gen,Num,Cat,Mod,F/R)]],
									[ref_ex(Snx,Pred,Tab,Pers,Gen,Num,Cat,Mod,F/R)/N]) :-
   nonvar(Pred),
   sh_isa_sn_ref(Pred, Tab).

s_sh_sn_ref([N-[]|Rest],Altri) :-
       s_sh_sn_ref(Rest,Altri).
s_sh_sn_ref([N-[Ind|Rest]],Altri) :-
       s_sh_sn_ref([N-Rest],Altri).
s_sh_sn_ref([N-[Ind]|Rest],Altri) :-
       s_sh_sn_ref([Rest],Altri).
s_sh_sn_ref([N-[Ind]|Rest],Altri) :-
       s_sh_sn_ref(Rest,Altri).
s_sh_sn_ref([N-[ref_ex(Snx,Pred,Tab,[Pers,Gen,Num],Cat,Mod,F/R)|Rest]|Refs],Altri) :-
   nonvar(Pred),
   \+ sh_isa_sn_ref(Pred, Tab),
   s_sh_sn_refs(Rest,N,Altri1),
   s_sh_sn_ref(Refs,Altri2),
   append(Altri1,Altri2,Altri).

s_sh_sn_refs([N-[]],N,[]).
s_sh_sn_refs(N-[],N,[]).
s_sh_sn_refs([],N,[]).
s_sh_sn_refs([ref_ex([],[],[],[],[],[],F/R)|Rest],N,Altri) :-
   s_sh_sn_refs(Rest,N,Altri).
s_sh_sn_refs([ref_ex(Snx,Pred,Tab,[Pers,Gen,Num],Cat,Mod,F/R)|Rest],N,
									[ref_ex(Snx,Pred,Tab,Pers,Gen,Num,Cat,Mod,F/R)/N|Altri]) :-
   nonvar(Pred),
   sh_isa_sn_ref(Pred, Tab),
   s_sh_sn_refs(Rest,N,Altri).

s_sh_sn_refs([ref_ex(Snx,Pred,Tab,[Pers,Gen,Num],Cat,F/R)|Rest],N,
									[ref_ex(Snx,Pred,Tab,Pers,Gen,Num,Cat,Mod,F/R)/N|Altri]) :-
   nonvar(Pred),
   sh_isa_sn_ref(Pred, Tab),
   s_sh_sn_refs(Rest,N,Altri).

s_sh_sn_refs([Ind|Rest],N, Altri) :-
       atomic(Ind),
       s_sh_sn_ref([N-Rest],Altri).
s_sh_sn_refs([Ind|Rest],N, Altri) :-
       is_list(Ind),
       s_sh_sn_ref([N-Ind],Altri1),
       s_sh_sn_ref([Rest],Altri2),
       append(Altri1,Altri2,Altri).

sh_isa_sn_ref(Pred, Tab).

/*
sh_isa_sn_ref(Pred, Tab) :-
   member(+ref,Tab),
   Tab \= [+ref,-pro,-ana,+me].
*/

sh_punteggio(Ref, ref_ex(Nodo,Testa,Tab,Pers,Gen,Num,NewCat,Mod,Funzione/Ruolo)/Punteggio) 
      :-
      Ref=ref_ex(Nodo,Testa,Tab,Pers,Gen,Num,Cat,Mod,Funzione/Ruolo)/Dist,
      translate(F/R,Cat,NewCat),
     punteggio_ruolo_funzione1(Ruolo,Funzione,Punteggio2),!,
    (
      (Cat=[],
       (Ruolo=creator;Ruolo=poss),
        Funzione=sogg, 
        PCat= -30)
      ;
     punteggio_tratto1(Testa,Funzione,Cat,RCat),
     punteggio_ref(Tab,RCat1,Funzione),
     (RCat=0, PCat=RCat1; 
      RCat<RCat1, PCat=RCat1; 
      RCat1<RCat, PCat=RCat; 
      PCat=RCat)
    ),
     Punteggio is Punteggio2 + Dist * (25 + PCat), !.

sh_crea_lista(L1,L3,L2) :- 
  sh_filtra(L1,L3,1100,L2).

sh_filtra([],[],_,[]).
/* elimina se punteggio maggiore di PuntMax e diverso da nome proprio */
sh_filtra([H/P|T],T2,PuntMax,L2) :- P >= PuntMax,
                              H = ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R),
                              member(+ref,Tab),
                              Tab \= [+ref,-pro,-ana,-class],
                              filtra(T,T2,PuntMax) , !.


sh_filtra([H/P|T],[H/P|T2],PuntMax,[H1/P|L2]) :-  
      H = ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,Mods,F/R),
      H1 = ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R),
            sh_filtra(T,T2,PuntMax,L2).

translate(F/R,Cat,Cat):-
      Cat\=nil,!.
translate(F/R,nil,NewCat):-
     punteggio_ruolo1(R,Pun),
     Pun < 10, NewCat=[umano,istituzione,legale]
     ;
     punteggio_funzione1(F,Pun),
     Pun < 5, NewCat=[umano,istituzione,legale]
     ;
     NewCat=[oggetto,luogo,attivita],
     !.
      
sh_pesa_lista([],[]) :-!.
sh_pesa_lista([First|List],[L1|LPesata]) :-
     sh_punteggio(First,L1),
     sh_pesa_lista(List,LPesata),!.
sh_pesa_lista(First,[L1]) :-
     sh_punteggio(First,L1),!.


/* punteggio dei tratti semantici */

punteggio_tratto1(Testa,Funz,nil,Punt) :-
      (Funz=sogg;Funz=ogg;Funz=obl;Funz=ogg2),
      spy_lower(Testa,Low,Pol), 
      (Pol=1,Punt=1;Punt=5),
      !.

punteggio_tratto1(Testa,Funz,Lista,Punt) :-
        punt_tratto1(Lista,Punt),!.

punt_tratto1(Lista,1) :-
                 member(X,Lista),
                 member(X,[legale,istituzione]), !.
punt_tratto1(Lista,2) :-
                 member(X,Lista),
                 member(X,[animato,luogo,role,informa,strumento,oggetto]), !.

punt_tratto1(Lista,0) :-
                 member(X,Lista),
                 member(X,[umano,hum_set,hum]), !.

punt_tratto1(Lista,100).


write_anaphor(Win,Pro):-
     nl,
     write('pronominal=  '),
     writeqnl(Win, Pro),
     write('  resolved as  '),
     writeqnl(Win, ' discourse bound '),
    !.

assert_eval_single_topic(Tops,W-F,Rest):-
    Tops=[W-S-F/I|Rest],
    \+ integer(W), \+ list(W),
    !.
assert_eval_single_topic(Tops,W-F,Rest):-
    Tops=[_, W-S-F/I|Rest],
    \+ integer(W), \+ list(W),
    !.
assert_eval_single_topic(Tops,W-F,Rest):-
    Tops=[_,_, W-S-F/I|Rest],
    \+ integer(W), \+ list(W),
    !.


assert_topicss(Tops,PrecTops,[],Cost):-
    assert_topics(PrecTops,Tops,Cost),
     !.

assert_topicss(Tops,PrecTops,Resolved,Cost):-
     integer(Resolved),
     2=<Resolved,
     Win='Macintosh HD:anafore',
     (Tops\=[],
     length(Tops,L), 3 =< L,
     write_ptopic_onfile(Win,Tops),
     abolish(others/1),
     assert(others(Tops))
     ;
     true),
     frase_corrente(NoFr, Sim),
     assert_indsif_pot(3,poten, NoFr, Rest),
    !.
assert_topicss(Tops,PrecTops,Resolved,Cost):-
     integer(Resolved),
     Resolved=1,
     Win='Macintosh HD:anafore',
     assert_eval_single_topic(Tops,W-F,Rest),
     abolish(second/2),
     assert(second(W, F)),
     write_stopic_onfile(Win,W),
     frase_corrente(NoFr, Sim),
     recover_ind_second(W, PrecTops, Ind),
     assert_inds_if(second, NoFr, W, Ind, F),
     (Rest\=[],
     length(Rest,L), 
%     3 =< L,
     write_ptopic_onfile(Win,Rest),
     abolish(others/1),
     assert(others(Rest))
     ;
     true),
     assert_indsif_pot(3,poten, NoFr, Rest),
    !.
assert_topicss(Tops,PrecTops,Resolved,Cost):-
    assert_topics(PrecTops,Tops,Cost),
    !.


/*
      <pair id="p6">
        <pronoun id="62" value=" it"/>
        <antecedent id="4" value=" the Palestinian Authority"/>
      </pair>
    
 or
      <pair id="p6">
        <pronoun id="62"/>
        <antecedent id="4"/>
      </pair>
    


*/

check_write_topics(Topics,PrecTops,[Ind-W0-W1-F1,Id-W2-W-F2|Rest],[],Constituents):-
   write_resolved_topics(Ind,W1-F1/I1,Id,W2-F2/I2,Rest,Constituents),
    !.

check_write_topics(Topics,PrecTops,[Ind-W0-W1-F1,W2-Cat-F2|Rest],[],Constituents):-
   write_resolved_topics(Ind,W1-F1/I1,Ind1,W2-F2/I2,Rest,Constituents),
    !.

check_write_topics([W2-S-F/I|Tops],PrecTops,[Ind-W0-W1-F1|Rest],[W2-Cat-F2|Other],Constituents):-
   checkappend(Rest,Other,Others),
   write_resolved_topics(Ind1,W2-F2/I1,Ind,W1-F1/I2,Others,Constituents),
    !.

check_write_topics([W2-S-F/I|Tops],PrecTops,[Ind-W0-W1-F1],[W2-Cat-F2|Others],Constituents):-
   write_resolved_topics(Ind1,W2-F2/I1,Ind,W1-F1/I2,Others,Constituents),
    !.

check_write_topics(Topics,PrecTops,[Ind-W0-W1-F1|Rest],[W2-Cat-F2|Other],Constituents):-
   checkappend(Rest,Other,Others),
   write_resolved_topics(Ind,W1-F1/I1,Ind1,W2-F2/I2,Others,Constituents),
    !.

check_write_topics(Topics,PrecTops,[Ind-W0-W1-F1],[W2-Cat-F2|Others],Constituents):-
   write_resolved_topics(Ind,W1-F1/I1,Ind1,W2-F2/I2,Others,Constituents),
    !.

check_write_topics(Topics,[Score-W2-I2-F2|PrecTops],[Ind-W0-W1-F1],Others,Constituents):-
   write_resol_topics(Ind,W1-F1/I1,W2-F2/I2,Others,Constituents),
    !.

check_write_topics(Topics,PrecTops,[],Others,Constituents):-
   assert_rest_topics(PrecTops,Others,Constituents),
    !.


assert_topics([],[W-S-F/I, W1-S1-F1/I1|Rest],Cost):-
     S\=0,
     main(nil, 0),
     second(nil, 0),
     write_topics(W-F/I,W1-F1/I1,Rest,Cost),
    !.

assert_topics(PrecTops,[W-S-F/I|Rest],Cost):-
     elimina(Pro-deic-Feats/I1, Rest, Resto),
     filter_dim_ag(Pro, [Cat, Pred, Type, num=sing], Lem),
     write_anaphor('Model',Pro),
     write_anaphors('discourse bound', [Pro], I1,Cost),
     assert_topics(PrecTops,[W-S-F/I|Resto],Cost),
    !.
   
assert_topics(PrecTops,Topics,Cost):-
   resolveallanaphora(PrecTops,Topics,Resolved,Unmatched),
   appiattisci(Resolved,Resolve),
   appiattisci(Unmatched,Others),
   check_write_topics(Topics,PrecTops,Resolve,Others,Cost),
    !.

assert_rest_topics(PrecTops,[W-S-F|Rest],Cost):-
     F=[Pers,Gen,Num,CatS,Role],
     (nogen_member(umano,CatS);
      nogen_member(istituzione,CatS);
      nogen_member(legale,CatS);
      pf1(Role,Score), Score<4),
     main(W1, F1),
     \+ matchmainsec(W,W1),
     write_topics(W-F/I,W1-F1/I1,Rest,Cost),
     !.

assert_rest_topics(PrecTops,[W-S-F|Rest],Cost):-
     main(W1, F1),
     generic_head1(W,C),
     \+ matchmainsec(W,W1),
     write_topics(W1-F1/I1,W-F/I,Rest,Cost),
    !.

assert_rest_topics([Score-W-Ind-F1|PrecTops],[W1-S-F|Rest],Cost):-
     \+ list(W1),
     write_topics(W1-F/I,W-F1/Ind,Rest,Cost),
    !.
assert_rest_topics([],[W1-S1-F1,W-S-F|Rest],Cost):-
     \+ list(W1),
     write_topics(W1-F1/Ind,W-F/I,Rest,Cost),
    !.
assert_rest_topics([Score-W2-Ind-F2|PrecTops],[W1-S1-F1,W-S-F|Rest],Cost):-
     list(W1),
     write_topics(W2-F2/Ind,W-F/I,Rest,Cost),
    !.
assert_rest_topics([Sco-W-In-F, Score-W2-Ind-F2|PrecTops],[W1-S1-F1],Cost):-
     list(W1),
     write_topics(W1-F1/Ind,W-F/In,Rest,Cost),
    !.

matchmainsec(W,W1):-
     atomic(W),
     spy_lower(W,LowM,1),
     LowM=W1,
    !.
matchmainsec(W,W1):-
     atomic(W1),
     spy_lower(W1,LowM,1),
     LowM=W,
    !.

matchmainsec(W,W1):-
     atomic(W),
     recover_descriptions(W1,List),
     list(List),
     member(W,List),
    !.
matchmainsec(W,W1):-
     atomic(W1),
     recover_descriptions(W,List),
     list(List),
     member(W1,List),
    !.

matchmainsec(W,W1):-
     atomic(W),
     atomic(W1),
     match_approximate(W,W1),
    !.
/*
     main(W1, F1),
     (remove(W1-_-Feats/I1, Rest, Resto)
      ;
      atomic(W1),
      spy_lower(W1,LowM,1),
      remove(LowM-_-Feats/I1, Rest, Resto)),
     match_feats_cats(F, Feats),
     Resto=[W2-S-F2/I2|Res],
     write_anaphors(W1, W, I),
     (W2\=W1, \+ list(W2),
      ;
     second(W3,F3),
     write_topics(W1-F1/I1,W3-F3/I3,Rest)),
    !.
*/


checkcats(F, CatS):-
     F=[Pers,Gen,Num,C],
     (C=[];
      C=_-_;
      C\=[],
     controlla_cats(C,CatS)),!.

checkcats(F, CatS):-
     F=[cat=pron,Gen,Num,C],
     nogen_member(umano,CatS),!.
checkcats(F, CatS):-
     F=[cat=poss,Pred,Pers,Gen,Num,C],
     nogen_member(C,CatS),!.
checkcats(F, CatS):-
     F=[_, cat=poss,Pred,Pers,Gen,Num,C],
     nogen_member(C,CatS),!.
checkcats(F, CatS):-
     F=[Pers,Gen,Num,C,Role],
     (C=[];
      C=_-_;
      C\=[],
     controlla_cats(C,CatS)),!.


matchothers(W,Ss):-
     atomic(W),
     on(W-_-_/_, Ss),
    !.

matchothers(W,Ss):-
     atomic(W),
     on(W-_-_, Ss),
    !.

matchothers(W,Ss):-
     atomic(W),
     spy_lower(W,LowM,1),
     on(LowM-_-_/_, Ss),
    !.
matchothers(W,Ss):-
     atomic(W),
     spy_lower(W,LowM,1),
     on(LowM-_-_, Ss),
    !.
sspiu_recente(N, Id) :-
  N1 is N - 1, 
  sspiu_recente_x(N1,1,Id).

sspiu_recente_x(N, P, Id) :-
  1=<N,
  P=<4,
  topic(N,Type,Id),
%  topps(Type, N, Top, Id, Feats),
  nonvar(Id)
  ;
  1=<N,
  N1 is N - 1,
  P1 is P + 1,
  sspiu_recente_x(N1,P1,Id).

/* I make two lists: first list with best topics selected from most frequent entities asserted as main-secondary-poten topics. No frequency evaluation is applied. Then I erase all topics which do not appear in the last four sentences back.
The second list has frequency as additional constraint: topics must have frequency higher than 3.
In addition they have to appear in the last four sentences back. */

elaborate_recency(Graded):-
   gethightopics(Topics),
   evaluate_best_high_topics(Topics,L),
   sort(L, Best),
   reverse(Best,RevBest),
   sgrade_best_topics(RevBest,Graded),
   !. 

selaborate_infers(Graded):-
   gettopics(Topics),
   sevaluate_best_topics(Topics,L),
   sort(L, Best),
   reverse(Best,RevBest),
   sgrade_best_topics(RevBest,Graded),
   !. 

sgrade_best_topics([],[]):-!.
sgrade_best_topics(Best,Graded):-
  frase_corrente(N,Simb),
  bagof(Id, sspiu_recente(N,Id), Ids),
  togli_doppi(Ids, SortId),
  findall(F-Ind-Top, (on(Ind, SortId),on(F-Ind-Top,Best)),Inds),
  sort(Inds,Grads),
  reverse(Grads,Graded),
  !.
sgrade_best_topics(Best,Best):-!.

evaluate_best_high_topics([],[]):-!.
evaluate_best_high_topics([Top|Res],[L-Id-Top|Ls]):-
     findall(Id-Top,(topps(Type, N, Top, Id, _),
                        nonvar(Id)), Tops), Top\=nil, 
     findall(N-Id-Top,(on(Id-Top,Tops),topic(N,Type,Id)),K1),
     sort(K1,K),
     length(K,L),
     0<L,
     K\=[],
     on(N-Id-Top,K),
     evaluate_best_high_topics(Res,Ls),
     !.
evaluate_best_high_topics([W|Res],Ls):-
     evaluate_best_high_topics(Res,Ls),
     !.
sevaluate_best_topics([],[]):-!.
sevaluate_best_topics([Top|Res],[L-Id-Top|Ls]):-
     findall(Id-Top,(topps(Type, N, Top, Id, Feats),
                          nonvar(Id)), Tops), Top\=nil, 
     findall(N-Id-Top,(on(Id-Top,Tops),topic(N,Type,Id)),K1),
     sort(K1,K),
     findall(N-Id-Top,(on(Id-Top,Tops),
                        on(Top1,Res),
                        recover_descs(Top1,Descs),is_list(Descs),
                        on(Top,Descs),
                        topic(N,Type,Id)),K2),
     sort(K2,Kk),
     findall(N-Id-Top,(recover_descs(Top,Descs),is_list(Descs),
                        on(Top1,Res),
                        on(Top1,Descs),
                        on(Id-Top,Tops),
                        topic(N,Type,Id)),K3),
     sort(K3,Kkk),
     append(K,Kk,Ka),
     append(Ka,Kkk,Ka1),
     length(Ka1,L),
     Ka1\=[],
     on(N-Id-Top,Ka1),
     sevaluate_best_topics(Res,Ls),
     !.
sevaluate_best_topics([W|Res],Ls):-
     sevaluate_best_topics(Res,Ls),
     !.

gethightopics(Topics):-
    findall(Top, ((Type=main;Type=second;Type=poten),
                   topps(Typ, NoFr, Top, Ind, Feats), 
                   Top\=nil, nonvar(Typ), Typ=Type), Tops),
    sort(Tops, Topics),
    Topics\=[], Topics\=[nil],
    !.
gethightopics([]).

gettopics(Topics):-
    findall(Top, (topps(Type, NoFr, Top, Ind, Feats), Top\=nil), Tops),
    sort(Tops, Topics),
    Topics\=[], Topics\=[nil],
    !.
gettopics([]).


discourse(NoFr, Symb, Input, Constituents, Out,NewOut):-
  pronominal_bindings(0,Out,NewOut,PredArgs),
  nl,
  writenl(cstructure,'Output of Anaphora Resolution Module'),
  nl,
  write_anaphora(Win,NewOut,Exts),
  anaphora_resolution(NoFr, Exts,Constituents, NewOut,NewRefs),
  nl,
  nl,
  writenl(cstructure,'Augmented Head Dependent Indexed Structures'),
  nl,
  write_dgrs(Input, NoFr, Symb, OutFile),
  nl,
  !.

choose_best_candidate_ante(Args, Score-I-Ant-Pred, Score-I-Ant-Pred):-!.
choose_best_candidate_ante(Args, Ante, Score-I-Ant-Pred):-
    Ante\=[], 
    (list(Ante),
      length(Ante,L), L=1;atomic(Ante)),
    on(Score-I-Ant-Pred,Ante),
      !.

choose_best_candidate_ante(Args, Ante, I-Pro-Ant-Pred):-
    Ante\=[],list(Ante),
    length(Ante,L), 1<L,
    evaluate_antes_funct(Ante,ListAntes),
    extract_ante(Args, ListAntes,I-Pro-Ant-Pred),
      !.

weight_antes(Refs, [], []):-!.
weight_antes(Refs, [I-Pro-Ant-Pred|Antes], [E1-I-Pro-Ant-Pred|NHeads]):-
     RefEx=..[ref_ex,I1,Ant,Tab,Pe,Ge,Nu,Cats,Fu/Ro],
     on(RefEx/E2-Cl,Refs),
     discover_names(H),
     E1= - 8,
     weight_antes(Refs, Antes, NHeads),
      !.

weight_antes(Refs, [I-Pro-Ant-Pred|Antes], [E1-I-Pro-Ant-Pred|NHeads]):-
     RefEx=..[ref_ex,I1,Ant,Tab,Pe,Ge,Nu,Cats,Fu/Ro],
     on(RefEx/E2-Cl,Refs),
     nogen_member(umano,Cats),
     \+nogen_member(luogo,Cats),
     \+nogen_member(oggetto,Cats),
     \+nogen_member(stato,Cats),
     E1= - 8,
     weight_antes(Refs, Antes, NHeads),
      !.
weight_antes(Refs, [_-I-Ant-Pred|Antes], [E1-I-Pro-Ant-Pred|NHeads]):-
     RefEx=..[ref_ex,I1,Ant,Tab,Pe,Ge,Nu,Cats,Fu/Ro],
     on(RefEx/E2-Cl,Refs),
     discover_names(H),
     E1= - 8,
     weight_antes(Refs, Antes, NHeads),
      !.

weight_antes(Refs, [_-I-Ant-Pred|Antes], [E1-I-Pro-Ant-Pred|NHeads]):-
     RefEx=..[ref_ex,I1,Ant,Tab,Pe,Ge,Nu,Cats,Fu/Ro],
     on(RefEx/E2-Cl,Refs),
     nogen_member(umano,Cats),
     \+nogen_member(luogo,Cats),
     \+nogen_member(oggetto,Cats),
     \+nogen_member(stato,Cats),
     E1= - 8,
     weight_antes(Refs, Antes, NHeads),
      !.
weight_antes(Refs, [I-Pro-Ant-Pred|Antes], [10-I-Pro-Ant-Pred|NHeads]):-
     weight_antes(Refs, Antes, NHeads),
      !.

extract_ante(Args, ListAntes, I-Pro-Ant-Pred):-
     weight_antes(Args, ListAntes, NHeads),
      sort(NHeads, SortHeads),
     on(Score-I-Pro-Ant-Pred,SortHeads),
      !.

evaluate_antes_funct([],[]):-!.
evaluate_antes_funct([Score-I-Ant-Pred|Antes],Ante):-
      fct(Ant),
      evaluate_antes_funct(Antes,Ante),
      !.
evaluate_antes_funct([Score-I-Ant-Pred|Ante],[Score-I-Ant-Pred|Rest]):-
      evaluate_antes_funct(Ante,Rest),
      !.
evaluate_antes_funct([Score-I-Ant-Pred],[Score-I-Ant-Pred]):-
      !.
       
eliminate_double_poss([],Prons,Prons):-!.
eliminate_double_poss(Prons,[],Prons):-!.
eliminate_double_poss(Poss,Prons,Pros):-
   elimina(Pron-0-Feats/Ind,Prons,Pronn),
   (list(Pron),Pron=[Pro]; Pro=Pron),
   on(Pro-0-Feat/_,Poss),
   remove(Pro-0-Feat/Pred,Poss,Pross),
    append(Feat,Feats,Fall),
    sort(Fall,Falls),
   eliminate_double_poss([Pro-0-Falls/Pred|Pross],Pronn,Pros),!.
eliminate_double_poss(Poss,Prons,Pross):-
   append(Poss,Prons,Pross),
      !.

check_disjointness(Score-I-Ant-Pred,[], []):-!.
check_disjointness(Score-I-Ant-Pred,[Ante|Antes], NewAntes):-
     Antes=[],
     elimina(Score-I1-Ant-Pred,Ante,Rest),
    check_disjointness(Score-I-Ant-Pred,Rest, NewAntes),
      !.
check_disjointness(Score-I-Ant-Pred,[Ante|Antes], NewAntes):-
     Antes=[],
     elimina(Score-I1-Ant1-Pre,Ante,Rest),
     fct(Ant1),
    check_disjointness(Score-I-Ant-Pred,Rest, NewAntes),
      !.
check_disjointness(Score-I-Ant-Pred,[Ante|Antes], NewAntes):-
     Ante=_-I1-Ant1-Pred,
     fct(Ant1),
    check_disjointness(Score-I-Ant-Pred,Antes, NewAntes),
      !.
check_disjointness(Score-I-Ant-Pred,Antes, Antes):-
      !.
     
 
explore_argsadjs([Args|AllArgs],[Args|AllArgs],Pr):-
   \+ list(Args),
   Args=Pre/Arg, nonvar(Pre).
explore_argsadjs([Args|AllArgs],Args,Pr):-
   Args\=[],
   on(Pre/Arg,Args), nonvar(Pre).
explore_argsadjs([[Lem, Mods, Args]|AllArgs],Args,Lem):-
   Args\=[],
   on(Pre/Arg,Args), nonvar(Pre).
explore_argsadjs([Args|AllArgs],Arg,Pre):-
   explore_argsadjs(AllArgs,Arg,Pr),
     !.

explore_args_adjs([],[],P):-!.
explore_args_adjs([Args|AllArgs],Arg,Pre):-
   Args\=[],
   on(Pre-Arg,Args),
     !.
explore_args_adjs([[Lem, Mods, Args]|AllArgs],Arg,Pre):-
   Args\=[],
   on(Pre-Arg,Args),
     !.
explore_args_adjs([Args|AllArgs],Arg,Pre):-
   explore_args_adjs(AllArgs,Arg,Pre),
     !.


explore_args_prop(Role,[],Ind,[]):-!.
explore_args_prop(Role,[Args|AllArgs],Ind,All):-
   (Role=prop;Role=theme),
   Args\=[],
   on(Role/Ind,Args),
   explore_args_prop(Role,AllArgs,Ind,All),
     !.
explore_args_prop(Role,[[Lem, Mods, Args]|AllArgs],Ind,All):-
   (Role=prop;Role=theme),
   Args\=[],
   on(Role/Ind,Args),
   explore_args_prop(Role,AllArgs,Ind,All),
     !.
explore_args_prop(theme_aff,[Args|AllArgs],Ind,All):-
   Args\=[],
   remove(theme_aff/Ind,Args,All),
     !.
explore_args_prop(theme_aff,[[Lem, Mods, Args]|AllArgs],Ind,All):-
   Args\=[],
   remove(theme_aff/Ind,Args,All),
     !.
explore_args_prop(Role,[Args|AllArgs],Ind,All):-
   explore_args_prop(Role,AllArgs,Ind,All),
     !.

garb_coll(NoFr):-
     NoFr=100,
     gar_coll(NoFr),
     !.

garb_coll(NoFr):-
     100<NoFr,
     NoFr<1600,
     range_numb(NoFr,N),
     N=NoFr,
     gar_coll(NoFr),
     !.
garb_coll(NoFr).
     
gar_coll(NoFr):-
    collect_all_tops(Tops),
    reassert_best_tops(Tops),
   !. 

reassert_best_tops(Lates):-
    abolish(topps/5),
    abolish(topic/3),
    reassert_besttops(Lates),
    !.

collect_all_tops(Topps):-
    enumerate_topps(Best),
    enumerate_lates(Lates),
    append(Lates,Best,All),
    sort(All, Topps),
   !. 


reassert_besttops([Type-N-Top-Id-Feats|Lates]):-
     assertz(topps(Type, N, Top, Id, Feats)),
     assertz(topic(N, Type, Id)),
    reassert_besttops(Lates),
     !.

reassert_besttops([]):-
   assertz(topps(nil, nil,nil,nil,nil)),
   assertz(topic(nil, nil,nil)),
     !.
reassert_besttops([]):-!.

piu_recente(N, Tops) :-
  N1 is N - 6, 
  piu_recente_x(N,N1,Tops).

piu_recente_x(N,N, []) :-!.
piu_recente_x(N, N1, [Topp|Tops]) :-
  findall(Type-N-Top-Id-Feats, (topps(Type, N, Top, Id, Feats), Top\=nil),  Topp),
  N2 is N1 + 1,
  piu_recente_x(N,N2,Tops).

gc_gettopics(Topics):-
    findall(Type-NoFr-Top-Ind-Feats, 
             (topps(Type, NoFr, Top, Ind, Feats), 
                        Top\=nil), Tops),
    sort(Tops, Topics),
    Topics\=[],
    !.

gc_evaluate_best_topics([],[]):-!.
gc_evaluate_best_topics([Type-N-Top-Id-Feats|Res],[Type-N-Top-Id-Feats|Ls]):-
     findall(Id-Top,topps(Type, N, Top, Id, Feats),Tops), Top\=nil, 
     findall(Id-Top,(on(Id-Top,Tops),topic(N,Type,Id)),K),
     length(K,L),
     2<L,
     K\=[],
     on(Id-Top,K),
     gc_evaluate_best_topics(Res,Ls),
     !.
gc_evaluate_best_topics([W|Res],Ls):-
     gc_evaluate_best_topics(Res,Ls),
     !.


enumerate_topps(Best):-
   gc_gettopics(Topics),
   sort(Topics, Tops),
   gc_evaluate_best_topics(Tops,L),
   sort(L, Best),
   !. 
enumerate_lates(Lates):-
   frase_corrente(N1,K),
   piu_recente(N1,Tops),
   appiattisci(Tops,Top),
   sort(Top, Lates),
   !. 
    
range_numb(NoFr,N):-
     NoFr=<500,
     (M=2;
      M=3;
      M=4;
      M=5),
     N is 100 * M,
     !.
range_numb(NoFr,N):-
     500<NoFr,
     NoFr=<1000,
     (M=6;
      M=7;
      M=8;
      M=9;
      M=10),
     N is 100 * M,
     !.
range_numb(NoFr,N):-
     1000<NoFr,
     NoFr<1600,
     (M=11;
      M=12;
      M=13;
      M=14;
      M=15), 
     N is 100 * M,
     !.

reinforce_presence_recency([],SortTops,[]):-!.
reinforce_presence_recency([Sc-W-Ind-Feat|Topic],SortTops,NTopic):-
     list(W),
     reinforce_presence_recency(Topic,SortTops,NTopic),
     !.
reinforce_presence_recency([Sc-W-Ind-Feat|Topic],SortTops,[E1-W-Ind-Feat|NTopic]):-
     on(W-Def-Feat/_, SortTops),
     E1 is Sc - 4,
     reinforce_presence_recency(Topic,SortTops,NTopic),
     !.
reinforce_presence_recency([Sc-W-Ind-Feat|Topic],SortTops,[Sc-W-Ind-Feat|NTopic]):-
     reinforce_presence_recency(Topic,SortTops,NTopic),
     !.


score_topics_graded(Tops,Graded,Topic,Topics):-
     score_topicsgraded(Tops,Graded,Topic,GradedTopics),
     score_evalhuman(GradedTopics,Topics),
     !.

score_evalhuman([],[]):-!.
score_evalhuman([W-Ind-Score-Feat/_|GradedTopics],[E1-W-Ind-Feat|Topics]):-
     Feat=[P,G,N,Cats,Role],
     Ind=npr,
     recover_descs(W,Des), is_list(Des),
     on(Name,Des), if_first_name(Name),
     (nogen_member(umano,Cats);pr1(Role,Sco), Sco<3, Cats=[umano]),
     penalties_Cats(Cats,0,Pen),
     E1 is Score - 14 + Pen,
     score_evalhuman(GradedTopics,Topics),
     !.
score_evalhuman([W-Ind-Score-Feat|GradedTopics],[E1-W-Ind-Feat|Topics]):-
     Feat=[P,G,N,Cats,Role],
     Ind=npr,
     recover_descs(W,Des), is_list(Des),
     on(Name,Des), if_first_name(Name),
     (nogen_member(umano,Cats);pr1(Role,Sco), Sco<3, Cats=[umano]),
     penalties_Cats(Cats,0,Pen),
     E1 is Score - 14 + Pen,
     score_evalhuman(GradedTopics,Topics),
     !.
score_evalhuman([W-Ind-Score-Feat/_|GradedTopics],[E1-W-Ind-Feat|Topics]):-
     Feat=[P,G,N,Cats,Role],
     (nogen_member(umano,Cats);pr1(Role,Sco), Sco<3, Cats=[umano]),
     penalties_Cats(Cats,0,Pen),
     E1 is Score - 4 + Pen,
     score_evalhuman(GradedTopics,Topics),
     !.
score_evalhuman([W-Ind-Score-Feat|GradedTopics],[E1-W-Ind-Feat|Topics]):-
     Feat=[P,G,N,Cats,Role],
     (nogen_member(umano,Cats);pr1(Role,Sco), Sco<3, Cats=[umano]),
     penalties_Cats(Cats,0,Pen),
     E1 is Score - 4 + Pen,
     score_evalhuman(GradedTopics,Topics),
     !.
score_evalhuman([W-Ind-Score-Feat|GradedTopics],[E1-W-Ind-Feat|Topics]):-
     E1 is Score + 8,
     score_evalhuman(GradedTopics,Topics),
     !.

     
penalties_Cats(Cats,Score,Pen):-
    appiattisci(Cats,Catss),
    sort(Catss,Cass),
    penaltiesCats(Cass,Score,Pen),
    !.
penalties_Cats(Cats,Score,Score).
    
penaltiesCats(Cats,Score,Pen):-
    remove(abstract,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(activity,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(event,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(state,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(change,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(temp,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(tempor,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(temporal,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(object,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(instrument,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(place,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(astratto,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(attivita,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(evento,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(stato,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(cambia,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(temporale,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(oggetto,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(strumento,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Pen):-
    remove(luogo,Cats,Cats1),
    N1 is Score + 1,
    penaltiesCats(Cats1,N1,Pen),
    !.
penaltiesCats(Cats,Score,Score).

health(H):-
      illw(Verbs), on(H,Verbs);
      kll(Verbs), on(H,Verbs);
      die(Verbs), on(H,Verbs);
      mdangr(Verbs), on(H,Verbs);
      trst(Verbs), on(H,Verbs);
      guilt(Verbs), on(H,Verbs),
      !.
score_topicsgraded([],[],[],[]):-!.
score_topicsgraded(Tops,[],[],[]):-!.
score_topicsgraded(Tops,Graded,[],[]):-!.
score_topicsgraded([],Graded,[],[]):-!.

score_topicsgraded(Tops,Graded,[W-Ind-Feat|Topic],Topics):-
     (j(W), \+health(W);fct(W);r(W);integer(W)),
     score_topicsgraded(Tops,Graded,Topic,Topics),
     !.
score_topicsgraded(Tops,Graded,[W-Ind-Feat|Topic],[W-Ind-Score-Feat|Topics]):-
     on(main-W,Tops),
     on(F-Ind-W,Graded),
     Score is F - 5,
     score_topicsgraded(Tops,Graded,Topic,Topics),
     !.
score_topicsgraded(Tops,Graded,[W-Ind-Feat|Topic],[W-Ind-Score-Feat|Topics]):-
     on(main-W,Tops),
     \+ on(F-Ind-W,Graded),
     term_to_atom(cmod-coord,Func),
     DGR=..[Func, Con, Pred],
     dgrs(_, DGR),
     term_to_atom(subj-R,Func1),
     DGR1=..[Func1, Pred-_, Pron-_],
     dgrs(_, DGR1),
     Score = -5,
     score_topicsgraded(Tops,Graded,Topic,Topics),
     !.
score_topicsgraded(Tops,Graded,[W-Ind-Feat|Topic],[W-Ind-Score-Feat|Topics]):-
     on(second-W,Tops),
     on(F-Ind-W,Graded),
     Score is F - 2,
     score_topicsgraded(Tops,Graded,Topic,Topics),
     !.
score_topicsgraded(Tops,Graded,[W-Ind-Feat|Topic],[W-Ind-Score-Feat|Topics]):-
     on(poten-W,Tops),
     on(F-Ind-W,Graded),
     Score is F + 5,
     score_topicsgraded(Tops,Graded,Topic,Topics),
     !.
score_topicsgraded(Tops,Graded,[W-Ind-Feat|Topic],[W-Ind-Score-Feat|Topics]):-
     on(F-Ind-W,Graded),
     Score is F + 10,
     score_topicsgraded(Tops,Graded,Topic,Topics),
     !.
score_topicsgraded(Tops,Graded,[W-Ind-Feat|Topic],[W-Ind-10-Feat|Topics]):-
     score_topicsgraded(Tops,Graded,Topic,Topics),
     !.
     

checkappend([],Other,Other):-!.
checkappend([Ind-W0-W1-F1|Rest],Other,Others):-
     var(Ind),
     getindpot(W1,Ind),
     checkappend(Rest,[W0-Ind-F1|Other],Others),
     !.

checkappend([Ind-W0-W1-F1|Rest],Other,Others):-
     nonvar(Ind),
     checkappend(Rest,[W0-Ind-F1|Other],Others),
     !.
checkappend([Ind-W0-W1-F1|Rest],Other,Others):-
     checkappend(Rest,Other,Others),
     !.


getindpot(Main,Ind):-
     topps(_, _, Main, Ind, _),
     !.

newdiscorso(1,Args) :-
   assert(stato(N,cambia)).

newdiscorso(N,Args) :-
   topic(N, main, Id),
   N1 is N-1,
   topic(N1, main, Id),
   abolish(stato/2),
   assert(stato(N,continua)).

newdiscorso(N,Args) :-
   topic(N, main, Id),
   N1 is N-1,
   topic(N1, second, Id),
   abolish(stato/2),
   assert(stato(N,retaining)).

newdiscorso(N,Args) :-
   topic(N, second, Id),
   N1 is N-1,
   topic(N1, main, Id),
   abolish(stato/2),
   assert(stato(N,retaining)).

newdiscorso(N,Args) :-
   topic(N, poten, Id),
   N1 is N-1,
   topic(N1, second, Id),
   abolish(stato/2),
   assert(stato(N,retaining)).

newdiscorso(N,Args) :-
   topic(N, main, Id),
   N1 is N-1,
   topic(N1, poten, Id),
   abolish(stato/2),
   assert(stato(N,retaining)).

newdiscorso(N,Args) :-
   topic(N, Type, Id),
   sspiu_recente(N, Id),
   abolish(stato/2),
   assert(stato(N,continua)).

newdiscorso(N,Args) :-
   topic(N, Type, Id),
   sspiu_recente(N, Id),
   abolish(stato/2),
   assert(stato(N,resume)).

newdiscorso(N,Args) :-
   topic(N, main, Id),
   abolish(stato/2),
   assert(stato(N,cambia)).

newdiscorso(N,Args) :-
   topic(N, second, Id),
   abolish(stato/2),
   assert(stato(N,retaining)).

newdiscorso(N,Args) :-
   topic(N, poten, Id),
   abolish(stato/2),
   assert(stato(N,cambia)).

newdiscorso(N,Args) :-
   abolish(stato/2),
   assert(stato(N,cambia)).

assert_indsif_pot(N, Type, NoFr, []):-!.
assert_indsif_pot(0, Type, NoFr, Rest):-!.
assert_indsif_pot(N, Type, NoFr, [W-C-F/_|Pots]):-
     assert_inds_if(Type, NoFr, W, Ind, F),
     N1 is N - 1,
     assert_indsif_pot(N1, Type, NoFr, Pots),
     !.

assert_indsif_pot(N, Type, NoFr, [C-W-W1-F|Pots]):-
     assert_inds_if(Type, NoFr, W1, Ind, F),
     N1 is N - 1,
     assert_indsif_pot(N1, Type, NoFr, Pots),
     !.

assert_indsif_pot(N, Type, NoFr, [W-C-F|Pots]):-
     assert_inds_if(Type, NoFr, W, Ind, F),
     N1 is N - 1,
     assert_indsif_pot(N1, Type, NoFr, Pots),
     !.

assert_inds_if(Type, NoFr, Main, Ind, F1):-
     topps(_, _, Main, Ind, F),
     assertz(topic(NoFr, Type, Ind)),
     (F=F1; F\=F1,
     assertz(topps(Type, NoFr, Main, Ind, F1))),
     write_nominalanaphora(Main,Type,Ind),
     !.
assert_inds_if(Type, NoFr, Main, Ind, Fm):-
     nonvar(Ind),
     assertz(topic(NoFr, Type, Ind)),
     assertz(topps(Type, NoFr, Main, Ind, Fm)),
     write_nominalanaphora(Main,Type,Ind),
     !.
assert_inds_if(Type, NoFr, Main, Ind, Fm):-
      (var(Ind),
       gen_sym(id, Id), Ind=Id
        ;
        nonvar(Ind),
        stringof([A,B|_],Ind), 
        (A=i,B=d,Id=Ind
         ;
         gen_sym(id, Id), Ind=Id)),
     assertz(topps(Type, NoFr, Main, Id, Fm)),
     assertz(topic(NoFr, Type, Id)),
     !.

write_nominal_anaphora(Ante,Type,Ind):-
     topps(_, _, Main, Ind, _),
     Win='Macintosh HD:anafore',
     write(Type),
     write('  resolved as  '),
     write(Ante),
     write('  with semantic index  '),
     writeqnl(_,Ind),
     assertz(risolto(NoFr, Ind, Main, Ante)),     % memorizza risolti 
     !.
write_nominal_anaphora(Ante,Type,Ind):-
     topps(_, _, Ante, Id, _),
     Win='Macintosh HD:anafore',
     write(Type),
     write('  resolved as  '),
     write(Ante),
     write('  with semantic index  '),
     writeqnl(_,Id),
     assertz(risolto(NoFr, Id, Ante, Ante)),     % memorizza risolti 
     !.
write_nominalanaphora(Ante,Type,Ind):-
     topps(_, _, Main, Ind, _),
     Win='Macintosh HD:anafore',
     write(Type),
     write('  identified as  '),
     write(Ante),
     write('  with semantic index  '),
     writeqnl(_,Ind),
     !.
write_nominalanaphora(Ante,Type,Ind):-
     topps(_, _, Ante, Id, _),
     Win='Macintosh HD:anafore',
     write(Type),
     write('  identified as  '),
     write(Ante),
     write('  with semantic index  '),
     writeqnl(_,Id),
     !.
write_nominalanaphora(Ante,Type,Ind).

write_resolved_topics(Ind,W1-F1/I1,Ind1,W2-F2/I2,Rest,Cost):-
     frase_corrente(NoFr, File),
     check_assert_top_ind(W1, NoFr, main, Ind, F1),
%      assertz(topic(NoFr, main, Ind)),
     write_nominal_anaphora(W1,main,Ind),
     check_assert_top_ind(W2, NoFr, second, Ind1, F1),
%     assertz(topic(NoFr, second, Ind1)),
     write_nominal_anaphora(W2,second,Ind1),
     write_restopics(W1-F1/I1,W2-F2/I2,Rest,Cost),
     !.
write_resol_topics(Ind,W1-F1/I1,W2-F2/I2,Rest,Cost):-
     frase_corrente(NoFr, File),
     check_assert_top_ind(W1, NoFr, main, Ind, F1),
%     assertz(topic(NoFr, main, Ind)),
     write_nominal_anaphora(W1,main,Ind),
     write_restopics(W1-F1/I1,W2-F2/I2,Rest,Cost),
     !.

check_assert_top_ind(Main, NoFr, Type, Ind, F1):-
     topps(_, _, Main, Ind, F),
     assertz(topic(NoFr, Type, Ind)),
     (F=F1; F\=F1,
     assertz(topps(Type, NoFr, Main, Ind, F1))),
     !.
check_assert_top_ind(Main, NoFr, Type, Ind, F1):-
     topps(_, _, Main, Id, F),
     assertz(topic(NoFr, Type, Id)),
     (F=F1; F\=F1,
     assertz(topps(Type, NoFr, Main, Id, F1))),
     !.

check_assert_top_ind(Main, NoFr, Type, Ind, F1):-
     nonvar(Ind),
     topps(_, _, Mai, Ind, F),
     assertz(topic(NoFr, Type, Ind)),
     (F=F1; F\=F1,
     assertz(topps(Type, NoFr, Main, Ind, F1))),
     !.

check_assert_top_ind(Main, NoFr, Type, Ind, Fm):-
      (var(Ind),
       gen_sym(id, Id), Ind=Id
        ;
        nonvar(Ind),
        stringof([A,B|_],Ind), 
        (A=i,B=d,Id=Ind
         ;
         gen_sym(id, Id), Ind=Id)),
     assertz(topps(Type, NoFr, Main, Id, Fm)),
     assertz(topic(NoFr, Type, Id)),
     !.


recover_ind_second(W, PrecTops, Ind):-
     on(_-W-Ind-F/I1, PrecTops),
           !.

recover_ind_second(W, PrecTops, Ind):-
      topps(_, _, W, Ind, _),
           !.
recover_ind_second(W, PrecTops, Ind):-
           !.

recover_main(W1, Ind1, Fm1):-
     main(W1, Main),
     topps(_, _, W1, Ind1, Fm1),
     !.
recover_main(W1, Id, Fm1):-
     main(W1, Main),
     frase_corrente(N,_),
     N1 is N - 1,
     topic(N1,main,Id),
     topps(_, _, W1, Id, Fm1),
     !.
recover_main(nil, nil, []):-!.
     
recover_second(W2, Ind2, Fm2):-
     second(W2, Second),
     topps(_, _, W2, Ind2, Fm2),
     !.

recover_second(W2, Id, Fm2):-
     second(W2, Second),
     frase_corrente(N,_),
     N1 is N - 1,
     topic(N1,second,Id),
     topps(_, _, W2, Id, Fm2),
     !.
recover_second(nil, nil, []):-!.

write_restopics(Main-Fm/SnX,Sec-Fs/SnX1,Rest,Cost):-
     Win='Macintosh HD:anafore',
     abolish(main/2),
     assert(main(Main, Fm)),
     write_mtopic_onfile(Win,Main),
     abolish(second/2),
     assert(second(Sec, Fs)),
     write_stopic_onfile(Win,Sec),
     (Rest\=[],
      write_ptopic_onfile(Win,Rest),
      abolish(others/1),
      assert(others(Rest))
     ;
     Rest=[],true),
     frase_corrente(NoFr, File),
     assert_indsif_pot(3,poten, NoFr, Rest),
    !.

/*
assert_inds_if(Type, NoFr, Main, Id, Fm):-
     topps(_, _, Main, Ind, _),
     assertz(topps(Type, NoFr, Main, Ind, Fm)),
     assertz(topic(NoFr, Type, Ind),
     !.
assert_inds_if(Type, NoFr, Main, Id, Fm):-
     gen_sym(id, Ind),
     assertz(topps(Type, NoFr, Main, Ind, Fm)),
     assertz(topic(NoFr, Type, Ind),
     !.
*/


match_reflexives(N,RefList, Feat,W1):-
      N1 is N - 1, 0<N1,
      (nth(RefList, N1, ref_ex(I1,W1,Tab1,P1,Ge1,Nu1,Ca1,Fu1/Ru1)/We1),
       Fu1=sogg,
       Fea=[P1,Ge1,Nu1,Ca1],
       match_feats_cats(Feat, Fea)
       ;
      match_reflexives(N1,RefList, Feat,W1)),
      !.
match_reflexives(N,RefList, Feat,W1):-
      N1 is N - 1, 0<N1,
      (nth(RefList, N1, ref_ex(I1,W1,Tab1,P1,Ge1,Nu1,Ca1,Fu1/Ru1)/We1),
       (Fu1=sogg;Ru1=poss)
       ;
      match_reflexives(N1,RefList, Feat,W1)),
      !.
match_reflexives(N,RefList, Feat,W1):-
      N1 is N - 1,
      nth(RefList, N1, ref_ex(I1,W1,Tab1,P1,Ge1,Nu1,Ca1,Fu1/Ru1)/We1),
      Fea=[P1,Ge1,Nu1,Ca1],
      match_feats_cats(Feat, Fea),
     !.

prune_doubles([],[]):-!.
prune_doubles([E1-W-Ind-Feat|Topics],PrecTopss):-
    elimina(_-W-Ind-Feat,Topics,NewTopics),
     append([E1-W-Ind-Feat],NewTopics,Topps),
      prune_doubles(Topps,PrecTopss),
     !.     
prune_doubles([E1-W-Ind-Feat|Topics],[E1-W-Ind-Feat|PrecTopss]):-
      prune_doubles(Topics,PrecTopss),
     !.     
prune_doubles(Topics,Topics).

check_argument_pron(W,Refs,F,F1):-
     Refs\=[],
     (list(W),W=[W1];atomic(W),W1=W),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     on(Ref/_-_,Refs),
     append(F,[Fu/Ro],F1),
     !.
check_argument_pron(W,RefList,F,F):-!.

check_argumentality_pron(F):-
     on(Fu/Ro,F),
     nonargFun(Fu),
     !.
nonargFun(adj).
nonargFun(mod).
nonargFun(obl).
nonargFun(appos).

rescue_plur(Disj,W-0-F,Topics,NewResolved,Resol):-
   on(plur,F),
   rescueplur(Disj,W-0-F,Topics,Resolved,Resol),
   append(Resolved,Resol,NewResolved),
   !.
rescue_plur(Disj,W-0-F,Topics,Resol,Resol):-
   \+ on(plur,F),
   !.

rescueplur(Disj,W-0-F,[],[],[]):-!.
rescueplur(Disj,W-0-F,[Score-W1-Ind-F1|Topics],[Ind-W-W1-F1|Resolved],Resol):-
   cwn(W1),
   checkdisj(Disj,W1),
   rescueplur(Disj,W-0-F,Topics,Resolved,Resol),
   !.
rescueplur(Disj,W-0-F,[Score-W1-Ind-F1|Topics],Resolved,Resol):-
   rescueplur(Disj,W-0-F,Topics,Resolved,Resol),
   !.

check_subjecthood(Refs,Ind):-
   Refs\=[],
   on(Ref,Refs),
   Ref=..[ref_ex,Ind|Rest],
   reverse(Rest,[Fun/Role|_]),
   Fun=sogg,!.
    
set_disjunct(Ind-Head,Gov,F1,F2):-
   F1\=[],
   append([disj=[_-Gov,Ind-Head]],F1,F2),
   !.
set_disjunct(Ind-Head,subj,F1,F2):-
   append([disj=[_-subj,Ind-Head]],[],F2),
   !.

check_disj(W-F-I, Head-Ind):-
   nogen_member(disj=Disj,F),
     \+ nogen_member(_-subj,Disj),     
     \+ nogen_member(Ind-Head,Disj),
   validhead(Head),
   !.

check_disj(W-F-I, Head-Ind):-
   \+ nogen_member(disj=Disj,F),
   validhead(Head),
   !.
check_disjj(W-F-I, Head-Ind):-
   nogen_member(disj=Disj,F),
     \+ nogen_member(Ind-Head,Disj),
   validhead(Head),
   !.

recover_poss_mods(Pred,Refs,Mods,Poss):-
    appiattisci(Mods,Modss),
    recover_possmods(Pred,Refs,Modss,Poss),
   !.

recover_possmods(Pred,Refs,[],[]):-!.
recover_possmods(Pred,Refs,[Ind-Head-Mod|Mods],[W-0-F2/Pred|Poss]):-
    explore_mod(Mod,W,F1,I1,Gov),
    check_subjecthood(Refs,Ind),
    set_disjunct(Ind-Head,subj,F1,F2),
    recover_possmods(Pred,Refs,Mods,Poss),
   !.
recover_possmods(Pred,Refs,Ind-Head-Mod,[W-0-F2/Pred]):-
    explore_mod(Mod,W,F1,I1,Gov),
    set_disjunct(Ind-Head,Gov,F1,F2),
   !.
recover_possmods(Pred,Refs,[Ind-Head-Mod|Mods],[W-0-F2/Pred|Poss]):-
    explore_mod(Mod,W,F1,I1,Gov),
    set_disjunct(Ind-Head,Gov,F1,F2),
    recover_possmods(Pred,Refs,Mods,Poss),
   !.
recover_possmods(Pred,Refs,[Ind-Head-[Mod|Rest]|Mods],[W-0-F2/Pred|Poss]):-
    explore_mod(Mod,W,F1,I1,Gov),
    set_disjunct(Ind-Head,Gov,F1,F2),
    Modss=[Ind-Head-Rest],
    recover_possmods(Pred,Refs,Modss,Poss),
    recover_possmods(Pred,Refs,Mods,Poss),
   !.
recover_possmods(Pred,Refs,[Ind-Head-Mod|Mods],[Pos-0-F2/Pred|Poss]):-
    Mod=[mod-[Pos-poss-sn]],
    check_subjecthood(Refs,Ind),
    set_disjunct(Ind-Head,subj,F1,F2),
    recover_possmods(Pred,Refs,Mods,Poss),
   !.
recover_possmods(Pred,Refs,[Ind-Head-Mod|Mods],Poss):-
    recover_possmods(Pred,Refs,Mods,Poss),
   !.
recover_possmods(Pred,Refs,Ind-Heat-Mod,[]):-!.

explore_mod(Mod,W,Fea,I, Head):-
   Mod\=[], 
   on(W,Mod), atomic(W),
   spy_lower(W,Low,Pol),
   (Pol=1,Ww=Low;Ww=W),
   filter_pos_ag(Ww,Fea,L),
   (reverse(Mod, [Head-Cat-_|_]),
     nouncats(Cat);Head=[]), 
    gensym(sn,I),
   !.

explore_mod(Mod,W,Fea,I, Head):-
   Mod\=[], 
   on(W-_-_,Mod), 
   spy_lower(W,Low,Pol),
   (Pol=1,Ww=Low;Ww=W),
   filter_pos_ag(Ww,Fea,L),
   (reverse(Mod, [Head-Cat-_|_]),
    nouncats(Cat);Head=[]), 
    gensym(sn,I),
   !.
 
explore_mod(Mod,W1,Fea,I, Head):-
   Mod\=[], 
   on(W,Mod), W=Cos-Mo,
   Mo\=[],  nonvar(Mo),
   on(W1-_-_,Mo),
   spy_lower(W1,Low,Pol),
   (Pol=1,Ww=Low;Ww=W1),
   filter_pos_ag(Ww,Fea,L),
   (reverse(Mo, [Head-Cat-_|_]),
    nouncats(Cat);
   on(W2,Mod), W2=Cos2-Mo2,
   Mo2\=[],  nonvar(Mo2),
   (Cos2=obl;Cos2=appos;Cos2=mod),
   on(W3-Ct-_,Mo2),
   nouncats(Ct), Head=W3),
    gensym(sn,I),
   !.

explore_mod(Mod,W1,Fea,I, Head):-
   Mod\=[], 
   on(W,Mod), W=Cos-Mo,
   Mo\=[],  nonvar(Mo),
   on(mod-Modd,Mo),
   on(W1-_-_,Modd),
   spy_lower(W1,Low,Pol),
   (Pol=1,Ww=Low;Ww=W1),
   filter_pos_ag(Ww,Fea,L),
   (reverse(Modd, [Head-Cat-_|_]),
    nouncats(Cat);
   on(W2,Mod), W2=Cos2-Mo2,
   Mo2\=[],  nonvar(Mo2),
   (Cos2=obl;Cos2=appos;Cos2=mod),
   on(W3-Ct-_,Mo2),
   nouncats(Ct), Head=W3),
    gensym(sn,I),
   !.

align_candidates(Topics,Weighted,Pron, Resolved, NewResol):-
    findall(N, (on(N-_,Weighted), N=<10), Best),
    length(Best,L), 1=L,
    sort(Weighted,Sorted),
    Sorted=[Sco-Wo|_],
%    reverse(Sorted,[Sco-Wo|Best]),
    remove(Ind-[Pron]-Wo-F, Resolved, Resol),
    append([Ind-[Pron]-Wo-F], Resol, NewResol),
   !.

align_candidates(Topics,Weighted,Pron, Resolved, NewResol):-
    findall(NN-W, (on(N-W,Weighted), N=<10, 
                      on(Sc-W-_-_,Topics), NN is N + Sc), Best),
    length(Best,L), 1<L,
    sort(Best,Sorted),
    Sorted=[Sco-Wo|_],
%    reverse(Sorted, [N-Wo|_]),
    remove(Ind-[Pron]-Wo-F, Resolved, Resol),
    append([Ind-[Pron]-Wo-F], Resol, NewResol),
   !.

align_candidates(Topics,Weighted,Pron, Resolved, Resolved):-!.

evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   copl(Pred),
   (Pred=seem;Pred=appear;Pred=look),
   remove([it]-0-[Pers, neu, sing, Feat, Role]/_,Prons,NewPron),
   explore_args_adjs(Args,Arg,Pre),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.

evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   copl(Pred),
   Pred\=have,
   remove([it]-0-[Pers, neu, sing, Feat, Role]/_,Prons,NewPron),
   explore_args_adjs(Args,Arg,Pre),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.


evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   copl(Pred),
   Pred=be,
   remove([it]-0-[Pers, neu, sing, Feat, Role]/_,Prons,NewPron),
   explore_args_prop(prop,Args,Ind,Ars),
   term_to_atom(ccomp-prop,Fun),
   (Dgrs=..[Fun,Dep,Sem,be];
   Dgrs=..[Fun,be,Sem,Dep]),
   dgrs(N,Dgrs),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.

evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   copl(Pred),
   Pred=be,
   remove([it]-0-[Pers, neu, sing, Feat, Role]/_,Prons,NewPron),
   explore_args_prop(prop,Args,Ind,Ars),
   term_to_atom(xcomp-prop,Fun),
   Dgrs=..[Fun,be,Head-Ind],
   dgrs(N,Dgrs),
   nt(Head),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.


evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   copl(Pred),
   Pred=be,
   remove([it]-0-[Pers, neu, sing, Feat, Role]/_,Prons,NewPron),
   explore_args_prop(prop,Args,Ind,Ars),
   on(Head-Cat-Fea/Ind,NTops),
   detect_sem_adj(Head),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.

evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   Pred=put,
   remove([it]-0-[Pers, neu, sing, Feat, Role]/Ind,Prons,NewPron),
   explore_args_prop(theme,Args,Ind,Ars),
   term_to_atom(cmod-subord,Fun),
   Dgrs=..[Fun,as,Pred-_,_],
   dgrs(N,Dgrs),
%   cmod-subord(as, put-cl899, see-cl898))
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.

evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   Pred=say,
   remove([they]-0-Feat/Ind,Prons,NewPron),
   explore_args_prop(theme,Args,Ind,Ars),
   term_to_atom(cmod-_,Fun),
   Dgrs=..[Fun,Sem,Pred-_,_],
   dgrs(N,Dgrs),
   term_to_atom(ncmod-_,Fun1),
   Dgrs1=..[Fun1,in, Pred-_,trade-_],
   dgrs(N,Dgrs1),
%say(cl4, ncmod-theme, in, trade-sn20).
%say(cl4, subj-actor, they-sn19).
   assert(expl(Pred,they)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.

evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   Pred=know,
   remove([it]-0-[Pers, neu, sing, Feat, Role]/Ind,Prons,NewPron),
   explore_args_prop(theme,Args,Ind,Ars),
   term_to_atom(adj-mod,Fun),
   Dgrs=..[Fun,Sem,Pred,Adj],
   dgrs(N,Dgrs),
% adj-mod(in, know, all_along-sn3
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.

evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   \+copl(Pred),
   remove([it]-0-[Pers, neu, sing, Feat, Role]/Ind,Prons,NewPron),
   explore_args_prop(theme_aff,Args,Ind,Ars),
   (Ars=[];
     on(Rol/_,Args), Rol\=Role, Rol\=agent, Rol\=agente),
   cat_gramm(Pred, CatGr, CatV, LArgsV),
   details_cat(CatV),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.

evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   copl(Pred),
   remove([it]-0-[Pers, neu, sing, Feat, Role]/Ind,Prons,NewPron),
   explore_args_adjs(Args,Arg,Pre),
   nonvar(Arg),Arg\=[],
   \+ on(Role/Ind,Arg),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.
evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   (Pred=come;Pred=take;Pred=expect),
   Args\=[],
   explore_args_adjs(Args,Arg,Pre),
   remove([it]-0-[Pers, neu, sing, Feat, Role]/_,Prons,NewPron),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.
evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   Pred=make,
   Args\=[],
   explore_args_adjs(Args,Arg,Pre),
   explore_args_prop(prop,Args,Ind,Ars),
   remove([it]-0-[Pers, neu, sing, Feat, Role]/_,Prons,NewPron),
   assert(expl(Pred,it)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.
evaluate_it(Pred,Args,NTops, Prons,NewProns):-
   remove([there]-0-[Pers, _, _, [luogo], Role]/_,Prons,NewPron),
   assert(expl(Pred,there)),
   evaluate_it(Pred,Args,NTops, NewPron,NewProns),
   !.
evaluate_it(Pred,Args,NTops, Prons,Prons):-!.

recover_all_adjs_refs([], [], []):-!.
recover_all_adjs_refs([Ref|Rest], [Ref1|All], OtherArgs):-
   nonvar(Ref),
   Ref=..[ref_ex, I, H, Tref, Tf, _, Mods, Fu/Ro],
   s_estrai_argomenti([1-[Ref]],_,Ref1),
   recover_all_adjs_refs(Rest, All, OtherArgs),
   !.
recover_all_adjs_refs([Ref|Rest], [Ref2|All], OtherArgs):-
   list(Ref),
   appiattisci(Ref,Ref11),
   Ref1=..[ref_ex, I, H, Tref, Tf, _, Mods, Fu/Ro],
   remove(Ref1,Ref11,Res),
   append(Res,Rest,Resto),
   s_estrai_argomenti([1-[Ref1]],_,Ref2),
   recover_all_adjs_refs(Resto, All, OtherArgs),
   !.
recover_all_adjs_refs([Refs|Rest], RefLis, [[Pred,Mods, Args]|OtherArgs]):-
   list(Refs),
   Modss=ClNo-[Pred-Args-Cl, Aggs, Tail],
   remove(Modss,Refs,RestRefs),
   s_estrai_argomenti([1-RestRefs],_,RefList1),
   s_estrai_argomenti([1-Aggs],_,RefList2),
   append(RefList1,RefList2, RefLis1),
   extract_all_refs([], Tail,RefLis2, OtherArgs),
   append(RefLis1,RefLis2, RefLis),
   !.

recover_all_adjs_refs([Ref|Rest], Refs, All):-
   recover_all_adjs_refs(Rest, Refs, All),
   !.

/*
Rell=[R-Roles-Pol]
recover_inds(AllRefs,NoFr,Rel-[Role/Ind|Inds], Ids, OutInds):-
recover_inds(AllRefs,NoFr,Rel-[CRel-[Role/Ind|Inds]|Rels], [prop:RelId|Idss], OutInds):-
*/

recoverxcomprels(Pred,Arg,Pas,Pass):-
    on(C-Pred-Role-Ar-Ind, Arg),
    on(Ind-Pred-Role-Pr,Arg),
    append([Pred-[Pr-[]]-1],Pas,Pass),
    !.

createpas(Infos,[],[]):-!.
createpas(Infos,[Pred-Arg|Args],[C-Pas|PAS]):-
    findall(Role-Ind,
                      on(C-Pred-Role-Ar-Ind, Arg), 
                      Roles),
    on(C-Pred-Role-Ar-Id, Arg),
    getpol(Infos,Pred,Po),
    (Po=nil, Pol=1;Pol=0),
    makerolesn(Roles,NRoles),
    Pas=[Pred-NRoles-Pol],
%    recoverxcomprels(Pred,Arg,Pas,Pass),
    createpas(Infos,Args,PAS),
    !.
createpas(Infos,[Pred-Arg|Args],PAS):-
    createpas(Infos,Args,PAS),
    !.

makerolesn([],[]):-!.
makerolesn([R-I|Roles],[R/I|NRoles]):-
    makerolesn(Roles,NRoles),
    !.

getpol(Infos,Verb,Pol):-
    (Clause=[NoFr,Speech,Verb,Tense,Voice,Pol,Support,Progr,Mood,Focs,Aspect,Eigth,Ninth,Tenth,Elth,Tweth,Thirth]
     ;
    Clause=[NoFr,Speech,Verb,Tense,Voice,Pol,Support,Progr,Mood,Focs,Aspect,Eigth,Ninth,Tenth,Elth,Tweth]
     ;
    Clause=[NoFr,Speech,Verb,Tense,Voice,Pol,Support,Progr,Mood,Focs,Aspect]
   ),
   on(Clause,Infos),
   !.

% build_dsr(NoFr,Symb,Disambs, OutRte,Clin):-
build_dsr(NoFr,Symb,Disambs, OutRte,Clin):-
    writenl(evaluation, 'Semantic Interpretation and Informational Structure'),
    nl,
    get_lemmata_preds(Disambs, Lems),
    info_evaluation(NoFr,Lems,Cl,Infos,Args),
    discourse_structure(Infos,DSR),
    get_string(DSR,String),
    writedstructure(NoFr, Clin,'Evaluation',String,Outs),
    add_features(Outs,Feats),
    writedstruct(Feats),
    compute_info_structure(Feats,Args,Infons),
    process_infons(Infons,DS),
    detect_causal_relations(DS,DR),
    assertdstructs(Symb,DR),
    nl,nl,
    writenl(_,Symb),
    writenl(evaluation, 'Discourse Relations and Discourse Structure'),
    nl,
    writedstruct(DR),
    append([String],[Infons],OutRt),
    append(OutRt,[Args],OutRte),
    !.
build_dsr(NoFr,Symb,Disambs, [],NoFr):-
    !.

getalldgrs(AllSems,Args-Adjs):-
    findall(Dgr, dgrs(N,Dgr),Dgrs),
    transformdgrs(Dgrs,AllSems),
    sort(AllSems,AllS),
    aggregatePreds(AllS,Args,Adjs),
    !.

/* Pred is the governor, Pre the dependent not the opposite??
transformdgrs([Dgr|Dgrs],[Pred-F/R-Sem-Pre|AllSems]):-
                     (Dgr=..[Fun,Sem,Pre-Ind,Pred], Pred\=C-D;
                      Dgr=..[Fun,Sem,Pre,Pred-Ind],Pre\=A-B;
                      Dgr=..[Fun,Sem,Pre,Pred],Pre\=A-B, Pred\=C-D), 
                      term_to_atom(F-R,Fun),
                      (F=xadj;F=ncmod;F=adj, R=mod),
    transformdgrs(Dgrs,AllSems),
    !.
*/
/*
F=cmod, Pre\=A-B, Pred\=C-D)
F=ccomp, Pre\=A-B, Pred\=C-D
(F=xcomp;F=xadj), 
Pre\=A-B, F=xadj
Pred\=A-B, F=adj, R=mod
*/

adjsroles(R):-
  R=prop;R=result;R=purpose;R=cause;R=mod;loc_rol(R);temp_rol(R),!.

adjsfuncs(F,R):-
   F=cmod;F=ccomp;F=coord;F=xcomp;F=xadj;F=xmod;F=adj,!.
   
aggregatePreds([],[],[]):-!.
aggregatePreds([Ind-Pred-F/R-Sem-Pre|All],[Ind-Pred-F/R-Sem-Pre|Alls],[[Pre-F/R-Sem-Pred]|Adjs]):-
    adjsfuncs(F,R),
    stringof(List,Pre),List=[C|_],C\=c,
    aggregatePreds(All,Alls,Adjs),
    !.
aggregatePreds([Ind-Pred-F/R-Arg-Id|AllS],[Pred-All|AllSemss],[[]|Adjs]):-
    stringof(List,Ind),List=[c|_],
    stringof(Lis,Id),(Lis=[c,l|_];Lis=[s,n|_]),
    aggregatePrs(Ind-Pred,[Ind-Pred-F/R-Arg-Id|AllS],All,Rest),
    aggregatePreds(Rest,AllSemss,Adjs),
    !.
aggregatePreds([Pred-F/R-Sem-Pre|All],[Pred-R-Sem-Pre|Alls],[[Pred-F/R-Sem-Pre]|Adjs]):-
    Pred\=A-B,
    adjsfuncs(F,R),
    aggregatePreds(All,Alls,Adjs),
    !.
aggregatePreds([Pred-F/R-Sem-Pre-Ind|All],[Ind-Pred-R-Sem-Pre|Alls],[[Ind-Pred-F/R-Sem-Pre]|Adjs]):-
    adjsfuncs(F,R),
    aggregatePreds(All,Alls,Adjs),
    !.
aggregatePreds([Ind-Pred-F/R-Pre|All],[Ind-Pred-F/R-Pre|Alls],[[Pred-F/R-nil-Pre]|Adjs]):-
    adjsfuncs(F,R),
    aggregatePreds(All,Alls,Adjs),
    !.
aggregatePreds([Ind-Pred-R-Pre|All],[Ind-Pred-R-Pre|Alls],[[Pre-R-nil-Pred]|Adjs]):-
    adjsroles(R),
    aggregatePreds(All,Alls,Adjs),
    !.
aggregatePreds([A|All],[A|AllSemss],[[]|Adjs]):-
    aggregatePreds(All,AllSemss,Adjs),
    !.

aggregatePrs(Ind-Pred,[Ind-Pred-F/R-Arg-Id|AllS],[Ind-Pred-F/R-Arg-Id|All],Rest):-
    F\=cmod,F\=ccomp,F\=xcomp,F\=xadj,F\=xmod,F\=adj,R\=mod,
    aggregatePrs(Ind-Pred,AllS,All,Rest),
    !.
aggregatePrs(Ind-Pred,[Ind-Pred-F/R-Arg|AllS],[Ind-Pred-F/R-Arg|All],Rest):-
    aggregatePrs(Ind-Pred,AllS,All,Rest),
    !.
aggregatePrs(Ind-Pred,[Ind-Pred-R-Arg|AllS],[Ind-Pred-R-Arg|All],Rest):-
    F\=cmod,F\=ccomp,F\=xcomp,F\=xadj,F\=xmod,F\=adj,R\=mod,
    aggregatePrs(Ind-Pred,AllS,All,Rest),
    !.
aggregatePrs(Ind-Pred,[Ind-Pred-F/R-Arg-Id|Rest],[Ind-Pred-F/R-Arg-Id],Rest):-
    F\=cmod,F\=ccomp,F\=xcomp,F\=xadj,F\=xmod,F\=adj,R\=mod,
    !.
aggregatePrs(Ind-Pred,[Ind-Pred-F/R-Arg|Rest],[Ind-Pred-F/R-Arg],Rest):-
    !.
aggregatePrs(Ind-Pred,[Ind-Pred-R-Arg|Rest],[Ind-Pred-R-Arg],Rest):-
    F\=cmod,F\=ccomp,F\=xcomp,F\=xadj,F\=xmod,F\=adj,R\=mod,
    !.


transformdgrs([],[]):-!.
transformdgrs([Dgr|Dgrs],[Ind-Pred-F/R-Arg-Id|AllSems]):-
                    Dgr=..[Fun,Pred-Ind,Arg-Id],
                     term_to_atom(F-R,Fun),
                  (F=subj;F=obj;F=xcomp;F=xmod;F=obj2;F=iobj;F=arg_mod;F=coord;F=adj),
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Ind-Pred-F/R-Arg-Id,Id-Arg-F/R-Sem-Pred|AllSems]):-
                    Dgr=..[Fun,Sem,Pred-Ind,Arg-Id],
                    Arg\=[],Id\=[],
                     term_to_atom(F-R,Fun),
            (F=obj2;F=iobj;F=arg_mod;F=xcomp;F=xmod;F=ncmod;F=adj;F=coord
                       ;
                       Fun=adj, R=adj
                       ;
                       Fun=mod, R=adj),
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Ind-Pred-F/R-Arg-Id,Ind-Pred-F/R-Sem|AllSems]):-
                    Dgr=..[Fun,Sem,Pred-Ind,Arg-Id],
                     term_to_atom(F-R,Fun),
            (F=adj;F=coord;F=xadj),
    transformdgrs(Dgrs,AllSems),
    !.
/* Pred is the governor, Pre the dependent not the opposite: 
I want to know by what predicate it is governed Pred*/
transformdgrs([Dgr|Dgrs],[Ind-Pred-F/R-Pre,Pre-F/R-Sem-Pred|AllSems]):-
                     (Dgr=..[Fun,Sem,Pred-Ind,Pre], Pre\=A-B;
                      Dgr=..[Fun,Sem,Pred,Pre-Ind], Pred\=C-D), 
                      term_to_atom(F-R,Fun),
                        (F=xcomp;F=xadj;F=xmod), 
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Ind-Pred-F/R-Pre,Pre-F/R-Pred|AllSems]):-
                      Dgr=..[Fun,Pred-Ind,Pre-Id], 
                      term_to_atom(F-R,Fun),
                      (F=adj;F=xadj), 
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Ind-Pred-F/R-Arg,Ind-Pred-F/R-Sem,Arg-F/R-Sem-Pred|AllSems]):-
                    (Dgr=..[Fun,Sem,Pred-Ind,Arg], Arg\=A-B; 
                      Dgr=..[Fun,Sem,Pred,Arg-Ind],Pred\=A-B), 
                     term_to_atom(F-R,Fun),
                      ((F=ncmod;F=adj,R=mod;F=xadj)
                       ;
                       Fun=adj, R=adj
                        ;
                       Fun=ncmod, R=mod
                      ;
                       Fun=mod, R=mod),
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[In-Pred-F/R-Pre,In-Pred-F/R-Sem,Pred-F/R-Sem-Pre|AllSems]):-
                     (Dgr=..[Fun,Sem,Pred-In,Pre-Ind];
                      Dgr=..[Fun,Sem,Pred-In,Pre];
                      Dgr=..[Fun,Sem,Pred,Pre-In], Pred\=C-D),
                     term_to_atom(F-R,Fun),
                      (F=ncmod;F=xcomp;F=xadj;F=xmod;F=adj), 
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Pred-F/R-Sem-Pre-Ind|AllSems]):-
                     (Dgr=..[Fun,Sem,Pred-In,Pre-Ind];
                      Dgr=..[Fun,Sem,Pred-In,Pre];
                      Dgr=..[Fun,Sem,Pred,Pre-Ind], Pred\=C-D),
                     term_to_atom(F-R,Fun),
                      (F=ccomp;F=coord;F=cmod), 
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Pred-F/R-Sem-Pre|AllSems]):-
                      Dgr=..[Fun,Sem,Pred,Pre],
                      nonvar(Pre),Pre\=A-B, Pred\=C-D,
                     term_to_atom(F-R,Fun),
                      (F=ccomp;F=cmod;F=coord;F=ncmod;F=xcomp;F=xadj;F=xmod;F=adj,R\=mod), 
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Ind-Pred-R-Arg|AllSems]):-
                    (Dgr=..[Fun,Pred-Ind,Arg], Arg\=C-D, 
                      term_to_atom(F-R,Fun), 
                      (F=ncmod;F=adj;F=xadj)
                      ;
                     Dgr=..[ncmod,_,Pred-Ind,Arg], R=mod, Arg\=C-D; 
                     Dgr=..[ncmod,Pred-Ind,Arg], R=mod, Arg\=C-D; 
                     Dgr=..[mod,Ind,Pred,Arg], Pred\=C-D, Arg\=A-B; 
                     Dgr=..[ante,Pred,R,Arg], Ind=ante; 
                     Dgr=..[det,Pred-Ind,Arg], R=det; 
                     Dgr=..[Ind,det,Pred,Arg], R=det                      
                     ), 
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Arg-F/R-Sem-Pred|AllSems]):-
                     Dgr=..[Fun,Sem,Arg,Pred], Pred\=C-D, Sem\=A-B,Arg\=A-B,
                        term_to_atom(F-R,Fun), F=adj,R=mod,
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],[Pred-F/R-Sem|AllSems]):-
                    (Dgr=..[Fun,Sem,Pred], Pred\=C-D, Sem\=A-B, 
                      term_to_atom(F-R,Fun);
                     Dgr=..[Fun,Pred,Sem], Pred\=C-D, Sem\=A-B,
                        term_to_atom(F-R,Fun), F=adj,R=mod),
    transformdgrs(Dgrs,AllSems),
    !.
transformdgrs([Dgr|Dgrs],AllSems):-
    transformdgrs(Dgrs,AllSems),
    !.

writesent(Win, Symb):-
    nl,nl,
    fp(Symb,Sent),
    writenl(_,Sent),nl,
    !.

get_lemmata_preds(Lems, Lem):-
    appiattisci(Lems,Lem),!.
/*
get_lemmata_preds([], []):-!.
get_lemmata_preds([V-_|Disambs], [L|Lems]):-
   lemmatize_dic_v(V,L,_),
    get_lemmata_preds(Disambs, Lems),
    !.
*/
%cl2-use-result-make-cl3
/* three types of clauses:
   main clause with dependent
   main clause without dependent
   dependent clause
   */
   
getFunRole(Args,Verb,Mood,Ninth,Tenth,Elth,Tweth,Sem,main/qprop):-
   nonvar(Elth),Elth='?',!.
getFunRole(Args,Verb,Mood,Ninth,Tenth,Elth,Tweth,Sem,FunRole):-
   on(Verb-Ars,Args),
   on(Ar,Ars),
   Ar=I-Ver-Ro-Dep-_,
   Ver=Verb, Dep=Tweth,
   FunRole=main/prop,
   !.

getFunRole(Args,Verb,Mood,Ninth,Tenth,Elth,Tweth,Sem,FunRole):-
   on(Verb-Ars,Args),
   (
   on(Ar,Ars),
   Ar=I-Ver-Ro-Dep-_,
   Verb=Ver, Dep\=Tweth, 
     nonvar(Elth), (Elth=xcomp;Elth=xadj),
      (Mood\=gerund,Tweth=Role, FunRole=vcomp/Role; 
       Mood=gerund, (Tenth==prop,FunRole=adj/gerund;
                      Tenth\=prop,FunRole=adj/Tenth)
                      )
     ;
     nonvar(Elth), Elth=cmod, 
           (
            (Tweth=subord;Tweth=coord), 
                 (Sem=nil, Role=Tweth
                     ;
                  Sem\=nil, subord_role(Sem, Role))
               ;
            Tweth\=subord, Role=Tweth),
                  FunRole=adj/Role
     ;
     nonvar(Elth), Elth=ccomp, Tweth=Role, FunRole=adj/Role
     ;
     (var(Ninth);Ninth=adj), FunRole=main/prop
    ),
   !.
getFunRole(Args,Verb,Mood,Ninth,Tenth,Elth,Tweth,Sem,FunRole):-
   on(Verb-Ars,Args),
   (
   on(Ar,Ars),
   Ar=I-Ver-Ro-Dep-_,
   Verb=Ver, Dep\=Tweth, 
     nonvar(Ninth), (Ninth=xcomp;Ninth=xadj),
     (Mood\=gerund,Tweth=Role, FunRole=vcomp/Role; 
       Mood=gerund, (Tenth==prop,FunRole=adj/gerund;
                      Tenth\=prop,FunRole=adj/Tenth)
                      )     ;
     nonvar(Ninth), Ninth=cmod, 
           (Tenth=subord, 
                 (Elth=nil, Role=Tenth
                     ;
                  Elth\=nil, subord_role(Elth, Role))
               ;
             Tenth\=subord, Role=Tenth),
                  FunRole=adj/Role
     ;
     nonvar(Ninth), Ninth=ccomp, Tenth=Role, FunRole=adj/Role
     ;
     (var(Ninth);Ninth=adj), FunRole=main/prop
    ),
   !.
getFunRole(Args,Verb,Mood,Ninth,Tenth,Elth,Tweth,Sem,FunRole):-
   on(Verb-Ars,Args),
   (
   on(Ar,Ars),
   Ar=I-Ver-Ro-Dep-_,
   Verb=Ver, Dep\=Tweth, 
     nonvar(Tenth), (Tenth=xcomp;Tenth=xadj), 
      (Mood\=gerund,Elth=Role, FunRole=vcomp/Role; Mood=gerund, FunRole=adj/gerund)
     ;
     nonvar(Tenth), Tenth=cmod, 
           (
            (Elth=subord;Elth=coord), 
                 (Elth=nil, Role=Elth
                     ;
                  Elth\=nil, subord_role(Elth, Role))
              ;
             Elth\=subord, Role=Elth),
                  FunRole=adj/Role
     ;
     nonvar(Tenth), Tenth=ccomp, 
                  Elth=Role, FunRole=adj/Role
     ;
     (var(Tenth);Tenth=adj), FunRole=main/prop
    ),
   !.

getFunRole(Args,Verb,Mood,Ninth,Tenth,Elth,Tweth,Sem,FunRole):-
  ( Verb=Tweth;
    Verb=Sem), FunRole=main/prop,!.
/*
map_temp_rel('<', before).
map_temp_rel('>', after).
map_temp_rel('=', overlap).
map_temp_rel(diverso, after).
map_temp_rel(contemporaneo, overlap).
map_temp_rel(incluso, contains).
map_temp_rel([eq], overlap).
map_temp_rel([af], after).
map_temp_rel([bf], before).
map_temp_rel([dr], during).
map_temp_rel(Rels, finished_by) :-
   on(fb, Rels).
map_temp_rel(Rels, started_by) :-
   on(sb, Rels).
map_temp_rel(Rels, contains) :-
   on(cn, Rels).
map_temp_rel(Rels, after) :-
   on(bf, Rels).
map_temp_rel(Rels, after) :-
   on(af, Rels).
map_temp_rel(Rels, during) :-
   on(dr, Rels).
*/

writedstructure(Cl,Cl,Win,[],[]):-!.
writedstructure(C,Cl,Win,[Str|String],[Cl1-Str|Outs]):-
    Cl1 is C + 1,
    writedstructure(Cl1,Cl,Win,String,Outs),
    !.
writedstruct([]):-!.
writedstruct([Str|String]):-
    writenl(_,Str),
    writedstruct(String),
    !.


recover_mood_tense3(First,Fourth,Sixth,Ninth,Thirth,Six,Fir):-
    (Ninth\=nil, Thirth\=nil, 
     (
       (Ninth=xcomp;Ninth=xadj), 
        (
         (Thirth=to;Thirth=in_order_to),
         Six=infinit, Fir=First
         ;
         Thirth\=to,Thirth\=in_order_to,
         Six=gerund, Fir=First
        ))        
     ;
     Sixth=nil, Fourth=nil, Six=indic, Fir=First
     ;
     Sixth\=nil, Fourth\=nil, Six=unreal, 
     aux(Sixth, Be, _, Ten, Pers, Num),
     modal(Fourth, Mood, _, Tense, Pers, Num),
     multiply_tense(First, Tense, Fir)
     ),
    !.
recover_mood_tense1(First,Fourth,Sixth,Ninth,Thirth,Six,Fir):-
    (Ninth\=nil, Thirth\=nil, 
     (
       (Ninth=xcomp;Ninth=xadj), 
        (
         (Thirth=to;Thirth=in_order_to),
         Six=infinit, Fir=First
         ;
         Thirth\=to,Thirth\=in_order_to,
         Six=gerund, Fir=First
        ))        
     ;
     Sixth=nil, Fourth=nil, Six=indic, Fir=First
     ;
     Sixth\=nil, Fourth=nil, Six=indic, 
     aux(Sixth, Be, Mood, Tense, Pers, Num),
     multiply_tense(First, Tense, Fir)
     ),
    !.

add_features([],[]):-!.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth-Tenth-Elth-Tweth-Thirth-Forth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth,Ninth,Tenth,Elth,Tweth,Thirth,Forth]|Feats]):-
    recover_mood_tense1(First,Fourth,Sixth,Ninth,Thirth,Six,Fir),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth-Tenth-Elth-Tweth-Thirth-Forth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth,Ninth,Tenth,Elth,Tweth,Thirth,Forth]|Feats]):-
    (Sixth=nil, Fourth=nil, Six=indic, Fir=First
     ;
     Sixth=nil, Fourth\=nil, Six=unreal, 
     modal(Fourth, Be, Mood, Tense, Pers, Num),
     multiply_tense(First, Tense, Fir)
     ),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth-Tenth-Elth-Tweth-Thirth-Forth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth,Ninth,Tenth,Elth,Tweth,Thirth,Forth]|Feats]):-
    recover_mood_tense3(First,Fourth,Sixth,Ninth,Thirth,Six,Fir),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth-Tenth-Elth-Tweth-Thirth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth,Ninth,Tenth,Elth,Tweth,Thirth]|Feats]):-
    recover_mood_tense1(First,Fourth,Sixth,Ninth,Thirth,Six,Fir),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth-Tenth-Elth-Tweth-Thirth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth,Ninth,Tenth,Elth,Tweth,Thirth]|Feats]):-
    (Sixth=nil, Fourth=nil, Six=indic, Fir=First
     ;
     Sixth=nil, Fourth\=nil, Six=unreal, 
     modal(Fourth, Be, Mood, Tense, Pers, Num),
     multiply_tense(First, Tense, Fir)
     ),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth-Tenth-Elth-Tweth-Thirth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth,Ninth,Tenth,Elth,Tweth,Thirth]|Feats]):-
    recover_mood_tense3(First,Fourth,Sixth,Ninth,Thirth,Six,Fir),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Nin)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth]|Feats]):-
    recover_mood_tense1(First,Fourth,Sixth,Ninth,Thirth,Six,Fir),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth]|Feats]):-
    recover_mood_tense1(First,Fourth,Sixth,Ninth,Thirth,Six,Fir),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth]|Feats]):-
    (Sixth=nil, Fourth=nil, Six=indic, Fir=First
     ;
     Sixth=nil, Fourth\=nil, Six=unreal, 
     modal(Fourth, Be, Mood, Tense, Pers, Num),
     multiply_tense(First, Tense, Fir)
     ),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth)|Outs],[[Cl,D,V,Fir,Sec,Third,Fourth,Fifth,Six,Sevth,Eigth]|Feats]):-
    recover_mood_tense3(First,Fourth,Sixth,nil,nil,Six,Fir),
    spechtype(D),
    add_features(Outs,Feats),
    !.
add_features([Cl-(V-First-Sec)|Outs],[[Cl,indirect,V,First,Sec]|Feats]):-
    add_features(Outs,Feats),
    !.


spechtype(direct):-
    funcs(sem, _-_, _, fint-[? - puntint-fint]),!.
spechtype(direct):-
    funcs(sem, _-_, _, fp-['"'-par-fp]),!.
spechtype(direct):-
    funcs(sem, _-_, fp-['"'-par-fp], _),!.
spechtype(direct):-
    funcs(sem, _-_, [fp-['"'-par-fp]], _),!.
spechtype(indirect):-!.

multiply_tense(pres, pres, perf).
multiply_tense(past, pres, pluper).
multiply_tense(past, pass, pluper).
multiply_tense(pres, pass, pluper).
multiply_tense(pres, progr, pres).
multiply_tense(fut, fut, fut).
multiply_tense(pres, fut, fut).
multiply_tense(past, fut, fut).
multiply_tense(pres, cond, pres).
multiply_tense(past, cond, past).
multiply_tense(past, past, past).

reorderCls([],[],[]):-!.
reorderCls([],Lems,Lems):-!.
reorderCls(Cls,[],Cls):-!.
reorderCls([L|Clss],[L|Lems],[L|Cls]):-
    reorderCls(Clss,Lems,Cls),
    !.
reorderCls([there_be|Clss],[be|Lems],[there_be|Cls]):-
    reorderCls(Clss,Lems,Cls),
    !.
reorderCls([L|Clss],[L1|Lems],[L1|Cls]):-
    L\=L1,
    remove(L1,Clss,Rest),
    reorderCls([L|Rest],Lems,Cls),
    !.
reorderCls([L|Clss],[L1|Lems],Cls):-
    L\=L1,
    \+ on(L,Lems),
    reorderCls(Clss,[L1|Rest],Cls),
    !.
reorderCls([L|Clss],[L1|Lems],[L1|Cls]):-
    L\=L1,
    \+ on(L1,Clss),
    reorderCls(Clss,Lems,Cls),
    !.

check_outs_lems([[]-[]-[]-[]-[]-[]-[]],Clss,Lems,Cls, NAttrs):-
    mremove_check( [t,o,s], [t,o,s,s], Rems ),
    !.
info_evaluation(NoFr,Lems,Cln,Infoss,Args):-
    recover_cls(CLS),
    togli_doppi(CLS,Cls),
    search_nominals(Cls, Noms, 0, NoCl),
%    grep_args(Cls, Args),
    grep_attrs(Cls, Attrs),
    grep_lexs(NoFr,Cl,Cls, Lexs),
%    recover_cls_dep(Cls,Dep),
    getalldgrs(AllArgsAdjs,Args-Dep),
    append([Attrs],[Lexs], Infons),
    sort(Dep,Dep1),
    reverse(Dep1,Dep2),
    append(Infons,[Dep2], Infos),
    appiattisci(Noms,No),
    (No=[], Infoss=Infos, Cln=Cl;
     No\=[], 
     append(Infos,[Noms], Infoss), Cln is Cl + NoCl),
    !.

get_string([],[]):-!.
get_string([[]],[]):-!.
get_string([A-B-C-D-E-F-G-H-I-K-L-M-N|DSR],[V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth-Tenth-Elth-Tweth-Thirth|String]):-
     (A\=[],getgovstring(A,V);
      B\=[],getgovstring(B,V); V=nil),
     getstring(A,First),
     getstring(B,Sec),
     getstring(C,Third),
     getstring(D,Fourth),
     getstring(E,Fifth),
     getstring(F,Sixth),
     getstring(G,Sevth),
     getstring(H,Eigth),
     getstring(I,Ninth),
     getstring(K,Tenth),
     getstring(L,Elth),
     getstring(M,Tweth),
     getstring(N,Thirth),
     get_string(DSR,String),
     !.
/* No dependencies*/
get_string([A-B-C-D-E-F-G-H-I|DSR],[V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth-Tenth-Elth-Tweth-Thirth-Rest|String]):-
     (A\=[],getgovstring(A,V);
      B\=[],getgovstring(B,V); V=nil),
     getstring(A,First),
     getstring(B,Sec),
     getstring(C,Third),
     getstring(D,Fourth),
     getstring(E,Fifth),
     getstring(F,Sixth),
     getstring(G,Sevth),
     getstring(H,Eigth),
     getstring(I,[Ninth-Tenth-Elth-Tweth-Thirth|Rest]),
     get_string(DSR,String),
     !.
/* No dependencies*/
get_string([A-B-C-D-E-F-G-H-I|DSR],[V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth-Ninth|String]):-
     (A\=[],getgovstring(A,V);
      B\=[],getgovstring(B,V); V=nil),
     getstring(A,First),
     getstring(B,Sec),
     getstring(C,Third),
     getstring(D,Fourth),
     getstring(E,Fifth),
     getstring(F,Sixth),
     getstring(G,Sevth),
     getstring(H,Eigth),
     getstring(I,Ninth),
     get_string(DSR,String),
     !.
/* No dependencies*/
get_string([A-B-C-D-E-F-G-H|DSR],[V-First-Sec-Third-Fourth-Fifth-Sixth-Sevth-Eigth|String]):-
     (A\=[],getgovstring(A,V);
      B\=[],getgovstring(B,V); V=nil),
     getstring(A,First),
     getstring(B,Sec),
     getstring(C,Third),
     getstring(D,Fourth),
     getstring(E,Fifth),
     getstring(F,Sixth),
     getstring(G,Sevth),
     getstring(H,Eigth),
     get_string(DSR,String),
     !.
/* Nominalization*/
get_string([[A-B-C]|DSR],[A-B-C|String]):-
     get_string(DSR,String),
     !.

getstring(A,nil):-
   A=[],!.
getstring(A,[Ninth-Tenth-Elth-Tweth-Thirth|Rest]):-
   A\=[],
   (A=[Ninth-Tenth/Elth-Tweth-Thirth], Rest=[]
    ;
    elimina(Ninth-Tenth/Elth-Tweth-Thirth,A,Rest),
     Rest\=[],
     Tenth-Elth\=cmod-topic
    ;
    remove(Ninth-Tenth/Elth-Tweth-Thirth,A,Rest)
    ),!.
getstring(A,First):-
   A\=[],
   (A=[L-First]
    ;
    on(L-First,A)),!.
getstring(A,A):-
   atomic(A),!.
getstring(A,Mods):-
   nonvar(A), A\=[], \+ atomic(A),
   A=..[and,Mods],!.
getstring(A,L):-
   A\=[],
   \+ is_list(A),
   L=A,!.
getgovstring(A,L):-
   A\=[],
   (A=[L-First]
    ;
    on(L-First,A)),
    !.

discourse_structure([],[]):-!.
discourse_structure(Infos,DSR):-
    Infos=[Attrs,Lexs,Deps],
    collect_info(Attrs,Lexs,Deps,DSR),
    !.
discourse_structure(Infos,DSRs):-
    Infos=[Attrs,Lexs,Deps,Noms],
    collect_info(Attrs,Lexs,Deps,DSR),
    append(DSR,Noms,DSRs),
    !.


recover_cls(Pres):-
    findall(Pred-Ind, (dgrs(N,Dgr),
                    (Dgr=..[Fun,Pred-Ind|_],
                     term_to_atom(F-R,Fun),
                      (F=subj;F=arg_mod)
                       ;
                      Dgr=..[Fun,Sem,Pred-Ind|_],
                      term_to_atom(F-R1,Fun),
                       F=arg_mod
                      ;
                      Dgr=..[Fun,Pred|_], atomic(Pred), 
                      term_to_atom(F-R,Fun),
                      (F=subj;F=arg_mod),
                      fetch_index(Pred,Ind))), Preds),
    Preds\=[],
    sort(Preds,Predd),
    reverse(Predd,Pres),
    !.
recover_cls(Pres):-
    findall(Pred-Ind, (dgrs(N,Dgr),
                    (Dgr=..[Fun,Pred-Ind|_],
                     term_to_atom(F-R,Fun),
                      (F=obj;F=obj2))
                      ), Preds),
    Preds\=[],
    sort(Preds,Predd),
    reverse(Predd,Pres),
    !.
fetch_index(Pred,Ind):-
               dgrs(N1,Dgr1),
                (Dgr1=..[Fun1,Pred-Ind|_],
                term_to_atom(F1-R1,Fun1),
               (F1=obj;F1=obj2;F1=arg_mod;F1=iobj;F1=xcomp)
                 ;
                 Dgr1=..[Fun1,Sem,Pred-Ind|_],
                term_to_atom(F1-R1,Fun1),
               (F1=obj;F1=obj2;F1=arg_mod;F1=iobj;F1=xcomp)),
              !.
/*
recover_cls(Pres):-
    findall(Pred-Ind, (dgrs(N,Dgr),
                    (Dgr=..[Fun,Pred-Ind|_];
                     Dgr=..[Fun,Pred|_], atomic(Pred)), 
                     term_to_atom(F-R,Fun),
                     F=subj), Preds),
    Preds\=[],
    reverse(Preds,Pres),
    !.

recover_cls(Pres):-
    findall(Pred-Ind, (dgrs(N,Dgr),
                    (Dgr=..[Fun,Pred-Ind|_];
                     Dgr=..[Fun,Pred|_], atomic(Pred)), 
                    term_to_atom(F-R,Fun),
                     (F=obj;F=iobj;F=xcomp;F=arg_mod)), Preds),
    Preds\=[],
    reverse(Preds,Pres),
    !.

recover_cls(Pres):-
    findall(Pred, (dgrs(N,Dgr),
                    Dgr=..[Fun,Sem, Pred-Ind|_],
                    term_to_atom(F-R,Fun),
                    F=ncmod,
                     dgrs(N,Dgr1),
                       Dgr1=..[tense,_,_,Pred]), Preds),
    Preds\=[],
    reverse(Preds,Pres),
    !.
*/


recover_cls_dep([],[]):-!.
recover_cls_dep([Pred-Ind|Preds],[Depp|Deps]):-
    findall(Pred-F-R-Sem-Pre, (dgrs(N,Dgr),
                    (
                     (Dgr=..[Fun,Sem,Pre-In,Pred-Ind];
                      Dgr=..[Fun,Sem,Pre-Ind,Pred];
                      Dgr=..[Fun,Sem,Pre,Pred-Ind];
                      Dgr=..[Fun,Sem,Pre,Pred]), 
                      term_to_atom(F-R,Fun),
                       Pre\=A-B, F=xadj
                       ;
                     (Dgr=..[Fun,Sem,Pred,Pre];
                      Dgr=..[Fun,Sem,Pre,Pred],                       
                         on(Pre-_,Preds)
                         ), 
                      term_to_atom(F-R,Fun),
                       Pred\=A-B, F=adj, R=mod
                      ; 
                     (Dgr=..[Fun,Sem,Pred-In,Pre-Ind];
                      Dgr=..[Fun,Sem,Pred-Ind,Pre];
                      Dgr=..[Fun,Sem,Pred,Pre-Ind];
                      Dgr=..[Fun,Sem,Pred,Pre]), 
                      term_to_atom(F-R,Fun),
                        (F=xcomp;F=xadj;F=xmod), 
                       Pre\=A-B, Pred\=C-D /* Pred is the governor, Pre the dependent no the opposite: I want to know by what predicate it is governed Pred*/
                      ; 
                     (Dgr=..[Fun,Sem,Pred-In,Pre-Ind];
                      Dgr=..[Fun,Sem,Pred-Ind,Pre];
                      Dgr=..[Fun,Sem,Pred,Pre-Ind];
                      Dgr=..[Fun,Sem,Pred,Pre]), 
                      term_to_atom(F-R,Fun),
                        F=ccomp, Pre\=A-B, Pred\=C-D
                      ; 
                     (Dgr=..[Fun,Sem,Pred-Ind,Pre-In];
                      Dgr=..[Fun,Sem,Pred-Ind,Pre];
                      Dgr=..[Fun,Sem,Pred,Pre-Ind];
                      Dgr=..[Fun,Sem,Pred,Pre];
                      Dgr=..[Fun,Sem,Pre]), 
                      term_to_atom(F-R,Fun),
                        F=cmod, Pre\=A-B, Pred\=C-D)
                   ), 
                 Dep),
    sort(Dep,Depp),
    recover_cls_dep(Preds,Deps),
    !.

grep_attrs([], []):-!.
grep_attrs([Pred1-_|CLS], [Attr1-Attr2-Attr3-Attr4-Attr5-Attr6-Attr7|Attrs]):-
    (Pred1=there_be, Pred=be;Pred1=be, Pred=be;Pred1=have, Pred=have),
    findall(Pred1-T, (dgrs(N,Dgr),
                        Dgr=..[tense,T,_,Pred]),
                      Attr1),
    findall(Pred1-V, (dgrs(N,Dgr),
                        Dgr=..[voice,V,_,Pred]), 
                      Attr2),
    (findall(Pred1-Neg, (dgrs(N,Dgr),
                        (Dgr=..[neg,Pred1-_,Neg];Dgr=..[neg,Pred1,Neg])),
                      Attr3), Attr3\=[]
                          ;
     findall(Pred1-no, (dgrs(N,Dgr),
                         Dgr=..[Id,det,R,no],
                         term_to_atom(xcomp-prop,Fun),
                         dgrs(_,Dgr1),
                         Dgr1=..[Fun,Pred1-_,R-Id]
                         ),
                      Attr3), Attr3\=[]
                         ;
     findall(Pred1-Neg, (dgrs(N,Dgr),
                        (Dgr=..[Fun,Pred1-_,Neg];Dgr=..[Fun,Pred1,Neg]),
                        term_to_atom(adj-_,Fun),
                        checknegword(Neg)),
                      Attr3)
                      ),
    findall(Pred1-M, (dgrs(N,Dgr),
                        Dgr=..[modal,Pred,M]), 
                      Attr4),
    findall(Pred1-P, (dgrs(N,Dgr),
                        Dgr=..[progr,Pred,P]), 
                      Attr5),
    findall(Pred1-A, (dgrs(N,Dgr),
                        Dgr=..[aux,Pred,A]), 
                      Attr6),
    findall(Pred1-R, (dgrs(N,Dgr),
                       (Dgr=..[Fun,in,Pred,R];
                         Dgr=..[Fun,Pred,R];
                         Dgr=..[Fun,in,Pred-_,R-_];
                         Dgr=..[Fun,Pred-_,R-_]), 
                       term_to_atom(adj-_,Fun)),
                      Attr7),
    grep_attrs(CLS, Attrs),
    !.
grep_attrs([Pred-_|CLS], [Attr1-Attr2-Attr3-Attr4-Attr5-Attr6-Attr7|Attrs]):-
    findall(Pred-T, (dgrs(N,Dgr),
                        Dgr=..[tense,T,_,Pred]),
                      Attr1),
    findall(Pred-V, (dgrs(N,Dgr),
                        Dgr=..[voice,V,_,Pred]), 
                      Attr2),
    (findall(Pred-Neg, (dgrs(N,Dgr),
                        (Dgr=..[neg,Pred-_,Neg];Dgr=..[neg,Pred,Neg])),
                      Attr3), Attr3\=[]
                      ;
       findall(Pred-Neg, (dgrs(N,Dgr),
                        (Dgr=..[Fun,Pred-_,Neg];Dgr=..[Fun,Pred,Neg]),
                        term_to_atom(adj-_,Fun),
                        checknegword(Neg)),
                      Attr3)),
    findall(Pred-M, (dgrs(N,Dgr),
                        Dgr=..[modal,Pred,M]), 
                      Attr4),
    findall(Pred-P, (dgrs(N,Dgr),
                        Dgr=..[progr,Pred,P]), 
                      Attr5),
    findall(Pred-A, (dgrs(N,Dgr),
                        Dgr=..[aux,Pred,A]), 
                      Attr6),
    findall(Pred-R, (dgrs(N,Dgr),
                        (Dgr=..[Fun,in,Pred,R];
                         Dgr=..[Fun,Pred,R];
                         Dgr=..[Fun,in,Pred-_,R-_];
                         Dgr=..[Fun,Pred-_,R-_]), 
                       term_to_atom(adj-_,Fun)),
                      Attr7),
    grep_attrs(CLS, Attrs),
    !.
grep_attrs([Pred|CLS], [Attr1-Attr2-Attr3-Attr4-Attr5-Attr6-Attr7|Attrs]):-
    findall(Pred-T, (dgrs(N,Dgr),
                        Dgr=..[tense,T,_,Pred]),
                      Attr1),
    findall(Pred-V, (dgrs(N,Dgr),
                        Dgr=..[voice,V,_,Pred]), 
                      Attr2),
    findall(Pred-Neg, (dgrs(N,Dgr),
                        Dgr=..[neg,Pred,Neg]),
                      Attr3),
    findall(Pred-M, (dgrs(N,Dgr),
                        Dgr=..[modal,Pred,M]), 
                      Attr4),
    findall(Pred-P, (dgrs(N,Dgr),
                        Dgr=..[progr,Pred,P]), 
                      Attr5),
    findall(Pred-A, (dgrs(N,Dgr),
                        Dgr=..[aux,Pred,A]), 
                      Attr6),
    findall(Pred-R, (dgrs(N,Dgr),
                        (Dgr=..[Fun,in,Pred,R];
                         Dgr=..[Fun,Pred,R];
                         Dgr=..[Fun,in,Pred-_,R-_];
                         Dgr=..[Fun,Pred-_,R-_]), 
                       term_to_atom(adj-_,Fun)),
                      Attr7),
    grep_attrs(CLS, Attrs),
    !.
         
grep_lexs(Cl1,Cl,[], []):- Cl is Cl1 - 1,!.
grep_lexs(NoFr,Cl,[Pred|CLS], [Pred-Cat|Lexs]):-
     cat_gramm(Pred, CatGr, Cat, LArgsV),
     No is NoFr+1,
     grep_lexs(No,Cl,CLS, Lexs),
     !.
grep_lexs(No,Cl,[Pred|CLS], [Pred-Cat|Lexs]):-
     sy(Pred), Cat=riportivo;
     vem(Pred),Cat=emotivo;
     vcg(Pred),Cat=soggettivo;
     grep_lexs(No,Cl,CLS, Lexs),
    !.

collect_info([],[],[],[]):-!.
collect_info([],[],Dep,[]):-!.
% collect_info([],Lexs,[],[]):-!.
collect_info([],[L-C|Lexs],[D-F-R-Sem-P|Deps],[L-C-F-R-Sem-D-P|DSR]):-
    collect_info([],Lexs,Deps,DSR),
    !.
collect_info([],[L-C|Lexs],[[]|Deps],DSR):-
    collect_info([],Lexs,Deps,DSR),
    !.
collect_info([],[],[D-F-R-Sem-P|Deps],[P-F-R-Sem-D|DSR]):-
    collect_info([],[],Deps,DSR),
    !.
collect_info([A-T-S-M-Pr-X-Z|Attrs],[],[[P-F-R-Sem-D]|Deps],[A-T-S-M-Pr-X-Z-F-R-Sem-D-P|DSR]):-
    collect_info(Attrs,[],Deps,DSR),
    !.

/*
collect_info([[]-[]-[]-[]-[]-[]-[]|Attrs],Lexs,Deps,DSR):-
    collect_info(Attrs,Lexs,Deps,DSR),
    !.
*/
collect_info([A-T-S-M-Pr-X-Z|Attrs],[L-C|Lexs],[],[A-T-S-M-Pr-X-Z-C|DSR]):-
    collect_info(Attrs,Lexs,[],DSR),
    !.
collect_info([A-T-S-M-Pr-X-Z|Attrs],[],[[P-F-R-Sem-D]|Deps],[A-T-S-M-Pr-X-Z-F-R-Sem-D-P|DSR]):-
    collect_info(Attrs,[],Deps,DSR),
    !.
collect_info([A-T-S-M-Pr-X-Z|Attrs],[L-C|Lexs],[[P-F-R-Sem-D]|Deps],[A-T-S-M-Pr-X-Z-C-F-R-Sem-D-P|DSR]):-
    collect_info(Attrs,Lexs,Deps,DSR),
    !.
collect_info([A-T-S-M-Pr-X-Z|Attrs],[L-C|Lexs],[Dep|Deps],[A-T-S-M-Pr-X-Z-C-Dep|DSR]):-
    Dep\=[],
    collect_info(Attrs,Lexs,Deps,DSR),
    !.
collect_info([[]|Attrs],[L-C|Lexs],[[P-F-R-Sem-D]|Deps],[L-C-F-R-Sem-D-P|DSR]):-
    collect_info(Attrs,Lexs,Deps,DSR),
    !.
collect_info([A-T-S-M-Pr-X-Z|Attrs],[[]|Lexs],[[P-F-R-Sem-D]|Deps],[A-T-S-M-Pr-X-Z-F-R-Sem-D-P|DSR]):-
    collect_info(Attrs,Lexs,Deps,DSR),
    !.

collect_info([[]-[]-[]-[]-[]-[]-[]|Attrs],[L-C|Lexs],[[]|Deps],DSR):-
    collect_info(Attrs,Lexs,Deps,DSR),
    !.

collect_info([A-T-S-M-Pr-X-Z|Attrs],[L-C|Lexs],[[]|Deps],[A-T-S-M-Pr-X-Z-C|DSR]):-
    collect_info(Attrs,Lexs,Deps,DSR),
    !.
collect_info([A-T-S-M-Pr-X-Z|Attrs],[],[[P-F-R-Sem-D]|Deps],[A-T-S-M-Pr-X-Z-F-R-Sem-D-P|DSR]):-
    collect_info(Attrs,[],Deps,DSR),
    !.

sdisc_domain(nonfactive,Args,
   NoFr, _, _, _, _, _, _, subjective,SubjConsc)
   :-
   ssubject_of_consciousness(NoFr,SubjConsc).

sdisc_domain(_,Args,
   NoFr, _, _, _, _, exclamative, _, implicit_subjective,
   SubjConsc) 
   :-
   ssubject_of_consciousness(NoFr,SubjConsc).

sdisc_domain(_,Args,NoFr, _, _, modale, _, _, _, implicit_subjective,
   SubjConsc) 
   :-
   ssubject_of_consciousness(NoFr,SubjConsc).

sdisc_domain(_,Args,NoFr, _, _, _, cond, _, _, implicit_subjective,
   SubjConsc) 
   :-
   ssubject_of_consciousness(NoFr,SubjConsc).

sdisc_domain(_,Args,NoFr, _, _, CatSem, _, _, PrecDom, implicit_subjective,
   SubjConsc) 
   :-
   stative_cat(CatSem),
   subjective_boundary(PrecDom),
   ssubject_of_consciousness(NoFr,SubjConsc).

sdisc_domain(_,Args,
   NoFr, Pred, _,  SemCat, _, _, PrecDom, 
   pre_subjective(NoFr-Root, Index, Pred)+explicit_subjective,
   sc(NoFr-Root, Index, Pred))
   :-
   shas_refl_object(Pred,Args),
   SemCat=riportivo,
   Roles=[esperiente, experiencer, actor, tema_nonaff],
   on(Role, Roles),
   (PrecDom=pre_subjective(NoFr-Root, Index, Pred);
    PrecDom=objective).

sdisc_domain(_,Args,
   NoFr, Pred, _,  SemCat, _, _, PrecDom, 
   pre_subjective(NoFr-Root, Index, Pred)+explicit_subjective,
   sc(NoFr-Root, Index, Pred))
   :-
   shas_refl_object(Pred,Args),
   pre_subjective_cat(SemCat, Roles),
   on(Role, Roles),
   (PrecDom=pre_subjective(NoFr-Root, Index, Pred);
    PrecDom=objective).

sdisc_domain(_,Args,
   NoFr, Pred, _, SemCat, _, _, subjective, 
   subjective(NoFr-Root, Index, Pred), sc(NoFr-Root, Index, Pred)) 
   :-
   \+ shas_object(Pred,Args),
   pre_subjective_cat(SemCat, Roles),
   on(Role, Roles).

sdisc_domain(_,Args,
   NoFr, Root, _, SemCat, _, _, _, 
   pre_subjective(NoFr-Root, Index, Pred), nil) 
   :-
   \+ shas_object(Pred,Args),
   pre_subjective_cat(SemCat, Roles),
   on(Role, Roles).

sdisc_domain(_,Args,
   _, Root, FunRole, _, _, _, pre_subjective(Ident, Index, Pred), 
   explicit_subjective, sc(Ident, Index, Pred)) 
   :-
   explicit_subjective_fun_role(FunRole).

sdisc_domain(_,Args,
   NoFr, Pred, _, _, _, dir_speech, _, explicit_subjective,
   sc(NoFr-Root, Index, Pred)) 
   :-
   !.

sdisc_domain(_,Args,
   NoFr, Root, _, SemCat, _, _, _, explicit_subjective,
   SubjConsc) 
   :-
   SemCat = emotivo,
   ssubject_of_consciousness(NoFr,SubjConsc).

sdisc_domain(_,Args,
   NoFr, Pred, _, _, _, ask, _, explicit_subjective,
   sc(NoFr-Root, Index, Pred)) 
   :-
   SemCat = stato.

sdisc_domain(_,Args,_, _, _, SemCat, _, Performative, _, 
   objective,  nil) 
   :-
   SemCat \= stato,
   SemCat \= modale,
   Performative \= exclamative.

sdisc_domain(_,Args,_, _, _, SemCat, _, Performative, _, 
   objective,  nil) 
   :- !.
  

shas_object(Verb,Args) :-
   on(Verb-Alls,Args),
   (on(Ind-Pred-Role-Dep-Id,Alls);on(Ind-Pred-Role-Id,Alls)),
   r2(Role).

shas_refl_object(Verb,Args) :-
   on(Verb-Alls,Args),
   (on(Ind-Pred-goal-Dep-Id,Alls);on(Ind-Pred-goal-Id,Alls)),
   !.

ssubject_of_consciousness(NoFr, nil) :-!.
ssubject_of_consciousness(NoFr, sc(INoFr, Index, Pred)) :-
   PNoFr is NoFr - 1,
   sinfo(PNoFr, _, _, _, _, _, _, _, _, _, DiscDom, sc(INoFr, Index, Pred)),
   nonvar(Pred),
   !.

sdisc_move(
   NoCl, Topics, TempRel,PrDMove,
   DRel,PDRel,PrecState, State,  PrecLev, 
   Lev, Move, Attach_Cl)
   :-
   check_disc_rel(DRel, PDRel, TempRel, PrDMove,  Move),
   sdisc_level(Move, PrDMove, PrecLev, Topics, NoCl, Lev, Attach_Cl).

sdisc_move(
   NoCl, Topics, _,PrecDisMove,_,_,PrecState, State, 
   PrecLev, Lev, DiscMove, Attach_Cl)
   :-
   d_move(PrecStates, States, DiscMove),
   on(PrecState, PrecStates),
   on(State, States),
   !,
   sdisc_level(DiscMove, PrecDisMove, PrecLev, Topics, NoCl, Lev, Attach_Cl).


sdisc_level(down, _, PrecLev, Topics, 1, 1, new(1-1)).

sdisc_level(level, bottom, PrecLev, _, Cl, Lev, down(PrecNoCl-Cl)) :-
   sd_structure(Sym,
      PrecNoCl, PrecTopics, _, _, _, _, _, _),
   assign_level(Lev,PrecLev).

sdisc_level(down, _, PrecLev, _, Cl, Lev, down(PrecNoCl-Cl)) :-
   sinfo(
      PrecNoFr, _/Temp, _, _, _, _, _, _, _, _, _, _),
      nonvar(Temp),Temp=temp_seq,
   sd_structure(Sym,
      PrecNoCl, PrecTopics, _, _, _, _, _, _),
   assign_level(Lev,PrecLev).

sdisc_level(level, _, PrecLev, Topics, NoCl, Lev, Attach_Cl) :-
   smove_to_topic(Topics, NoCl, PrecLev, Lev, Attach_Cl),!.

sdisc_level(up, _, PrecLev, Topics, NoCl, Lev, Attach_Cl) :-
   PrecNoCl is NoCl - 1,
   0<PrecNoCl,
   smove_to_latest_topic(Topics, PrecNoCl, PrecLev, Lev, Attach_Cl).

sdisc_level(down, level, PrecLev, Topics, NoCl, Lev, Attach_Cl) :-
   smove_to_topic(Topics, NoCl, PrecLev, Lev, Attach_Cl),!.

sdisc_level(up, _, PrecLev, Topics, NoCl, Lev, Attach_Cl) :-
   PrecNoCl is NoCl - 1,
   0<PrecNoCl,
   Attach_Cl=to(1-NoCl), Lev=1,
   !.

sdisc_level(_, _, PrecLev, _, Cl, Lev, down(PrecNoCl-Cl)) :-
   sd_structure(Sym,
      PrecNoCl, PrecTopics, _, _, _, _, _, _),
   assign_level(Lev,PrecLev).


% move_to_latest_topic(_, 1, _, 1,to(1-1)).

smove_to_latest_topic(Topics, Cl, _, NewLev, At) :-
     (sd_structure(Sym,
      NoCl, PrecTopics, _, _, _, _, _, Lev),
      fetch_topics(NoCl, Tops),
      smatch_topics(Topics, Tops, _, Func), 
       (var(Func), At=from(NoCl-Cl); nonvar(Func), At=to(NoCl-Cl)),
      NewLev=Lev
     ;
      smove_up(Topics, Cl, _, NewLev, At)
     ),!.


smove_up(Topics, NoCl, _, Lev, At) :-
   0<NoCl,
   PrecNoCl is NoCl - 1,
   At=to(A-B),
   smove_to_latest_topic(Topics, PrecNoCl, _, Lev, At).

smove_to_topic(Topics, NoCl, PrecLev, Lev, Struttura) :-
   (PrecNoCl is NoCl - 1,
    sd_structure(Sym,
      PrecNoCl, PrecTopics, _, _, _, _, _, Lev),
      fetch_topics(PrecNoCl, Tops),
    smatch_main_topics(Topics, Tops), 
      Struttura = level(PrecNoCl-NoCl),!
    ;
   NewNoCl is NoCl - 1,
   smove_to_latest_topic(Topics, NewNoCl, PrecLev, Lev, Struttura),!
    ;
   PrecNoCl is NoCl - 1,
   sd_structure(Sym,
      PrecNoCl, PrecTopics, _, _, _, _, _, Lev),
      fetch_topics(PrecNoCl, Tops),
     smatch_secondary_topic(Topics, Tops, NoFr),   
     Struttura = level(PrecNoCl-NoCl),!
   ).

fetch_topics(NoFr, Tops):-
     findall(Type-Main-Ind-Fm, (
                 topic(NoFr, Type, Ind),
                 topps(Type, NoFr, Main, Ind, Fm)), Tops),
     !.

smatch_main_topics(Topics, PrecTopics):-
      findall(Pro-Ante-Ind, risolto(NoFr, Ind, Pro, Ante), Rs),
      (on(poten-Ind-Pred-_, Topics), (
                         on(Pred-_-Ind, Rs);on(_-Pred-Ind, Rs))
        ;
       on(main-Ind-Pred-_, Topics), (
                         on(Pred-_-Ind, Rs);on(_-Pred-Ind, Rs))
        ;
       on(second-Ind-Pred-_, Topics), (
                         on(Pred-_-Ind, Rs);on(_-Pred-Ind, Rs))),
      !.

smatch_topics(Topics, PrecTopics, _, to):-
   on(poten-Ind-Pred-_, Topics),
   on(main-Ind-Pred-_, PrecTopics),
    !.

smatch_secondary_topic(Topics, PrecTopics, _):-
   on(second-Ind-Pred-_, Topics),
   on(main-Ind-Pred-_, PrecTopics),
    !.

assertdstructs(Symb,[]):-!.
assertdstructs(Symb,[DiscStr|DS]):-
   DiscStr=..[sd_structure,Symb,
      NoFr, DiscDom, DiscRel, 
      Tense, Verb, Relev, DiscMove, Attach_Cl],
   asserta(DiscStr),
   assertdstructs(Symb,DS),
     !.
assertdstructs(Symb,[DiscStr|DS]):-
   DiscStr=..[sd_structure,Sym,
      NoFr, DiscDom, DiscRel, 
      Tense, Verb, Relev, DiscMove, Attach_Cl],
   asserta(DiscStr),
   assertdstructs(Symb,DS),
     !.

process_infons([],[]):-!.
process_infons([Infon|Infons],[DiscStr|DS]):-
   Infon=..[sinfo, NoFr, FunRole, 
   View, Intens, Change, Relev,
   Aspect, Verb, Tense, DiscRel, DiscDom, SubjConsc],
    fetch_topics(NoFr, Topics),
   stato(_, State),
   sdisc_move(NoFr, Topics, Tense, PrecDiscMove,
      DiscRel, PrecDiscRel, PrecState, State,  PrecDiscLev,
      DiscLev, DiscMove, Attach_Cl),
   DiscStr=..[sd_structure,Sym,
      NoFr, DiscDom, DiscRel, 
      Tense, Verb, Relev, DiscMove, Attach_Cl],
%   asserta(DiscStr),
   process_infons(Infons,DS),
     !.

get_mods_refs([], []):-!.
get_mods_refs([H|Refs], [Snx-Testa-Mod|Mods]):-
     H=ref_ex(Snx, Testa, Tab, [Pers, Gen, Num], Cat, Mod, F/R),
     get_mods_refs(Refs, Mods),
     !.
get_mods_refs([H|Refs], Mods):-
    get_mods_refs(Refs, Mods),
     !.

collects_mains_secs(N,[],[],[]):-!.
collects_mains_secs(N,[[]],[],[]):-!.
collects_mains_secs(N,[_-[]|Clauses],Tops,Mains):-
    collects_mains_secs(N,Clauses,Tops,Mains),
    !.

collects_mains_secs(N,[_-Main|Clauses],[NTops|Tops],[NewMain|Mains]):-
   explore_noun_args(Main, Clause, NewCl, Compl),
   (NewCl=[],NewMain=[]
    ;
    NewCl\=[],
    pbinding(N,NewCl,Args,Prons,NTops,RefList,Pred),
    NewMain=[N, Pred-Args,Prons,NTops,RefList]),
   N1 is N + 1,
   (Compl=[], Cls=Clauses;
     Compl\=[],
     append(Compl, Clauses, Cls)),
    collects_mains_secs(N1,Cls,Tops,Mains),
    !.

collects_mains_secs(N,[Main|Clauses],[NTops|Tops],[NewMain|Mains]):-
   appiattisci(Main,Mai),
   list(Mai),
   explore_noun_args(Mai, Clause, NewCl, Compl),
   (NewCl=[],NewMain=[]
    ;
    NewCl\=[],
    pbinding(N,NewCl,Args,Prons,NTops,RefList,Pred),
    NewMain=[N, Pred-Args,Prons,NTops,RefList]),
   N1 is N + 1,
   (Compl=[], Cls=Clauses;
     Compl\=[],
     append(Compl, Clauses, Cls)),
   collects_mains_secs(N1,Cls,Tops,Mains),
    !.
collects_mains_secs(N,[Main|Clauses],[NTops],[NewMain]):-
   \+list(Main),
   pbinding(N,[Main|Clauses],Args,Prons,NTops,RefList,Pred),
   NewMain=[N, Pred-Args,Prons,NTops,RefList],
    !.

explore_noun_args(Main, Clause, NewCl, Compl):-
     take_main(Main,Clause),
     Clause=[Neg, Pred-Args, Mods,  Refs, OutAdjs],
     remove(_-[Pre-Ars-Pol, Reff, Ajj], Refs, RestRef),
     Ajj=[],
     NewCl=[Neg, Pred-Args, Mods,  RestRef, OutAdjs],
     Compl=[Pol, Pre-Ars, Reff, Ajj],
     !.
explore_noun_args(Main, Clause, Clause, Compl):-
     take_mains(Main,Clause,Compl),
     Clause=[Neg, Pred-Args, Mods,  Refs, OutAdjs],
     Compl\=[],!.
explore_noun_args(Main, Clause, Main, []):-!.


select_pronominals(Pred,Args,[], [],[]):-!.
select_pronominals(Pred,Args,NTops, NewProns,Noms):-
   selectpronominals(NTops, Prons,Noms),
   evaluate_it(Pred,Args,NTops, Prons,NewProns),
   !.

detect_sem_adj(Head):-
    pred_a(Head,Cats,Args),
    on(Cat,Cats),
    (Cat=tempo;Cat=soggettivo;Cat=valutativo;Cat=modal),
     !.

details_cat(CatV):-
   atomic(CatV),
   CatV\=riportivo,
   CatV\=risultato,
   CatV\=cambiamento,
   CatV\='camb-att',
   CatV\=attivita,
   CatV\=percettivo,
   CatV\=achiev,
   CatV\=perloc,
   CatV\=ist_soc,
   !.

details_cat(CatV):-
   list(CatV),
   on(Cat,CatV),
   CatV\=riportivo,
   CatV\=risultato,
   CatV\=cambiamento,
   CatV\='camb-att',
   CatV\=attivita,
   CatV\=percettivo,
   CatV\=achiev,
   CatV\=perloc,
   CatV\=ist_soc,
   !.
% stato, presuppositivo, subjec, emotivo, soggettivo, psych, modale, affettivo, esistenza

selectpronominals([], [],[]):-!.
selectpronominals([W-0-F1/I1|NTops], [W-0-F1/I1|Prons],PNoms):-
   selectpronominals(NTops, Prons,Noms),
   append(Noms,[W-0-F1/I1],PNoms),
   !.
selectpronominals([W-T-F1/I1|NTops], Prons, [W-T-F1/I1|Noms]):-
   selectpronominals(NTops, Prons,Noms),
   !.

resolve_prons(Graded,Prons,Topics,L,Costs):-
   resolveallprons(Graded,Disj,Prons,Topics,Resolved),
   length(Prons,L),
   (L=<2,
    write_all_resolved(1,Resolved,Costs)
    ;
    2<L,
    (Pron=he;Pron=she;Pron=her;Pron=him;Pron=his),
     elimina(SelectProns,Resolved,Rest),
     on(I-[Pron]-Ante-Feat,SelectProns),
     append([SelectProns],Rest,NResolved),
    write_all_resolved(1,NResolved,Costs)
    ;
    write_all_resolved(1,Resolved,Costs)
    ),
   !.

resolve_pronss(Prons,Topics,L,Costs):-
   resolveallpronss(Disj,Prons,Topics,Resolved),
   length(Prons,L),
   (L=<2,
    write_all_resolved(1,Resolved,Costs)
    ;
    2<L,
    (Pron=he;Pron=she;Pron=her;Pron=him;Pron=his),
     elimina(SelectProns,Resolved,Rest),
     on(I-[Pron]-Ante-Feat,SelectProns),
     append([SelectProns],Rest,NResolved),
    write_all_resolved(1,NResolved,Costs)
    ;
    write_all_resolved(1,Resolved,Costs)
    ),
   !.

write_all_resolved(N,[],Costs):-!.
write_all_resolved(N,[[]],Costs):-!.
write_all_resolved(4,R,Costs):-!.
write_all_resolved(N,[Resol|Resolved],Costs):-
   write_allresolved(N,Resol,Costs),
   N1 is N + 1,
   write_all_resolved(N1,Resolved,Costs),
   !.
write_all_resolved(N,R,Costs):-!.

write_allresolved(N,[I-Pron-Ante-Feat],Costs):-
   write_anaphors(Ante, Pron, I,Costs),
   write_assert_main_sec(N,I-Ante-Feat),
   !.

write_allresolved(N,[I-Pron-Ante-Feat|Resolved],Costs):-
   write_anaphors(Ante, Pron, I,Costs),
   write_assert_main_sec(N,I-Ante-Feat),
   !.

write_assert_main_sec(1,Ind-Main-Fm):-
     abolish(main/2),
     assert(main(Main, Fm)),
     write_mtopic_onfile(Win,Main),
     frase_corrente(NoFr, File),
     check_assert_top_ind(Main, NoFr, main, Ind, Fm),
%     assertz(topic(NoFr, main, Ind)),
     write_nominal_anaphora(Main,main,Ind),
%     assert_inds_if(main, NoFr, Main, Ind, Fm),
   !.

write_assert_main_sec(2,Ind1-Sec-Fm):-
     abolish(second/2),
     assert(second(Sec, Fs)),
     write_stopic_onfile(Win,Sec),
     frase_corrente(NoFr, File),
     check_assert_top_ind(Sec, NoFr, second, Ind1, Fm),
%     assertz(topic(NoFr, second, Ind1)),
     write_nominal_anaphora(Sec,second,Ind1),
%     assert_inds_if(second, NoFr, Sec, Ind1, Fm),
   !.
write_assert_main_sec(N,Ind1-Sec-Fm):-!.

checkdisj([],W1):-!.
checkdisj(Disj,W1):-
     Disj\=[],
     \+ nogen_member(Ind-W-W1-F1,Disj),
     !.

/* Pronoun resolution is conditioned by Disjointness: in case pronouns to resolve are two or more (very unusual), the second must have an antecedent which is disjoint from the first. Resolution is determined by feature matching, both morphological and semantic ones. In case of failure, we activate an exceptional matching slot for singular candidates and plural pronouns. This is done by verifying whether the candidate entity belong to the class of collective nouns, from WordNet. */
/* In the current version of the algorithm, we priviledge current topics vs.
previous topics. However, topic persistency should decide */


resolveallprons(Graded,Disj,[],Topics,[]):-!.
resolveallprons(Graded,Disj,[W-0-F|Prons],Topics,[NewResol|Resolved]):-
   resolveprons(Disj,W-0-F,Topics,Resol),
   (Resol=[],
    rescue_plur(Disj,W-0-F,Topics,NewResol,Resol),
    NewResol\=[],
    Res=NewResol
    ; 
    Resol\=[], 
    weight_best_antecedent(Graded,Topics,W,Resol,NewResol),
    NewResol=[Res|_]
    ),
   resolveallprons(Graded,[Res],Prons,Topics,Resolved),
   !.
resolveallprons(Graded,Disj,[W-0-F|Prons],Topics,[Resol|Resolved]):-
   topresolveprons(Graded,Disj,W-0-F,Topics,Resol),
    Resol\=[], 
    Resol=[Res|_],
   resolveallprons(Graded,[Res],Prons,Topics,Resolved),
   !.
resolveallprons(Graded,Disj,[W-0-F|Prons],Topics,Resolved):-
   topresolveprons(Graded,Disj,W-0-F,Topics,Resol),
    Resol=[], 
   resolveallprons(Graded,[Res],Prons,Topics,Resolved),
   !.


resolveallpronss(Disj,[],Topics,[]):-!.
resolveallpronss(Disj,[W-0-F|Prons],Topics,[NewResol|Resolved]):-
   resolvepronss(Disj,W-0-F,Topics,Resol),
   (Resol=[],
    rescue_plur(Disj,W-0-F,Topics,NewResol,Resol),
    NewResol\=[],
    Res=NewResol
    ; 
    Resol\=[], 
    weight_best_antecedent([],Topics,W,Resol,NewResol),
    NewResol=[Res|_]
    ),
   resolveallpronss([Res],Prons,Topics,Resolved),
   !.


resolvepronss(Disj,W-0-F,[],[]):-!.
resolvepronss(Disj,W-0-F,[W1-Ca-F1/Ind|Topics],[Ind-W-W1-F1|Resolved]):-
   match_feats_cats(F, F1),
   checkdisj(Disj,W1),
   resolvepronss(Disj,W-0-F,Topics,Resolved),
   !.
resolvepronss(Disj,W-0-F,[W1-Ca-F1/Ind|Topics],[Ind-W-W1-F1|Resolved]):-
     F=[Per,Ge,Nu,Cat],
     F1=[Pe,Gen,N,Tratti|_],
      N=sing, Nu=plur,
     (generic_head1(W1,CatSem);recover_descs(W1,Names), on(and,Names)),
     F2=[Per,Ge,plur,Cat],
      match_feats_cats(F, F2),
   checkdisj(Disj,W1),
   resolvepronss(Disj,W-0-F,Topics,Resolved),
   !.
resolvepronss(Disj,W-0-F,[W1-npr-F1/Ind|Topics],[Ind-W-W1-F1|Resolved]):-
   (match_feats_cats(F, F1); reverse(F1,[Role|Rev]),pr1(Role,Sco),Sco<5),
   checkdisj(Disj,W1),
   resolvepronss(Disj,W-0-F,Topics,Resolved),
   !.
resolvepronss(Disj,W-0-F,[W1-Ind-F1/_|Topics],Resolved):-
   resolvepronss(Disj,W-0-F,Topics,Resolved),
   !.
   
% F-Ind-Top

weight_best_antecedent(Graded,Topics,[Pron],Resolved,NewResol):-
    Pron=it,
    findall(Score-W1, (on(Ind-W-W1-F1, Resolved), 
            (F1=[P,G,N,Cats,Roles],
             applyweights(Cats,Role,Score)
             ;
             atomic(F1), Score=5)), 
        Weighted),
        appiattisci(Weighted,Weights),
    align_candidates(Topics,Weights,Pron, Resolved, NewResol),
   !.
weight_best_antecedent(Graded,Topics,[Pron],Resolved,NewResol):-
    Pron\=it,
    Graded=[F-Id-W2|_],
    findall(Score-W1, (on(Ind-W-W1-F1, Resolved), 
          (F1=[P,G,N,Cats,Role],
        applyweights(Cats,Role,Scor),
        (W1=W2, Score is Scor - 10; Score=Scor)
        ;
        atomic(F1),
        (W1=W2, Score is Scor - 10; Score=10)) 
        ), 
        Weighted),
        appiattisci(Weighted,Weights),
    align_candidates(Topics,Weights,Pron, Resolved, NewResol),
   !.
weight_best_antecedent(Graded,Topics,[Pron],Resolved,Resolved):-!.

applyweights(Cats,Role,Score):-
      nogen_member(oggetto,Cats),Score=10; 
      nogen_member(luogo,Cats),Score=10; 
      nogen_member(object,Cats),Score=10; 
      nogen_member(place,Cats),Score=10; 
      nogen_member(umano,Cats),Score=0; 
      nonvar(Role),
       punteggio_ruolo1(Role,Score),
      !.
applyweights([],Role,Score):-
       nonvar(Role),
       punteggio_ruolo1(Role,Score),
      !.
applyweights(Cats,Role,100):-!.

topresolveprons(Graded,Disj,W-0-F,[],[]):-!.
topresolveprons(Graded,Disj,W-0-F,[Score-W1-Ind-F1/_|Topics],[Ind-W-W2-F1|Resolved]):-
   on(Sc-Ind-W2,Graded),
   matchmainsec(W1,W2),
   F1=[A,B,C,D,R], 
   (D=nil;
    D\=nil,match_feats_cats(F, F1)),
   checkdisj(Disj,W1),
   topresolveprons(Graded,Disj,W-0-F,Topics,Resolved),
   !.
topresolveprons(Graded,Disj,W-0-F,[Score-W1-Ind-F1|Topics],[Ind-W-W2-F1|Resolved]):-
   on(Sc-Ind-W2,Graded),
   matchmainsec(W1,W2),
   F1=[A,B,C,D,R], 
   (D=nil;
    D\=nil,match_feats_cats(F, F1)),
   checkdisj(Disj,W1),
   topresolveprons(Graded,Disj,W-0-F,Topics,Resolved),
   !.
topresolveprons(Graded,Disj,W-0-F,[Score-W1-Ind-F1|Topics],Resolved):-
   topresolveprons(Graded,Disj,W-0-F,Topics,Resolved),
   !.


resolveprons(Disj,W-0-F,[],[]):-!.
resolveprons(Disj,W-0-F,[Score-W1-Ind-F1/_|Topics],[Ind-W-W1-F1|Resolved]):-
   match_feats_cats(F, F1),
   checkdisj(Disj,W1),
   resolveprons(Disj,W-0-F,Topics,Resolved),
   !.
resolveprons(Disj,W-0-F,[Score-W1-Ind-F1/_|Topics],[Ind-W-W1-F1|Resolved]):-
     F=[Per,Ge,Nu,Cat],
     F1=[Pe,Gen,N,Tratti|_],
      N=sing, Nu=plur,
     (generic_head1(W1,CatSem);recover_descs(W1,Names), on(and,Names)),
     F2=[Per,Ge,plur,Cat],
      match_feats_cats(F, F2),
   checkdisj(Disj,W1),
   resolveprons(Disj,W-0-F,Topics,Resolved),
   !.
resolveprons(Disj,W-0-F,[Score-W1-Ind-F1|Topics],[Ind-W-W1-F1|Resolved]):-
   match_feats_cats(F, F1),
   checkdisj(Disj,W1),
   resolveprons(Disj,W-0-F,Topics,Resolved),
   !.
resolveprons(Disj,W-0-F,[Score-W1-Ind-F1|Topics],[Ind-W-W1-F1|Resolved]):-
     F=[Per,Ge,Nu,Cat],
     F1=[Pe,Gen,N,Tratti|_],
      N=sing, Nu=plur,
     (generic_head1(W1,CatSem);recover_descs(W1,Names), on(and,Names)),
     F2=[Per,Ge,plur,Cat],
      match_feats_cats(F, F2),
   checkdisj(Disj,W1),
   resolveprons(Disj,W-0-F,Topics,Resolved),
    !.
resolveprons(Disj,W-0-F,[Score-W1-npr-F1/_|Topics],[Ind-W-W1-F1|Resolved]):-
   (match_feats_cats(F, F1); reverse(F1,[Role|Rev]),pr1(Role,Sco),Sco<5),
   checkdisj(Disj,W1),
   resolveprons(Disj,W-0-F,Topics,Resolved),
   !.
resolveprons(Disj,W-0-F,[Score-W1-npr-F1|Topics],[Ind-W-W1-F1|Resolved]):-
   (match_feats_cats(F, F1); reverse(F1,[Role|Rev]),pr1(Role,Sco),Sco<5),
   checkdisj(Disj,W1),
   resolveprons(Disj,W-0-F,Topics,Resolved),
   !.
resolveprons(Disj,W-0-F,[Score-W1-Ind-F1|Topics],Resolved):-
   resolveprons(Disj,W-0-F,Topics,Resolved),
   !.

find_Mantes(Cl,Pron,Args, [], [],Pron):-!.
find_Mantes(Cl,W-0-F/I, [P-Pred-Args|OldArgs],RefList, [],Pros):-
    Cl=1,
    reverse(F,FRev),
    FRev=[Fun/_|_], Fun=sogg,
    Args=[Role/I|_],
    (atomic(W),
      (filter_pers(W, Fea, L);filter_pers(_, Fea, W))
      ;
      is_list(W), W=[W1],
      (filter_pers(W1, Fea, L);filter_pers(_, Fea, W1))
      ),
    !.
find_Mantes(Cl,W-0-F/I, [P-Pred-Args|OldArgs],RefList, [],Pros):-
    Cl=1,
    W=[Pron],
     Ref=..[ref_ex,Ind,Pron,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     Fu=subj,
    Args=[Role/I|_],
    (atomic(W),
      (filter_pers(W, Fea, L);filter_pers(_, Fea, W))
      ;
      is_list(W), W=[W1],
      (filter_pers(W1, Fea, L);filter_pers(_, Fea, W1))
      ),
    !.
find_Mantes(Cl,W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Score-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     F1=[Per,Ge,Nu,Cat],
     I\=Ind,
     checkreftab(Tab,Ww,W1),
     check_obviation_mains(I,Ind,OldArgs,P,Pred),
     match_feats_cats(F, F1),
     disjoint_chain(W,W1,Ind),
    find_Mantes(Cl,W-0-F/I,OldArgs,RefList, Antes,Pros),
    !.
find_Mantes(Cl,W-0-F/I, OldArgs, [Ref/Score-P|RefList], [Score-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     F1=[Per,Ge,Nu,Cat],
     I\=Ind,
     checkreftab(Tab,Ww,W1),
     check_obviation_mains(I,Ind,OldArgs,P,Pred),
     get_T(Tab,T),
     match_feats_cats(F, T), Cat=[],
     disjoint_chain(W,W1,Ind),
   find_Mantes(Cl,W-0-F/I, OldArgs,RefList, Antes,Pros),
    !.
find_Mantes(Cl,W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Score-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     F1=[Per,Ge,Nu,Cat],
     I\=Ind,
     checkreftab(Tab,Ww,W1),
     check_obviation_mains(I,Ind,OldArgs,P,Pred),
     F=[Pe,Gen,N,Tratti|_],
      Nu=sing, N=plur,
     (generic_head1(W1,CatSem);recover_descs(W1,Names), on(and,Names)),
     F2=[Per,Ge,plur,Cat],
      match_feats_cats(F, F2),
     disjoint_chain(W,W1,Ind),
    find_Mantes(Cl,W-0-F/I, OldArgs,RefList, Antes,Pros),
    !.
find_Mantes(Cl,W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Score-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Role],
     F1=[Per,Ge,Nu,Cat],
     I\=Ind,
     checkreftab(Tab,Ww,W1),
     check_obviation_mains(I,Ind,OldArgs,P,Pred),
     Cat=nil,
     (pbrol(Role,Score,_,Feats);Feats=[any]),
      F2=[Per,Ge,Nu,Feats], 
     match_feats_cats(F, F2),
     disjoint_chain(W,W1,Ind),
    find_Mantes(Cl,W-0-F/I, OldArgs,RefList, Antes,Pros),
    !.

find_Mantes(Cl,W-0-F/Pred, OldArgs,[Ref/Score-P|RefList], [Ind-Ww-W1-Pred],Pros):-
   (atomic(W),Ww=W;list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
    F1=[Per,Ge,Nu,Cat],
    Ww\=W1,
     checkreftab(Tab,Ww,W1),
    filter_pos_ag(Ww,Fea,L),
    W1\=own,
    on(pred=Pro,F), pred_p(pro, Pro, nil,Cats, []),
    append(F,Cats,FCats),
    (match_feats_cats(FCats, F1);
    check_poss_feats(Ww,Fea,F1)),
    on(I-Pred-Args,OldArgs),
     Fu/Ro\=xcomp/prop,
    check_disj(W-F-I, W1-Ind),
    poss_in_subj(Pred,W,I,Ind),
    !.

find_Mantes(Cl,W-0-F/Pred, OldArgs,[Ref/Score-P|RefList], [Ind-Ww-W1-Pred],Pros):-
   (atomic(W),Ww=W;list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
    F1=[Per,Ge,Nu,Cat],
    Ww\=W1,
     checkreftab(Tab,Ww,W1),
    filter_pos_ag(Ww,Fea,L),
    W1\=own,
    on(pred=Pro,F), pred_p(pro, Pro, nil,Cats, []),
    append(F,Cats,FCats),
    on(num=plur,F), Nu=sing,
    (generic_head1(W1,CatSem);recover_descs(W1,Names), on(and,Names)),
     F2=[Per,Ge,plur,Cat],
    (match_feats_cats(FCats, F2);
    check_poss_feats(Ww,Fea,F2)),
    on(I-Pred-Args,OldArgs),
     Fu/Ro\=xcomp/prop,
    check_disj(W-F-I, W1-Ind),
    poss_in_subj(Pred,W1,I,Ind),
    !.

find_Mantes(Cl,W-0-F/Id, OldArgs,[Ref/Score-P|RefList], [Ind-Ww-W1-Pred],Pros):-
   (atomic(W),Ww=W;list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
    F1=[Per,Ge,Nu,Cat],
    Ww\=W1,
     checkreftab(Tab,Ww,W1),
   filter_pos_ag(Ww,Fea,L),
    W1\=own,
    on(Cats,F), list(Cats),
    on(umano,Cats),
    (match_feats_cats(Cats, F1);
      check_poss_feats(Ww,Fea,F1)),
    on(I-Pred-Args,OldArgs),
     Fu/Ro\=xcomp/prop,
    check_disj(W-F-I, W1-Ind),
    poss_in_subj(Pred,W1,I,Ind),
    !.

find_Mantes(Cl,W-0-F/Pred, OldArgs,[Ref/Score-P|RefList], [Score-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
    F1=[Per,Ge,Nu,Cat],
    Ww\=W1,
     checkreftab(Tab,Ww,W1),
    \+ filter_pos_ag(Ww,Fea,L),
    check_argumentality_pron(F),
    match_feats_cats(F, F1),
    on(I-Pred-Args,OldArgs),
     Fu/Ro\=xcomp/prop,
    check_disj(W-F-I, W1-Ind),
    poss_in_subj(Pred,W1,I,Ind),
    find_Mantes(Cl,W-0-F/I,OldArgs,RefList, Antes,Pros),
    !.

find_Mantes(Cl,Prons, OldArgs,[Ref/S-I1|RefList], Ante,Pros):-
   find_Mantes(Cl,Prons, OldArgs, RefList, Ante,Pros),
    !.
find_Mantes(Cl,Prons, OldArgs,RefList, Ante,Prons).

checkreftab(Tab,W,W1):-
    nogen_member(+ref,Tab),
    checkpanafs(W1),
    checkdirectspeech(W),
    !.

checkpanafs(W):-
    \+ p_anaf(W, Feats, Head), 
    !.

checkdirectspeech(W):-
    (W=he;W=she;W=they),
   findall(Dep,(dgrs(N,Dgrs),
               Dgrs=..[Fun,Pred,Dep],
               term_to_atom(Fu-Ro,Fun),
               Fu=subj,
               (Dep=i-_;Dep=we-_)),Deps),
    Deps=[],
   !.
checkdirectspeech(W):-
    W\=he,W\=she,W\=they,
   !.
   
collectpronstops([],Tops,Tops):-!.
collectpronstops([C-[]|Prons],Tops,NTops):-
   collectpronstops(Prons,Tops,NTops),
    !.
collectpronstops([[]|Prons],Tops,NTops):-
   collectpronstops(Prons,Tops,NTops),
    !.
collectpronstops([C-[Pron-0-Feat/Ind]|Prons],Tops,NTops):-
   Ext=Pron-0-Feat/Ind,
   remove(Ext,Tops,Pros),
   collectpronstops(Prons,Pros,NTops),
    !.
collectpronstops([Pron-0-Feat/Ind|Prons],Tops,NTops):-
   Ext=Pron-0-Feat/Ind,
   remove(Ext,Tops,Pros),
   collectpronstops(Prons,Pros,NTops),
    !.
collectpronstops([Pron-0-Feat/Ind|Prons],Tops,NTops):-
   Ext=Pron-0-Fe/_,
   remove(Ext,Tops,Pros),
   collectpronstops(Prons,Pros,NTops),
    !.
collectpronstops([C-[Pron-0-Feat/Ind|Prons]|All],Tops,NTops):-
   Ext=Pron-0-Feat/Ind,
   remove(Ext,Tops,Pros),
   append(Prons,All,NProns),
   collectpronstops(NProns,Pros,NTops),
    !.
collectpronstops([C-[Pron-0-Feat/Ind|Prons]|All],Tops,NTops):-
   Ext=Pron-0-Fe/_,
   remove(Ext,Tops,Pros),
   append(Prons,All,NProns),
   collectpronstops(NProns,Pros,NTops),
    !.
collectpronstops([C-[Pron-0-Feat/Ind|Prons]|All],Tops,NTops):-
   Ext=Pron-F-_/Id,
   remove(Ext,Tops,Pros),
   append(Prons,All,NProns),
   collectpronstops(NProns,Pros,NTops),
    !.
collectpronstops(Prons,Tops,Tops).

passert_externals(Ante,Pred,[],[]):-!.
passert_externals(Antes,[Pred-Pron-Ind|Preds],Prons,Exts):-
   (list(Pron),Pron=[Pro];atomic(Pron),Pro=Pron),
   appiattisci(Antes,Antess),
   remove(Ant,Antess,Ante),
   Ant=Ind-Pro-A-Pred,
   Ext=Pron-0-Feat/Ind,
   remove(Ext,Prons,Pros),
   passert_externals(Ante,Preds,Pros,Exts),
   !.

passert_externals(Antes,[Pred-Pron-Ind|Preds],Prons,Exts):-
   (list(Pron),Pron=[Pro];atomic(Pron),Pro=Pron),
   appiattisci(Antes,Antess),
   remove(Ant,Antess,Ante),
   Ant= _-Ind-A-Pred,
   Ext=Pron-0-Feat/Ind,
   remove(Ext,Prons,Pros),
   passert_externals(Ante,Preds,Pros,Exts),
   !.

passert_externals(Ante,[Pred-Pron-Ind|Preds],Prons,Exts):-
   appiattisci(Prons,Pros),
   passertext(Pred,Pron-Ind,Pros),
   passert_externals(Ante,Preds,Prons,Exts),
   !.
passert_externals(Ante,Preds,Prons,Prons).

passertext(Pred,Pro,[]):-!.
passertext(Pred,Pron-I,[W-0-F/I|Prons]):-
    Pron=W,
   ext(Pred,W),
   passertext(Pred,Pron,Prons),
   !.
passertext(Pred,Pron-I,[W-0-F/I|Prons]):-
    Pron=W,
   assert(ext(Pred,W)),
   passertext(Pred,Pron,Prons),
   !.
passertext(Pred,Pron,[W-0-F/I|Prons]):-
   passertext(Pred,Pron,Prons),
   !.

assert_externals(Pred,[]):-!.
assert_externals(Pred,Prons):-
   appiattisci(Prons,Pros),
   assertext(Pred,Pros),
   !.

assertext(Pred,[]):-!.
assertext(Pred,[W-0-F/I|Prons]):-
   assert(ext(Pred,W)),
   assertext(Pred,Prons),
   !.

asserttopics([Ref1,Ref2|Constituents]):-
     Ref1=ref_ex(I,W,Tab,P,G,N,CatSem,Func/Ruolo)/S,
     Ref2=ref_ex(I1,W1,Tab1,P1,G1,N1,CatSem1,Func1/Ruolo1)/S1,
     F=[P,G,N,CatSem,Ruolo],
     F1=[P1,G1,N1,CatSem1,Ruolo1],
     main(W, F),
     second(W1, F1),
     write_topics(W-F/I,W1-F1/I1,Rest,Constituents),
    !.

erase_first_pers(what).
erase_first_pers(there).
erase_first_pers(which).
erase_first_pers(i).
erase_first_pers(myself).
erase_first_pers(me).
erase_first_pers(we).
erase_first_pers(us).
erase_first_pers(you).
erase_first_pers(my).
erase_first_pers(your).
erase_first_pers(mine).
erase_first_pers(our).
erase_first_pers(one).
erase_first_pers(ourselves).
erase_first_pers(ours).
erase_first_pers('I').
erase_first_pers('We').
erase_first_pers('You').
erase_first_pers('My').
erase_first_pers('Your').
erase_first_pers('Mine').
erase_first_pers('One').
erase_first_pers('Our').
erase_first_pers('Ours').
erase_first_pers('What').
erase_first_pers('Which').

collect_allrheadss(Refs, Tops):-
   collect_allrheads(Refs, Tops),
    !.
collect_allrheads([], []):-!.
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], Tops):-
   nogen_member(+pro, Tab),
   erase_first_pers(Testa),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], Tops):-
    j(Testa), 
    \+ nogen_member(umano,Cat),
    \+ nogen_member(luogo,Cat),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-[Testa]-deic-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
   Tab=[+ref,+pro,-ana,+class],
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-[Testa]-0-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
%   nogen_member(+pro, Tab),
    (list(Testa),on(W,Testa);atomic(Testa),W=Testa),
   (filter_pron(W, Feats, Lem);
    filter_pos_ag(W, Feats, Lem);
    filter_pers(W, Feats, Lem)),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-Testa-ndef-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
   nogen_member(-def, Tab),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-Testa-deic-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
   filter_dim_ag(Testa, Feats, Lem),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-Testa-deic-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
   dgrs(N,mod(K,Testa-Snx,Deit)),
   filter_dim_ag(Deit, Feats, Lem),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-Testa-def-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
   nogen_member(+def, Tab),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-Testa-npr-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
   nogen_member(def0, Tab),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-Testa-deic-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
   nogen_member(+deic, Tab),
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/P|AdjsSort], [P-Testa-n-[Pers,Gen,Num,Cat,R]/Snx|Tops]):-
   collect_allrheads(AdjsSort, Tops).
collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)|AdjsSort], Tops):-
   collect_allrheads([ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)/_|AdjsSort], Tops).
collect_allrheads([Adj|AdjsSort], Tops):-
   collect_allrheads(AdjsSort, Tops).


collect_allheads([], []):-!.
collect_allheads([S-W-0-F/I|AdjsSort], Tops):-
   list(W),
   collect_allheads(AdjsSort, Tops).

collect_allheads([S-W-D-F/I|AdjsSort], [W-D-F/I|Tops]):-
   collect_allheads(AdjsSort, Tops).
     
evaluate_new_reftops([],[]):-!.
evaluate_new_reftops([Ref|NewRefTops],NRef):-
      Ref=W-Def-Feats/I,
      (W=[it];W=it),
      evaluate_new_reftops(NewRefTops,NRef),
      !.

evaluate_new_reftops([Ref|NewRefTops],NRef):-
      Ref=W-Def-Feats/I,
      W=[there],
      dgrs(N,expl(J,there)),
      evaluate_new_reftops(NewRefTops,NRef),
      !.

evaluate_new_reftops([Ref|NewRefTops],[V-W-Def-Feats/I|NRef]):-
      Ref=W-Def-Feats/I,
      (Def=def;Def=ndef;Def=deic),
      (atomic(W),W1=W; list(W),nogen_member(W1,W)),
      evaluate_topichood(W1,0,V),
      evaluate_new_reftops(NewRefTops,NRef),
      !.
evaluate_new_reftops([Ref|NewRefTops],[V-W-Def-Feats/I|NRef]):-
      Ref=W-Def-Feats/I,
      Def=npr,
      discover_names(W),
      (atomic(W),W1=W; list(W),nogen_member(W1,W)),
      evaluate_topichood(W1,-10,V),
      evaluate_new_reftops(NewRefTops,NRef),
      !.

evaluate_new_reftops([Ref|NewRefTops],[V-W-Def-Feats/I|NRef]):-
      Ref=W-Def-Feats/I,
      W\=[],
      (atomic(W),W1=W; list(W),nogen_member(W1,W)),
      evaluate_topichood(W1,5,V),
      evaluate_new_reftops(NewRefTops,NRef),
      !.
evaluate_new_reftops([Ref|NewRefTops],NRef):-
      evaluate_new_reftops(NewRefTops,NRef),
      !.

matchsem_topics(Top,Ind):-
      atomic(Top),
      spy_lower(Top,LowT,1),
      recover_description(LowT, Pred),
      (
      referente(SnX,[],Ind,LowT,Num,Card)
      ;
      LowT\=Pred,
      referente(SnX,[],Ind,Pred,Num,Card)),
    !.


matchsem_topics(Top,Ind):-
      recover_description(Top, Pred),
      (
      referente(SnX,[],Ind,Top,Num,Card)
      ;
      Top\=Pred,
      referente(SnX,[],Ind,Pred,Num,Card)),
    !.
evaluate_topichood(W,S,V):-
     (j(W), \+health(W);fct(W);r(W);integer(W)),
     V is S + 1000.

evaluate_topichood(W,S,V):-
     V is S + 10.

match_feats_cats(F, npr):-
     F=[Pers,Gen,Num|Cats],
     appiattisci(Cats,A),
     controlla_cats(A, [umano,istituzione,informa]),
     !.     

match_feats_cats(F, F1):-
     nogen_member(num=Num, F),
     nogen_member(gen=Gen, F),
     F1=[Pers,AGen,Num,CatS],
     checkcats(F, CatS),
      !.
match_feats_cats(F, F1):-
     nogen_member(num=Num, F),
     nogen_member(gen=Gen, F),
     F1=[Pers,AGen,Num,CatS,R],
     checkcats(F, CatS),
      !.
match_feats_cats(F, F1):-
     nogen_member(num=Num, F),
     nogen_member(gen=Gen, F),
     F1=[Pers,AGen,Num,CatS,R]/_,
     checkcats(F, CatS),
       !.
match_feats_cats(F, F1):-
     nogen_member(num=Num, F),
     nogen_member(gen=Gen, F),
     F1=[pers=Pers,AGen,num=Num],
     checkcats(F, CatS),
     !.
match_feats_cats(F, F1):-
     nogen_member(num=Num, F),
     nogen_member(gen=Gen, F),
     F1=[Pers,AGen,Num],
     !.
match_feats_cats([Pers1,any,Num|Cats], [Pers,Gen,Num1|Cat]):-
     evalpersfeats(Pers,Pers1),
     evalnumfeats(Num,Num1),
     appiattisci(Cats,A),
     appiattisci(Cat,B),
     A\=nil,B\=nil,
     A\=[nil],B\=[nil],
     controlla_cats(A, B),
     check_human(Num,A,B),
     !.
match_feats_cats([Pers1,Gen,Num|Cats], [Pers,Gen1,Num1|Cat]):-
     evalpersfeats(Pers,Pers1),
     nonvar(Gen1),Gen1=any,
     evalnumfeats(Num,Num1),
     appiattisci(Cats,A),
     appiattisci(Cat,B),
     A\=nil,B\=nil,
     A\=[nil],B\=[nil],
     controlla_cats(A, B),
     check_human(Num,A,B),
     !.
match_feats_cats([Pers1,Gen1,Num|Cats], [Pers,Gen,Num1|Cat]):-
     evalpersfeats(Pers,Pers1),
     nonvar(Gen),
     (Gen1=nil;Gen=nil),
     evalnumfeats(Num,Num1),
     appiattisci(Cats,A),
     appiattisci(Cat,B),
     A\=nil,B\=nil,
     A\=[nil],B\=[nil],
     controlla_cats(A, B),
     check_human(Num,A,B),
     !.
match_feats_cats([Pers1,Gen,Num|Cats], [Pers,Gen1,Num1|Cat]):-
     evalpersfeats(Pers,Pers1),
     nonvar(Gen1), (Gen=Gen1;Gen1=neu, (Gen=mas;Gen=fem)),
     evalnumfeats(Num,Num1),
     appiattisci(Cats,A),
     appiattisci(Cat,B),
     A\=nil,B\=nil,
     A\=[nil],B\=[nil],
     controlla_cats(A, B),
     check_human(Num,A,B),
     !.
match_feats_cats([Pers1,Gen,Num|Cats], [Pers,Gen1,Num1|Cat]):-
     evalpersfeats(Pers,Pers1),
     nonvar(Gen1), Gen=neu,(Gen1=mas;Gen1=nil;Gen1=neu),
     evalnumfeats(Num,Num1),
     appiattisci(Cats,A),
     appiattisci(Cat,B),
     A\=nil,B\=nil,
     A\=[nil],B\=[nil],
     controlla_cats(A, B),
     check_human(Num,A,B),
     !.
match_feats_cats([Pers1,Gen,Num|Cats], [Pers,Gen1,Num1|Cat]):-
     evalpersfeats(Pers,Pers1),
     var(Gen1), (Gen=mas;Gen=nil;Gen=neu),
     evalnumfeats(Num,Num1),
     appiattisci(Cats,A),
     appiattisci(Cat,B),
     A\=nil,B\=nil,
     A\=[nil],B\=[nil],
     controlla_cats(A, B),
     check_human(Num,A,B),
     !.

evalpersfeats(Pers,Pers):-!.
evalpersfeats(Pers,Pers1):-
     (atomic(Pers1),P1=Pers1;Pers1= (pers=P1)),
     (atomic(Pers),P2=Pers;Pers= (pers=P2)),
      P2=P1,
     !.

evalnumfeats(Num,Num):-!.  
evalnumfeats(Num,Num1):-     
     var(Num1), (Num=sing;Num=nil)
     ;
     nonvar(Num1), 
     (Num=Num1;
      Num=sing,Num1=s;
      Num1=s,Num=sing;
      Num=plur,Num1=p;
      Num1=p,Num=plur),
     !.

check_human(Num,A,B):-
       nogen_member(umano, A),
       nogen_member(umano, B),
   \+  nogen_member(luogo, B),
   \+  nogen_member(luogo, A),
     !.
check_human(Num,A,B):-
       nogen_member(umano, A),
       nogen_member(istituzione, B)
       ;
       nogen_member(umano, B),
       nogen_member(istituzione, A)
       ;
       Num=plur,
     !.
check_human(Num,A,B):-
       nogen_member(umano, A),
       nogen_member(informa, B)
       ;
       nogen_member(umano, B),
       nogen_member(informa, A)
       ;
       Num=plur,
     !.
check_human(Num,A,B):-
   \+        nogen_member(umano, A),
   \+        nogen_member(umano, B),
   !.
check_human(Num,A,B):-
       nogen_member(umano, A),
       nogen_member(oggetto, A),
       nogen_member(any, B)
       ;
       nogen_member(umano, B),
       nogen_member(oggetto, B),
       nogen_member(any, A)
       ;
       Num=plur,
   !.

write_mtopic_onfile(Win,Main):-
     nl,
     write('############'),
     write('   TOPICS   '),
     writenl(_,'############'),
     write('MAIN TOPIC:  '),
     writeqnl(Win, Main),
     !.

write_stopic_onfile(Win,Sec):-
     write('SECONDARY TOPIC:  '),
     writeqnl(Win, Sec),
     !.

write_ptopic_onfile(Win,Rests):-
     write('POTENTIAL TOPICS:  '),
     (Rests=[A-Aa,B-Bb,C-Cc|_],
      writeseqnl(Win, [A,B,C])
      ;
      Rests=[A-Aa,B-Bb,C-Cc],
      writeseqnl(Win, [A,B,C])
      ;
      Rests=[A-Aa,B-Bb],
      writeseqnl(Win, [A,B])
      ;
      Rests=[A-Aa],
      writeseqnl(Win, [A])),
     !.

write_anaf_onfile(Win,Ante, Pro):-
     nl,
     write('###########'),
     write('   ANAPHORA RESOLUTION   '),
     writenl(_,'###########'),
     write(Pro),
     write('  resolved as  '),
     writeqnl(_,Ante),
     !.

write_topics(Main-Fm/SnX,nil,Rest,Cost):-
     Win='Macintosh HD:anafore',
     abolish(main/2),
     assert(main(Main, Fm)),
     write_mtopic_onfile(Win,Main),
     frase_corrente(NoFr, File),
     assert_inds_if(main, NoFr, Main, Ind, Fm),
     assert_indsif_pot(3,poten, NoFr, Rest),
     !.

write_topics(Main-Fm/SnX,Sec-Fs/SnX1,Rest,Cost):-
     Win='Macintosh HD:anafore',
     abolish(main/2),
     assert(main(Main, Fm)),
     write_mtopic_onfile(Win,Main),
     abolish(second/2),
     assert(second(Sec, Fs)),
     write_stopic_onfile(Win,Sec),
     (Rest\=[],
      write_ptopic_onfile(Win,Rest),
      abolish(others/1),
      assert(others(Rest))
     ;
     Rest=[],true),
     frase_corrente(NoFr, File),
     assert_inds_if(main, NoFr, Main, Ind, Fm),
     assert_inds_if(second, NoFr, Sec, Ind1, Fs),
     assert_indsif_pot(3,poten, NoFr, Rest),
    !.


write_anaphors(Ante, [Pro], SnX,Costs):-
     Win='Macintosh HD:anafore',
     write_anaf_onfile(Win,Ante, Pro),
     frase_corrente(NoFr, File),
     assertz(risolto(NoFr, SnX, Pro, Ante)),     % memorizza risolti 
     !.

resolve_pronominals(Refs,SortTops,[],[],Topics,Costs):-
   elaborate_recency(Recent),
   selaborate_infers(Graded),
   recover_antec_topics(Recent,Graded,Topic),
%   reinforce_presence_recency(Topic,SortTops,NTopic),
   sort(Topic,Topics),
   !.
resolve_pronominals(Refs,SortTops,Exts,Resolved,Topics,Costs):-
   buildlisttops_exts(Exts,Prons),
   elaborate_recency(Recent),
   selaborate_infers(Graded),
   recover_antec_topics(Recent,Graded,Topics),
   (Graded\=[],
    resolve_prons(Graded,Prons,Topics,Resolved,Costs)
    ;
    resolve_pronss(Prons,SortTops,Resolved,Costs)
    ),
    !.
resolve_pronominals(Refs,SortTops,[],[],[],Costs).

/* Then I collect Main, Second and first Potential topic and choose against the two lists by grading best antecent candidates for pronominal expressions. Grading is done in two phases: first phase, prospective candidates collected in Recency and Graded list are weighted according to whether they match the current Main, Second, Poten.
Then animacy is invocated to further grade candidates  */

recover_antec_topics(Recent,Graded,SortedTopics):-
     recover_main(W1, Ind1, Main),
     recover_second(W2, Ind2, Second),
     others(Others), 
     (Others=[], W-Def-Feat=nil-nil-nil;
      Others\=[],Others=[W-Def-Feat|Ws]),
     append([W1-Ind1-Main],[W2-Ind2-Second],Tops),
     append(Tops,[W-Def-Feat|Ws],Topic),
     score_topics_graded([main-W1,second-W2,poten-W],Recent,Topic,BestTopics),
     score_topics_graded([main-W1,second-W2,poten-W],Graded,Topic,Topics),
     append(BestTopics,Topics,AllTopics),
     sort(AllTopics,SortedTopics),
     !.

recover_antec_topics(Recent,Graded,SortedTopics):-
     recover_main(W1, Ind1, Main),
     others(Others), 
     (Others=[], W-Def-Feat=nil-nil-nil;
      Others\=[],Others=[W-Def-Feat|Ws]),
     append([W1-Ind1-Main],[W-Def-Feat|Ws],Topic),
     score_topics_graded([main-W1,poten-W],Graded,Topic,Topics),
     sort(Topics,SortedTopics),
     !.

build_list_tops_exts([],Tops,Tops):-!.
build_list_tops_exts(Exts,Tops,NTops):-
   buildlisttops_exts(Exts,Topss),
   append(Topss, Tops, NTops),
    !.

buildlisttops_exts([],[]):-!.
buildlisttops_exts([Ex-Pron|Exts],[Ext|Topss]):-
   (list(Pron), Pron=[Pro];atomic(Pron),Pro=Pron),
   (Pro=it;Pro=its;Pro=itself),
   get_pronfeats(Pro, Testa, Tratti),
   append(Tratti, [[evento,attivita,oggetto,strumento,tempo,luogo,istituzione,legale]], Feat),
   Ext=[Pro]-0-Feat,
   buildlisttops_exts(Exts,Topss),
    !.
buildlisttops_exts([Ex-Pron|Exts],[Ext|Topss]):-
   (list(Pron), Pron=[Pro];atomic(Pron),Pro=Pron),
   (Pro=they;Pro=them;Pro=themselves;Pro=their;Pro=theirs),
   get_pronfeats(Pro, Testa, Tratti),
   append(Tratti, [[umano,animato,evento,attivita,oggetto,strumento,tempo,luogo,istituzione,legale]], Feat),
   Ext=[Pro]-0-Feat,
   buildlisttops_exts(Exts,Topss),
    !.
buildlisttops_exts([Ex-Pron|Exts],[Ext|Topss]):-
   (list(Pron), Pron=[Pro];atomic(Pron),Pro=Pron),
   get_pronfeats(Pro, Testa, Tratti),
   append(Tratti, [[umano,animato,istituzione,legale]], Feat),
   Ext=[Pro]-0-Feat,
   buildlisttops_exts(Exts,Topss),
    !.
buildlisttops_exts([Ex-Pron|Exts],Topss):-
   buildlisttops_exts(Exts,Topss),
    !.

collect_prons_tops(Prons,Tops,NTops)
    :-
    appiattisci(Tops,PTops),
    collectpronstops(Prons,PTops,NTops),
    !.


time_focus(0, tes(nil)):-!.

/*
[house-pres]-[house-active]-[house-(not)]-[house-can]-[]-attivita-cmod-subord-because-overcrowd
Tense-Voice-Neg-Mod-Prog-Aux-Adj-Aspect-Rel-S-Dep-Gov-CueW
*/

sinfo_eval(OtherClause,
   NoFr, Root, FunRole, 
   View, Intens, Change, Relev,
   SemCat, Verb,
   TempRel, DiscRel, DiscDom, SubjConsc)
   :-

   sem_cat(Root, SemCat),
   tense(Root, FunRole, Tense),
   aspect(Root, Aspect),
   voice(Root, Voice),
   speech_type(Root, Speech),
   polarity(Root, Pol),
   mood(Root, Mood),
   semantic_verbal_pred(Root, Verb),
   stato(NoFr, State),
   support(Root, Support),
   perform(Root, Support, Perform),
   focalizers(Root, Focs),
   event_index(Root, TesIndex),
   view(NoFr,FunRole,Speech,SemCat,Voice,Verb,Support,View),
   factivity(Verb, Tense, Mood, FunRole, Support, Intens),
   change(Speech,Pol,Support,View,Mood,Tense,Aspect,Change),
   relevance(Change, Relev),

   prec_sentence_info(
      NoFr, PrecChange, PrecState, PrecSemCat,
      PrecTesIndex, PrecDiscRel, PrecDiscDom, OtherClause),

   stemp_relation(OtherClause,Tense,
      NoFr, Root, TesIndex, PrecTesIndex, PrecDiscRel, Change,
      Intens,TempRel),
   sdisc_relation(
      NoFr, View, FunRole, 
      Relev, Intens, Aspect,
      [PrecChange, Change], [PrecState, State],
      Verb, Support, [PrecSemCat, SemCat],
      Focs,
      PrecDiscRel,
      DiscRel),
   disc_domain(Intens,
      NoFr, Root, FunRole, SemCat, Mood, Perform, PrecDiscDom,
      DiscDom, SubjConsc).

/***********
factivity(+Tense, +Mood, +FunRole, +Support, -Intensionality),
factivity(_, _, _, vcomp/_, _, factive) :-
   nodo(N)::vcomp/_::indice::Ind,
   nodo(N)::pred::fare,
   !.
newfactivity(+Tense, +Mood, +Progr, +FunRole, +Support, -Intensionality),
***********/

newfactivity(_, _, _, Progr, vcomp/_, _, nonfactive) :-
   !.

newfactivity(_, _, _, Progr, _/hypoth, _, nonfactive) :-
   !.

newfactivity(_, _, _, Progr, fcomp/Role, _, nonfactive) :-
   on(Role, [propq, propint]),
   !.

newfactivity(_, _, _, Progr, adj/hypoth, _, nonfactive) :-
   !.

newfactivity(_, _, _, Progr, adj/cond, _, nonfactive) :-
   !.

newfactivity(_, _, Mood, Progr, _, _, nonfactive) :-
   on(Mood, [cond, cong]),
   !.

newfactivity(_, Tense, _, Progr, _, _, nonfactive) :-
   on(Tense, [fut, imperat]),
   !.

newfactivity(Verb, _, _, Progr, _, _, nonfactive) :-
   modal(Verb, _,_,_,_,_),
   !.

newfactivity(_, _, _, Progr, _, Support, nonfactive) :-
   modal(Support, _,_,_,_,_),
   !.

newfactivity(_, _, _, Progr, _, Support, nonfactive) :-
   nonvar(Progr), Progr=going,
   !.

newfactivity(_, _, _, Progr, _, _, factive) .



stemp_relation(_,_,
   1, _, TesIndex, PrecTesIndex, PrecDiscRel, Change, 
   Factivity,  TempRel) 
   :-
   TesIndex\=PrecTesIndex,!,
   stemporal_rel(_,TesIndex, PrecTesIndex, PrecDiscRel, Change,
    Factivity, Rel),
   map_temp_rel(Rel, Rel1),
   t_rel_all(Rel1, TesIndex, PrecTesIndex, [TempRel]),
   !.

stemp_relation(_,Tense,
   NoFr, Root, TesIndex, PrecTesIndex, PrecDiscRel, Change,
   Factivity, TempRel) 
   :-
   Tense=trap_pross,
   time_focus(AppropNoFr, TimeFocus),
   (TimeFocus \= PrecTesIndex;
   (AppropNoFr=1; AppropNoFr is NoFr - 2)),
   map_temp_rel([bf], Rel1),
   t_rel_all(Rel1, TesIndex, TimeFocus, [TempRel]),
   !.

stemp_relation(_,Tense,
   NoFr, Root, TesIndex, PrecTesIndex, PrecDiscRel, Change,
   Factivity, TempRel) 
   :-
   TesIndex\=PrecTesIndex, PrecTesIndex\=nil,!,
   stemporal_rel(Root,TesIndex, PrecTesIndex, PrecDiscRel, Change, 
          Factivity, Rel),
   map_temp_rel(Rel, Rel1),
   t_rel_all(Rel1, TesIndex, PrecTesIndex, [TempRel]),
   !.

stemp_relation(_,_, _, _, TesIndex, nil, _, _, _, TempRel) :-
   stemporal_rel(_,TesIndex, nil, PrecDiscRel, Change,
    Factivity, Rel),
   map_temp_rel(Rel, Rel1),
   t_rel_all(Rel1, TesIndex, nil, [TempRel]),
   !.

stemp_relation(_,_,
   _, _, TesIndex, PrecTesIndex, _, _, _,
   undef(TesIndex, PrecTesIndex)) :-
   TesIndex\=PrecTesIndex,!.

stemp_relation(_,_,
   _, _, TesIndex, PrecTesIndex, _, _, _,
   undef(TesIndex, TesIndex)) :-
   var(PrecTesIndex),!.

stemporal_rel(_,TesIndex, PrecTesIndex, _, _, _, Rel) :-
   rel_temp(_, TesIndex, PrecTesIndex, Rel).

stemporal_rel(_,
   TesIndex, tes(TempIndex), PrecDiscRel, _, Factivity, Rel1) 
:-
   rel_temp(_, TesIndex, tr(TempIndex), Rel),
   infer_temp_rel(PrecDiscRel, TesIndex, tr(TempIndex), Rel, Rel1).

stemporal_rel(_,
   tes(TesIndex), tes(TempIndex), PrecDiscRel, _, Factivity, Rel1) 
:-
   rel_temp(_, tes(TesIndex), tr(TesIndex), Rel),
   Rel\=[eq],
   infer_temp_rel(PrecDiscRel, tes(TesIndex), tr(TempIndex), Rel, Rel1).

stemporal_rel(_,
   TesIndex, tes(TempIndex), PrecDiscRel, Change,
   Factivity, Rel) 
:-
   (Change=null, Rel=[dr]
    ;
    nonvar(PrecDiscRel),
    PrecDiscRel=egression(_-_), Rel=[fb]
    ;
    (Factivity=factive;PrecDiscRel=narration), Rel=[af]
   ;
   Rel=[dr]).


/***************************
sdisc_relation(
   +NoFr, +View, +ClauseType,
   +Relevance, +Intensionality, +Aspect,
   [+PrecChange, +Change], [+PrecState, +State],
   +Verb, +Support, [+PrecCatSem, +CatSem], 
   +Focalizers,
   +PrecDiscRel,
   -DiscourseRelation).
***************************/
/*** setting 2 */
sdisc_relation(
   _, _, _,
   _, _, _,
   _, [_, shifting],
   _, _, _,
   _,
   _,
   setting) 
   :- !.

/*** narration 3 */
sdisc_relation(
   _, internal, _/qprop, background, nonfactive, _, _, _, Verb, Mod, _, _,
   _,
   question) 
   :- !.

/*** narration 3 */
sdisc_relation(
   _, internal, _/prop, background, factive, riportivo, _, _, Verb, Mod, _, _,
   _,
   attrib) 
   :- 
   verbs_of_saying(Verb), (var(Mod);Mod=nil),!.

/*** obligation 4 */
sdisc_relation(
   _, social_engagement, _,
   _, _, _,
   _, _, 
   _, shall, _,
   _,
   _,
   obligation)
   :- !.

/*** inception 5 */
sdisc_relation(
   _, social_engagement, _/Role,
   _, _, _,
   _, _, 
   _, _, _,
   _,
   _,
   Relation)
   :- 
   relation_role(Role, _, Relation).

sdisc_relation(
   _, social_engagement, _,
   _, _, _,
   _, _, 
   _, Mod, _,
   _,
   _,
   inception)
   :- 
   nonvar(Mod), \+ modal_verb(Mod),!.

/*** inception 6 */
sdisc_relation(
   _, _, _, 
   _, _, _, 
   _, _, 
   Verb, _, _,
   _,
   _,
   inception) 
   :-
   inception_verb(Verb),
   !.

/*** result 8 */
sdisc_relation(
   _, _, _/gerund, 
   _, _, _, 
   [culminated, culminated], _, 
   Verb, _, _,
   _,
   PrecRel,
   result) 
   :-
   \+ narration_verb(Verb),
   (PrecRel=narration;
    PrecRel=evidence),
   !.

sdisc_relation(
   _, external, _/gerund, 
   _, factive, risultato, 
   [_, _], [_, cambia], 
   Verb, _, _,
   _,
   PrecRel,
   result) 
   :-
   \+ narration_verb(Verb),
   (PrecRel=narration;
    PrecRel=evidence),
   !.

/*** result 9 */
sdisc_relation(
   _, _, _/gerund, 
   _, _, _, 
   [culminated, culminated], _, 
   Verb, _, _,
   _,
   egression(_),
   result) 
   :-
   \+ narration_verb(Verb),
   !.

/*** ROLE 10 */
sdisc_relation(
   _, _, Fun/Role,
   _, _, _,
   [_, Change], _,
   _, _, _,
   _,
   _,
   Relation) :-
   member(Fun, [adj, coord]),
   relation_role(Role, Change, Relation),
   !.

/*** ROLE 11 */
sdisc_relation(
   _, _, Fun/Role,
   _, _, _,
   [_, Change], _,
   _, _, _,
   _,
   _,
   Relation) :-
   Role\=prop,
   relation_role(Role, Change, Relation),
   !.

/*** result 12 */
sdisc_relation(
   _, _, _/prop, 
   _, factive, stato, 
   _, _, 
   Verb, _, _,
   _,
   hypothesis,
   result) 
   :-
   !.

/*** evidence 13 */
sdisc_relation(
   _, _, _, 
   _, _, _, 
   _, _, 
   _, _, _,
   Focs,
   _,
   evidence) 
   :-
   nonvar(Focs), 
   (list(Focs),member(Foc, Focs);Foc=Focs),
   focalizer_type(Foc, evidence),
   !.

/*** evidence 14 */
sdisc_relation(
   _, _, _, 
   background, _, _, 
   [_, negated], _, 
   _, _, _,
   _,
   _,
   evidence) :-
   !.

/*** result 7 */
sdisc_relation(
   _, _, _,
   _, factive, risultato,
   _, _,
   Verb, _, _,
   _,
   inception,
   effect) 
   :-
   cause_verb(Verb),
   !.

/*
sdisc_relation(
   _, _, Main/Prop,
   _, factive, risultato,
   _, _,
   Verb, _, _,
   _,
   _,
   effect) 
   :-
   cause_verb(Verb),
   Main\=vcomp,
   !.

sdisc_relation(
   _, _, Main/Prop,
   _, factive, attivita,
   [_, culminated], _,
   Verb, _, _,
   _,
   _,
   effect) 
   :-
   cause_verb(Verb),
   Main\=vcomp,
   !.
*/

sdisc_relation(
   _, _, Main/Prop,
   _, factive, risultato,
   _, _,
   Verb, _, _,
   _,
   _,
   cause) 
   :-
   cause_verb(Verb),
   Main\=vcomp,
   !.

sdisc_relation(
   _, _, Main/Prop,
   _, factive, attivita,
   [_, culminated], _,
   Verb, _, _,
   _,
   _,
   cause) 
   :-
   cause_verb(Verb),
   Main\=vcomp,
   !.

sdisc_relation(
   _, _, _,
   _, _, _,
   _, _,
   Verb, _, _,
   _,
   _,
   result) 
   :-
   result_verb(Verb),
   !.

/*** definition 15 */
sdisc_relation(
   _, _, main/_,
   background, factive, stato, 
   [_, null], _ ,
   Verb, nil, [_,SemCat],
   _,
   _,
   definition) 
   :- 
   genre(legal),
   definition_verb(Verb),
   !.

/*** motivation 16 */
sdisc_relation(
   _, _, main/_,
   background, factive, _, 
   [_, null], [_, continua], 
   _, _, [_,SemCat],
   _,
   _,
   motivation) 
   :- 
   genre(legal),
   !.

/*** explanation 17 */
sdisc_relation(
   _, _, main/_,
   background, factive, _, 
   [_, null], [_, continua], 
   _, _, [_,SemCat],
   _,
   _,
   explanation) 
   :- 
   SemCat \= presuppositivo,
   !.
/* troppo generale
sdisc_relation(
   _, _, adj/_,
   foreground, _, _, 
   [_, culminated], _, 
   Verb, _, _,
   _,
   _,
   explanation) 
   :- 
   \+ narration_verb(Verb),
   !.
*/
/*** explanation 18 */
sdisc_relation(
   _, _, main/_,
   _, factive, stato, 
   _, _, 
   Verb, Modal, _,
   _,
   _,
   explanation) 
   :- 
   (Verb=become;Verb=be),
   !.

/*** parallel 19 */
sdisc_relation(
   _, _, _, 
   _, _, _, 
   _, _, 
   _, Mod, _,
   _,
   _,
   parallel) :-
   nonvar(Mod), Mod=stay, !.

/*** contrast 20 */
sdisc_relation(
   _, _, _, 
   foreground, _, _, 
   [_, negated], _, 
   Verb, Mod, _,
   _,
   _,
   contrast) 
   :-
   \+ applic_verb(Verb),
   nonvar(Mod), \+ modal_verb(Mod),
   !.

/*** evaluation 21 */
sdisc_relation(
   _, internal_intensional, _, 
   foreground, _, _, 
   [_, gradual], _, 
   _, _, _,
   _,
   _,
   evaluation) 
   :-
   !.

/*** evaluation 22 */
sdisc_relation(
   _, internal_intensional, _, 
   background, _, _, 
   [_, null], _, 
   Verb, _, _,
   _,
   _,
   evaluation) 
   :-
   evaluation_verb(Verb),
   !.


/*** evaluation 23 */
sdisc_relation(
   _, external, _, 
   background, nonfactive, stato, 
   [null, null], _, 
   _, Mod, _,
   _,
   _,
   evaluation) 
   :-
   \+ modal_verb(Mod),
   !.

/*** evaluation 24 */
sdisc_relation(
   _, View, dir_speech/_, 
   background, _, stato, 
   [_, null], _, 
   _, _, _, 
   _,
   _,
   evaluation) :-
   member(View, [internal, internal_intensional]),
   !.

sdisc_relation(
   _, _, _/_,
   _, _, _, 
   _, _, 
   Verb, _, [PrecSemCat, SemCat], 
   _,
   _,
   rationale):-
   (Verb=reason;Verb=why;
   Verb=motivation),
   !.

/*** elaboration 25 */
sdisc_relation(
   _, _, _/gerund,
   _, _, _, 
   [_, Change], _, 
   Verb, _, _,
   _,
   _,
   elaboration) 
   :-
   \+ narration_verb(Verb),
   Change \= null,
   !.

/*** elaboration 26 */
sdisc_relation(
   _, external, _/prop, 
   foreground, factive, _, 
   [_, gradual], _, 
   _, _, _,
   _,
   _,
   elaboration) 
   :-
   !.

/*** elaboration 27 */
sdisc_relation(
   _, _, fcomp/_,
   background, _, Aspect, 
   [_, Change], _, 
   _, _, [presuppositivo, _], 
   _,
   _,
   elaboration) 
   :-
   member(Change, [null, gradual]),
   Aspect \= stato,
   !.

/*** elaboration 28 */
sdisc_relation(
   _, View, report/_, 
   background, _, _, 
   [_, null], _, 
   _, _, _, 
   _,
   _,
   elaboration) :-
   member(View, [internal, internal_intensional]),
   !.

/*** result 31 */
sdisc_relation(
   _, _, _, _, _, _, 
   [Prev, culminated], _, 
   _, _, _, 
   _,
   narration,
   result) :- 
   nonvar(Prev), Prev=culminated,
   !.

/*** result 32 */
sdisc_relation(
   _, _, coord/prop,
   _, _, _, 
   _, _, 
   _, _, [PrecSemCat, SemCat], 
   _,
   _,
   result) 
   :-
   result_sequence(PrecSemCat, SemCat),
   !.
sdisc_relation(
   _, _, _/Role,
   _, _, _, 
   _, _, 
   _, _, _, 
   _,
   _,
   rationale):-
   nonvar(Role), Role=result,!.
   
/*** narration 29 */
sdisc_relation(
   _, _, _/gerund, _, _, _, 
   [culminated, _], _,
    _, _, _,
   _,
   narration,
   narration) :- !.

/*** narration 30 */
sdisc_relation(
   _, _, _/gerund, _, _, _, 
   [culminated, _], _,
    _, _, _,
   _,
   egression(_-_),
   narration) :- !.
/* troppo generale
sdisc_relation(
   _, _, _,
   Relev, factive, Aspect, 
   [_, Change], _, 
   _, _, _, 
   _,
   _,
   narration) 
   :-
   Relev \= background,
   Aspect \= stato,
   !.
*/

/*** 33 achievement
Una volta determinato che si tratta di una egression cerca l'inizio del processo. Andando all'indietro se trova una inception oppure una narration immediatamente preceduta da una inception, quest'ultima e_ l'inizio. Altrimenti prende la prima narration disponibile
 
sdisc_relation(
   NoFr, external, _, 
   foreground, factive, achiev_tr, 
   [_, culminated], _, 
   NewRel, _, _,
   _,
   _,
   egression(PrecNoFr-Node)) 
   :-
   once(sd_structure(Sym,
      NoFr, Topics, inception, 
      TempRel, MainRel, Stato, DiscMove, DiscLev),
   analyze_relation(NoFr, PrecNoFr, MainRel, NewRel, Topics),
   !.
*/

/*** evaluation 34 */
sdisc_relation(
   _, View, _, 
   _, _, _, 
   _, _, 
   _, _, _,
   _,
   _,
   evaluation) 
   :-
   nonvar(View), View=internal_extensional,!.
/* evidence 35 */
sdisc_relation(
   _, external, _/prop,
   foreground, factive, achiev_tr, [culminated, culminated], 
   [_,_], _, nil, [_, risultato], [],
   _,
   evidence)
   :-
   !.

/*** narration 36 */
sdisc_relation(
   _, _, relp/prop,
   _, factive, _, _, _, _, _, _, _,
   _,
   definition)
   :-
   genre(legal),!.

/* obligation 37 */
sdisc_relation(
   _, external, _, 
   background, nonfactive, stato, 
   [null, null], _, 
   _, Mod, _,
   _,
   _,
   obligation) 
   :-
   nonvar(Mod), modal_verb(Mod),
   !.

/* prohibition 38 */
sdisc_relation(
   _, _, _, 
   foreground, _, _, 
   [_, negated], _, 
   Verb, _, _,
   _,
   _,
   prohibition) 
   :-
   (applic_verb(Verb)
    ;
   definition_verb(Verb)),
   !.

/* obligation 39 */
sdisc_relation(
   _, _, _, 
   background, nonfactive, _, 
   [null, null], _, 
   _, Mod, _,
   _,
   _,
   permission) 
   :-
   nonvar(Mod),
   perm_verb(Mod),
   !.

/*** definition 40 */
sdisc_relation(
   _, _, _, _, _, _, _, _, _, _, _, _,
   _,
   definition)
   :-
   genre(legal),!.

/*** narration 41 */
sdisc_relation(
   _, _, _, _, _, _, _, _, _, _, _, _,
   _,
   narration).

social_engagement(decide).
social_engagement(promise).
social_engagement(V):-
   dvv(Vs), on(V,Vs).
social_engagement(V):-
   perv(Vs), on(V,Vs).

result_sequence(attivita, risultato).
result_sequence(attivita, cambiamento).
result_sequence(percettivo, risultato).

result_verb(result).
result_verb(manage).
result_verb(V):-
   rsv(Vs), on(V,Vs).

cause_verb(cause).
cause_verb(lead_to).
cause_verb(provoke).
cause_verb(prompt).
cause_verb(stimulate).
cause_verb(induce).
cause_verb(contribute_to).
cause_verb(determine).
cause_verb(V):-
   nlv(Vs), on(V,Vs).
cause_verb(V):-
   amv(Vs), on(V,Vs).
%cause_verb(V):-lcsc(V).
cause_verb(V):-
   fnc(V,C,Sc).

inception_verb(cominciare).
inception_verb(mettersi).
inception_verb(iniziare).
inception_verb(start).
inception_verb(begin).

narration_verb(say).
narration_verb(tell).
narration_verb(dire).

evaluation_verb(consider).
evaluation_verb(regard).

obligation_verb(require).
obligation_verb(demand).

definition_verb(be).
definition_verb(define).
definition_verb(mean).
definition_verb(correspond).

relation_role(purpose, _, purpose).
relation_role(advers, _, adverse).
relation_role(cause, _, cause).
relation_role(temp_coinc, _, circumstance).
relation_role(result, culminated, result).
relation_role(cond, _, condition).
relation_role(motiv, _, motivation).
relation_role(conc, _, evidence).
relation_role(hypoth, _, hypothesis).

focalizer_type(certo, evidence).
focalizer_type(certamente, evidence).
focalizer_type(sure, evidence).
focalizer_type(certainly, evidence).
focalizer_type(of_course, evidence).
focalizer_type(definitely, evidence).
focalizer_type(apparently, evidence).

modal_verb(can).
modal_verb(must).
modal_verb(shall).
modal_verb(may).
modal_verb(potere).
modal_verb(volere).
modal_verb(dovere).
modal_verb(will).
modal_verb(ought).

perm_verb(may).
perm_verb(potere).
perm_verb(allow).
perm_verb(permit).


applic_verb(apply).
applic_verb(applicare).



s_estrai_argomenti([],[],[]):-!.
s_estrai_argomenti([[]],[],[]):-!.
s_estrai_argomenti([_-[[]]],[],[]):-!.
s_estrai_argomenti([1-(_-[[]])],[],[]):-!.
s_estrai_argomenti(Clauses,RefList,ListMo):-
     s_sh_sn_ref(Clauses,List),
     sh_pesa_lista(List,LisPes),
     sh_crea_lista(LisPes,RefList,ListMo),
     !.


extract_all_refs([A], _,[], []):- var(A),!. 
extract_all_refs([A], _,[], []):- var(A),!. 
extract_all_refs([[A]], _,[], []):-var(A),!.
extract_all_refs(_-[A], _,[], []):-var(A),!.
extract_all_refs(_-[[A]], _,[], []):-var(A),!.
extract_all_refs([], [],[], []):- !. 
extract_all_refs(A, [],[], []):- atomic(A),!. 
extract_all_refs([], [[]],[], []):- !. 
extract_all_refs([[]], [],[], []):-!.
extract_all_refs(_-[], [],[], []):-!.
extract_all_refs(_-[[]], [],[], []):-!.
extract_all_refs(Refs, [],RefLis, [[Pred,Mods, Args]]):-
   Clause=Cl-[Pred-Args-_, Refs1, Aggs],
   Refs\=[],
%   remove(Clause,Refs, Refs2),
   subtract(Refs, [Clause], Refs2),
   Aggs=[Cl1-AllAggs],
   appiattisci(AllAggs,Aggs2),
   s_estrai_argomenti([1-Refs2],_,RefList0),
   s_estrai_argomenti([1-Refs],_,RefList1),
   s_estrai_argomenti([1-Aggs2],_,RefList2),
   append(RefList0,RefList1, RefListss),
   append(RefListss,RefList2, RefLists),
   sort(RefLists,RefLis),
   RefLis\=[],
   !.
extract_all_refs(Refs, _,RefLis, [[Pred,Mods, Args]]):-
   Clause=_-[Cl, Pred-Args, Mods, Refs1, Aggs],
   Refs\=[],
%   remove(Clause,Refs, Refs2),
   subtract(Refs, [Clause], Refs2),
   Refs\=Refs2,
   s_estrai_argomenti([1-Refs2],_,RefList0),
   s_estrai_argomenti([1-Refs],_,RefList1),
   append(RefList0,RefList1, RefLists),
   sort(RefLists,RefLis),
   RefLis\=[],
   !.

extract_all_refs(Refs, _,RefList, [[Pred,Mods, Args]]):-
   Refs\=[],
   Refs=_-[Cl, Pred-Args, Mods, Refs1, Aggs],
   s_estrai_argomenti([1-Refs1],_,RefLis),
   s_estrai_argomenti([1-Aggs],_,RefList1),
   append(RefLis,RefList1, RefList),
   RefList\=[],
   !.

extract_all_refs(Refs, [],RefList1, []):-
   list(Refs), 
   appiattisci(Refs,Reff),
   Reff=[Cl,Args,_,Ref],
   integer(Cl),
   s_estrai_argomenti([Cl-Ref],_,RefList1),
   RefList1\=[],
   !.

extract_all_refs(Refs, Adjs, RefLis, [[Pred,Mods, Args]|OtherArgs]):-
   Refs\=[], 
   Modss=ClNo-[Pred-Args-Cl, Aggs, Tail],
%   remove(Modss, Refs,RestRefs),
   subtract(Refs, [Modss], RestRefs),
   RestRefs\=[],
   s_estrai_argomenti([1-RestRefs],_,RefList1),
   s_estrai_argomenti([1-Aggs],_,RefList2),
   append(RefList1,RefList2, RefLis1),
   extract_all_refs([], Tail,RefLis2, OtherArgs),
   append(RefLis1,RefLis2, RefLis),
   RefLis\=[],
   !.

extract_all_refs(Refs, Adjs,RefLiss, [[Pred,Mods, Args]|OtherArgs]):-
   Adjs=[Mods, ClNo-[Pred-Args-Cl, Aggs, Tail]],
   Clause=Cl-[ Pred1-Args1-_,Refs1, Aggs1],
   Refs\=[],
%   remove(Clause,Refs, Refs2),
   subtract(Refs, [Clause], Refs2),
   Aggs1=[Cl1-AllAggs],
   appiattisci(AllAggs,Aggs2),
   s_estrai_argomenti([1-Refs2],_,RefList0),
   s_estrai_argomenti([1-Refs1],_,RefList1),
   s_estrai_argomenti([1-Aggs],_,RefList2),
   s_estrai_argomenti([1-Aggs2],_,RefList3),
   append(RefList0,RefList1, RefListss),
   append(RefListss,RefList2, RefList11),
   append(RefList11,RefList3, RefLists1),
   sort(RefLists1,RefLis),
   extract_all_refs([], Tail,RefLis2, OtherArgs),
   append(RefLis,RefLis2, RefLiss),
   RefLiss\=[],
   !.

extract_all_refs(Refs, Adjs,RefLis, [[Pred,Mods, Args]|OtherArgs]):-
   Adjs=[Mods, ClNo-[Pred-Args-Cl, Aggs, Tail]],
   s_estrai_argomenti([1-Refs],_,RefList1),
   s_estrai_argomenti([1-Aggs],_,RefList2),
   append(RefList1,RefList2, RefLis1),
   extract_all_refs([], Tail,RefLis2, OtherArgs),
   append(RefLis1,RefLis2, RefLis),
   RefLis\=[],
   !.

extract_all_refs(Refs, Adjs,RefLists, []):-
    Adjs\=[], list(Adjs),
    Adjs=[Xaggs, Aggs],Aggs\=[],
   s_estrai_argomenti([1-Refs],_,RefList1),
   s_estrai_argomenti([1-Xaggs],_,RefList2),
   s_estrai_argomenti([1-Aggs],_,RefList3),
   append(RefList1,RefList2, RefLists1),
   append(RefLists1,RefList3, RefLists),
   RefLists\=[],
   !.

extract_all_refs(Refs, Adjs,[RefLists|RefLis], [Args|OtherArgs3]):-
    Adjs\=[], list(Adjs),
   s_estrai_argomenti([1-Refs],_,RefList1),
   (
     recover_all_adjs_refs(Adjs, RefList2, Args), OtherArgs3=[], RefLis=[]
     ; 
    (appiattisci(Adjs,Adjss),
     Adjss=[ClNo-List|_], nonvar(List),
     Modss=ClNo-[Lemm-VArgs-Cl, Aggs, Tail],
%     remove(Modss, Adjss,RestRefs),
     subtract(Adjss, [Modss], RestRefs)
     ;
     Adjs=[Neg, Lemm-VArgs, Mods, Aggs, Tail],
     Aggs\=[]
     ;
     Mod=[Neg, Lemm-VArgs, Mods, Aggs, Tail],
%     remove(Mod, Adjs,RestRefs),
     subtract(Adjs, [Mod], RestRefs),Aggs\=[]),
     Args=[Lemm,Mods,VArgs],
     s_estrai_argomenti([1-RestRefs],_,RefList2),
   extract_all_refs([], Aggs,RefLis1, OtherArgs1),
   extract_all_refs([], Tail,RefLis2, OtherArgs2),
   append(RefLis1,RefLis2, RefLis),
   append([OtherArgs1],[OtherArgs2], OtherArgs3)
   ),
   append(RefList1,RefList2, RefLists),
   (RefLists\=[],RefLists\=[[]];
    RefLis\=[]),
   !.

extract_all_refs(Refs, Adjs,[RefLists|RefLis], [[Pred,Mods, Args]|OtherArgs3]):-
    Adjs\=[], list(Adjs),
     Modss=ClNo-[Pred-Args-Cl, Aggs, Tail],
%     remove(Modss, Adjs,RestRefs),
     subtract(Adjs, [Modss], RestRefs),
     Aggs\=[],
    s_estrai_argomenti([1-Refs],_,RefList1),
    s_estrai_argomenti([1-RestRefs],_,RefList2),
   append(RefList1,RefList2, RefLists),
   extract_all_refs([], Aggs,RefLis1, OtherArgs1),
   extract_all_refs([], Tail,RefLis2, OtherArgs2),
   append(RefLis1,RefLis2, RefLis),
   append([OtherArgs1],[OtherArgs2], OtherArgs3),
   (RefLists\=[],RefLists\=[[]];
    RefLis\=[]),
   !.

extract_all_refs(Refs, Adjs,RefLists, []):-
    Adjs\=[], list(Adjs),
    appiattisci(Adjs,Adjss),
%    remove(_-Xaggs, Adjss, Aggs), 
    subtract(Adjss, [_-Xaggs], Aggs),
    Aggs\=[],
   s_estrai_argomenti([1-Refs],_,RefList1),
   s_estrai_argomenti([1-Xaggs],_,RefList2),
   s_estrai_argomenti([1-Aggs],_,RefList3),
   append(RefList1,RefList2, RefLists1),
   append(RefLists1,RefList3, RefLists),
   RefLists\=[],
   !.

extract_all_refs(Refs, Adjs,[RefLists|RefLis], [[Lemm,Mods, VArgs]|OtherArgs3]):-
   \+ list(Adjs),
    Adjs=Pref-Args,
    list(Args), Args\=[], 
  ( 
     appiattisci(Args,Adjss),
     Adjss=[ClNo-List|_], nonvar(List),
     Modss=ClNo-[Lemm-VArgs-Cl, Aggs, Tail],
%     remove(Modss, Adjss,RestRefs)
     subtract(Adjss, [Modss], RestRefs)
    ;
     Args=[Neg, Lemm-VArgs, Mods, Aggs, Tail],
     Aggs\=[]
    ;
     Mod=[Neg, Lemm-VArgs, Mods, Aggs, Tail],
%     remove(Mod, Args,RestRefs),
     subtract(Args, [Mod], RestRefs),
     Aggs\=[];
   Args=[Xaggs, Aggs],Aggs\=[]),
   s_estrai_argomenti([1-Refs],_,RefList1),
   s_estrai_argomenti([1-RestRefs],_,RefList2),
   append(RefList1,RefList2, RefLists),
   extract_all_refs([], Aggs,RefLis1, OtherArgs1),
   extract_all_refs([], Tail,RefLis2, OtherArgs2),
   append(RefLis1,RefLis2, RefLis),
   append([OtherArgs1],[OtherArgs2], OtherArgs3),
   (RefLists\=[];
    RefLis\=[]),
   !.
 
extract_all_refs(Refs, [],RefList1, []):-
  ( list(Refs), Refss=[1-Refs]; 
     is_list(Refs), Refs=..[ref_ex|Rest], Refss=[1-[Refs]]),
   s_estrai_argomenti(Refss,_,RefList1),
   RefList1\=[],
   !.

extract_all_refs(Refs, Adjs,RefList, []):-
    Refs=[],Adjs\=[],
    s_estrai_argomenti([1-Adjs],_,RefList),
    RefList\=[],
   !.

extract_all_refs(Refs, [],RefList1, []):-
   list(Refs), 
   appiattisci(Refs,Reff),
   s_estrai_argomenti([1-Reff],_,RefList1),
   RefList1\=[],
   !.
    
extract_all_refs(Refs, Adjs,RefList, []):-
   s_estrai_argomenti([1-Refs],_,RefList),
   RefList\=[],
   !.

extract_all_refs([Ref|Refs], Adjs,[Refls|RefList], [Others|Args]):-   
  extract_all_refs(Ref, Adjs,Refls, Others),
  extract_all_refs(Refs, [],RefList, Args),
   !.
extract_all_refs([Ref|Refs], Adjs,RefList, Args):-
  extract_all_refs(Refs, [],RefList, Args),
   !.
extract_all_refs(Adjs,[Ref|Refs], [Refls|RefList], [Others|Args]):-   
  extract_all_refs(Ref, Adjs,Refls, Others),
  extract_all_refs(Refs, [],RefList, Args),
   !.
extract_all_refs(Adjs,[Ref|Refs], RefList, Args):-
  extract_all_refs(Refs, [],RefList, Args),
   !.

temporal_constraints(past,pluper).
temporal_constraints(past,perf).
temporal_constraints(pres,past).
temporal_constraints(past,past).
temporal_constraints(pres,pres).
temporal_constraints(P,nil).
temporal_constraints(nil,P).

detect_causal_relations(Input,[ODRel|Rest])
      :-
      (Result=rationale;Result=purpose;Result=motivation),
      on(sd_structure(Sym,
         NoCl, Topics, Result, Tense, _, _, _, _), Input),
      on(sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input),
      NC\=nil,NoCl\=nil,NC\=NoCl,
      (Les is NC - NoCl, 1=<Les; Les is NoCl - NC, 1=<Les),
      (DiscRel=narration;DiscRel=evidence;DiscRel=elaboration;DiscRel=explanation),
      (Rel=outcome, Result=rationale; Rel=outcome, Result=motivation; Rel=circumstance, Result=purpose),
      ODRel=sd_structure(Sym,NC, Tops, Rel, TempRel, MainRel, 
                                      Stato, DiscMove, DiscLev),
      remove(
        sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input, Rest),
        !.
detect_causal_relations(Input,
            [sd_structure(Sym,NC, Tops, cause, TempRel, MainRel, Stato, DiscMove, DiscLev)|Rest])
      :-
      (Result=result;Result=effect),
      on(sd_structure(Sym,
         NoCl, Topics, Result, Tense, _, _, _, _), Input),
      on(sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input),
      NC\=nil,NoCl\=nil,NC\=NoCl,
      (Les is NC - NoCl, 1=<Les; Les is NoCl - NC, 1=<Les),
      (DiscRel=narration;DiscRel=evidence;DiscRel=explanation;DiscRel=elaboration;DiscRel=result),
      temporal_constraints(Tense,TempRel),
      (
       (nlv(Verbs), on(MainRel,Verbs);
         amv(Verbs), on(MainRel,Verbs))
        ;DiscRel=result;DiscRel=effect),
      remove(
      sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input, Rest),
        !.
detect_causal_relations(Input,[ODRel|Rest])
      :-
      (Result=result;Result=effect),
      on(sd_structure(Sym,
         NoCl, Topics, Result, Tense, MainR, Stt, DMov, DiscL), Input),
      on(sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input),
      NC\=nil,NoCl\=nil,NC\=NoCl,
      (Les is NC - NoCl, 1=<Les; Les is NoCl - NC, 1=<Les),
      (DiscRel=narration;DiscRel=evidence;DiscRel=explanation;DiscRel=elaboration;DiscRel=result),
      (
        temporal_constraints(Tense,TempRel),
       (
        (nlv(Verbs), on(MainRel,Verbs);
         amv(Verbs), on(MainRel,Verbs))
         ;DiscRel=result;DiscRel=effect),
         ODRel=sd_structure(Sym,NoFr, Topics, cause, TempRel, MainRel, 
                           Stato, DiscMove, DiscLev),
         remove(sd_structure(Sym,NC, Tops, DiscRel, 
                TempRel, MainRel, Stato, DiscMove, DiscLev), 
                      Input, Rest)
          ;
         ODRel=sd_structure(Sym,NoCl, Topics, narration, Tense, MainR, Stt, DMov, DiscL),
         remove(sd_structure(Sym,NoCl, Topics, Result, Tense, MainR, Stt, DMov, DiscL), 
           Input, Rest)
          ),
        !.

detect_causal_relations(Input,[ODRel|Rest])
      :-
      (Result=result;Result=effect),
      on(sd_structure(Sym,
         NoCl, Topics, Result, Tense, MainR, Stt, DMov, DiscL), Input),
      length(Input, L),
      L=1,
      ODRel=sd_structure(Sym,NoCl, Topics, narration, Tense, MainR, Stt, DMov, DiscL),
      Rest=[],
      !.
detect_causal_relations(Input,[ODRel|Rest])
      :-
      (Result=result;Result=effect),
      findall(Result, on(sd_structure(Sym,
         NoCl, Topics, Result, Tense, MainR, Stt, DMov, DiscL), Input), Res),
      length(Res, L),
      2=<L,
      on(sd_structure(Sym,
         NoCl, Topics, Result, Tense, MainR, Stt, DMov, DiscL), Input),
      ODRel=sd_structure(Sym,NoCl, Topics, narration, Tense, MainR, Stt, DMov, DiscL),
         remove(sd_structure(Sym,NoCl, Topics, Result, Tense, MainR, Stt, DMov, DiscL), 
           Input, Rest),
      !.

detect_causal_relations(Input,[ODRel|Rest])
      :-
      on(sd_structure(Sym,
         NoCl, Topics, causal, Tense, _, _, _, _),Input),
      on(sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input),
      NC\=nil,NoCl\=nil,NC\=NoCl,
      (Les is NC - NoCl, 1=<Les; Les is NoCl - NC, 1=<Les),
    (
      on(sd_structure(_,Nol, _, result, Tens, _, _, _, _),Input),
      (Ls is NC - Nol, 1<Ls, 0<Les; Ls is Nol - NC, 1<Les, 0<Les)
      ; 
      \+ on(sd_structure(_,Nol, _, result, _, _, _, _, _),Input),
      (Tense=pluper;Tense=past;Tense=perf)
      ),
    check_view_aspect_result(NC),
    ODRel=sd_structure(Sym,NoCl, Topics, causal, Tense, _, _, _, _),
    remove(
      sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input,Rest),
        !.
detect_causal_relations(Input,[ODRel|Rest])
      :-
      (Cause=causal;Cause=cause),
      on(sd_structure(Sym,
         NoCl, Topics, Cause, Tense, Main, Stat, DiscM, DiscL),Input),
      check_remove_cause_effect(
            sd_structure(Sym,NoCl, Topics, Cause, Tense, Main, Stat, DiscM, DiscL),
              NoCl, Input,Rest,ODRel),
        !.
detect_causal_relations(Input,[ODRel|Rest])
      :-
      on(sd_structure(Sym,
         NoFr, Topics, narration, TempRel, MainRel, Stato, DiscMove, DiscLev),Input),
      findall(Pro-Ante-Ind, risolto(NoFr, Ind, Pro, Ante), Rs),
      on(that-'discourse bound'-_, Rs),
      check_view_aspect_verb_change(NoFr),
    ODRel=sd_structure(Sym,NoFr, Topics, cause, TempRel, MainRel, Stato, DiscMove, DiscLev),
   remove(
      sd_structure(Sym,
         NoFr, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input, Rest),
     !.            

detect_causal_relations(Input,Input):-!.

check_remove_cause_effect(Cause,NoCl, Input,Rest,ODRel):-
      on(sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input),
      NC\=nil,NoCl\=nil,NC\=NoCl,
      (Les is NC - NoCl, 1=<Les; Les is NoCl - NC, 1=<Les),
      (DiscRel=narration;DiscRel=evidence;DiscRel=elaboration;DiscRel=explanation),
      (Result=result;Result=effect),
    (
      on(sd_structure(_,Nol, _, Result, _, _, _, _, _),Input),
      (Ls is NC - Nol, 1<Ls, 0<Les; Ls is Nol - NC, 1<Les, 0<Les)
      ; 
      \+ on(sd_structure(_,Nol, _, Result, _, _, _, _, _),Input)
      ),
    check_view_aspect_result(NC),
    remove(
      sd_structure(Sym,
         NC, Tops, DiscRel, 
         TempRel, MainRel, Stato, DiscMove, DiscLev), Input,Rest),
    ODRel=sd_structure(Sym,NC, Tops, result, TempRel, MainRel, Stato, DiscMove, DiscLev),
       !.

check_remove_cause_effect(Cause,NoCl, Input,Rest,ODRel):-
      on(sd_structure(Sym,
         NC, Tps, DisRel, 
         TemRel, MaiRel, Stto, DisMove, DisLev), Input),
      NC\=nil,NoCl\=nil,NC\=NoCl,
      (Les is NC - NoCl, 1=<Les; Les is NoCl - NC, 1=<Les),
      (DiscRel=narration;DiscRel=evidence;DiscRel=elaboration;DiscRel=explanation),
      (Result=result;Result=effect),
    (
      on(sd_structure(_,Nol, _, Result, _, _, _, _, _),Input),
      (Ls is NC - Nol, 1<Ls, 0<Les; Ls is Nol - NC, 1<Les, 0<Les)
      ; 
      \+ on(sd_structure(_,Nol, _, Result, _, _, _, _, _),Input)
      ),
    \+ check_view_aspect_result(NC),
    Cause=..[sd_structure,Sy,Ind, Tops, cause|Res],
    remove(Cause, Input,Rest),
    ODRel=..[sd_structure,Sy,Ind, Tops, narration|Res],
        !.

check_view_aspect_verb_change(NoFr):-
   Infon=..[sinfo, NoFr, F/Role, 
   View, Intens, Change, Relev,
   Aspect, Verb, Tense, DiscRel, DiscDom, SubjConsc],
   Infon,
   Relevance=foreground,
   Change=culminated,
   !.

check_view_aspect_result(NoFr):-
   Infon=..[sinfo, NoFr, F/Role, 
   View, Intens, Change, Relev,
   Aspect, Verb, Tense, DiscRel, DiscDom, SubjConsc],
   Infon,
%   View=internal,
   (\+ sy(Verb); \+ coml(Verb,K); Aspect\=riportivo), 
   DiscDom=objective,
   Aspect \= stato, !.

search_nominals([], [], Cl, Cl):-!.
search_nominals([Pred|Cls], [Nom|Noms], Cl, Cll):-
    findall(Dep-Sem-Pred, (dgrs(N,Dgr),
                    term_to_atom(ncmod-R,Fu),
                   (Dgr=..[Fu,Sem, Pred-Ind, Dep-Id],
                     (Sem=for;Sem=because_of;Sem=as_a_result_of),  
                     nominalized_dep(Sem,Dep)
                   )), Nom),
    Nom\=[],
    No is Cl + 1,
    search_nominals(Cls, Noms, No, Cll),
    !.
search_nominals([Pred|Cls], [Nom|Noms], Cl, Cll):-
    findall(Dep-Sem-Pred, (dgrs(N,Dgr),
                    term_to_atom(ncmod-R,Fu),
                    (Dgr=..[Fu,Sem, Pred-Ind, Dep-Id],
                     (Sem=for;Sem=because_of;Sem=as_a_result_of),  
                      Dgr1=..[ncmod,_,Dep-Id,Dep1],
                     dgrs(N,Dgr1),
                     nominalized_dep(Sem,Dep1)
                   )), Nom),
    Nom\=[],
    No is Cl + 1,
    search_nominals(Cls, Noms, No, Cll),
    !.
search_nominals([Pred|Cls], Noms, Cl, Cll):-
    search_nominals(Cls, Noms, Cl, Cll),
    !.

nominalized_dep(for,Dep):-
    v(Dep,L),
    !.
nominalized_dep(for,Dep):-
    lemmatize_dic_v(Dep,Lem,K),
    v(Lem,L),
    !.
nominalized_dep(Sem,Dep):-
    hrv(Dep,P),
    P\=1,
    !.
nominalized_dep(Sem,Dep):-
    Sem\=for,
    pnw(Ps),on(Dep,Ps),!.
nominalized_dep(Sem,Dep):-
    Sem\=for,
    nlv(Ps),on(Dep,Ps),!.
    
%        test_args_antes(NArgs,Args),

createinds(Id,Id0,Idss):-
    is_list(Id),
    append([Id0],Id,Ids),
    sort(Ids,Idss)
    ;
    atomic(Id),
    Idss=[Id,Id0],
    !.

get_adjective(Head,Head,Aspect):-
    pred_a(Head,Cat,Args),
    transLCat(Cat,Aspect),
    !.

get_adjective(Head,Lem,Aspect):-
    rj(Head,Lem,F),
    pred_a(Lem,Cat,Args),
    transLCat(Cat,Aspect),
    !.
get_adjective(Head,Head,stato):-
   (jj(Head);upper_wsj(Head,Cats)),
   trova_CatSem(n, Head, CatSem),
   CatSem\=nil,CatSem\=[],
   (on(sociale,CatSem);on(relat,CatSem)),
    !.
transLCat(Cat,attivita):-
    on(valutativo,Cat),
    on(emotivo,Cat),
    on(soggettivo,Cat),
    on(misura,Cat),
    on(quant,Cat),
    on(quantif,Cat),
    on(telic,Cat),
    on(privative,Cat),
    !.
transLCat(Cat,stato):-
    on(stato,Cat),
    on(estens,Cat),
    on(locat,Cat),
    on(stato_temp,Cat),
    on(modal,Cat),
    on(tempo,Cat),
    on(appartenenza,Cat),
    on(provenienza,Cat),
    on(astratto,Cat),
    !.

get_adj_head_verb(Args,Cop,Verb,Aspect,Rest):-
   remove(Cop-Arg,Args,Rest),
   (Cop=there_be, Head=be;
    on(Id-Cop-Role-Head-_,Arg);
   on(Id-P-Role-Head,Arg), Id\=A-B),
  (trova_CatSem(n, Head, CatSem),
   CatSem\=nil,CatSem\=[],
   (
     on(attivita,CatSem);on(evento,CatSem);on(informa,CatSem);on(stato,CatSem)),
      morf_cat(Head, C,L),
      (L = Head-Verb-n-Feats;L=Verb),
      cat_gramm(Verb, CatGr, Aspect, LArgsV)
      ;
      get_adjective(Head,Verb,Aspect)
      ;
      up_wn(Head,_,_), Verb=Head),
    !.

compute_info_structure([],Args,[]):-!.
compute_info_structure([Clause|Clauses],Args,[Infon|Infos]):-
   (Clause=[NoFr, Direct, Cop, Tense, active, Neg, Mod, nil, Mood, nil, Cats];
   Clause=[NoFr, Direct, Cop, Tense, active, Neg, Mod, nil, Mood, nil, Cats,xcomp,R,Cop,H,nil];
   Clause=[NoFr, Direct, Cop, Tense, active, Neg, Mod, nil, Mood, nil, Cats,CMod,Subor,Gov,Cop,Sems]),
    (Cop=be;Cop=have;Cop=there_be),
   get_adj_head_verb(Args,Cop,Verb,Aspect,Rest),
   view(NoFr,xcomp/prop,Speech,Aspect,Voice,Verb,Support,View),
   stato(_, State),
   perform(Verb, Support, Perform),
   newfactivity(Verb, Tense, Mood, Progr, FunRole, Support, Intens),
   change(Speech,Pol,Support,View,Mood,Tense,Aspect,Change),
   relevance(Change, Relev),
   OtherClause is NoFr - 1,
   prec_sentence_info(
      NoFr, PrecChange, PrecState, PrecSemCat,
      PrecTesIndex, PrecDiscRel, PrecDiscDom, OtherClause),
   sdisc_relation(
      NoFr, View, FunRole, 
      Relev, Intens, Aspect,
      [PrecChange, Change], [PrecState, State],
      Verb, Support, [PrecSemCat, Aspect],
      Focs,
      PrecDiscRel,
      DiscRel),
   sdisc_domain(Intens,Args,
      NoFr, Verb, xcomp/prop, Aspect, Mood, Perform, PrecDiscDom,
      DiscDom, SubjConsc),
   Infon=..[sinfo, NoFr, xcomp/Role, 
   View, Intens, Change, Relev,
   Aspect, Verb, nil, DiscRel, objective, nil],
   asserta(Infon),
   writenl(_,Infon),
   compute_info_structure(Clauses,Rest,Infos),
   !.
   
compute_info_structure([Clause|Clauses],Args,[Infon|Infos]):-
   (Clause=[NoFr,Speech,Verb,Tense,Voice,Pol,Support,Progr,Mood,Focs,Aspect,Eigth,Ninth,Tenth,Elth,Tweth,Thirth], 
   Head=Thirth
     ;
    Clause=[NoFr,Speech,Verb,Tense,Voice,Pol,Support,Progr,Mood,Focs,Aspect,Eigth,Ninth,Tenth,Elth,Tweth],
   Head=Tweth
     ;
    Clause=[NoFr,Speech,Verb,Tense,Voice,Pol,Support,Progr,Mood,Focs,Aspect],
   Head=Verb     
   ),
   Verb\=nil,
   getFunRole(Args,Verb,Mood,Eigth,Ninth,Tenth,Elth,Head,FunRole),
   view(NoFr,FunRole,Speech,Aspect,Voice,Verb,Support,View),
   stato(_, State),
   perform(Verb, Support, Perform),
   newfactivity(Verb, Tense, Mood, Progr, FunRole, Support, Intens),
   change(Speech,Pol,Support,View,Mood,Tense,Aspect,Change),
   relevance(Change, Relev),
   OtherClause is NoFr - 1,
   prec_sentence_info(
      NoFr, PrecChange, PrecState, PrecSemCat,
      PrecTesIndex, PrecDiscRel, PrecDiscDom, OtherClause),
   sdisc_relation(
      NoFr, View, FunRole, 
      Relev, Intens, Aspect,
      [PrecChange, Change], [PrecState, State],
      Verb, Support, [PrecSemCat, Aspect],
      Focs,
      PrecDiscRel,
      DiscRel),
   sdisc_domain(Intens,Args,
      NoFr, Verb, FunRole, Aspect, Mood, Perform, PrecDiscDom,
      DiscDom, SubjConsc),
   Infon=..[sinfo, NoFr, FunRole, 
   View, Intens, Change, Relev,
   Aspect, Verb, Tense, DiscRel, DiscDom, SubjConsc],
   asserta(Infon),
   writenl(_,Infon),
   compute_info_structure(Clauses,Args,Infos),
   !.
compute_info_structure([Clause|Clauses],Args,[Infon|Infos]):-
   Clause=[NoFr,Speech,Verb,Sem,Gov],
   trova_CatSem(n, Verb, CatSem),
   up_tipo_agg(Role, Sem, CatSem),
   Infon=..[info, NoFr, ncmod/Role, 
   View, Intens, Change, Relev,
   Aspect, Verb, nil, Role, objective, nil],
   asserta(Infon),
   writenl(_,Infon),
   compute_info_structure(Clauses,Args,Infos),
   !.
compute_info_structure([Clause|Clauses],Args,Infos):-
   compute_info_structure(Clauses,Args,Infos),
   !.

writepov:-
      genre(dialogue),
      speaker(NoFr,Pred),
   write('p_o_view:'), write(Pred),
   nl,nl,
   !.
writepov:-
   (genre(dialogue),Narr=speaker;genre(narrative),Narr=narrator),
   write('p_o_view:'), write(Narr),
   nl,nl,
   !.
