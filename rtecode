:- style_check(-singleton). 

writecosts2([]):-!.
writecosts2([Func-Ind-Head-Cost-P|Costs]):-
   Ref=..[w,Func,Ind,Head,Cost,P],
   writenl(_,Ref),
   writecosts2(Costs),
   !.
listing_idx:-
   setof(N-W-T-C-P, idx(N, W, T, C, P),Words),
   writecosts2(Words),
   nl,nl,
   !.
listing_idx:-!.

rteparseonetext1(Text,Output):-
  retractall(current_num(_,_)),
  newtager(Text,Output),
  listing_idx,
  findall(Code,fp(Code,_), Codes),
  init_sems,
  length(Codes,L),
  analyseall1(L,Text,Codes,Logfil),
  !.

analyseall1(L,Text,Codes,Logfil):-
  parse_discourses(L,Text,Codes, 0, N, Evals),
   getcfilename(Text,Outs,Name),
  evaluate_folder1(Name,Evals, Stat).

evaluate_folder1(Input,Evals, stat(Score)):-
  nl,nl,
  separate_GRs(Evals, RefExs,GRs,Costs),
  writerte_eval(Input,RefExs,GRs),
  rte_evaluation_module1(Input,Score, RefExs, GRs, Costs),
  write_score(riassunto,Input,Score).


rteparseonetext2(Text,Output):-
   abolish(statsfp/5),
   asserta(statsfp(0,0,0,0,0)),
  retractall(current_num(_,_)),
  newtager(Text,Output),
  findall(Code,fp(Code,_), Codes),
  init_sems,
  length(Codes,L),
  analyseall2(L,Text,Codes,Logfil),
  !.

analyseall2(L,Text,Codes,Logfil):-
  parse_discourses(L,Text,Codes, 0, N, Evals),
   getcfilename(Text,Outs,Name),
  evaluate_folder2(Name,Evals, Stat).

evaluate_folder2(Input,Evals, stat(Score)):-
  separate_GRs(Evals, RefExs,GRs,Costs),
  writerte_eval(Input,RefExs,GRs),
  rte_evaluation_module22(Input,Score, RefExs, GRs, Costs),
  write_score(riassunto,Input,Score),
  mem_stat_ft(Input,Score).

rteparseonetext3(Text,Output):-
  retractall(current_num(_,_)),
  newtager(Text,Output),
  findall(Code,fp(Code,_), Codes),
  init_sems,
  length(Codes,L),
  analyseall3(L,Text,Codes,Logfil),
  !.

analyseall3(L,Text,Codes,Logfil):-
  parse_discourses(L,Text,Codes, 0, N, Evals),
   getcfilename(Text,Outs,Name),
  evaluate_folder3(Name,Evals, Stat).

evaluate_folder3(Input,Evals, stat(Score)):-
  separate_GRs(Evals, RefExs,GRs,Costs),
  writerte_eval(Input,RefExs,GRs),
  rte_evaluation_module33(Input,Score, RefExs, GRs, Costs),
  write_score(riassunto,Input,Score).


rte_all_texts1(Files,Output):-
   abolish(statsfp/5),
   asserta(statsfp(0,0,0,0,0)),
   rteopenfile1(Files,Output),
   compute_ft_total(riassunto,Stats),
   !.

rteopenfile1([],Output):-!.

rteopenfile1([outs|Noms],Output):-
   rteopenfile1(Noms,Output),
   !.
rteopenfile1([Text|Noms],Output):-
   parse_one_discourse1(Text,Output,Evals, stat(Stat)),
   init_lexicon,
   rteopenfile1(Noms,Output),
   !.

getfileout(Pref,Text,File):-
  mcon(Pref,'_',Fil),
  mcon(Fil,Text,File),
   !.
composefilename2(Text,File):-
   concat_atom(K,'_',Text),
   reverse(K,[Fil|Rev]),
   stringof(List,Fil),
   reverse(List,[TF|Revl]),
   reverse(Revl,Num),
   stringof(Num,N),
   rte4(N,True,Type),
%   evl(N,True,Type),
   maketype(True,P),
   mcon(id,'_',T),
   mcon(T,N,T2),
   mcon(T2,P,File),
   !.

parse_one_discourse1(Text,Input,Evals, stat(Stat)):-
  retractall(current_num(_,_)),
  newtager(Text,Input),
  findall(Code,fp(Code,_), Codes),
  init_sems,
  length(Codes,L),
%   composefilename2(Text,File),
  allparse_discourses(L,Text,Codes, 0, N, Evals),
  evaluate_one_folder1(Text,Evals, Stat).

%evaluate_one_folder1(Input,Evals, []):-!.
evaluate_one_folder1(Input,Evals, stat(Score)):-
  separate_GRs(Evals, RefExs,GRs,Costs),
  writerte_eval(Input,RefExs,GRs),
  rte_evaluation_module1(Input,Score, RefExs, GRs, Costs),
  write_score(riassunto,Input,Score),
  mem_stat_ft(Input,Score).

rte_all_texts2(Files,Output):-
   abolish(statsfp/5),
   asserta(statsfp(0,0,0,0,0)),
   rteopenfile2(Files,Output),
   compute_ft_total(riassunto,Stats),
   !.

rteopenfile2([],Output):-!.

rteopenfile2([outs|Noms],Output):-
   rteopenfile2(Noms,Output),
   !.
rteopenfile2([Text|Noms],Output):-
   parse_one_discourse2(Text,Output,Evals, stat(Stat)),
   init_lexicon,
   rteopenfile2(Noms,Output),
   !.

parse_one_discourse2(Text,Input,Evals, stat(Stat)):-
  retractall(current_num(_,_)),
  newtager(Text,Input),
  findall(Code,fp(Code,_), Codes),
  init_sems,
  length(Codes,L),
%  composefilename2(Text,File),
  allparse_discourses(L,Text,Codes, 0, N, Evals),
%  evaluate_one_folder2(Text,Evals, Stat).
  evaluate_folder2(Text,Evals, Stat).

evaluate_one_folder2(Input,Evals, stat(Score)):-
  nl,nl,
  separate_GRs(Evals, RefExs,GRs,Costs),
  writerte_eval(Input,RefExs,GRs),
  rte_evaluation_module2(Input,Score, RefExs, GRs, Costs),
  write_score(riassunto,Input,Score),
  mem_stat_ft(Input,Score).

rte_all_texts3(Files,Output):-
   abolish(statsfp/5),
   asserta(statsfp(0,0,0,0,0)),
   rteopenfile3(Files,Output,1),
   compute_ft_total(riassunto,Stats),
   !.

rteopenfile3([],Output,N):-!.

rteopenfile3([outs|Noms],Output,N):-
   rteopenfile3(Noms,Output,N),
   !.
rteopenfile3([Text|Noms],Output,N):-
   parse_one_discourse3(Text,Output,Evals, stat(Stat)),
   garb_coll(N),
   N1 is N + 1,
   init_lexicon,
   rteopenfile3(Noms,Output,N1),
   !.

parse_one_discourse3(Text,Input,Evals, stat(Stat)):-
  retractall(current_num(_,_)),
  newtager(Text,Input),
  findall(Code,fp(Code,_), Codes),
  init_sems,
  length(Codes,L),
%   composefilename2(Text,File),
  allparse_discourses(L,Text,Codes, 0, N, Evals),
  evaluate_one_folder3(Text,Evals, Stat).

evaluate_one_folder3(Input,Evals, stat(Score)):-
  separate_GRs(Evals, RefExs,GRs,Costs),
  rte_evaluation_module33(Input,Score, RefExs, GRs, Costs),
  write_score(riassunto,Input,Score),
  mem_stat_ft(Input,Score).

allparse_discourses(0,Input,[],NoFr, NoFr,[]) :-!.

allparse_discourses(1, Input,[Code|Codes], NoFr, Cl,[[Evaluate]|Evals]) :-
	format("DEBUG: allparse_discourses: running~n"),
   getcfilename(Code,Outs,Name),
	format("DEBUG: allparse_discourses: fp~n"),
   fp(Code,Sent),
   nl,
	format("DEBUG: allparse_discourses: Name~n"),
   writenl(_,Name),
	format("DEBUG: allparse_discourses: Sent~n"),
   writeseqnl(_,Sent),
   nl,
	format("DEBUG: allparse_discourses: Modss~n"),
   writenl(Modss, '**************************'),
   nl,
	format("DEBUG: allparse_discourses: rectractall~n"),
  retractall(frase_corrente(_,_)),
  NoFr1 is NoFr + 1,
	format("DEBUG: allparse_discourses: hypo_parse~n"),
  hypo_parse(NoFr1, Code, Out, NewNoCl, Input, Evaluation),
	format("DEBUG: allparse_discourses: listing_ref_funcs~n"),
  listing_ref_funcs,
  Evaluate=..[Code,Evaluation,Out],
  allparse_discourses(0,Input,Codes, NewNoCl, Cl,Evals),
  !.

allparse_discourses(L,Input,[Code|Codes], NoFr, Cl,[Evaluate|Evals]) :-
  retractall(frase_corrente(_,_)),
   getcfilename(Code,Outs,Name),
   fp(Code,Sent),
   checksent(Sent),
   nl,
   writenl(_,Name),
   writeseqnl(_,Sent),
  NoFr1 is NoFr + 1,
  hypo_parse(NoFr1, Code, Out, NewNoCl, Input, Evaluation),
  listing_ref_funcs,
  Evaluate=..[Code,Evaluation,Out],
  L1 is L-1,
  allparse_discourses(L1,Input,Codes, NewNoCl, Cl,Evals),
  !.
allparse_discourses(L,Input,[Code|Codes], NoFr, Cl,Evals) :-
  L1 is L-1,
  allparse_discourses(L1,Input,Codes, NoFr, Cl,Evals),
  !.

checksent(Sent):-
   length(Sent,L),
   3 =< L,
    !.
    
allconsistent_preds(Pred,Pred1,-1):-
      nonvar(Pred),nonvar(Pred1),
       (\+ processverb(Pred), \+ processverb(Pred1)
       ;
       processverb(Pred), processverb(Pred1)),
      light_verbs(Pred),!.
allconsistent_preds(Pred,Pred1,-1):-
      nonvar(Pred),nonvar(Pred1),Pred=Pred1,!.
allconsistent_preds(Pred1,Pred2,Score1):-
      allcheck_synset(Pred1,Pred2,Score1).
allconsistent_preds(Pred1,Pred2,-1):-
       entail(Pred1,Pred2).
allconsistent_preds(Pred1,Pred2,-1):-
       entail(Pred2,Pred1).
allconsistent_preds(Pred1,Pred2,-1):-
       search_verb_inference(Pred1,Pred2),
      consistent_similar_pred(Pred1,Pred2),!.

allconsistent_preds(Pred1,Pred2,10):-
      allconsistent_similar_pred(Pred1,Pred2),!.

allconsistent_preds(Pred1,Pred2,10):-
      allconsistent_similarpred(Pred1,Pred2),!.

allconsistent_preds(Pred1,Pred2,Score):-
      (atvs(Pred1,Preds), Preds\=[],
       checkconsistents(Preds,Pred2,Score)
       ;
       atvs(Pred2,Preds), Preds\=[],
       checkconsistents(Preds,Pred1,Score)
       ),
      !.

checkconsistents([Pred1|Preds],Pred2,Score):-
       consistent_preds(Pred1,Pred2,Score),
       checkconsistents(Preds,Pred2,Score),
      !.

allcheck_synset(Pred1,Pred2,-10):-
   sysv(Pred1-Syns1),
   sysv(Pred2-Syns2),
   (on(Pred1,Syns2)
    ;
    on(Pred2,Syns1)),
      !.
allcheck_synset(Pred1,Pred2,10):-
   sysv(Pred1-Syns1),
   on(Pred2,Syns1),
      !.
allcheck_synset(Pred1,Pred2,10):-
   sysv(Pred2-Syns1),
   on(Pred1,Syns1),
      !.
allcheck_synset(Pred1,Pred2,10):-
   findall(Code1,rgt(Pred1,Code1),Codes1),
   Codes1\=[],
   findall(Code2,rgt(Pred2,Code2),Codes2),
   Codes2\=[],
   intersection(Codes1,Codes2, Ints), Ints\=[],
   !.

allconsistent_similarpred(Pred1,Pred2):-
       findall(Pre, (
                   vmtn(Pred2),vmtn(Pred1)
                   ;
                   vbdy(Pred2),vbdy(Pred1)
                   ), Preds1),Preds1\=[],
                   !.
allconsistent_similar_pred(Pred1,Pred2):-
     (sysv(Pred2-Syns2),
       on(Pred3,Syns2),
       match_approximate(Pred1,Pred3)
      ;
       sysv(Pred1-Syns1),
       on(Pred3,Syns1),
       match_approximate(Pred2,Pred3)
      ;
       findall(Pred1-Pred2,(sysv(Pred1-Syns1);sysv(Pred2-Syns2)),Pres), Pres=[],
       match_approximate(Pred2,Pred1)
       ),!.

allconsistent_similar_pred(Pred1,Pred2):-
       match_approximate(Pred2,Pred1),!.

generic_head1(person, [man]).
generic_head1(person, [woman]).
generic_head1(man, [man]).
generic_head1(woman, [woman]).
generic_head1(Tes,CatSem):-
  atomic(Tes),
  cwn(Tes),
  trova_CatSem(n,Tes, CatSem),CatSem\=[],CatSem\=nil.
generic_head1(Tess,CatSem):-
  list(Tess),
  on(Tes,Tess),
  cwn(Tes),
  trova_CatSem(n,Tes, CatSem),CatSem\=[],CatSem\=nil.
generic_head1(Tes,CatSem):-
  atomic(Tes),
  gn(Tes,Class),
  trova_CatSem(n,Tes, CatSem),CatSem\=[],CatSem\=nil.
generic_head1(Tess,CatSem):-
  list(Tess),
  on(Tes,Tess),
  gn(Tes,Class),
  trova_CatSem(n,Tes, CatSem),CatSem\=[],CatSem\=nil.

fetchpassive(Hypo,Pa):-
          on(A-T-Pa-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Hypo),!
          ;
          on(A-B-Pa-D-E-F-G-H-I,Hypo),!
          ;
          on(A-T-Pa-D-E1-F1-Aux-J-I1,Hypo),!
          ;
          on(A-B-Pa-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Hypo),
          !.

rtant(1,2).
rtant(3,4).
rtant(5,6).
rtant(7,8).
rtant(9,10).
rtant(13,15).
rtant(12,14).
rtant('16a',16).
rtant(17,18).
rtant(19,'20a').
rtant(19,20).
rtant(21,22).
rtant(23,24).
rtant(27,28).
rtant(31,32).
rtant(33,34).
rtant(35,36).
rtant(37,38).
rtant(39,40).
rtant(35,'40a').
rtant(41,42).
rtant(43,44).
rtant(44,45).
rtant(46,47).
rtant(48,49).
rtant(50,51).
rtant(52,53).
rtant(54,55).
rtant(56,57).
rtant(58,59).
rtant(42,'59a').
rtant(60,61).
rtant(62,63).
rtant(64,65).
rtant(66,67).
rtant(66,68).
rtant(69,70).
rtant(72,73).
rtant(74,75).
rtant(76,77).
rtant(78,79).
rtant(80,81).
rtant(82,83).
rtant(86,87).
rtant(87,89).
rtant(87,90).
rtant(87,92).
rtant(91,94).
rtant(89,92).
rtant(90,96).
rtant(93,96).
rtant(87,95).
rtant(87,98).
rtant(97,99).
rtant(94,99).
rtant(91,99).
rtant(87,100).
rtant(87,'100a').
rtant(87,101).
rtant(102,103).
rtant(106,107).
rtant(104,105).
rtant(105,108).
rtant(105,'108a').
rtant(105,109).
rtant(110,111).
rtant(112,113).
rtant(114,115).
rtant(116,117).
rtant(118,119).
rtant(121,122).
rtant(123,124).
rtant(125,126).
rtant(127,128).
rtant(128,129).
rtant(132,133).
rtant(130,131).
rtant('132a',133).
rtant(134,135).
rtant(136,137).
rtant(138,139).

writebannerLF:-
    nl,
    writenl(_,'Logical Forms for Semantic Similarity Matching'),
    nl,
    !.
writebannerOnt:-
    nl,
    writenl(_,'VENSES failed but has authorized Ontology Consistency Matching'),
    nl,
    writenl(_,'These are the Entities and Properties passed to UMBEL'),
    !.

recursiveLFsearchhyp(Args,Adjs,HLFs):-
     appiattisci(Args,Argg),
     appiattisci(Adjs,Adjj),
     sort(Argg,Hp),
     sort(Adjj,Aj),
     append(Hp,Aj,Hypoo),
     sallpreds(Hypoo,Hypo,[],[],Hyps,Texs),
     selectpasLFs(Hyps,Hypoo,HLFs),
    !.
recursiveLFsearchtext([],[],[]):-!.
recursiveLFsearchtext([Args|Resta],[Adjs|Restj],[HLF|HLFs]):-
     appiattisci(Args,Argg),
     appiattisci(Adjs,Adjj),
     sort(Argg,Hp),
     sort(Adjj,Aj),
     append(Hp,Aj,Hypoo),
     sallpreds(Hypoo,Hypo,[],[],Hyps,Texs),
     selectpasLFs1(Hyps,Hypoo,HLF),
     recursiveLFsearchtext(Resta,Restj,HLFs),
    !.

checknegatedLFs([Cl-P-[Subj,LF]|HLFs],TLFs):-
    searchsubjectmatch(Cl-P-[Subj,LF],TLFs,_,_),
%    Subj=[Sub|_],
    findall(P1-Subj,(on(Cl1-P1-[Sub,LF1],TLFs),
                      matchnegv(P,P1)), Negs),
    (Negs=[]
     ;
    nlv(Verbs),
    on(P,Verbs),
    findall(P1-Subj,(on(Cl1-P1-[Sub,LF1],TLFs),
                      matchnegv(be,P1)), Negs1),
    Negs1\=[]),
    !.
checknegatedLFs1([H,T],[Cl-P-[Subj,LF]|HLFs],TLFs):-
    (\+health(P)
     ;
     findall(P1-Sub,(on(Cl1-P1-[Sub,LF1],TLFs),
                      matchnegv(P1,be)), Neg),
     Neg\=[]),
    !.

matchnegv1(P,P1):-!.
matchnegv(P,P1):-
    nlv(Verbs),
    on(P,Verbs),
    \+ on(P1,Verbs).
matchnegv(P,P1):-
    nlv(Verbs),
    \+ on(P,Verbs),
    on(P1,Verbs).
matchnegv(P,P1):-
    \+ health(P),
    health(P1).
matchnegv(P,P1):-
    \+ health(P1),
    health(P).

creaLFswrite1(ArgsProp,AdjsProp,TextArgs,TextAdjs,RteArg,RteAdj,HLFs,TLFss1):-
     writebannerLF,
     ArgsProp=[RteArg|TextArgs],
     AdjsProp=[RteAdj|TextAdjs],
     recursiveLFsearchhyp(RteArg,RteAdj,HLFs),
     writeallLfs(HLFs),nl,
     recursiveLFsearchtext(TextArgs,TextAdjs,TLFss),
     sort(TLFss,TLFs1),
     appiattisci(TLFs1,TLFss1),
     writeallLfs(TLFss1),
     !.    
creaLFswrite(ArgsProp,AdjsProp,HLFs,TLFss1):-
     writebannerLF,
     ArgsProp=[RteArg|TextArgs],
     AdjsProp=[RteAdj|TextAdjs],
     recursiveLFsearchhyp(RteArg,RteAdj,HLFs),
     writeallLfs(HLFs),nl,
     recursiveLFsearchtext(TextArgs,TextAdjs,TLFss),
     sort(TLFss,TLFs1),
     appiattisci(TLFs1,TLFss1),
     writeallLfs(TLFss1),
     !.    

pareciastruct(TLFss,TLFs,RteArg,RteAdj,TextArgs,TextAdjs,Predss,Hypoo,Predss1,Textt):-
     appiattisci(TLFss,TLFs),
     append(RteArg,RteAdj,Hyp),
     append(Hyp,Predss,Hyppoo),
     sort(Hyppoo,Hypoo),
     append(TextArgs,Predss1,Textts),
     append(Textts,TextAdjs,Texttt),
     sort(Texttt,Textt),
     !.    

filtersubjectpreds([Hypo,Text],Hyp,AllC,RefExs, [ArgsProp,AdjsProp],HLFs,TLFss1,Rest):-
     creaLFswrite(ArgsProp,AdjsProp,HLFs,TLFss1),
     !,
     checknegatedLFs1([Hypo,Text],HLFs,TLFss1),
     matchsubjpredsLFs([Hypo,Text],Hyp,AllC,RefExs,HLFs,TLFss1,Rest),
     !.

matchsubjpredsLFs([H,T],Hyp,AllC,RefExs,HLFs,TLFss,Hyp3):-     
     appiattisci(TLFss,TLFs),
     eliminateallwords2(Hyp,AllC,Hyp3,Rest),
     matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,HLFs,TLFs,Subjs),
     !,
     evaluateweights(Rest,Ws),
     (Hyp3=[], Ws=A-B, A =< B
            ;Hyp3\=[]),
           nl, write(Subjs),nl, write(Hyp3),nl,
     Subjs=[],
/*     (Hyp3=[], Ws=A-B, Half is B/2, 
            (A =< Half;A=0;10<B, Half1 is Half + 1, A =< Half1)
            ;Hyp3\=[]),
*/     !.

matchallsubjpredLFs(HT,RefExs,Rest,Hyp3,[],TLFs, []):-
       !.
matchallsubjpredLFs(HT,RefExs,Rest,Hyp3,[Cl-P-[Subj,LF]|HLFs],TLFs, []):-
     P\=marry,P\=bear,
     light_verbs(P), Subj\=[there],
     on(Cl1-P1-[Sub1,TLF],TLFs),
     searchsubjectnonverb(Subj,[Sub1,TLF],Sub),
     (
%     strict_head_match(P,P1,_)
     main_head_match(P,P1,_)
     ;
     light_verbs(P)
     ;
      sloppy_match(P,P1,_)).
%     matchallsubjpredLFs(HT,RefExs,Rest,Hyp3,HLFs,TLFs, Ss).

matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,[Cl-P-[Subj,LF]|HLFs],TLFs, []):-
     P\=marry,P\=bear,
     getpassiveLF([H,T],P,LF),
     on(Cl1-P1-[Sub1,TLF],TLFs),
%     strict_head_match(P,P1,_),
     (main_head_match(P,P1,_)
      ;sloppy_match(P,P1,_)),
     searchsubjectnonverb(Subj,[Sub1,TLF],Sub).
%     matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,HLFs,TLFs, Ss).

matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,[Cl-P-[Subj,LF]|HLFs],TLFs, []):-
     (\+ light_verbs(P);Subj=[there]),
     \+ getpassiveLF([H,T],P,LF),
     P\=marry,P\=bear,
     on(Cl1-P1-[Sub1,TLF],TLFs),
     searchsubjectnonverb2(P,Subj,TLFs,Sub,Rest,Hyp3),
/*     matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,HLFs,TLFs, Ss),
     searchsubjectnonverb(Subj,[Sub1,TLF],Sub),
     searchsubjectmatch(Cl-P-[Subj,LF],TLFs,LF1,TLF).
     searchsubjectmatch2(Cl-P-[Subj,LF],TLFs,LF1,TLF,Rest,Hyp3),
*/     !.

matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,[Cl-P-[Subj,LF]|HLFs],TLFs, []):-
     \+ health(P),
     (\+ light_verbs(P);Subj=[there]),
     \+ getpassiveLF([H,T],P,LF),
     P\=marry,P\=bear,
     searchsubjectnonverb2(P,Subj,TLFs,Sub,Rest,Hyp3),
/*     matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,HLFs,TLFs, Ss),
     on(Cl1-P1-[Sub1,TLF],TLFs),
     searchsubjectnonverb(Subj,[Sub1,TLF],Sub),
     searchsubjectmatch(Cl-P-[Subj,LF],TLFs,LF1,TLF),
*/     !.
matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,[Cl-P-[Subj,LF]|HLFs],TLFs, []):-
     P\=marry,P\=bear,
     (\+ light_verbs(P);Subj=[there]),
     \+ getpassiveLF([H,T],P,LF),
     on(Cl1-P1-[Sub1,TLF],TLFs),
     on(Pred-Arg,TLF),
     lemmatize_dic(Pred,Lem,K),
%     strict_head_match(P,Lem,_),
     (main_head_match(P,Lem,_)
      ;sloppy_match(P,Lem,_)),
     searchsubjectnonverb2(P,Subj,TLFs,Sub,Rest,Hyp3).
/*     matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,HLFs,TLFs, Ss),
     on(Cl1-P1-[Sub1,TLF],TLFs),
     searchsubjectnonverb(Subj,[Sub1,TLF],Sub),
     searchsubjectmatch(Cl-P-[Subj,LF],TLFs,LF1,TLF),
    !.
matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,[Cl-P-[Subj,LF]|HLFs],TLFs, [P-Subj|Ss]):-
     HLFs\=[],
     matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,HLFs,TLFs, Ss),
     !.
*/     
matchallsubjpredLFs([H,T],RefExs,Rest,Hyp3,[Cl-P-[Subj,LF]|HLFs],TLFs, [P-Subj]):-
     !.
createpasLF(Hypo,Text,Predss,Predss1, RefExs, [ArgsProp,AdjsProp]):-
     creaLFswrite1(ArgsProp,AdjsProp,TextArgs,TextAdjs,RteArg,RteAdj,HLFs,TLFss1),
     !,       
     checknegatedLFs1([Hypo,Text],HLFs,TLFss1),
     matchargsadjsLFs([Hypo,Text],RefExs,RteArg,RteAdj,
                   TextArgs,TextAdjs,Predss,Predss1,HLFs,TLFss1),
     !.
     
matchargsadjsLFs(HT,RefExs,RteArg,RteAdj,TextArgs,TextAdjs,Predss,Predss1,HLFs,TLFss):-     
     appiattisci(TLFss,TLFs),
     append(RteArg,RteAdj,Hyp),
     append(Hyp,Predss,Hyppoo),
     sort(Hyppoo,Hypoo),
     append(TextArgs,Predss1,Textts),
     append(Textts,TextAdjs,Texttt),
     sort(Texttt,Textt),
     matchallLFs(HT,RefExs,Hypoo,Textt,HLFs,TLFs),
     !.

matchargsadjsLFs(HT,RefExs,RteArg,RteAdj,TextArgs,TextAdjs,Predss,Predss1,[Cl-Pre1-[Subj,LF]|HLFs],TLFss):-
     Pre1\=marry,Pre1\=bear,
     RefExs=[Refs,RefEx],
     Ref=ref_ex(Ind,Head,Tab,P,G,N,C,Func/Ruolo)/S-_,
     Ref1=ref_ex(Ind1,Head1,Tab1,P1,G1,N1,C1,Func1/Ruolo1)/S1-_,
     (Ref2=ref_ex(Ind2,Head1,Tab2,P1,G1,N1,C1,Func2/Ruolo2)/S2-_,Head2=Head1;
      Ref2=ref_ex(Ind2,Head,Tab2,P1,G1,N1,C1,Func2/Ruolo2)/S2-_,Head2=Head),
     on(Ref, Refs),
     on(Ref1, Refs),Head\=Head1,
     on(Ref2, RefEx),
     checkheadstopps(RefEx,Head,Tab,Head1,Tab2,Hea,Ta,Hea1,Ta2),
     searchmainsecond(Hea,Hea1,[Ta,Tab1,Ta2],[Head-Func/Ruolo,Head1-Func1/Ruolo1,Head2-Func2/Ruolo2],Tab2,[Cl-Pre1-[Subj,LF]|HLFs],TLFss,Main),
     Main\=[],
     writebannerOnt,
     writenl(_,Main),
     !.


checkheadstopps(RefEx,Head,Ta,Head1,Ta1,Hea,Tab2,Hea1,T1):-
       toupper(Head,Hea), Hea\=Head, Hea1=Head1, T1=Ta1,
       topps(Top, SentNo, Hea, Id, Feats),
       Ref2=ref_ex(Ind2,Hea,Tab2,P1,G1,N1,C1,Func2/Ruolo2)/S2-_,
       on(Ref2, RefEx)
       ;
       toupper(Head1,Hea1), Hea1\=Head1, Hea=Head, T=Ta,
       topps(Top, SentNo, Hea1, Id, Feats),
       Ref2=ref_ex(Ind2,Hea1,Tab2,P1,G1,N1,C1,Func2/Ruolo2)/S2-_,
       on(Ref2, RefEx),
       !.
checkheadstopps(RefEx,Head,Ta,Head1,Ta1,Hea,Tab2,Hea1,T1):-
       tolower(Head,Hea), Hea\=Head, Hea1=Head1, T1=Ta1,
       topps(Top, SentNo, Hea, Id, Feats),
       Ref2=ref_ex(Ind2,Hea,Tab2,P1,G1,N1,C1,Func2/Ruolo2)/S2-_,
       on(Ref2, RefEx)
       ;
       tolower(Head1,Hea1), Hea1\=Head1, Hea=Head, T=Ta,
       topps(Top, SentNo, Hea1, Id, Feats),
       Ref2=ref_ex(Ind2,Hea1,Tab2,P1,G1,N1,C1,Func2/Ruolo2)/S2-_,
       on(Ref2, RefEx),
       !.
checkheadstopps(RefEx,Head,Ta,Head1,Ta1,Hea,Ta,Hea1,Ta1):-
     recover_descs(Head,Des), is_list(Des),
     on(Hea,Des), Hea\=s_,
     recover_descs(Head1,Desc),
     (is_list(Desc),on(Hea1,Desc); 
         toupper(Head1,Hea1), Hea1\=Head1; 
         Hea1=Head1),
     topps(Top, SentNo, Hea, Id, Feats),
     topps(Top1, SentNo1, Hea1, Id1, Feats1).
checkheadstopps(RefEx,Head,Ta,Head1,Ta1,Hea,Ta,Hea1,Ta1):-
     recover_descs(Head,Desc),
     (is_list(Desc),on(Hea,Desc); Hea=Head),
     topps(Top, SentNo, Headd, Id, Feats), 
     recover_descs(Headd,Dess), is_list(Dess), on(Hea,Dess),
     (topps(Top1, SentNo1, Head1, Id1, Feats1)
       ;
      recover_descs(Head1,Des),
      (is_list(Des),on(Hea1,Des); 
         toupper(Head1,Hea1), Hea1\=Head1; 
        Hea1=Head1),
      topps(Top1, SentNo1, Hea1, Id1, Feats1)
      ).
checkheadstopps(RefEx,Head,Ta,Head1,Ta1,Hea,Ta,Hea1,Ta1):-
     recover_descs(Head1,Desc),
     (is_list(Desc),on(Hea1,Desc);
        Hea1=Head1),
     topps(Top, SentNo, Headd, Id, Feats), 
     recover_descs(Headd,Dess), is_list(Dess), on(Hea1,Dess),
     (topps(Top1, SentNo1, Head, Id1, Feats1)
       ;
      recover_descs(Head,Des),
      (is_list(Des),on(Hea,Des); 
         toupper(Head,Hea), Hea\=Head;
           Hea=Head),
      topps(Top1, SentNo1, Hea, Id1, Feats1)
      ).

checkheadstopps(RefEx,Head,Ta,Head1,Ta1,Head,Ta,Head1,Ta1):-
      !.
    
generalconstraints(Subj,HLF,TLF,My):-
     length(HLF,L),L=<2,
     findall(A,(on(A-B,HLF),qmq(A)),Num),Num=[],
     findall(A,(on(A-B,HLF),locwn(A),A\=My),Loc),Loc=[],
     findall(A,(on(A-B,HLF),spy_lower(A,Low,P),P=1,A\=My, \+ on(_-A,TLF)),Ups),Ups=[],
     findall(Subj,( (on(Subj-B,TLF);on(B-Subj,TLF)),B=My), Num),
     (Num\=[];
      Num=[],
      findall(Subj,( (on(Subj-B,TLF);on(B-Subj,TLF)),B\=My), Num1),
      (Num=[];
        (on(Subj-B);on(B-Subj)),
         stringof(List,B),
         List=['_',s,'-'|_])
         ),
     !.

notequal(My,Head):-
      My=Head;
      toupper(My,New),New=Head;
      tolower(My,New),New=Head;
      recover_descs(My,New),is_list(New), on(Head,New);
      recover_descs(Head,New),is_list(New), on(My,New),
      !.      

searchHLF(My,P,HLF):-
     on(My-P,HLF),
     !.
searchHLF(My,P,HLF):-
     toupper(My,New),New\=My,
     on(New-P,HLF),
     !.
searchHLF(My,P,HLF):-
     tolower(My,New),New\=My,
     on(New-P,HLF),
     !.
searchHLF(My,P,HLF):-
     recover_descs(My,New),is_list(New), on(Hea,New),
     on(Hea-P,HLF),
     !.
searchHLF1(P,My,HLF):-
     on(My-P,HLF),
     !.
searchHLF1(P,My,HLF):-
     toupper(My,New),New\=My,
     on(New-P,HLF),
     !.
searchHLF1(P,My,HLF):-
     tolower(My,New),New\=My,
     on(New-P,HLF),
     !.
searchHLF1(P,My,HLF):-
     recover_descs(My,New),is_list(New), on(Hea,New),
     on(Hea-P,HLF),
     !.
searchmainsecond(Head,Head1,Tabs,Funcs,Tab2,HLFs,TLFss,[Head,Head1,P]):-
    (topps(main, SentNo, Head, Id, Feats), Main=Head1-Id-SentNo,
      topps(Top, SentNo1, Head1, Id1, Feats1), 
      integer(SentNo1),integer(SentNo),
      SentNo1<SentNo,
      Tabs=[_,_,Tab2],
      on(Def,Tab2), Def = +def
     ;
     topps(main, SentNo, Head1, Id, Feats), Main=Head1-Id-SentNo,
     topps(Top, SentNo1, Head, Id1, Feats1), 
      integer(SentNo1),integer(SentNo),
     SentNo1<SentNo,
      Tabs=[Tab,_,Tab2],
      on(Def,Tab), Def = +def
     ),
     on(Cl-P-[Sub1,HLF],HLFs),
     (on(Head,Sub1),My=Head1;on(Head1,Sub1),My=Head),
     searchHLF(My,P,HLF),
     generalconstraints(Head,HLF,[],My),
     !.
searchmainsecond(Head,Head1,Tabs,Funcs,Tab2,HLFs,TLFss,[Head,Head1,Prop]):-
    (MainT=second;MainT=poten),
    (topps(MainT, SentNo, Head, Id, Feats), Main=Head1-Id-SentNo,
      topps(Top, SentNo1, Head1, Id1, Feats1), 
      integer(SentNo1),integer(SentNo),
      SentNo1<SentNo
     ;
     topps(MainT, SentNo, Head1, Id, Feats), Main=Head1-Id-SentNo,
     topps(Top, SentNo1, Head, Id1, Feats1), 
      integer(SentNo1),integer(SentNo),
     SentNo1<SentNo 
     ),
     on(Cl-P-[Sub1,HLF],HLFs),
     (on(Head,Sub1),My=Head1;on(Head1,Sub1),My=Head;
     lightverbs(P),My=Head1,
        \+ notequal(My,Head)),
     (searchHLF(My,Prop,HLF), 
       Prop\=P,
      on(TLFs,TLFss),
      on(Cl1-P1-[My,TLF],TLFs),
      matchnominalization(Prop,P1,My,Funcs)
      ;
      searchHLF1(Prop,My,HLF), 
        Prop\=P,
      on(TLFs,TLFss),
      on(Cl1-Px-[Sub,TLF],TLFs),
      Sub\=Head1,Sub\=Head,
      (searchHLF1(_,My,TLF);
          searchHLF(My,_,TLF)),
     topps(Top1, SentNo2, Sub, Id2, Feats2), 
      integer(SentNo2),integer(SentNo),
      (SentNo2=<SentNo;SentNo2=<SentNo1)),
     generalconstraints(My,HLF,TLF,My),
     !.

matchnominalization(Prop,P1,My,Funcs):-
     nbk(Prop,Verb,Type),
     (Type=passive;Type=subject),
     Funcs=[_-_,_-_,My-F/R],
     F=sogg, 
     (R=tema_aff;R=theme_aff),
     (consistent_preds(Verb,P1,L)
      ;
      sloppy_match(Prop,P1,K)),
     !.
sallpreds(Hypoo,Hypo,Textt,Text,Hyp1,Tex1):-
    findall(Cl-A,(        
          (on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Hypo),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-L,Hypo),
          atomic(A)
          ;
          on(A-T-V-D-E1-F1-Aux-J-I1,Hypo),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Hypo),
          atomic(A)),
          on(Cl-A-Fu/Ro-Head-Id,Hypoo),
          stringof(List,Cl),List=[c,l|_]
          ;
          on(Cl-A-Fu/Ro-Head-Id,Hypoo),
          stringof(List,Cl),List=[c,l|_]
          ),
          Hyp),
    findall(Cl-A,(        
          (on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-L,Text),
          atomic(A)
          ;
          on(A-T-V-D-E1-F1-Aux-J-I1,Text),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text),
          atomic(A)),
          on(Cl-A-Fu/Ro-Head-Id,Textt),
          stringof(List,Cl),List=[c,l|_]
          ;
          on(Cl-A-Fu/Ro-Head-Id,Textt),
          stringof(List,Cl),List=[c,l|_]
          ),
          Tex),
     sort(Tex,Tex1),
     sort(Hyp,Hyp1),
          !.
     
matchallLFs(HT,RefExs,Hypoo,Textt,[],TLFs):-!.    
matchallLFs(HT,RefExs,Hypoo,Textt,[Cl-P-[Subj,LF]|HLFs],TLFs):-
%     P\=marry,
     P\=bear,
     light_verbs(P), Subj\=[there],
     on(Cl1-P1-[Sub1,TLF],TLFs),
     searchsubjectnonverb(Subj,[Sub1,TLF],Sub),
     (main_head_match(P,P1,_)
     ;
     lightverbs(P)),
%      sloppy_match(P,P1,_)),
     append(Subj,LF,LF1),
     !,
     matchTlfHlf(P,Sub,RefExs,Hypoo,Textt,LF1,TLF,TLFs),
     matchallLFs1(HT,RefExs,Hypoo,Textt,HLFs,TLFs).
matchallLFs([H,T],RefExs,Hypoo,Textt,[Cl-P-[Subj,LF]|HLFs],TLFs):-
%     P\=marry,
     P\=bear,
     getpassiveLF([H,T],P,LF),
     on(Cl1-P1-[Sub1,TLF],TLFs),
     main_head_match(P,P1,_),
%      sloppy_match(P,P1,_)),
     append(Subj,LF,LF1),
     !,
     matchTlfHlf(P,Sub1,RefExs,Hypoo,Textt,LF1,TLF,TLFs),
     matchallLFs1([H,T],RefExs,Hypoo,Textt,HLFs,TLFs).
matchallLFs(HT,RefExs,Hypoo,Textt,[Cl-P-[Subj,LF]|HLFs],TLFs):-
     (\+ light_verbs(P);Subj=[there]),
%     \+ getpassiveLF(HT,P,LF),
%     P\=marry,
     P\=bear,
     searchsubjectmatch(Cl-P-[Subj,LF],TLFs,LF1,TLF),
     matchLFs(RefExs,Hypoo,Textt,P,Subj,LF1,TLF,TLFs),
     !, 
     matchallLFs1(HT,RefExs,Hypoo,Textt,HLFs,TLFs).
matchallLFs([H,T],RefExs,Hypoo,Textt,[Cl-P-[Subj,LF]|HLFs],TLFs):-
     \+ health(P),
     searchsubjectnonverb2(P,Subj,TLFs,Sub,Rest,Hyp3),
     !.
matchallLFs([H,T],RefExs,Hypoo,Textt,[Cl-P-[Subj,LF]|HLFs],TLFs):-
     on(Cl1-P1-[Sub1,TLF],TLFs),
     on(Pred-Arg,TLF),
     lemmatize_dic(Pred,Lem,K),
     main_head_match(P,Lem,_),
     searchsubjectnonverb2(P,Subj,TLFs,Sub,Rest,Hyp3),
     !.

getpassiveLF([H,T],P,LF):-
      getdiates(H,A,Diats),
      on(P-Diat,Diats), Diat=passive
      ;
      getdiates(T,A,Diats),
      on(P-Diat,Diats), Diat=passive
      ;
      LF=[],
      !.
      
matchallLFs1(HT,RefExs,Hypoo,Textt,[],TLFs):-!.    
matchallLFs1(HT,RefExs,Hypoo,Textt,[Cl-P-[Subj,LF]|HLFs],TLFs):-     
     HLFs=[],
     HLFs1=[Cl-P-[Subj,LF]],
     matchallLFs(HT,RefExs,Hypoo,Textt,HLFs1,TLFs),
     !.
matchallLFs1(HT,RefExs,Hypoo,Textt,[Cl-P-[Subj,LF]|HLFs],TLFs):-     
     HLFs=[Cl1-P1-[Subj1,LF1]|Rest],
     append(LF,LF1,LF2),
     HLFs1=[Cl1-P1-[Subj1,LF2]|Rest],
     matchallLFs(HT,RefExs,Hypoo,Textt,HLFs1,TLFs),
     !.
searchsubjectmatch(Cl-P-[Subj,LF],TLFs,LF1,TLF):-
    Subj=[Subb1|Subs], Subb1=there,
     on(Subb-P,LF),
    spy_lower(Subb,Low,Pol),
    (Pol=0,Sub=Subb;Pol=1,Sub=Low),
     selecttextLf(Cl-P,Sub,TLFs,TLF),
     !.
searchsubjectmatch(Cl-P-[Subj,LF],TLFs,LF1,TLF):-
    Subj=[Subb|_], Subb\=there,
    spy_lower(Subb,Low,Pol),
    (Pol=0,Sub=Subb;Pol=1,Sub=Low),
     selecttextLf(Cl-P,Sub,TLFs,TLF),
     append(Subj,LF,LF1),
     !.
searchsubjectmatch(Cl-P-[Subj,LF],TLFs,LF1,TLF):-
     light_verbs(P),
     on(Cl1-P1-[Sub,TLF],TLFs),
     newmatchsubject(Sub,TLF,Subj),
     append(Subj,LF,LF1),
     !.
     
/*
matchLFs(RefExs,Hypoo,Textt,Cl-P-[Subj,LF],TLFs):-
     !,
     matchTlfHlf(P,Sub,RefExs,Hypoo,Textt,LF,TLF,TLFs),
     !.
matchLFs(RefExs,Hypoo,Textt,Cl-P-[Subj,LF],TLFs):-
     !,
     matchTlfHlf(P,Sub,RefExs,Hypoo,Textt,LF1,TLF,TLFs),
     !.
matchLFs(RefExs,Hypoo,Textt,Cl-P-[Subj,LF],TLFs):-
     !,
     matchTlfHlf(P,Sub,RefExs,Hypoo,Textt,LF1,TLF,TLFs),
     !.
*/
matchLFs(RefExs,Hypoo,Textt,P,Sub,LF1,TLF,TLFs):-
     !,
     matchTlfHlf(P,Sub,RefExs,Hypoo,Textt,LF1,TLF,TLFs),
     !.

%searchsubjectnonverb(Subj,[],Sub):-!.
searchsubjectnonverb(Subj,[Subs|TLF],Sub):-
     is_list(Subs),
     on(Sub-Pred,Subs),
     newmatchsubject(Subj,TLF,Sub),
     !.
searchsubjectnonverb(Subj,[Subs|TLF],Sub):-
     atomic(Subs),
     on(Subs,Subj),
     !.
searchsubjectnonverb(Subj,[Subs|TLF],Sub):-
     Subs=Su-Pred,
     newmatchsubject(Subj,[Subs|TLF],Sub),
     !.
searchsubjectnonverb(Subj,[Subs|TLF],Sub):-
     searchsubjectnonverb(Subj,TLF,Sub),
     !.

matchsubject(Subs,TLF,Subj):-
     (var(Subj);atomic(Subj)),
     is_list(Subs),     
     Subs=[Sub|_],
     on(Subj-Pred,TLF),
     \+ grammw(Subj,K),
     (search_noun_inference(Subj,Sub)
%     sloppy_match(Subj,Sub,L)
      ;
      strict_head_match(Subj,Sub,Score)),
      !.
matchsubject(Sub,TLF,Subj):-
     atomic(Sub),atomic(Subj),
     on(Sub1-Pred,TLF),
     \+ grammw(Sub1,K),
     (search_noun_inference(Sub1,Sub)
%     sloppy_match(Sub1,Sub,L)
      ;
%      strict_head_match(Sub,Sub1,Score)
      main_head_match(Sub,Sub1,Score)
      ),
      !.
newmatchsubject(Sub,TLF,Sub1):-
     atomic(Sub),
     on(Sub1-Pred,TLF),
     \+ grammw(Sub1,K),
     (search_noun_inference(Sub1,Sub)
%     sloppy_match(Sub1,Sub,L)
      ;
%      strict_head_match(Sub,Sub1,Score)
      main_head_match(Sub,Sub1,Score)
      ),
      !.
newmatchsubject(Sub,TLF,Subj):-
     atomic(Sub),
     (atomic(Subj),
      \+ grammw(Subj,K),
      on(Subj-Pred,TLF), Subs=Subj
      ;
     is_list(Subj),     
     Subj=[Subs|_],
     \+ grammw(Subs,K),
       on(Subs-Pred,TLF)),
     (search_noun_inference(Subs,Sub)
%     sloppy_match(Subs,Sub,L)
      ;
%      strict_head_match(Subs,Sub,Score)
      main_head_match(Subs,Sub,Score)
      ),
      !.
newmatchsubject(Sub,TLF,Subj):-
     is_list(Sub),var(Subj),
     Sub=[Subs|_],
     (on(Subs-Pred,TLF)
     ;on(Pred-Subs,TLF)),Subj=Subs,
      !.
newmatchsubject(Sub,TLF,Subj):-
     is_list(Sub),var(Subj),
     Sub=[Subs|_],
     (on(Subj-Pred,TLF)
     ;on(Pred-Subj,TLF)),
     \+ grammw(Subj,K),
     (search_noun_inference(Subs,Subj)
%     sloppy_match(Subs,Subj,L)
      ;
%      strict_head_match(Subs,Sub,Score)
      main_head_match(Subs,Subj,Score)
      ),
      !.
newmatchsubject(Sub,TLF,Subj):-
     is_list(Sub),nonvar(Subj),
     Sub=[Subs|_],
     Subj=Subs,
      !.
newmatchsubject(Sub,TLF,Subj):-
     is_list(Sub),nonvar(Subj),
     Sub=[Subs|_],
     \+ grammw(Subj,K),
     (search_noun_inference(Subs,Subj)
%     sloppy_match(Subs,Subj,L)
      ;
%      strict_head_match(Subs,Sub,Score)
      main_head_match(Subs,Subj,Score)
      ),
      !.
       
selecttextLf(Cl-there_be,Subj,TLFs,LF):-
    on(Cl1-P1-[Subj1,LF],TLFs),
    !.
selecttextLf(Cl-P,Subj,TLFs,LF):-
    on(Cl1-P-[Subj,LF],TLFs),
    !.
selecttextLf(Cl-P,Subj,TLFs,LF):-
    on(Cl1-P1-[Subj,LF],TLFs),
    consistent_preds(P,P1,Sc),
    !.
selecttextLf(Cl-P,Subj,TLFs,LF):-
    on(Cl1-P-[Subj1,LF],TLFs),
    spy_lower(Subj1,Low,Pol),
    (Pol=0,Sub=Subj1;Pol=1,Sub=Low),
    main_head_match(Subj,Sub,S),
    !.
selecttextLf(Cl-P,Subj,TLFs,LF):-
    on(Cl1-P1-[Subj1,LF],TLFs),
    (consistent_preds(P,P1,Sc)
    ;sloppy_match(P,P1,Sc)),
    spy_lower(Subj1,Low,Pol),
    (Pol=0,Sub=Subj1;Pol=1,Sub=Low),
    main_head_match(Subj,Sub,S),
    !.
selecttextLf(Cl-P,Subj,TLFs,LF):-
    \+ lightverbs(P),
    on(Cl1-P-[Subj1,LF],TLFs),
    on(Head1-P1,LF),
    spy_lower(Head1,Low,Pol),
    (Pol=0,Sub=Head1;Pol=1,Sub=Low),
    main_head_match(Subj,Sub,S),
    !.
selecttextLf(Cl-P,Subj,TLFs,LF):-
    on(Cl1-P1-[Subj1,LF],TLFs),
    \+ lightverbs(P1),
    on(Head1-P1,LF),
    consistent_preds(P,P1,Sc),
%    ;sloppy_match(P,P1,Sc)),
    spy_lower(Head1,Low,Pol),
    (Pol=0,Sub=Head1;Pol=1,Sub=Low),
    main_head_match(Subj,Sub,S),
    !.
selecttextLf(Cl-P,Subj,TLFs,LF):-
    on(Cl1-P1-[Subj1,LF],TLFs),
    \+ lightverbs(P),
    on(Head1-P2,LF),
    consistent_preds(P,P1,Sc),
%    ;sloppy_match(P,P1,Sc)),
    spy_lower(Head1,Low,Pol),
    (Pol=0,Sub=Head1;Pol=1,Sub=Low),
    main_head_match(Subj,Sub,S),
    !.

matchTlfHlf(P,Sub,RefExs,Hypoo,Alltexts,Pairsh,Pairst,TLFs):-
      matchpairsargpreds(RefExs,Pairsh,Pairst,Rests),
      appiattisci(Rests,Rest),
%      Rest=[],
      (Rest=[]
       ;
       length(Pairsh,Lh), 
       length(Rest,Lr), 
       Lr =< 6, 
       (
%        Lr\=Lh,
%        lightverbs(P)),
        recursivematchLF(P,Sub,RefExs,Rest,Pairst,Hypoo,Alltexts,TLFs)
        ;
%       (Lr=Lh; 
%         Lh=<4;4<Lh,Lr=<3),
       on(Cl-P1-[Subj,LF1],TLFs), 
       matchlengthLF(LF1,Pairst,TLFs),
       (is_list(Sub),on(Subb,Sub);atomic(Sub),Subb=Sub),
       choosematchlight(P,Subj,Subb,LF1),
       matchpairsargpreds(RefExs, Rest, LF1,Left1),
       appiattisci(Left1,Lef1),
       length(Lef1,L1),L1=<6,
       Lef1\=Rest,
       (removeparist(Pairst,TLFs,TLF,LF1),
        recursivematchLF(P,Sub,RefExs,Lef1,LF1,Hypoo,Alltexts,TLF)
        ;
       !,
       Lef1=[],
       length(Alltexts,Lt),
       reevaluateleft(P,Subb,LF,Rest,Lh,Lt,Lr,Lef1)
       ))      
        ),
      !.

choosematchlight(P,Subj,Sub,LF):-
      light_verbs(P),
      (strict_head_match(Subj,Sub,K);
        sloppy_match(Subj,Sub,K)),
        !.
        
choosematchlight(P,Subj,Sub,LF):-
      matchsubject(Sub,LF,Subj);
       searchsubjectnonverb(Sub,LF,Subs),
        !.

removeparist(Pairst,TLFs,TLF,LF1):-
     remove(Cl-P-[Subj,LF],TLFs,TLF), 
     LF=Pairst,
     on(Cl1-P1-[Subj1,LF1],TLF),
     !.
     
lmatchrestargspreds(RefExs, P, [],Pairst,Alltexts,[]):-!.
lmatchrestargspreds(RefExs, P, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
      lightverbs(P),
       nogen_member(Head1-Pred1,Pairst),
       (main_head_match(Head,Head1,Sco);
         sloppy_match(Head,Head1,L)),       
       (main_head_match(Pred1,Pred,L1);
         sloppy_match(Pred1,Pred,L11)),
      lmatchrestargspreds(RefExs,  P,Pairsh,Pairst,Alltexts,Left),
        !.
lmatchrestargspreds(RefExs, P, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
      lightverbs(P),
      lightverbs(Pred),
       nogen_member(Pred1-Head1,Pairst),
       (main_head_match(Head,Head1,Sco);
%         sloppy_match(Head,Head1,L);
         consistent_preds(Head,Head1,L)),       
      lmatchrestargspreds(RefExs,  P,Pairsh,Pairst,Alltexts,Left),
        !.
lmatchrestargspreds(RefExs, P, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
      lightverbs(P),
       nogen_member(Head1-Pred1,Pairst),
       (main_head_match(Pred,Head1,Sco);
         sloppy_match(Pred,Head1,L)),       
       nogen_member(Head11-Pred1,Pairst),Head11\=Head1,
       (main_head_match(Head,Head11,L1);
         sloppy_match(Head,Head11,L11)),
      lmatchrestargspreds(RefExs,  P,Pairsh,Pairst,Alltexts,Left),
        !.
lmatchrestargspreds(RefExs, P, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       nogen_member(Head1-Pred1,Pairst),
      light_verbs(Pred1),
       (main_head_match(Head,Head1,Sco);
         sloppy_match(Head,Head1,L)),       
       nogen_member(Head11-Pred11,Pairst),Pred11\=Pred1,
       nogen_member(Pred11-Pred1,Pairst),Head11\=Head1,
       (main_head_match(Pred,Head11,L1);
         sloppy_match(Pred,Head11,L11)),
      lmatchrestargspreds(RefExs,  P,Pairsh,Pairst,Alltexts,Left),
        !.
lmatchrestargspreds(RefExs, P, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       nogen_member(Head1-Pred1,Pairst),
      (light_verbs(P), \+light_verbs(Pred1);
       light_verbs(Pred1), \+light_verbs(P);
        \+light_verbs(Pred1), \+light_verbs(P)),
       consistent_preds(P,Pred1,L),       
       nogen_member(Head11-Pred11,Pairst), Pred1\=Pred11,
       (main_head_match(Pred,Head11,L1);
         sloppy_match(Pred,Head11,L1)),
       (main_head_match(Pred11,Head,L2);
         sloppy_match(Pred11,Head,L2)),
      lmatchrestargspreds(RefExs, P,Pairsh,Pairst,Alltexts,Left),
        !.
lmatchrestargspreds(RefExs, P, [Head-Pred|Pairsh],Pairst,Allxts,[Head-Pred|Left]):-
       lmatchrestargspreds(RefExs,  P,Pairsh,Pairst,Allxts,Left),
      !.

isatype(type).
isatype(kind).

elidetempadjs(RefExs,Alltexts,P1,Sub,[],[]):-!.
elidetempadjs(RefExs,Alltexts,P1,Sub,[Head-Pred|Pairsh],Left):-
      isatype(Head),
      Pred=P1,
      elidetempadjs(RefExs,Alltexts,P1,Sub,Pairsh,Left),
      !.
elidetempadjs(RefExs,Alltexts,P1,Sub,[Head-Pred|Pairsh],Left):-
      isatype(Pred),
      \+lightverbs(Head), 
      RefExs=[Refs,RefEx],
      Ref=ref_ex(Ind,Hyper,Tab,P,G,N,C,Func/Ruolo)/S-_,
      on(Ref, RefEx),
      (main_head_match(Hyper,Head,K)
      ;
      search_noun_inference(Head,Hyper)),
      elidetempadjs(RefExs,Alltexts,P1,Sub,Pairsh,Left),
      !.
elidetempadjs(RefExs,Alltexts,P1,Sub,[Head-Pred|Pairsh],Left):-
      qmq(Head),
      Pred=P1,\+lightverbs(Pred), 
      elidetempadjs(RefExs,Alltexts,P1,Sub,Pairsh,Left),
      !.
elidetempadjs(RefExs,Alltexts,P1,Sub,[Head-Pred|Pairsh],Left):-
      nt(Head),
      Pred=P1,\+lightverbs(Pred), 
      elidetempadjs(RefExs,Alltexts,P1,Sub,Pairsh,Left),
      !.
elidetempadjs(RefExs,Alltexts,P1,Sub,[Head-Pred|Pairsh],Left):-
      prepos(Head),
      Pred=P1,\+lightverbs(Pred), 
      (qmq(Pred);nt(Head)),
      elidetempadjs(RefExs,Alltexts,P1,Sub,Pairsh,Left),
      !.
elidetempadjs(RefExs,Alltexts,P1,Sub,[Head-Pred|Pairsh],Left):-
      nt(Head),
      Pred=P1,lightverbs(Pred),
      on(Head-det-Years-Sn,Alltexts),
      integer(Years),
      RefExs=[Refs,RefEx],
      Ref=ref_ex(Ind,Years,Tab,P,G,N,C,Func/Ruolo)/S-_,
      on(Ref, RefEx),
      elidetempadjs(RefExs,Alltexts,P1,Sub,Pairsh,Left),
      !.
elidetempadjs(RefExs,Alltexts,P1,Sub,[Head-Pred|Pairsh],Left):-
      Pred=P1, \+lightverbs(Pred), 
      (atomic(Sub),Head\=Sub
      ;
      is_list(Sub),Sub=[Subj|_],Head\=Subj),
      RefExs=[Refs,RefEx],
      Ref=ref_ex(Ind,Head,Tab,P,G,N,C,Func/Ruolo)/S-_,
      (on(Ref, Refs)
      ;
       on(Ref, RefEx)),
       (on(date,C);on(tempo,C);on(nquant,C)),
      elidetempadjs(RefExs,Alltexts,P1,Sub,Pairsh,Left),
      !.
elidetempadjs(RefExs,Alltexts,P1,Sub,[Head-Pred|Pairsh],[Head-Pred|Left]):-
      elidetempadjs(RefExs,Alltexts,P1,Sub,Pairsh,Left),
      !.

checkleftlights(Rest,Lef1):-
   Lef1=[];
   Lef1=[there-be];
   Lef1=[Subj-Pron],qm(Pron), Rest\=Lef1;
   Lef1=[Adv-P1],r(Adv),
   !.

recursivematchLF(P1,Sub1,RefExs,Rest,Pairst,Hypoo,Alltexts,TLFs):-
      light_verbs(P1),
      Pairst\=[],
      matchrestargspreds(RefExs, Rest,Pairst,Alltexts,Lefts),
      elidetempadjs(RefExs,Hypoo,P1,Sub1,Lefts,Left),
      appiattisci(Left,Lef),
      (Lef=[]
      ;
      lmatchrestargspreds(RefExs, P1, Lef,Pairst,Alltexts,Left1),
      appiattisci(Left1,Lef1),
       checkleftlights(Rest,Lef1),
       length(Lef1,L1),L1=<2,
       length(Rest,Lr), 
       length(Alltexts,Lt),
       length(Hypoo,Lh),
%       !,
       reevaluateleft(P1,Sub1,Lef,Rest,Lh,Lt,Lr,Lef1)),
      !.

recursivematchLF(P1,Sub1,RefExs,Rest,Pairst,Hypoo,Alltexts,TLFs):-
      Pairst\=[],
      matchrestargspreds(RefExs, Rest,Pairst,Alltexts,Lefts),
      elidetempadjs(RefExs,Hypoo,P1,Sub1,Lefts,Left),
      appiattisci(Left,Lef),
      (Lef=[]
       ;
       on(Cl-P-[Subj,LF],TLFs), 
       matchlengthLF(LF,Pairst,TLFs),
       length(Lef,L1),
       length(Rest,Lr), 
      (
        lmatchrestargspreds(RefExs,P1, Lef, LF,Alltexts,Left1)
        ;       
       checkconstraintssubjLF(LF,P,P1,Subj,Sub1),
       matchpairsargpreds(RefExs, Lef, LF,Left1)
       ),
       appiattisci(Left1,Lef1),
       checkleftlights(Rest,Lef1),
       length(Alltexts,Lt),
       length(Hypoo,Lh),
       !,
       reevaluateleft(P1,Subj,LF,Rest,Lh,Lt,Lr,Lef1)
       ),
      !.
recursivematchLF(P1,Sub1,RefExs,[Sub|Rest],Pairst,Hypoo,Alltexts,TLFs):-
     atomic(Sub),Sub\=_-_,
     recursivematchLF(P1,Sub1,RefExs,Rest,Pairst,Hypoo,Alltexts,TLFs),
     !.

checkconstraintssubjLF(LF,P,P1,Subj,Sub1):-
       consistent_preds(P,P1,L)
       ;
        (is_list(Sub1),on(Subb,Sub1);atomic(Sub1),Subb=Sub1),
        main_head_match(Subb,Subj,K)
        ;
        (is_list(Sub1),on(Subb,Sub1);atomic(Sub1),Subb=Sub1),
        on(Suj-_,LF),
        main_head_match(Subb,Suj,K),
        !.

matchlengthLF(LF,Pairst,TLFs):-
      LF\=Pairst,
      !.
matchlengthLF(LF,Pairst,TLFs):-
      LF=Pairst,
      length(TLFs,L),
      L=1,
      !.

reevaluateleft(P1,Subj,LF,Rest,Lh,Lt,Lr,Lef1):-
     checkleftlights(Rest,Lef1),
     !.
reevaluateleft(P1,Sub1,LF,Rest,Lh,Lt,Lr,[]):-!.
reevaluateleft(P1,Sub1,LF,Rest,Lh,Lt,Lr,Lef1):-
     LF\=[],Lef1\=[],
     \+ light_verbs(P1),
     remove(Head-P1,Lef1,Lef),
     remove(Head-P,LF,Lff),
     evaluateleft(Lh,Lt,Lr,Lef),
     !.
reevaluateleft(P1,Sub1,LF,Rest,Lh,Lt,Lr,Lef1):-
     \+ light_verbs(P1),
     evaluateleft(Lh,Lt,Lr,Lef1),
     !.

writeallLfs([]):-!.
writeallLfs([Cl-P-[Subj1,LF]|HLFs]):-
     writenl(_,[Cl-P-[Subj1,LF]]),
     writeallLfs(HLFs),
     !.

selectpasLFs([],Hypoo,[]):-!.
selectpasLFs([Cl-P|Hyp],Hypoo,[Cl-P-[Subj1,LF]|HLFs]):-
     sectpasLFSubj(Cl, P,Hypoo,Hypo,Subj),
     sectpasLFs(Cl, P,Subj,Hypo,LF,Subj1),
     selectpasLFs(Hyp,Hypoo,HLFs),
     !.
selectpasLFs([Cl-P|Text],Textt,TLFs):-
     selectpasLFs(Text,Textt,TLFs),
     !.
     
selectpasLFs1([],Hypoo,[]):-!.
selectpasLFs1([Cl-P|Hyp],Hypoo,[Cl-P-[Subj,LF]|HLFs]):-
     sectpasLFSubj(Cl, P,Hypoo,Hypo,Subj),
     sectpasLFs1(Cl, P,Subj,Hypo,LF),
     selectpasLFs1(Hyp,Hypoo,HLFs),
     !.

selectpasLFs1([Cl-P|Text],Textt,TLFs):-
     selectpasLFs1(Text,Textt,TLFs),
     !.

sectpasLFSubj(Cl1, Gov,Text,Text,Head1):-
     remove(Cl1-Gov-subj/Ro1-Head-Id0,Text,Tex),
     stringof(List,Cl1), List=[c|_],
     atomic(Head),
     (Head='discourse bound', Head1=this;
      Head\='discourse bound', Head1=Head),
     !.
sectpasLFSubj(Cl1, Gov,Text,Text,Head1):-
     remove(Cl1-Gov-Func/Ro1-Head1-Id0,Text,Tex),
     stringof(List,Cl1), List=[c|_],
     atomic(Head1),
     !.

sectpasLFs(Cl, Gov,Subj,Text,LF,Subj1):-
     findargpredtriple(Cl, Gov,Text,Pairss),
     cleanoutput(Pairss,LF1),
     eliminatesubjectPas(Subj,LF1,LF,Rels),
     append([Subj],Rels,Subj1),
     !.
sectpasLFs1(Cl, Gov,Subj,Text,LF):-
     findargpredtriple(Cl, Gov,Text,Pairss),
     cleanoutput(Pairss,LF),
     !.

eliminatesubjectPas(Subj,LF1,LF,LFf):-
     findall(Subj-Pred,(on(Subj-Pred,LF1);on(Pred-Subj,LF1)),LFs),
     sort(LFs,LFf),
     removeallSubj(LFf,LF1,LF),
     !.

removeallSubj([],LF,LF):-!.
removeallSubj([A-B|LFf],LF1,LF):-
     remove(A-B,LF1,LF2),
     removeallSubj(LFf,LF2,LF),
     !.
removeallSubj([A-B|LFf],LF1,LF):-
     remove(B-A,LF1,LF2),
     removeallSubj(LFf,LF2,LF),
     !.
removeallSubj([A-B|LFf],LF1,LF):-
     stringof(List,A),
     on('_',List),
     recover_descs(A,Des),
     on(D1,Des),
     on(D2,Des), D1\=D2,
     remove(D1-B,LF1,LF2),
     removeallSubj([D2-B|LFf],LF2,LF),
     !.
     
findargpredtriple(Cl1,Gov,Text,Pairs):-
      findall(Head1-Gov1, 
      (Gov=Gov1,
        on(Cl1-Gov-Ro1-Head1-Id0,Text),
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1))
      ;
      Gov=Gov1,
        on(I1-Head1-Role1-Sem-Gov,Text),
      on(Cl1-Gov-Ro1-Head1-Id0,Text), 
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1);r(Head1);rj(Head1,_,_))
%       (\+ grammw(Head1,_);prepos(Head1))
      ;
      Gov=Gov1,
        on(Head1-Role1-I1,Text), I1\=_-_, Role1\=det,
      on(I1-Head1-Role-Sem-Gov,Text),
      on(Cl1-Gov-Ro1-Head-Id0,Text), 
        atomic(Gov),atomic(Head1),
      stringof(List,Head1), List\=[s,n|_],
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1);r(Head1);rj(Head1,_,_))
%       (\+ grammw(Head1,_);prepos(Head1))
      ;
      Gov=Gov1,
        on(Head1-Role1-I1,Text), I1\=_-_, Role1\=det,
      on(I1-Head-Role-Head1,Text),
      on(Cl1-Gov-Ro1-Head-I1,Text), 
        atomic(Gov),atomic(Head1),
      stringof(List,Head1), List\=[s,n|_],
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1);r(Head1);rj(Head1,_,_))
%       (\+ grammw(Head1,_);prepos(Head1))
      ;
      Gov=Gov1,
        on(I1-Head1-Role1-Dep,Text), I1\=_-_, Role1\=det,
      on(I1-Head1-Role-Sem-Gov,Text),
      on(Cl1-Gov-Ro1-Head-Id0,Text), 
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1);r(Head1);rj(Head1,_,_))
%       (\+ grammw(Head1,_);prepos(Head1))
      ;
      Gov=Gov1,
        on(Head1-Role1-Id2,Text), Id2\=_-_, Role1\=det,
       atomic(Head1),      
       stringof(List,Head1), List\=[s,n|_],
      on(I1-Head1-Role1-Sem-Gov,Text),
      on(Cl1-Gov-Ro1-Head-Id0,Text), 
        atomic(Gov),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1);r(Head1);rj(Head1,_,_))
%       (\+ grammw(Head1,_);prepos(Head1))
      ;
      Gov=Gov1,
        on(Head1-Role1-I1,Text), Head1\=_-_,Role1\=_-_,I1\=_-_,
      on(Gov-Ro1-I1,Text), Gov\=_-_,I1\=_-_, Rol\=_-_,
        atomic(Gov),atomic(Head1),
      stringof(List,Head1), List\=[s,n|_],
      Role1\=det,Ro1\=det,
       (\+ grammw(Head1,_);qmq(Head1);r(Head1);rj(Head1,_,_))
%       \+ grammw(Head1,_)
      ;
      Gov=Gov1,
      on(Cl1-Gov1-Role1-Head1,Text), Gov1\=_-_, Role1\=det,
      on(Head1-Role1-Gov1,Text), Head1\=_-_, Head1\=Gov1
      ;
      on(Cl1-Gov-Ro1-Head-I1,Text), 
      on(I1-Head-ncmod/Role-Head1-Sn,Text),
      on(Sn-Head1-specif-Gov1,Text),
        atomic(Gov1),atomic(Head1)
      ;
      on(Cl1-Gov1-Ro1-Head-I1,Text), 
      on(I1-Head-ncmod/Role-Head1-Sn,Text),
%      (temp_rol(Role);loc_rol(Role)),
      on(Cl1-Gov1-Ro2-Head2-I2,Text), Head2\=Head,
      on(I2-Head2-specif-Gov,Text),
        atomic(Gov),atomic(Head1)
      ;
      Gov=Gov1,
        on(Cl1-Gov-Ro1-Head-Sn,Text),
      qm(Head),
      on(Sn-Head-ncmod/specif-Hea-Sn1,Text),
      on(Sn1-Hea-ncmod/Role-Head2-Sn2,Text),
      on(Sn2-Head2-ncmod/Role-Sem-Hea,Text),
      sub_w_sn(Sem,compar),
      on(Sn-Head2-specif-Head1,Text), Head2\=_-_, Sn\=_-_,
        atomic(Gov),atomic(Head1)
      ;
      Gov=Gov1,
        on(Cl1-Gov-F1/Ro1-Head-Sn,Text),
      qm(Head),
      on(Sn-Head-ncmod/specif-Hea-Sn1,Text),
      on(Sn1-Hea-ncmod/Role-Head1-Sn2,Text),
      on(Sn2-Head1-ncmod/Role-Sem-Hea,Text),
      sub_w_sn(Sem,compar),
        atomic(Gov),atomic(Head1)
      ;
      Gov=Gov1,
        on(Cl1-Gov-F1/Ro1-Head-I1,Text), 
      on(Gov-Ro-Sem-Head1,Text), Gov\=Head1,atomic(Head1)
      ;
      Gov=Gov1,
      on(Cl1-Gov1-F1/Ro1-Head1,Text), Head1\=_-_,
      stringof(List,Cl1), List=[c,l|_]
      ;
      Gov=Gov1,
      on(Cl1-Gov1-F1/Ro1-Head1-Sn,Text), (F1=adj;F1=mod),
      stringof(List,Cl1), List=[c,l|_]
      ;
      on(Cl1-Gov1-F1/Ro1-Head-I1,Text), 
      on(I1-Head-Fun/Role-Head1-Sn,Text),
%      (temp_rol(Role);loc_rol(Role)),
      on(Cl1-Gov1-Ro2-Gov-I2,Text), Gov\=Head, Gov\=Head1,
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov1-F1/Ro1-Head-I1,Text),
      lightverbs(Gov1),
      on(Sn-Head1-ncmod/Role1-Sem-Head,Text),
      on(Sn1-Gov-Fun/Role-Sem1-Gov1,Text),
        atomic(Gov),atomic(Head1),
      stringof(List,Gov1), List\=[s,n|_],
%      (temp_rol(Role);loc_rol(Role)),
      on(Gov-ncmod/Role-Sn1,Text), Gov\=Head1
      ;
      on(Cl1-Gov1-F1/Ro1-Gov-I1,Text), 
      on(Sn-Head1-Fun/Role-Hea-Gov1,Text),
%      (temp_rol(Role);loc_rol(Role)),
      on(Head1-ncmod/Role-Sn,Text), Gov\=Head1,
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov-F1/Ro1-Gov1-I1,Text), 
      on(Gov-Fun/Role-Hea-Head,Text),
      (temp_rol(Role);loc_rol(Role)),
      on(Sn1-Head-ncmod/Rol-Head1-Sn,Text), Gov\=Head1,
      on(Sn-Head1-ncmod/Rol-Hea-Head,Text),
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov-F1/Ro1-Head-I1,Text),
      on(I1-Head-ncmod/Role-Head2-Sn,Text),
      on(Sn-Head2-ncmod/Rol-Gov1-I2,Text),
      on(I2-Gov1-ncmod/Role1-Head1-Sn2,Text)
      ;
      on(Cl1-Gov-F1/Ro1-Head-I1,Text),
      on(I1-Head-ncmod/Role-Head2-Sn,Text),
      on(Sn-Head2-ncmod/Rol-Gov1-I2,Text),
      on(I2-Gov1-ncmod/Role1-Head3-Sn2,Text),
      on(I2-Gov1-ncmod/Rol1-Head1-Head2,Text)
      ;
      on(Cl1-Gov-F1/Ro1-Gov1-I1,Text),
      on(I1-Gov1-ncmod/Role-Head1-Sn,Text),
      stringof(List,Sn), List=[s,n|_]
      ;
      on(Cl1-Gov-F1/Ro1-Head-I1,Text),
      on(Sn-Gov1-ncmod/Role-Head1-Gov,Text),
      stringof(List,Sn), List=[s,n|_]
      ;
      on(Cl1-Gov-F1/Ro1-Gov1-I1,Text),
      on(Sn-Head1-ncmod/Role-Hea-Gov1,Text),
      stringof(List,Gov1), List\=[s,n|_]
      ;
      on(Cl1-Gov-F1/Ro1-Head1-I1,Text),
      on(I1-Head1-ncmod/Role-Hea-I2,Text),
      on(I2-Hea-ncmod/Rol-Gov1-Sn,Text),
      stringof(List,Sn), List=[s,n|_]
      ;
      Gov=Gov1,
        on(Sn-Gov-ncmod/Role-Head1-Gov1,Text), Gov\=Head1,
        atomic(Gov),atomic(Head1),
      (temp_rol(Role);loc_rol(Role))
      ;
%      Gov=Gov1,
      on(Cl1-Gov-F1/Ro1-Gov1-I1,Text),
        on(Sn-Gov1-specif-Head1,Text), Gov\=_-_, Sn\=_-_,
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov-F1/Ro1-Gov1-I1,Text),
        on(Head1-specif-I1,Text), Gov\=_-_,
        atomic(Gov),atomic(Head1),
        (\+ grammw(Head1,_);r(Head1);rj(Head1,_,_))
%        \+ grammw(Head1,_)
      ;
      on(Cl1-Gov-F1/Ro1-Gov1-I1,Text),
        on(Sn-Gov1-mod-Head1,Text), Gov\=_-_, Sn\=_-_,
        atomic(Gov),atomic(Head1)
      ;
      Gov=Gov1,
        on(Head1-det-I1,Text), I1\=_-_, 
      on(I1-Gov-Role-Head1,Text),
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1))
      ), Heads),
      sort(Heads,Pairs),
      !.

getfrasitrue(Sents,[],[]):-!.
getfrasitrue(Sents,[Id-Ind-S|True],[Sent|Rest]):-
   on(Id-Sent,Sents),
   getfrasitrue(Sents,True,Rest),
   !.

/* for each text i extract all analyses EVALLS and all sentences SENTS*/

match_text_hypoths([],[],Hypotheses,[]):-!.
match_text_hypoths([Sents|All],[Evalls|Evaluations],Hypotheses,[Scores|Outs]):-
   appiattisci(Evalls,Evals),
   match_text_hypoth(Sents,Evals,Hypotheses,Scores),
   match_text_hypoths(All,Evaluations,Hypotheses,Outs),
   !.

/* for each text i extract one analyses TEXT, all HYPOTHESES and all sentences SENTS*/

match_text_hypoth(Sents,[],Hypotheses,[]):-!.
match_text_hypoth(Sents,[Text|Evaluations],Hypotheses,[True-Sent|Outs]):-
   appiattisci(Hypotheses,Hypos),
   append([Text],Hypos,Alls),
   txtseparate_GRs(Alls, RefExs,GRs,Costs),
   writerte_eval(Input,RefExs,GRs),
   GRs=[QuestEval|AnswEval],
   allrte_evaluation_modules(Input,Score, RefExs, Costs, QuestEval, AnswEval, True),
   getfrasitrue(Sents,True,Sentt),
   sort(Sentt,Sent),
   write_score(riassunto,Input,Score),
   match_text_hypoth(Sents,Evaluations,Hypotheses,Outs),
   !.
   
tseparateGRs([], [],[], []):-!.
tseparateGRs([First|Evals], [RefEx|RefExs],[Ind-GR|GRs],[Ind-Costs|Rest]):-
          remove(Fir,First,[]),
          Fir=..[Ind,All,Costs],
          All=[GR,RefExx],
          RefExx=[Ars,_,RefEx],
    tseparateGRs(Evals, RefExs,GRs,Rest),
    !.
tseparateGRs([First|Evals], [RefEx|RefExs],[Ind-GR|GRs],[Ind-Costs|Rest]):-
          First=..[Ind,All,Costs],
          All=[GR,RefExx],
          RefExx=[Ars,_,RefEx],
    tseparateGRs(Evals, RefExs,GRs,Rest),
    !.
txtseparate_GRs(Evals, RefEx,GRs, Cost):-
    tseparateGRs(Evals, RefExss,GRs, Cost),
    remove(Refs,RefExss,Rest),
    appiattisci(Rest,Rests),
    RefEx=[Refs,Rests],
    !.

allrte_evaluation_modules(Input,True, RefExs, Costs,Text, [], []):-!.
allrte_evaluation_modules(Input,True, RefExs, Costs,Id-Text, [Ind-Hypo|Hypos], [Id-Ind-S|All]):-
    rte_evaluation_moduleS(L,True, RefExs,[Hypo,Text],Costs),
    True=true-S,
    allrte_evaluation_modules(Input,Score, RefExs, Costs,Id-Text, Hypos, All),
    !.
allrte_evaluation_modules(Input,Score, RefExs, Costs,Text, [Ind-Hypo|Hypos], All):-
    allrte_evaluation_modules(Input,Score, RefExs, Costs,Text, Hypos, All),
    !.

decomposeindices(Indss,Outs):-
    appiattisci(Indss,Inds),
    decompindices(Inds,All),
    sort(All,AllInds),
    appiattisci(AllInds,AllIn),
    sort(AllIn,AllIns),
    recomposeindices(AllIns,Outs),
    !.

recompindices([],File-B-Id,[],[]):-!.
recompindices([File-B-Id-[File1,C]|Inds],File-B-Id,Rest,[[File1,C]|Out]):-
    recompindices(Inds,File-B-Id,Rest,Out),
    !.
recompindices([File1-B1-Id1-New|Inds],File-B-Id,[File1-B1-Id1-New|Inds],[]):-
    !.

recomposeindices([],[]):-!.
recomposeindices([[]|AllInds],Outs):-
    recomposeindices(AllInds,Outs),
    !.
recomposeindices(AllInds,[File-B-Id-Out|Outs]):-
    AllInds=[File-B-Id-[File1,C]|Inds],
    recompindices(AllInds,File-B-Id,Rest,Out),
    recomposeindices(Rest,Outs),
    !.

decompindices([],[]):-!.
decompindices([True-Sent|All],[Ind|Inds]):-
    decompose_indices(True,Ind),
    decompindices(All,Inds),
    !.

decompose_indices([],[]):-!.
decompose_indices([Id-Ind-S|All],[File-B-Id-[File1,C]|Inds]):-
    getefilename(Ind,B,File),
    getffilename(Id,C,File1),
    decompose_indices(All,Inds),
    !.
rte_evaluation_module2(L,True, RefExs,[QuestEval|AnswEval],Costs):-
    match_propositional([QuestEval,AnswEval],Hypo,Text),
    pproposall([QuestEval,AnswEval],ArgsProp,Predsh,AdjsProp,Predst,OutText,OutHypo),
    general_consistency_check(RefExs,AdjsProp, OutText,OutHypo),
    intersectivity_consistency(RefExs, Predsh,Predst),
    sort(Predsh,Predss),
    sort(Predst,Predss1),
    pargument_parafs(ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True),
    !.

rte_evaluation_module2(L,True, RefExs,[QuestEval|AnswEval],Costs):-
    compute_scoremod(QuestEval,AnswEval, Scores, Score, Modal),
    evalallscores(Score,True),
    !.
    
rte_evaluation_module2(L,True, RefExs,[QuestEval|AnswEval],Costs):-
    RefExs=[Refs,RefEx],
    check_refexsall(Refs,RefEx,Score),
    True=true-Score,
    !.

rte_evaluation_module2(L,false, RefExs,QuestEval,Costs):-
    !.

predicate_argument_proposs(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs):-
%      intersectivity_consistency(RefExs, Predss,Predss1),
      questosi,
      predicate_argument_propos(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs),
     !.
predicate_argument_proposs(unknown, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs):-
     !.

predicate_argument_propos(True, RefExs, ArgsProp,Preds,AdjsProp,Preds1, Hypo,Text,Costs):-
    ArgsProp=[RteArg|TextArgs],
    append(RteArg,Preds,Predss),
    append(TextArgs,Preds1,Predd1),
    appiattisci(Predd1,Predd11),
    sort(Predd11,Predss1),
    match_templates(Predss1,Predss,Costs),
    True=true-999,
    !.
    
predicate_argument_propos(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs):-
    pargument_proposall(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True),
     !.
/*
predicate_argument_propos(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs):-
    length(Predss1,L),
    L<150,
%    (verifylight(ArgsProp);
%     searchallpreds(Hypo,Text,Pol,A,A1),
%     Pol=2
%     ;
    \+ searchallpreds(Hypo,Text,Pol,A,A1),
    ArgsProp=[ArgsHy,ArgsTe|_],
    recover_particpls(Costs,PPs),
    shortmatchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    !,
    lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,Tru),
    True=true-777,
    !.
*/

verifylight(Hypos):-
      Hypos=[RteArg,Predss],
      findall(B,(light_verbs(B),
                  on(Cl-B-R-Head-Id,RteArg)),L), L\=[],
    !.

recover_particpls(Costs,[V1,V2,PPs]):-
    Costs=[_-A,_-B|_],
    A=[V1,Cos1|Synts1],
    B=[V2,Cos2|Synts2],
    extractparptp(Cos1,PP1),
    extractparptp(Cos2,PP2),
    append(PP1,PP2,PPs),
    !.

extractparptp([],[]):-!.
extractparptp([X-Cat|Cos1],[Verbo|PP1]):-
    check_all_verbs(Cat),
    participio(X,Verbo,Gen,Num),
    extractparptp(Cos1,PP1),
    !.
extractparptp([X|Cos1],PP1):-
    extractparptp(Cos1,PP1),
    !.

pargument(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
    ArgsProp=[ArgsHy,ArgsTe|_],
    recover_particpls(Costs,PPs),
    matchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
     True=true-888,
    createpasLF(Hypo,Text,Predss,Predss1, RefExs, [ArgsProp,AdjsProp]),
    !.

/*
pargument(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
    ArgsProp=[ArgsHy,ArgsTe],
    recover_particpls(Costs,PPs),
    matchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    fetchpassive(Hypo,P),
    match_head_roles(P,Predss,Predss1,RefExs, Score),
    (verifylight(ArgsProp),
     verify_be_propos(Predss,Predss1, RefExs, [ArgsProp,AdjsProp]),
     True=true-Score
     ;
     \+ verifylight(ArgsProp),
     verify_ident_propos(ArgsProp,AdjsProp, RefExs, Predss,Predss1),
     True=true-99),
    !.
*/

pargument_proposall(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
    append(ArgsProp,Predss,ArgsProps),
    append(AdjsProp,Predss1,AdjsProps),
    paraf_evaluationmodule(L, Trues, RefExs, [ArgsProps,AdjsProps]),
    (matchpropositionalgen1(Hypo,Text)
     ;
     findnegationprop(Hypo,D), D=not,
     searchnegations([no],Predss1)
      ),
    True=Trues,
    !.

pargument_proposall(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
    ArgsProp=[ArgsHy,ArgsTe|PropsLF],
    recover_particpls(Costs,PPs),
    matchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
     True=true-888,
    createpasLF(Hypo,Text,Predss,Predss1, RefExs, [ArgsProp,AdjsProp]),
    !.

/*
pargument_proposall(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
    ArgsProp=[ArgsHy,ArgsTe],
    recover_particpls(Costs,PPs),
    matchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    fetchpassive(Hypo,P),
    match_head_roles(P,Predss,Predss1,RefExs, Score),
    verify_be_propos(Predss,Predss1, RefExs, [ArgsProp,AdjsProp]),
    verify_ident_propos(ArgsProp,AdjsProp, RefExs, Predss,Predss1),
    True=true-Score,
    !.
*/

pproposall([QuestEval,AnswEval],ArgsProp,Predss,AdjsProp,Predss1,AllPre,AllPre1):-
    extract_core_arguments([QuestEval,AnswEval],Hyp,Tex,ArgsProp),
    extract_propos_adjuncts([QuestEval,AnswEval],Hyp1,Tex1,AdjsProp),
    append(Hyp,Hyp1,Preds),
    sort(Preds,Predss),
    append(Tex,Tex1,Preds1),
    sort(Preds1,Predss1),
    ArgsProp=[RteArg,TextArgs|Hyps],
    append(RteArg,Predss,AllPre),
    append(TextArgs,Predss1,AllPre1),
    !.

rte_evaluation_module22(L,True, RefExs,[QuestEval|AnswEval],Costs):-
    checklengthcosts(Costs),
    match_propositional([QuestEval,AnswEval],Hypo,Text),
    pproposall([QuestEval,AnswEval],ArgsProp,Predsh,AdjsProp,Predst,OutText,OutHypo),
    general_consistency_check(RefExs,AdjsProp, OutText,OutHypo),
    sort(Predsh,Predss),
    sort(Predst,Predss1),
    ArgsProp=[ArgsHy,ArgsTe|Hyps],
    recover_particpls(Costs,PPs),
%    shortmatchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    matchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    predicate_argument_prop22(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs),
    !.
rte_evaluation_module22(L,false, RefExs,QuestEval,Costs):-
    !.

predicate_argument_prop33(True, RefExs, ArgsProp,Preds,AdjsProp,Preds1, Hypo,Text,Costs):-
    ArgsProp=[RteArg|TextArgs],
    append(RteArg,Preds,Predss),
    append(TextArgs,Preds1,Predd1),
    appiattisci(Predd1,Predd11),
    sort(Predd11,Predss1),
%    filtersubjectpreds(Hypo,Text,Predss,Predss1, RefExs, [ArgsProp,AdjsProp]),
    match_templates33(RefExs,Hypo,Text,Predss1,Predss,Costs,ArgsProp,AdjsProp,True),
%    match_templates33(Predss1,Predss,Costs,True),
    !.
predicate_argument_prop33(unknown, RefExs, ArgsProp,Preds,AdjsProp,Preds1, Hypo,Text,Costs):-
    !.
rte_evaluation_module33(L,True, RefExs,[QuestEval|AnswEval],Costs):-
    checklengthcosts(Costs),
    match_propositional([QuestEval,AnswEval],Hypo,Text),
    pproposall([QuestEval,AnswEval],ArgsProp,Predsh,AdjsProp,Predst,OutText,OutHypo),
    general_consistency_check(RefExs,AdjsProp, OutText,OutHypo),
    sort(Predsh,Predss),
    sort(Predst,Predss1),
    ArgsProp=[ArgsHy,ArgsTe|Hyps],
    recover_particpls(Costs,PPs),
%    shortmatchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    matchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    predicate_argument_prop33(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs),
    !.
rte_evaluation_module33(L,false, RefExs,QuestEval,Costs):-
    !.

predicate_argument_prop22(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs):-
    append(ArgsProp,Predss,ArgsProps),
    append(AdjsProp,Predss1,AdjsProps),
    paraf_evaluationmodule(L, Trues, RefExs, [ArgsProps,AdjsProps]),
    (matchpropositionalgen1(Hypo,Text)
     ;
     findnegationprop(Hypo,D), D=not,
     searchnegations([no],Predss1)
      ),
    True=Trues,
    !.
predicate_argument_prop22(True, RefExs, ArgsProp,Preds,AdjsProp,Preds1, Hypo,Text,Costs):-
    ArgsProp=[RteArg|TextArgs],
    append(RteArg,Preds,Predss),
    append(TextArgs,Preds1,Predd1),
    appiattisci(Predd1,Predd11),
    sort(Predd11,Predss1),
    match_templates22(RefExs,Hypo,Text,Predss1,Predss,Costs,ArgsProp,AdjsProp,True),
    !.
predicate_argument_prop22(unknown, RefExs, ArgsProp,Preds,AdjsProp,Preds1, Hypo,Text,Costs):-
    !.

rte_evaluation_module1(L,True, RefExs,[QuestEval|AnswEval],Costs):-
    checklengthcosts(Costs),
    match_propositional([QuestEval,AnswEval],Hypo,Text),
    pproposall([QuestEval,AnswEval],ArgsProp,Predsh,AdjsProp,Predst,OutText,OutHypo),
    general_consistency_check(RefExs,AdjsProp, OutText,OutHypo),
    sort(Predsh,Predss),
    sort(Predst,Predss1),
%    ArgsProp=[ArgsHy,ArgsTe|_],
%    recover_particpls(Costs,PPs),
%    matchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    predicate_argument_proposs(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs),
    !.
/*
rte_evaluation_module1(L,True, RefExs,[QuestEval|AnswEval],Costs):-
    checklengthcosts1(Costs),
    compute_scoremod(QuestEval,AnswEval, Scores, Score, Modal),
    evalallscores(Score,True),
    !.
    */
rte_evaluation_module1(L,True, RefExs,[QuestEval|AnswEval],Costs):-
    checklengthcosts2(Costs,Cost1,Cost2),
    remove_all(Cost1,Cost2,Words),
    length(Words,L1),
    (L1<3,
    \+ on(W-num,Words),
    True=true-111
    ; 
    True=false),
    !.

rte_evaluation_module1(L,false, RefExs,QuestEval,Costs):-
    !.

rte_evaluation_moduleS(L,True, RefExs,[QuestEvals|AnswEval],Costs):-
    Costs=[Rte|Tex],
    newevaluate_output(Rte,Tex,Score),
    Score=[[EvSynt-_],[EvLf-_]],
    writeshallev(EvSynt,EvLf),
    Sco is EvSynt + EvLf,
    True=true-Sco,
    !.
/*
rte_evaluation_moduleS(L,True, RefExs,[QuestEvals|AnswEval],Costs):-
    compute_scoremod(QuestEvals,AnswEval, Scores, Score, Modal),
    evalallscores(Score,True),
    !.
*/
rte_evaluation_moduleS(L,True, RefExs,[QuestEvals|AnswEval],Costs):-
    checklengthcosts(Costs),
    match_propositional([QuestEvals,AnswEval],Hypo,Text),
    pproposall([QuestEvals,AnswEval],ArgsProp,Predsh,AdjsProp,Predst,OutText,OutHypo),
    general_consistency_check(RefExs,AdjsProp, OutText,OutHypo),
    sort(Predsh,Predss),
    sort(Predst,Predss1),
    pA_proposs(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs),
    !.
rte_evaluation_moduleS(L,false, RefExs,QuestEval,Costs):-
    !.


pA_proposs(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs):-
    match_templates(Costs),
    True=true-999,
    !.
pA_proposs(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs):-
    append(ArgsProp,Predss,ArgsProps),
    append(AdjsProp,Predss1,AdjsProps),
    paraf_evaluationmodule(L, Trues, RefExs, [ArgsProps,AdjsProps]),
    (matchpropositionalgen1(Hypo,Text)
     ;
     findnegationprop(Hypo,D), D=not,
     searchnegations([no],Predss1)
      ),
    True=Trues,
    !.

pA_proposs(True, RefExs, ArgsProp,Predss,AdjsProp,Predss1, Hypo,Text,Costs):-
    recover_particpls(Costs,PPs),
    ArgsProp=[ArgsHy,ArgsTe],
    matchpropositionalgen(PPs,Hypo,Text,ArgsHy,ArgsTe),
    createpasLF(Hypo,Text,Predss,Predss1, RefExs, [ArgsProp,AdjsProp]),
     True=true-888,
    !.


checklengthcosts(Costs):-
    nonvar(Costs),is_list(Costs),
    Costs=[_-A,_-B|_],
    A=[V1,Cos1|Synts1],
    B=[V2,Cos2|Synts2],
    length(Cos1,L1),
    length(Cos2,L2),
    L3 is L2 - L1,
    (L2 <100,
     L1 <50,
     10 =< L3
     ;
     L2 =<50,
     L1 =<30
      ),
    !.
checklengthcosts(Costs):-!.
checklengthcosts1(Costs):-
    nonvar(Costs),is_list(Costs),
    Costs=[_-A,_-B|_],
    A=[V1,Cos1|Synts1],
    B=[V2,Cos2|Synts2],
    length(Cos1,L1),
    length(Cos2,L2),
    L3 is L2 - L1,
    100 =< L2,
    50 =< L1,
    L3 < 10,
    !.
checklengthcosts1(Costs):-!.
checklengthcosts2(Costs,Cos1,Cos2):-
    Costs=[_-A,_-B|_],
    A=[V1,Cos1|Synts1],
    B=[V2,Cos2|Synts2],
    length(Cos1,L1),
    length(Cos2,L2),
    (20 =< L2; 20 =< L1),
    L3 is L2 - L1,
    L3 =< 3,
    !.


check_refexsall(Refss,RefEx1,Score):-
      Refss=_-RefExs,
      appiattisci(RefExs,RefEx),
      (Ref=Head-Def-[P,G,N,C,Ro]/_,
       Ref1=Head1-Def1-[P1,G1,N1,C1,Ro1]/_
      ;
      Ref=ref_ex(Ind,Head,Tab,P,G,N,C,Func/Ruolo)/S-_,
      Ref1=ref_ex(Ind1,Head1,Tab1,P1,G1,N1,C1,Func1/Ruolo1)/S1-_
       ),
      (on(Ref, RefEx),
         on(Ref1, RefEx1);
       on(Ref, RefEx1),
        on(Ref1, RefEx)),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1<L;C=C1;privileged_classes(C,C1,Ints)),
       Score=100,
        !.

check_refexsall(RefEx,RefEx1,Score):-
      (Ref=Head-Def-[P,G,N,C,Ro]/_,
       Ref1=Head1-Def1-[P1,G1,N1,C1,Ro1]/_
      ;
      Ref=ref_ex(Ind,Head,Tab,P,G,N,C,Func/Ruolo)/S-_,
      Ref1=ref_ex(Ind1,Head1,Tab1,P1,G1,N1,C1,Func1/Ruolo1)/S1-_
       ),
      (on(Ref, RefEx),
         on(Ref1, RefEx1);
       on(Ref, RefEx1),
        on(Ref1, RefEx)),
%      Def\=0,Def1\=0,
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1<L;C=C1;privileged_classes(C,C1,Ints)),
       Score=100,
        !.

pargument_parafs(ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
    append(ArgsProp,Predss,ArgsProps),
    append(AdjsProp,Predss1,AdjsProps),
    paraf_evaluationmodule(L, Trues, RefExs, [ArgsProps,AdjsProps]),
    (matchpropositionalgen1(Hypo,Text)
     ;
     findnegationprop(Hypo,D), D=not,
     searchnegations([no],Predss1)
      ),
    True=Trues,
    !.

passive_and_role(B,Hea1,Id,TextAdjs,Role,Hea):-
        (B=passive;B=passive_ing),
         (on(Id-Hea1-_/Role-Hea,TextAdjs);
          on(Cl-Pred-_/Role-Hea-Id,TextAdjs)), 
         r1(Role)
         ;
         B=passive_of,
         on(Id-Hea1-Role-Hea,TextAdjs), Role=specif.
%         !.

passive_no_role(B,Cl1,P1,TextAdjs,Hea):-
        (B=passive;B=passive_ing),
         on(Cl1-P1-R2-Hea-Id2,TextAdjs)
         ;
         B=passive_of,
         on(Cl1-P1-R2-Hea-Id2,TextAdjs).
%         !.

chosepassive(B,Cl1,P1,Hea1,Id,TextAdjs,Hea):-
      (
        passive_and_role(B,Hea1,Id,TextAdjs,Role,Hea)
        ;
      passive_no_role(B,Cl1,P1,TextAdjs,Hea)
      ),
      nonvar(Hea), Hea\=nil.
%      Hea\=Hea1,
%      !.

nominalized_deverbals([Cl1-P1-R1-Hea1-Id-A-B|Heass1],Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
%      on(Cl1-P1-R1-Hea1-Id-A-B,Heass1),
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      chosepassive(B,Cl1,P1,Hea1,Id,TextAdjs,Hea),
      TextArgs1=[cl99-A-R1-Hea-nil],
      build_prop_new(A,Text,Text1),
      NArgsProps=[RteArg,TextArgs1|Hyps],
      pargument(Costs,NArgsProps,Predss,AdjsProp,Predss1,RefExs, Hypo,Text1,True),
         !.
nominalized_deverbals([Cl1-P1-R1-Hea1-Id-A-B|Heass1],Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      nominalized_deverbals(Heass1,Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True),
     !.
     
nominalized_deverbals1([Cl1-P1-R1-Hea1-Id-A-B|Heass1],Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
%      on(Cl1-P1-R1-Hea1-Id-A-B,Heass1),
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      chosepassive(B,Cl1,P1,Hea1,Id,RteArg,Hea),
      RteArg1=[cl99-A-R1-Hea-nil],
      build_prop_new(A,Hypo,Hypo1),
      NArgsProps=[RteArg1,TextArgs|Hyps],
      pargument(Costs,NArgsProps,Predss,AdjsProp,Predss1,RefExs, Hypo1,Text,True),
         !.
nominalized_deverbals1([Cl1-P1-R1-Hea1-Id-A-B|Heass1],Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      nominalized_deverbals1(Heass1,Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True),
     !.
     
lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      on(Id-Hea1-poss-Poss,TextArgs),
      nbk(Hea1,A,B), Hea1\=A,
      append([cl99-A-actor-Hea1-nil],TextArgs,TextArgs1),
      build_prop_new(A,Text,Text1),
      NArgsProps=[RteArg,TextArgs1|Hyps],
      pargument(Costs,NArgsProps,Predss,AdjsProp,Predss1,RefExs, Hypo,Text1,True).
      

lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      on(Cl1-P1-R1-Hea1-Id,TextArgs),
      on(Id-Hea1-appos-Hea,TextAdjs),
      nbk(Hea,A,B),Hea\=A,
        (B=subject;B=alt),
      gethead_nominal(TextAdjs,TextArgs,Predss,Predss1,Hea2,Id1),
%      on(Hea-Def-Fea-Id1,RefExs),
      getroles(A,LArgsV,R11,R12),
%      append([cl99-A-R11-Hea1-nil],TextArgs,TextAr),
%      append([cl99-A-R12-Hea2-nil],TextAr,TextArgs1),
      TextArgs1=[cl99-A-R11-Hea1-nil,cl99-A-R12-Hea2-nil],
      build_prop_new(A,Text,Text1),
      NArgsProps=[RteArg,TextArgs1|Hyps],
    pargument(Costs,NArgsProps,Predss,AdjsProp,Predss1,RefExs, Hypo,Text1,True).

lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      on(Cl1-P1-R1-Hea-Id,RteArg),
      stringof(List,Cl1),List=[c|_],
      \+ light_verbs(P1),
      nbk(Hea,A,B),Hea\=A,
        (B=subject;B=alt),
      gethead_nominal(RteAdj,RteArg,Predss1,Predss,Hea2,Id1),
%      on(Hea-Def-Fea-Id1,RefExs),
      getroles(A,LArgsV,R11,R12),
%      append([cl99-A-R11-Hea-nil],RteArg,TextAr),
%      append([cl99-A-R12-Hea2-nil],TextAr,RteArg1),
      RteArg1=[cl99-A-R11-Hea1-nil,cl99-A-R12-Hea2-nil],
      build_prop_new(A,Hypo,Hypo1),
      NArgsProps=[RteArg1,TextArgs|Hyps],
    pargument(Costs,NArgsProps,Predss,AdjsProp,Predss1,RefExs, Hypo1,Text,True).

lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      Hypo=[be-pres-active-nil-nil-nil-nil-nil-attivita],
      on(Cl1-P2-prop-Hea2-Id2,RteArg),
      on(Cl1-P1-R1-Hea1-Id1,RteArg),
      Hea1\=Hea2,
      (Mod=specif;Mod=mod),
      on(Id-Hea3-Mod-Hea2,RteAdj),
      on(Id11-H-Role-Hea11,TextAdjs),
      main_head_match(Hea11,Hea1,Sco),
      on(Id12-Hea11-Mod-Hea22,TextAdjs),
      main_head_match(Hea22,Hea2,Sco),
      on(Id13-Hea11-Mod-Hea33,TextAdjs),
      main_head_match(Hea33,Hea3,Sco),
      True=true-011.

lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      (Hypo=[be-pres-active-nil-nil-nil-nil-nil-attivita],
      on(Cl1-P2-prop-Hea2-Id2,RteArg)
       ;
      Hypo=[have-pres-active-nil-nil-nil-nil-nil-attivita],
      on(Cl1-P2-theme_aff-Hea2-Id2,RteArg)),
      on(Cl1-P1-R1-Hea1-Id1,RteArg),
      Hea1\=Hea2,
      (Mod=specif;Mod=mod),
      on(Id-Hea2-Mod-Hea3,RteAdj),
      on(Id11-H-Role-Hea11,TextAdjs),
      main_head_match(Hea11,Hea1,Sco),
      on(Id12-Hea11-Mod-Hea22,TextAdjs),
      main_head_match(Hea22,Hea2,Sco),
      on(Id13-Hea11-Mod-Hea33,TextAdjs),
      main_head_match(Hea33,Hea3,Sco),
      True=true-011.

lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      (Hypo=[be-pres-active-nil-nil-nil-nil-nil-attivita],
      on(Cl1-P2-prop-Hea2-Id2,RteArg)
       ;
      Hypo=[have-pres-active-nil-nil-nil-nil-nil-attivita],
      on(Cl1-P2-theme_aff-Hea2-Id2,RteArg)),
      on(Cl1-P1-R1-Hea1-Id1,RteArg),
      Hea1\=Hea2,
      (Mod=specif;Mod=mod),
      on(Id-Hea2-Mod-Hea3,RteAdj),
      on(Id12-Hea2-Mod-Hea22,TextAdjs),
      on(Hea33-Mod-Id13,Predss1),
      main_head_match(Hea33,Hea3,Sco),
      on(Hea2-Rol-Id13,Predss1),
      match_noun_adj_wn(Hea1,Hea22),
      True=true-011.

lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      Hypo=[Pred-past-passive-nil-nil-nil-Aux-nil-attivita],
      induce_noun_adj_wn(Pred,Pres),
      on(Cl1-P2-R2-Hea2-Id2,RteArg),
      on(Cl1-P1-R1-Hea1-Id1,RteArg),
      Hea1\=Hea2,
      (Mod=specif;Mod=mod),
      on(Hea22,Pres),
      on(Id-Hea22-Mod-Hea3,TextAdjs),
      main_head_match(Hea2,Hea3,Sco),
      on(Hea1-Rol-Id13,Predss1),
      matchpropositionalgen([],Hypo,Text,A,A1),
      True=true-011.
      
lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      Hypo=[Pred-pres-active-nil-nil-nil-nil-nil-attivita],
      induce_noun_adj_wn(Pred,Pres),
      on(Cl1-P2-R2-Hea2-Id2,RteArg),
      on(Cl1-P1-R1-Hea1-Id1,RteArg),
      Hea1\=Hea2,
      (Mod=specif;Mod=mod),
      on(Hea22,Pres),
      on(Id-Hea2-Mod-Hea22,TextAdjs),
      main_head_match(Hea22,Pred,Sco),
      on(Hea1-Rol-Id13,Predss1),
      matchpropositionalgen([],Hypo,Text,A,A1),
      True=true-011.

lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      findall(Cl1-P1-R1-Hea1-Id-A-B,
                      (on(Cl1-P1-R1-Hea1-Id,TextArgs),
                            nbk(Hea1,A,B), Hea1\=A,
                       on(Cl2-A2-R2-Heas2-Ids2,RteArg),
                         stringof(List,Cl2),List=[c|_],
                          \+ light_verbs(A2)),
                          Heass),sort(Heass,Heass1),
      Heass1\=[],
      nominalized_deverbals(Heass1,Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True),
      !.
      
lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      findall(Cl1-P1-R1-Hea1-Id-A-B,(on(Cl1-P1-R1-Hea11-Id,TextArgs),
                                  on(Id-Hea11-R11-Hea1-Id11,TextAdjs),
                                       nbk(Hea1,A,B)
                                  ),
                          Heass), sort(Heass,Heass1),
      Heass1\=[],
      nominalized_deverbals(Heass1,Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True),
      !.
      
lexical_matching_module(Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,TextArgs|Hyps],
      AdjsProp=[RteAdj,TextAdjs|Texs],
      findall(Cl1-P1-R1-Hea1-Id-A-B,
                      (on(Cl1-P1-R1-Hea1-Id,TextArgs),
                         stringof(List,Cl1),List=[c|_],
                          \+ light_verbs(P1),
                            nbk(Hea1,A,B), Hea1\=A),
                          Heass),sort(Heass,Heass1),
      Heass1\=[],
      nominalized_deverbals1(Heass1,Text,Hyps,Costs,ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True),
      !.
      

evalallscores(Score,True):-
    (atomic(Score),
       (Score=true-T, True=true-T
        ; 
         Score=false, True=false)
         ;
      is_list(Score),
         (on(false,Score),\+ on(true-T,Score),True=false
          ;
          on(true-T,Score),\+on(false,Score),True=true-T
          ;
          on(true-T,Score),on(false,Score),
          findall(F,on(false,Score),Fs),
          findall(S,on(true-S,Score),Ts),
          length(Fs,Fl),
          length(Ts,Tl),
          (Tl=Fl,
           True=true-T
           ;
           Tl<Fl,
           True=false
           ;
           Fl<Tl,
           True=true-T)
          )
          ),
    !.

checklengths(Scores,L1,L2):-
    100<Scores,
    (5=<L1;12=<L2),
    !.
checklengths(Scores,L1,L2):-
    50<Scores, Scores=<100,
    (12<L1;L1=<5, 8=<L2),
%    12=<L2),
    !.
checklengths(Scores,L1,L2):-
    30<Scores,Scores=<50,
    (8<L1;L1=<5, 20=<L2),
    !.
checklengths(Scores,L1,L2):-
    Scores=<30,
    (5<L1;L1=<5, 12=<L2),
    !.
assign_score([], [], false):-!.
assign_score(Scores, [L1,L2], Score):-
    atomic(Scores),
    Scores<2500, 0<Scores,
    checklengths(Scores,L1,L2),
    Score=true-Scores,!.

assign_score(Scores, Mo, Score):-
    atomic(Scores),
    1000=<Scores, Scor is Scores - 1000,
    assign_score(Scor, Mo, Score),
    !.
assign_score(Scores, Mo, Score):-
    atomic(Scores),
    Scores<0, Scor is Scores + 1000,
    assign_score(Scor, Mo, Score),
    !.

assign_score(Scores, Mo, Score):-
    list(Scores),
    sommatoria(Scores, Scor),
   assign_score(Scor, Mo, Score),
   !.
assign_score(Scores, Mo, false):-!.

computescoremod([],First,[],[],[]):-!.
computescoremod(Rte,[],[],[],[]):-!.
computescoremod(Rte,First,Scores,Scors,Score):-
    collect_all_heads_deps(Rte,First,[RteHeads_Sort,RteDeps_Sort,FirstHeads_Sort,
                      FirstDeps_Sort,RteSRs_Sort,FirstSRs_Sort]),
    collect_all_scores_headdeps([RteHeads_Sort,RteDeps_Sort],[FirstHeads_Sort,FirstDeps_Sort],Score1),
    collect_all_scores_GRSR(Rte,First,[RteSRs_Sort],[FirstSRs_Sort],Score2),
    semantic_head_consistency(RteHeads_Sort,FirstHeads_Sort, Scors),
    append(Score1,Score2,Stats),
    (nonvar(Scors),
    append(Stats,[Scors],StatsAll)
    ;
    var(Scors),StatsAll=Stats),
    sommatoria(StatsAll, Scores),
    length(Rte,L1),
    length(First,L2),
    assign_score(Scores, [L1,L2], Score),
    !.
    
compute_scoremod(QuestEval,[[]], [], [], Modal):-!.
compute_scoremod(QuestEval,[], [], [], Modal):-!.
compute_scoremod([[]],First, [], [], Modal):-!.
compute_scoremod([],First, [], [], Modal):-!.
compute_scoremod(Quest,[[]|Files], Scos, Score,Mo):-
    compute_scoremod(Quest,Files, Scos, Score, Modal),
    !.
compute_scoremod(Quest,Files, [Score2,Scors|Scos], [Score],Mo):-
       (Files=[[_-[Preds],Info,[Firsts|AnswEval]]];
%       Files=[[Preds,Info,[Firsts|AnswEval]]];
       Files=[[Preds,Info,First]],AnswEval=[]),
       (Quest=[_-[Quests],Infs,[Secs|Rest]];
%       Quest=[Quests,Infs,[Secs|Rest]];
       Quest=[Quests,Infs,Rte],Rest=[]),
/*       Secs=Pred-Rte,
       (Firsts=Pred1-First
       ;
       Firsts=[Pred1-First|Res]
        ),
*/    
      computescoremod(Rte,First,Score2,Scors,Score),
%    compute_scoremod(Quest,[[Preds,Info,AnswEval]], Scos, Sco, Modal),
    !.

compute_scoremod(Quest,Files, Scores, Score,Mo):-
       Quest=[String,Infos,[Pred-Rte|New]],
       String=[A],
       Quest1=id1-[[String,Infos,[Pred-Rte]]],
       Quest2=id2-[[String,Infos,New]],
    compute_scoremod(Quest1,Files, Scos1, Sco1, Modal),
    compute_scoremod(Quest2,Files, Scos2, Sco2, Modal),
    append(Sco1,Sco2,Score),
    append(Scos1,Scos2,Scores),
    !.
compute_scoremod(Quest,Files, Scores, Score,Mo):-
       Quest=[String,Infos,[Pred-Rte|New]],
       String\=[A],
       String=[St|Sts],
       Quest1=Id-[[[St],Infos,[Pred-Rte]]],
       Quest2=Id-[[Sts,Infos,New]],
    compute_scoremod(Quest1,Files, Scos1, Sco1, Modal),
    compute_scoremod(Quest2,Files, Scos2, Sco2, Modal),
    append(Sco1,Sco2,Score),
    append(Scos1,Scos2,Scores),
    !.
compute_scoremod(Quest,Files, [], [],Mo):-
    !.
    
collect_all_heads_deps(Rte,First,[RteHeads_Sort,RteDeps_Sort,FirstHeads_Sort,
                      FirstDeps_Sort,RteSRs_Sort,FirstSRs_Sort]):-
    compute_heads(Rte,RteHeads),
    sort(RteHeads,RteHeads_Sort),
    compute_heads(First,FirstHeads),
    sort(FirstHeads,FirstHeads_Sort),
    compute_deps(Rte,RteDeps),
    sort(RteDeps,RteDeps_Sort),
    compute_deps(First,FirstDeps),
    sort(FirstDeps,FirstDeps_Sort),
    compute_SRs(Rte,RteSRs),
    sort(RteSRs,RteSRs_Sort),
    compute_SRs(First,FirstSRs),
    sort(FirstSRs,FirstSRs_Sort),
    !.

compute_deps([],[]):-!.
compute_deps([Dgr|Input],[Pred|Heads]):-
          Dgr=Cl-Pred-F/Role-Head-Ind,
          adjsroles(R),
         compute_deps(Input,Heads),
    !.

compute_deps([Dgr|Input],[Pred|Heads]):-
          Dgr=Ind-Head-Sem-Pred,
         compute_deps(Input,Heads),
    !.
compute_deps([Dgr|Input],[Head|Heads]):-
          Dgr=Head-F/R-Pred,
          adjsroles(R),
         compute_deps(Input,Heads),
    !.
compute_deps([Pred-Rest|Rte],[RteHeads1|RteHeads]):-
    is_list(Rest),
    compute_deps(Rest,RteHeads1),
    compute_deps(Rte,RteHeads),
      !.
compute_deps([Dgr|Input],Heads):-
         compute_deps(Input,Heads),
    !.

compute_GRs([],[]):-!.
compute_GRs([_-Dgr|Input],[F|Heads]):-
          Dgr=..[Head,F/R,Pred],
         compute_GRs(Input,Heads),
    !.
compute_GRs([_-Dgr|Input],[F|Heads]):-
          Dgr=..[Head,F/R,Pred],
         compute_GRs(Input,Heads),
    !.

compute_GRs([_-Dgr|Input],[F|Heads]):-
          Dgr=..[Head,F/R,Sem,Pred],
         compute_GRs(Input,Heads),
    !.
compute_GRs([_-Dgr|Input],[Heads]):-
         compute_GRs(Input,Heads),
    !.


compute_SRs([],[]):-!.
compute_SRs([Dgr|Input],[R|Heads]):-
          Dgr=Cl-Pred-F/R-Head-Ind,
         compute_SRs(Input,Heads),
    !.

compute_SRs([Dgr|Input],[R|Heads]):-
          Dgr=Ind-Head-F/R-Pred,
         compute_SRs(Input,Heads),
    !.
compute_SRs([Dgr|Input],Heads):-
         compute_SRs(Input,Heads),
    !.
compute_SRs([Pred-Rest|Rte],[RteHeads1|RteHeads]):-
    is_list(Rest),
    compute_SRs(Rest,RteHeads1),
    compute_SRs(Rte,RteHeads),
      !.


collect_all_scores_headdeps(RestR,RestF,[Score]):-
     collect_all_scores_headdep(RestR,RestF,StatsAl),
     appiattisci(StatsAl,StatsAll),
     length(StatsAll,L),
      (member(10,StatsAll), L<3, 
        sommatoria(StatsAll, Scores,_), Score is Scores - 1000;
        elimina(1000,StatsAll,Stats),
        sommatoria(Stats, Score,_);
        sommatoria(StatsAll, Score,_)
       ),
     !.


collect_all_scores_headdep([],[],[]):-!.
collect_all_scores_headdep([RHeads|RestR],[FHeads|RestF],[Score|Scores]):-
     examine_score_head_preds(RHeads,FHeads,Score),    
     collect_all_scores_headdep(RestR,RestF,Scores),
     !.


examine_score_head_preds(RHeads,FHeads,Stats):-
      check_all_mults(RHeads,Out1),
      check_all_mults(FHeads,Out2),
      examine_score_head_pred1(Out1,Out2,Score1),    
      examine_score_head_pred2(Out1,Out2,Score2),
      append(Score1,Score2,StatsAll),
      (member(10,StatsAll), elimina(1000,StatsAll,Stats)
         ; 
         Stats=StatsAll),
%      sommatoria(Stats, Score,_),  
      !.

examine_score_head_pred1([],[],[]):-!.
examine_score_head_pred1([],FHeads, [1000]):-
     !.
examine_score_head_pred1(RHeads,[],[1000]):-
     !.
examine_score_head_pred1([arb|RHeads],FHeads,Score):-
     examine_score_head_pred1(RHeads,FHeads,Score),    
     !.
examine_score_head_pred1(RHeads,[arb|FHeads],Score):-
     examine_score_head_pred1(RHeads,FHeads,Score),    
     !.
examine_score_head_pred1([Pred1|RHeads],[Pred2|FHeads],[10|Score]):-
     consistent_preds(Pred2,Pred1,Score1),
     examine_score_head_pred1(RHeads,FHeads,Score),    
     !.

examine_score_head_pred1([Pred1|RHeads],[Pred2|FHeads],[10|Score]):-
     constr_main_head_roles(Pred1,Pred2),
     examine_score_head_pred1(RHeads,FHeads,Score),    
     !.
examine_score_head_pred1([Pred1|RHeads],[Pred2|FHeads],Score):-
     examine_score_head_pred1(RHeads,FHeads,Score),    
     !.
examine_score_head_pred2(RHeads,FHeads,[10]):-
     member(Pred1,RHeads),
     member(Pred2,FHeads),
     consistent_preds(Pred1,Pred2,Score1),
     !.

examine_score_head_pred2(RHeads,FHeads,[10]):-
     member(Pred1,RHeads),
     member(Pred2,FHeads),
     constr_main_head_roles(Pred1,Pred2),
     !.
examine_score_head_pred2(RHeads,FHeads,[1000]):-!.

collect_all_scores_GRSR(Rte,First,[RteSRs],[FirstSRs],[Score]):-
      examine_score_GRSR(Rte,First,RteSRs,FirstSRs,Score2), 
      append(Score1,Score2,StatsAll),
      (member(Num,StatsAll), Num<50, elimina(1000,StatsAll,Stats)
      ; Stats=StatsAll),
      sommatoria(Stats, Score,_),  
     !.


examine_score_GRSR(Rte,First,[],[],[]):-!.
examine_score_GRSR(Rte,First,[],RteSRs,Score):-
     length(Rte,L), length(First,L1),
     (L=L1,Score=[];L<L1, Dif is L1-L, 2=<Dif,Score=[];L1<L, Dif is L-L1, 2=<Dif,Score=[];
      Score=[1000]),
     !.
examine_score_GRSR(Rte,First,RteGRs,[],Score):-
     length(Rte,L), length(First,L1),
     (L=L1,Score=[];L<L1, Dif is L1-L, 2=<Dif,Score=[];L1<L, Dif is L-L1, 2=<Dif,Score=[];
      Score=[1000]),
     !.
examine_score_GRSR(Rte,First,[Fun1|RteGRs],[Fun2|RteSRs],[Score|Scores]):-
      Fun1=Fun2,
      best_role_induct(Rte,Pred1,Ent,Fun1),
      w_e_pr(Fun1,Score),
      examine_score_GRSR(Rte,First,RteGRs,RteSRs,Scores), 
     !.
examine_score_GRSR(Rte,First,[Fun1|RteGRs],[Fun2|RteSRs],[Score|Scores]):-
      Fun1=Fun2,
      best_role_induct(Rte,Pred1,Ent,Fun1),
      light_verbs(Pred1),
      w_e_pr(Fun1,Score),
      examine_score_GRSR(Rte,First,RteGRs,RteSRs,Scores), 
     !.
examine_score_GRSR(Rte,First,[Fun1|RteGRs1],[Fun2|RteGRs2],[Score|Scores]):-
      Fun1\=Fun2,
      elimina(Fun1,RteGRs2,RteGRs),
      best_role_induct(Rte,Pred1,Ent,Fun1),
      light_verbs(Pred1),
      w_e_pr(Fun1,Score),
      append([Fun2],RteGRs,RteGRs3),
      examine_score_GRSR(Rte,First,RteGRs1,RteGRs3,Scores), 
     !.
examine_score_GRSR(Rte,First,[Fun1|RteGRs1],[Fun2|RteGRs2],[Score|Scores]):-
      Fun1\=Fun2,
      elimina(Fun2,RteGRs1,RteGRs),
      best_role_induct(Rte,Pred1,Ent,Fun2),
      light_verbs(Pred1),
      w_e_pr(Fun2,Score),
      append([Fun1],RteGRs,RteGRs3),
      examine_score_GRSR(Rte,First,RteGRs3,RteGRs2,Scores), 
     !.

examine_score_GRSR(Rte,First,[Fun1|RteGRs1],[Fun2|RteGRs2],[Score|Scores]):-
      Fun1\=Fun2,
      (normalize_roles(Fun2,Fun)
      ;normalize_roles(Fun,Fun2)),
      elimina(Fun,RteGRs1,RteGRs),
      best_role_induct(Rte,Pred1,Ent,Fun2),
      w_e_pr(Fun2,Score),
      append([Fun1],RteGRs,RteGRs3),
      examine_score_GRSR(Rte,First,RteGRs3,RteGRs2,Scores), 
     !.
examine_score_GRSR(Rte,First,[Fun|RteGRs],[Role|RteSRs],Scores):-
      examine_score_GRSR(Rte,First,RteGRs,RteSRs,Scores), 
     !.

extract_core_arguments(Files,Text,Hyppo,[Out1,OutArgs,HyppoLF,OutArgsLF]):-
       Files=[_-[Quests],[Firsts|AnswEval]],
       Quests=[String,Infos,Args],
       compute_ind_GRs(Args,Text,Out1),
       (Firsts=[Strin,Info,Arg],
        reverse(Arg,RevArg),
        compute_ind_GRs(RevArg,Hypo,Out2)
        ;
        Firsts=[],Out2=[],Hypo=[]),
       extract_corearguments(AnswEval,Hyposs,OutAr),
       appiattisci(Hyposs,Hypos),
       append(Hypo,Hypos,Hyppo),
       appiattisci(OutAr,OutArs),
       append(Out2,OutArs,OutArgs),
       append([Hypo],Hyposs,HyppoLF),
       append([Out2],OutAr,OutArgsLF),
      !.

extract_core_arguments(Files,Text,Hyppo,[Out1,OutArgs,HyppoLF,OutArgsLF]):-
       Files=[Quests,[Firsts|AnswEval]],
       Quests=[String,Infos,Args],
       compute_ind_GRs(Args,Text,Out1),
       (Firsts=[Strin,Info,Arg],
        reverse(Arg,RevArg),
        compute_ind_GRs(RevArg,Hypo,Out2)
        ;
        Firsts=[],Out2=[],Hypo=[]),
       extract_corearguments(AnswEval,Hyposs,OutAr),
       appiattisci(Hyposs,Hypos),
       append(Hypo,Hypos,Hyppo),
       appiattisci(OutAr,OutArs),
       append(Out2,OutArs,OutArgs),
       append([Hypo],Hyposs,HyppoLF),
       append([Out2],OutAr,OutArgsLF),
      !.

extract_corearguments([],[],[]):-!.
extract_corearguments(Files,[Hypo|Hypos],[OutArg|OutArgs]):-
       Files=[Firsts],
       Firsts=[Strin,Info,[Arg|AnswEval]],
        reverse(Arg,RevArg),
       compute_ind_GRs(RevArg,Hypo,OutArg),
       compute_ind_GRs(AnswEval,Hypos,OutArgs),
      !.
extract_corearguments(Files,[Hypo|Hypos],[OutArg|OutArgs]):-
       Files=[Firsts|AnswEval],
       Firsts=[Strin,Info,Arg],
        reverse(Arg,RevArg),
       compute_ind_GRs(RevArg,Hypo,OutArg),
       extract_corearguments(AnswEval,Hypos,OutArgs),
      !.
extract_corearguments(Files,Hypos,OutArgs):-
       Files=[Firsts|AnswEval],
       Firsts=[],
       extract_corearguments(AnswEval,Hypos,OutArgs),
      !.

compute_ind_GRs([],[],[]):-!.
compute_ind_GRs([Head-[]|Input],Heads,Args):-
       compute_ind_GRs(Input,Heads,Args),
        !.

compute_ind_GRs([Dgr|Input],[Predd-R-Id1,Predd-R-Id2|Heads],[Dgr1,Dgr2|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          is_list(Ind),
          test_rolearg(R),
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          Pred1\='discourse bound',
          nonvar(Id),
          newindsand(Pred1,Id,Predd,Idd),
           on(Id1,Ind),on(Id2,Ind),Id1\=Id2,
          Dgr1=Id1-Head-R-Predd-Id,
          Dgr2=Id2-Head-R-Predd-Id,
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs([Dgr|Input],[Pred1-R-Id|Heads],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          test_rolearg(R),
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          Pred1\='discourse bound',
          \+ is_list(Pred1),
          nonvar(Id),
          Dgr1=Ind-Head-R-Pred1-Id,
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs([Dgr|Input],[Pred1-poss-Ind|Heads],[Dgr1|Args]):-
          Dgr=Ind-Hed-poss-Pred,
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          Dgr1=Ind-Hed-poss-Pred1,
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs([Head-[Dgr|Input]],[Pred1-R-Id|Heads],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          test_rolearg(R),
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          \+ is_list(Pred1),
          nonvar(Id),
          Dgr1=Ind-Head-R-Pred1-Id,
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs(Head-[Dgr|Input],[Pred1-R-Id|Heads],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          test_rolearg(R),
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          \+ is_list(Pred1),
          nonvar(Id),
          Dgr1=Ind-Head-R-Pred1-Id,
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs([Dgr|Input],Heads,Args):-
          Dgr=Ind-Head-R-Pred-Id,
          \+ test_rolearg(R),
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs([Head-[Dgr|Input]],Heads,Args):-
          Dgr=Ind-Head-R-Pred-Id,
          \+ test_rolearg(R),
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs(Head-[Dgr|Input],Heads,Args):-
          Dgr=Ind-Head-R-Pred-Id,
          \+ test_rolearg(R),
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs([Dgr|Input],Heads,Args):-
          Dgr=Ind-Head-R-Pred-Id,
          \+ test_rolearg(R),
          compute_ind_GRs(Input,Heads, Args),
          !.
compute_ind_GRs([Head-[Dgr|Input]|Rest],[Pred1-R-Id|HeadsAll],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          test_rolearg(R),
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
           on(ante-V-Pred-Pred1,Rest),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
         test_risolto(Pred,Pred1)),
          \+ is_list(Pred1),
          nonvar(Id),
          Dgr1=Ind-Head-R-Pred1-Id,
          compute_ind_GRs(Rest,Heads1, Arr),
          removeantes(Input,Rest,Input1),
          compute_ind_GRs(Input1,Heads, Arg),
          append(Heads1,Heads,HeadsAll),
          append(Arr,Arg,Args),
          !.
compute_ind_GRs(Head-[Dgr|Input],[Pred1-poss-Ind|Heads],[Dgr1|Args]):-
          Dgr=Ind-Hed-poss-Pred,
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          Dgr1=Ind-Hed-poss-Pred1,
         compute_ind_GRs(Input,Heads, Args),
      !.
compute_ind_GRs([Head-[Dgr|Input]|Rest],HeadsAll,Args):-
          Dgr=Ind-Head-R-Pred-Id,
          \+ test_rolearg(R),
          compute_ind_GRs(Rest,Heads1, Arr),
          removeantes(Input,Rest,Input1),
          compute_ind_GRs(Input1,Heads, Arg),
          append(Heads1,Heads,HeadsAll),
          append(Arr,Arg,Args),
          !.
compute_ind_GRs([Head-[Dgr|Input]|Rest],Heads, Args):-
          compute_ind_GRs(Rest,Heads, Args),
          !.
compute_ind_GRs([Dgr|Rest],Heads, Args):-
          compute_ind_GRs(Rest,Heads, Args),
          !.
compute_ind_GRs(Rest,[],[]):-!.

removeantes(Input,Rest,Input1):-
          on(ante-V-Pred-Pred1,Rest),
          append(Input,[ante-V-Pred-Pred1],Input1),
          !.
removeantes(Input,Rest,Input):-!.

compute_ind_GRss(Head,[Dgr|Input],[Pred1-R-Id|Heads],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          test_rolearg(R),
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          \+ is_list(Pred1),
          nonvar(Id),
          Dgr1=Ind-Head-R-Pred1-Id,
         compute_ind_GRss(Head,Input,Heads, Args),
      !.
compute_ind_GRss(Head,[Dgr|Input],[Pred1-R-Id|Heads],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          test_rolearg(R),
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          \+ is_list(Pred1),
          nonvar(Id),
          Dgr1=Ind-Head-R-Pred1-Id,
         compute_ind_GRs(Input,Heads, Args),
      !.
compute_ind_GRss(Head,[Dgr|Input],[Pred1-poss-Ind|Heads],[Dgr1|Args]):-
          Dgr=Ind-Hed-poss-Pred,
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          \+ is_list(Pred1),
          Dgr1=Ind-Hed-poss-Pred1,
         compute_ind_GRs(Input,Heads, Args),
      !.
compute_ind_GRss(Head,[Dgr|Input],Heads, Args):-
         compute_ind_GRss(Head,Input,Heads, Args),
      !.
compute_ind_GRss(Head,Input,Heads, Args):-
         compute_ind_GRs(Input,Heads, Args),
      !.
compute_ind_GRss(Rest,[],[],[]):-!.

newindsand(Ars,Id,Predd,Idd):-
          (Ars=[A,B],
           mcon(A,'_',A1),
           mcon(A1,B,Predd)
           ;
           atomic(Ars),Predd=Ars),
          Id=[I1,I2],
          mcon(I1,'_',I11),
          mcon(I11,I2,Idd),
      !.

compute_rests([],[],[]):-!.
compute_rests([Head-[]|Input],Heads,Args):-
       compute_rests(Input,Heads,Args),
        !.
compute_rests([Dgr|Input],[Predd-R-Pred-Id1,Predd-R-Pred-Id2|Heads],[Dgr1,Dgr2|Args]):-
          (Dgr=Ind-Head-R-Pred-Id
           ;
           Dgr=Id-Head-R-Pred),
          test_roleadj(R),
          nonvar(Id),
          is_list(Id),
          Head=..[and,Ars],
          newindsand(Ars,Id,Predd,Idd),
          on(Id1,Id),on(Id2,Id),Id1\=Id2,
          (Dgr=Ind-Head-R-Pred-Id,
           Dgr1=Ind-Predd-R-Pred-Id1,
           Dgr2=Ind-Predd-R-Pred-Id2
           ;
           Dgr=Id-Head-R-Pred,
           Dgr1=Id1-Predd-R-Pred,
           Dgr2=Id2-Predd-R-Pred
           ),
          compute_rests(Input,Heads,Args),
      !.
compute_rests([Dgr|Input],[Head-R-Predd,Head-R-Arg,Arg-R-Predd|Heads],[Dgr|Args]):-
           Dgr=Predd-R-Head-Arg, Arg\=_-_, Predd\=_-_,
          test_roleadj(R),
          compute_rests(Input,Heads,Args),
      !.
compute_rests([Dgr|Input],[Head-R-Predd-Id|Heads],[Dgr|Args]):-
          (Dgr=Ind-Head-R-Predd-Id
           ;
           Dgr=Id-Head-R-Predd),
          test_roleadj(R),
          nonvar(Id),
          compute_rests(Input,Heads,Args),
      !.
compute_rests([Dgr|Input],Heads,Args):-
          (Dgr=Ind-Head-R-Pred-Id
           ;
           Dgr=Ind-Head-R-Pred),
          \+ test_roleadj(R),
          compute_rests(Input,Heads,Args),
      !.
compute_rests([Head-[Dgr|Input]],[Head-R-Predd-Id|Heads],[Dgr|Args]):-
          (Dgr=Ind-Head-R-Predd-Id
           ;
           Dgr=Id-Head-R-Predd),
          test_roleadj(R),
          nonvar(Id),
          compute_rests(Input,Heads,Args),
      !.
compute_rests([Head-[Dgr|Input]],Heads,Args):-
          (Dgr=Ind-Head-R-Pred-Id
           ;
           Dgr=Ind-Head-R-Pred),
          \+ test_roleadj(R),
          compute_rests(Input,Heads,Args),
      !.
compute_rests(Head-[Dgr|Input],[Head-R-Predd-Id|Heads],[Dgr|Args]):-
          (Dgr=Ind-Head-R-Predd-Id
           ;
           Dgr=Id-Head-R-Predd),
          test_roleadj(R),
          nonvar(Id),
          compute_rests(Input,Heads,Args),
      !.
compute_rests(Head-[Dgr|Input],Heads,Args):-
          (Dgr=Ind-Head-R-Pred-Id
           ;
           Dgr=Ind-Head-R-Pred),
          \+ test_roleadj(R),
          compute_rests(Input,Heads,Args),
      !.
compute_rests([Ind-Head-R-Pred-Id|Input],[Head-R-Pred-Id|Heads],Args):-
          compute_rests(Input,Heads,Args),
      !.
compute_rests([Id-Head-R-Pred|Input],[Head-R-Pred-Id|Heads],Args):-
          nonvar(Id), Id\= A-B,
          compute_rests(Input,Heads,Args),
      !.
compute_rests([Head-R-Pred|Input],[Head-R-Pred|Heads],Args):-
          compute_rests(Input,Heads,Args),
      !.


compute_rests([Head-[Dgr|Input]|Rest],[Head-R-Predd-Id|HeadsAll],ArgsAll):-
          (Dgr=Ind-Head-R-Predd-Id
           ;
           Dgr=Id-Head-R-Predd),
          test_roleadj(R),
          nonvar(Id),
          compute_rests(Rest,Heads1,Out1),
          compute_restss(Head,Input,Heads,Out2),
          append(Heads1,Heads,HeadsAll),
          append(Out1,Out2,ArgsAll),
          !.
compute_rests([Head-[Dgr|Input]|Rest],HeadsAll,ArgsAll):-
          (Dgr=Ind-Head-R-Pred-Id
           ;
           Dgr=Ind-Head-R-Pred),
          \+ test_roleadj(R),
          compute_rests(Rest,Heads1,Out1),
          compute_restss(Head,Input,Heads,Out2),
          append(Heads1,Heads,HeadsAll),
          append(Out1,Out2,ArgsAll),
          !.
compute_rests(Rest,[],[]):-!.

compute_restss(Head,[Dgr|Input],[Head-R-Pred-Id|Heads],[Dgr|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          test_roleadj(R),
          nonvar(Id),
         compute_restss(Head,Input,Heads,Args),
      !.
compute_restss(Head,[Dgr|Input],[Head-R-Pred-Id|Heads],[Dgr|Args]):-
          Dgr=Ind-Head-R-Pred-Id,
          test_roleadj(R),
          nonvar(Id),
         compute_rests(Input,Heads,Args),
      !.
compute_restss(Hea,[Dgr|Input],[Head-R-Pred-Ind|Heads],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Predd,
%          Head\=Hea, 
          atomic(Ind),
          test_roleadj(R),
          (atomic(Predd),Pred=Predd,Dgr1=Dgr;
          Predd=(Pred-_), Dgr1=Ind-Head-R-Pred),
          nonvar(Ind),
         compute_rests(Input,Heads,Args),
      !.
compute_restss(Hea,[Dgr|Input],[Head-R-Pred-Id1,Head-R-Pred-Id2|Heads],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Predd,
%          Head\=Hea, 
          is_list(Ind),
          Ind=[Id1,Id2],
          test_roleadj(R),
          (atomic(Predd),Pred=Predd,Dgr1=Dgr;
          Predd=(Pred-_), Dgr1=Ind-Head-R-Pred),
         compute_rests(Input,Heads,Args),
      !.
compute_restss(Hea,[Dgr|Input],[Head-R-Pred-Ind|Heads],[Dgr1|Args]):-
          Dgr=Ind-Head-R-Predd,
%          Head\=Hea, 
          atomic(Ind),
          R=poss,
          (atomic(Predd),Pred=Predd;
          Predd=(Pred-_)),
          nonvar(Ind),
          (on(ante-V-Pred-Pred1,Input),
           asserta(risolto(NoFr, Ind, Pred, Pred1))
            ;
          test_risolto(Pred,Pred1)),
          \+ is_list(Pred1),
          Dgr1=Ind-Head-R-Pred1,
         compute_rests(Input,Heads,Args),
      !.
compute_restss(Head,[Dgr|Input],Heads,Adjs):-
         compute_restss(Head,Input,Heads,Adjs),
      !.
compute_restss(Head,Input,Heads,Adjs):-
         compute_rests(Input,Heads,Adjs),
      !.
compute_restss(Rest,[],[],[]):-!.

extract_propos_adjuncts([],Hypo,[],[]):-!.
extract_propos_adjuncts(Files,Text,Hyppo,[Adj1,Adjs,HyppoLF,AdjssLF]):-
       Files=[_-[Quests],[Firsts|AnswEval]],
       Quests=[String,Infos,Args],
       compute_rests(Args,Text,Adj1),
       (Firsts=[Strin,Info,Arg],
        compute_rests(Arg,Hypo,Adj2)
        ;
        Firsts=[],Adj2=[],Hypo=[]),
       extract_proposadjuncts(AnswEval,Hyposs,Adjss),
       appiattisci(Hyposs,Hypos),
       append(Hypo,Hypos,Hyppo),
       appiattisci(Adjss,Adjss1),
       append(Adj2,Adjss1,Adjs),
       append([Hypo],Hyposs,HyppoLF),
       append([Adj2],Adjss,AdjssLF),
      !.
extract_propos_adjuncts(Files,Text,Hyppo,[Adj1,Adjs,HyppoLF,AdjssLF]):-
       Files=[Quests,[Firsts|AnswEval]],
       Quests=[String,Infos,Args],
       compute_rests(Args,Text,Adj1),
       (Firsts=[Strin,Info,Arg],
        compute_rests(Arg,Hypo,Adj2)
        ;
        Firsts=[],Adj2=[],Hypo=[]),
       extract_proposadjuncts(AnswEval,Hyposs,Adjss),
       appiattisci(Hyposs,Hypos),
       append(Hypo,Hypos,Hyppo),
       appiattisci(Adjss,Adjss1),
       append(Adj2,Adjss1,Adjs),
       append([Hypo],Hyposs,HyppoLF),
       append([Adj2],Adjss,AdjssLF),
      !.


extract_proposadjuncts([],[],[]):-!.
extract_proposadjuncts(Files,[Hypo|Hypos],[Adjs|Adjss]):-
       Files=[Firsts],
       Firsts=[Strin,Info,[Arg|AnswEval]],
       (is_list(Arg),compute_rests(Arg,Hypo,Adjs)
       ;
       compute_rests([Arg|AnswEval],Hypos,Adjss)
       ),
      !.
extract_proposadjuncts(Files,[Hypo|Hypos],[Adjs|Adjss]):-
       Files=[Firsts|AnswEval],
       Firsts=[Strin,Info,Arg],
       compute_rests(Arg,Hypo,Adjs),
       extract_proposadjuncts(AnswEval,Hypos,Adjss),
      !.
extract_proposadjuncts(Files,Hypos,Adjss):-
       Files=[Firsts|AnswEval],
       Firsts=[],
       extract_proposadjuncts(AnswEval,Hypos,Adjss),
      !.


match_propositional(Files,String,Hyppo):-
       (Files=[_-[Quests],[Firsts|AnswEval]];
       Files=[Quests,[Firsts|AnswEval]]),
       Quests=[String,Infos,Args],
       (Firsts=[Strin,Info,Arg];First=[],Strin=[]),
       collect_propos(AnswEval,Hyposs),
       appiattisci(Hyposs,Hypos),
       append(Strin,Hypos,Hyppo),
      !.

collect_propos([],[]):-!.
collect_propos(Files,[Strin|Hypos]):-
       Files=[Firsts],
       Firsts=[Strin,Info,Args],
       collect_propos([],Hypos),
      !.
collect_propos(Files,[Strin|Hypos]):-
       Files=[Firsts|AnswEval],
       Firsts=[Strin,Info,Args],
       collect_propos(AnswEval,Hypos),
      !.
collect_propos(Files,Hypos):-
       Files=[[]|AnswEval],
       collect_propos(AnswEval,Hypos),
      !.


propositional_gen(L, True, True, RefExs, [Hypo,Text], [QuestEval,First]):-
       extract_propos_adjuncts([QuestEval,First],Hypo1,Text1),
       sort(Hypo1,Hyp),
       sort(Text1,Tex),
       propositional_coherence(QuestEval,First),
%       eval_dets_head(Hyp, Tex),
       general_consistency_check(QuestEval,First),
      !.

propositional_general(L, false, false, RefExs, [Hypo,Text], [QuestEval,AnswEval]):-
    !.

propositional_general(L, True, True, RefExs, [Hypo,Text], [QuestEval,First]):-
       extract_propos_adjuncts([QuestEval,First],Hypo1,Text1),
%       Text=[Texx-_|_],
       sort(Hypo1,Hyp),
       sort(Text1,Tex),
       check_remain_hds(Hypo,Text, Hyp,Tex),
       propositional_coherence(QuestEval,First),
       extract_check_head_attributes(QuestEval,First, Hypo,Text, Scors),
       eval_dets_head(Hyp, Tex),
       general_consistency_check(QuestEval,First),
      !.

propositional_general(L, Tru, false, RefExs, [Hypo,Text], [QuestEval,AnswEval]):-
      !.
   
check_head_index(Headd,Headd1,Head,Head1):-
      nonvar(Headd), nonvar(Headd1),
      Headd\=[], Headd1\=[],
      (atomic(Headd),Head=Headd;Headd=Head-_),
      (atomic(Headd1),Head1=Headd1;Headd1=Head1-_),
%      lemmatize_dic(Head,Head0,K),
%      lemmatize_dic(Head1,Head01,M),
      !.
      
checkallabbr(Head):-
    checkt(Head)
    ;
    checkab(Head)
    ;
    chabbr(Head)
    ;
    charl(Head),
    !.
check_remain_hds(Rte,First,[],Third):-!.
check_remain_hds(Rte,First,Sec,[]):-!.
check_remain_hds(Rte,First,Sec,Third):-
      is_list(Rte),
      length(Rte,L),
      L=1,
      !.

check_remain_hds(Quest,First,Rte,Firs):-
      is_list(Quest),
      length(Quest,L),
      2=<L,
      remove_main_hds(Quest,Rte1),
      remove_main_hds(First,Firs1),
      remove_sec_hds(Rte1,Rte2,Firs1,Firss),
      detect_adjuncts(Rte,Firs,Args),
      (Args=[], 
       remove_identical_grs(Quest,First, QRte,FFirs)
       ;
        Args\=[], QRte=Rte, FFirs=First),
      extract_head_dep(QRte, Pred1,Ent),
%      best_roles_induct(QRte,Pred1,Ent,Role),
      nonvar(Pred1),
      non_focused_pred(Pred1,Rte,First),
      extract_head_dep(FFirs, Pred2,Ent1),
%      best_roles_induct(FFirs,Pred2,Ent1,Role2),
      non_semantic_head(Ent),
      check_main_head_roles(Ent,Ent1),
      (consistent_preds(Pred1,Pred2,Score1);
          check_main_head_roles(Pred1,Pred2);
          light_verbs(Pred1);
          light_verbs(Pred2)),
      verify_head_dep(Quest,First, Pred1,Pred2),
      non_conflicting_arguments(Quest,First),
      !.      
compare_quant(Qua,Qua1):-
   nm(Qua,_,Qua1)
   ;
   nm(Qua1,_,Qua),
      !.
compare_quant(Qua,Qua1):-
  Qua\=[],Qua1\=[],
  grepinteger(Qua,N),
  integer(N), 
  (N=Qua1;
   nm(_,_,N), N=Qua1;
   nm(Q,_,N), Q=Qua1),!.

compare_quant(Qua,Qua1):-
  Qua\=[],Qua1\=[],
  grepinteger(Qua1,N),
  integer(N), 
  (N=Qua;
   nm(_,_,N), N=Qua;
   nm(Q,_,N), Q=Qua),!.

compare_quant(Qua,Qua1):-
  (integer(Qua);stringof(List,Qua),on(I,List),integer(I)),
  recover_descs(Qua1,Descs),
  on(Qua,Descs),
  !.
compare_quant(Qua1,Qua):-
  (integer(Qua);stringof(List,Qua),on(I,List),integer(I)),
  recover_descs(Qua1,Descs),
  on(Qua,Descs),
  !.
compare_quant(Qua1,Qua):-
  (integer(Qua);stringof(List,Qua),on(I,List),integer(I)),
  recover_descs(Qua1,Descs),
  is_list(Descs),
  length(Descs,L), L=<4,
  on(Q1,Descs),
  (nm(Q1,_,N1);
   spy_lower(Q1,Low1,1),
   nm(Low1,_,N1)),
  integer(Qua),
  Res is Qua - N1,
  nm(Q2,_,Res),
  on(Q2,Descs),
  !.
compare_quant(Qua,Qua1):-
  (integer(Qua);stringof(List,Qua),on(I,List),integer(I)),
  recover_descs(Qua1,Descs),
  is_list(Descs),
  length(Descs,L), L=<4,
  on(Q1,Descs),
  (nm(Q1,_,N1);
   spy_lower(Q1,Low1,1),
   nm(Low1,_,N1)),
  integer(Qua),
  Res is Qua - N1,
  nm(Q2,_,Res),
  on(Q2,Descs),
  !.
compare_quant(Qua,Qua1):-
  qmq(Qua),
  recover_descs(Qua1,Descs),
  is_list(Descs),
  on(Head1,Descs),
  (convertmeas(Head1,Head2)
   ;
   stringof(List,Head1),on(Head2,List)
   ),
  Head2=Qua,
  !.
compare_quant(Qua,Qua1):-
  qmq(Qua1),
  recover_descs(Qua,Descs),
  is_list(Descs),
  on(Head1,Descs),
  (convertmeas(Head1,Head2)
   ;
   stringof(List,Head1),on(Head2,List)
   ),
  Head2=Qua1,
  !.
compare_quant(Qua,Qua1):-
  (integer(Qua1);stringof(List,Qua1),on(I,List),integer(I)),
  spy_lower(Qua,Low,1),
  compare_quant(Low,Qua1),
  !.
compare_quant(Qua,Qua1):-
  (integer(Qua);stringof(List,Qua),on(I,List),integer(I)),
  spy_lower(Qua1,Low,1),
  compare_quant(Qua,Low),
  !.

grepinteger(Qua,N):-
  atomic(Qua),
  nm(Qua,_,N), 
  !.
grepinteger(Qua,N):-
  atomic(Qua),
  stringof(List,Qua),
  reverse(List,[h,t|Rest]),
  reverse(Rest,Rev),
  stringof(Rev,Num),
  (nm(N,_,Num)
   ;
   nm(Num,_,N)), 
  !.
grepinteger(Qua,N):-
  atomic(Qua),
  stringof([N|List],Qua),
  !.
eval_dets_quants_head(R,[],[],[]):-!.
eval_dets_quants_head(R,[],Quant,[]):-!.
eval_dets_quants_head(R,[],[],Quant):-!.
eval_dets_quants_head(R,[],Quan,Quant):-!.
eval_dets_quants_head(R,[nil-nil|Quan],Heads,Quan1):-
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
eval_dets_quants_head(R,Quan,Heads,[nil-nil|Quan1]):-
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],[],Quan1):-
        evalrefsquants(R,Head,Qua),
        !,
      eval_dets_quants_head(R,Quan,[],Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],[],Quan1):-
      quant_entailed(Qua,_),
      \+ nm(Qua,_,N),
        !,
      eval_dets_quants_head(R,Quan,[],Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      arts(Qua),
      remove_all([Head-_],Heads,Heads1),
        !,
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.     
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      (Qua=every;Qua=each;Qua=one;Qua=all;
        Qua='Every';Qua='One';Qua='Each';Qua='All'),
       (Heads\=[],
         remove_all([Head-_],Heads,Heads1)
         ;
         Heads1=Heads),
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      Quan1\=[],nonvar(Quan1),
      remove(Head-Qua,Quan1,Quant1),
      (remove(Head-Head1,Heads,Heads1)
        ;
        Heads1=Heads),
        !,
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.

eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      Quan1\=[],nonvar(Quan1),
      remove(Head-Head1,Heads,Heads1),
      remove(Head1-Qua,Quan1,Quant1),
        !,
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      Quan1\=[],nonvar(Quan1),
      (integer(Qua),
       remove(Head-Head1,Quan1,Quan11),
       remove(Head1-Qua,Quan11,Quant1)
       ;
       integer(Head),
       remove(Head1-Head,Quan1,Quan11),
       remove(Qua-Head1,Quan11,Quant1)
       ;
       integer(Head),
       remove(Head1-Head,Quan1,Quant1),
       convertmeas(Head1,Head2),
       Qua=Head2
       ;
       integer(Qua),
       remove(Head1-Qua,Quan1,Quant1),
       convertmeas(Head1,Head2),
       Head=Head2
       ),
       !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      Quan1\=[],nonvar(Quan1),
      on(Head1-Qua1,Quan1),
      (Qua=Qua1
        ;
       spy_lower(Qua,LowQ,P),
       spy_lower(Qua1,LowQ1,P1),
       LowQ=LowQ1),
       (
        quant_entailed(Head,_),
        generic_head1(Head1,_)
        ;
        quant_entailed(Head,_),
        generic_head1(Head1,_)),
      (remove(Head-Head1,Heads,Heads1);Heads1=Heads),
        !,
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.
             
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      Quan1\=[],nonvar(Quan1),
      on(Head1-Qua1,Quan1),
      (Qua=Qua1
        ;
       spy_lower(Qua,LowQ,P),
       spy_lower(Qua1,LowQ1,P1),
       LowQ=LowQ1
       ;
       intsf(Qua),
       intsf(Qua1)
        ;
       intsf1(Qua),
       intsf1(Qua1)
        ;
       intsf2(Qua),
       intsf2(Qua1)
        ;
       compare_quant(Qua,Qua1)
        ;
        quant_entailed(Qua1,Qua)
        ;
        Qua\=Qua1,
        quant_entailed(Qua,Qua1)
        ),
      remove(Head1-Qua1,Quan1,Quant1),
      checkintensf(Qua,Qua1,Head,Quan1),
      (main_head_match(Head,Head1,K)
        ;
        matchcoins(Head,Head1)
        ;
        matchcoins(_,Head1)
         ;
        matchcoins(Head,_)
      ;
       sloppy_match(Head,Head1,K)
       ;
       recover_descs(Qua1,Des),is_list(Des), 
         (on(Head,Des);on(Hea,Des),sloppy_match(Hea,Head,K))
        ; 
        nt(Head)
        ;
        Qua1=Head1
        ;
        qmq(Head1)),
      (remove(Head-Head1,Heads,Heads1);Heads1=Heads),
        !,
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.
      
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      Quan1\=[],nonvar(Quan1),
      on(Qua1-Hea,Quan1),
      (Qua=Qua1
        ;
       spy_lower(Qua,LowQ,P),
       spy_lower(Qua1,LowQ1,P1),
       LowQ=LowQ1
        ;
       compare_quant(Qua,Qua1)
        ;
        quant_entailed(Qua1,Qua)
        ;
        quant_entailed(Qua,Qua1)
        ),
      remove(Qua1-Hea,Quan1,Quant1),
      main_head_match(Head,Qua1,K),
      (remove(Head-Head1,Heads,Heads1);Heads1=Heads),
        !,
      eval_dets_quants_head(R,Quan,Heads1,Quant1),
      !.
eval_dets_quants_head(RX,[Head-Qua|Quan],Heads,Quan1):-
      Quan1\=[],nonvar(Quan1),
      (on(Qua1-Hea,Quan1)
       ;
       on(Hea-Qua1,Quan1)),
       Head=Qua1,
      qm(Head),
      (spy_lower(Qua,Low,1); Low=Qua),
      intsf(Low),
      (on(Qua2-Hea2,Quan),
       integer(Qua2);
       on(Hea2-Qua2,Quan)),
      stringof([R|Eal],Hea),
      R=Qua2,
      (remove(Qua1-Hea,Quan1,Quant1);remove(Hea-Qua1,Quan1,Quant1)),
      (remove(Qua2-Hea2,Quan,Quat1);remove(Hea2-Qua2,Quan,Quat1)),
      (remove(Head-Head1,Heads,Heads1);Heads1=Heads),
        !,
      eval_dets_quants_head(RX,Quat1,Heads1,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      integer(Qua),
      Quan1\=[],nonvar(Quan1),
      remove(Head-Int,Quan1,Quant1),
      integer(Int),
      on(Head1-Qua1,Quant1),
      (Qua1=other;Qua1=another),
      on(Head-Qua2,Quant1),
      remove(Head1-Qua1,Quant1,Quant2),
      Int1 is Int + 1,
      Qua = Int1,
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      \+ integer(Qua),
      trova_CatSem(n,Qua,K),
      (\+ qm(Qua);
      is_list(K),\+ on(nquant,K), \+ on(date,K)),
      remove_all([Head-_],Heads,Heads1),
        !,
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      Quan1\=[],nonvar(Quan1),
      remove(Hea1-Int,Quan1,Quant1),
      remove(Hea2-Int1,Quant1,Quant2),
         (qm(Int),nm(Int,_,Num);
          integer(Int),Num=Int;
          stringof([R|Eal],Int),
          integer(R), remove('/',Eal,Ea),
          append([R],Ea,Numms),
          reverse(Numms,[I|RevNu]),
          integer(I),
          concat_atom(Numms,Numm),
%          atom_to_term(Numm,Num,K),
          integer(Numm)
          ),
         (qm(Int1),nm(Int1,_,Num1);
          integer(Int1),Num1=Int1;
          stringof([R1|Eal1],Int1),
          integer(R1), remove('/',Eal1,Ea1),
          (Ea1=[Nu|_],integer(Nu),
           append([R1],Ea1,Numss),
          reverse(Numss,[Is|RevNus]),
          integer(Is),
           concat_atom(Numss,Nums),
           (on('/',Numss), Num1=Nums
            ;
            \+on('/',Numss), atom_to_term(Nums,Num1,K))
           ;
           Num1=R1),
          integer(Num1)
          ),
        (integer(Qua),
         (Int2 is Num + Num1,
          Int2 = Qua
          ;
          Int2 is Num * Num1,
          Int2 = Qua)
          ;
          stringof([R3|Eal3],Qua),
          integer(R3), remove('/',Eal3,Ea3),
          append([R3],Ea3,Num2),
          reverse(Num2,[I2|RevNu2]),
          integer(I2),
          concat_atom(Num2,Num12),
          atom_to_term(Num12,Num11,K),
          integer(Num11),
         (Int2 is Num + Num1,
          Int2 = Num11
          ;
          Int2 is Num * Num1,
          Int2 = Num11)
          ),
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
      
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,Head,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        nogen_member(Ref,Refs),
        cwn(Head),
        nogen_member(def0,Tab),
        matchrefstabquan(Qua,RefExs),
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.

eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      remove(Hea1-Qua,Quan1,Quant1),
       qmq(Qua),
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,Head1,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        nogen_member(Ref,RefExs),
      (main_head_match(Head1,Head,K)
       ;
        sloppy_match(Head1,Head,K)),
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.

eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
        R=[Refs,RefExs],
        findall(Num,(
                 Ref=ref_ex(SnX,Head,Tab,_,Gen,Num,Cats,F/Role)/_-_,
                 Ref1=ref_ex(SnX1,He1,Tab1,_,Gen1,Num1,Cats1,F1/Role1)/_-_,
                 nogen_member(Ref,RefExs),
                 nogen_member(Ref1,RefExs),
                 nogen_member(def0,Tab),
                 nogen_member(def0,Tab1),
                 nogen_member(Int,Tab),
                 nogen_member(Int1,Tab1),
                 (qm(Int),nm(Int,_,Num);integer(Int),Num=Int),
                 (qm(Int1),nm(Int1,_,Num1);integer(Int1),Num1=Int1)), Nums),
         Nums\=[], on(Num,Nums),
         Int2 is Num + Num1,
         Int2 = Qua,
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.

eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      (Qua=last;Qua=next;Qua=first;Qua=second;Qua=third),
      Heads\=[],
      remove_all([Head-_],Heads,Heads1),
      !,
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|[]],[],[]):-
      \+ neg_pred(Qua),
      \+ grammw(Qua,Ca),
      notintersect(Qua),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,Qua1,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        nogen_member(Ref,RefExs),
        qstrict_head_match(Qua,Qua1,K),
        \+nm(Qua,_,Nu),\+nm(Qua1,_,Num1),
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,Head,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        nogen_member(Ref,Refs),
        Ref1=ref_ex(SnX1,Qua1,Tab1,_,Gen1,Num1,Cats1,F1/Role1)/_-_,
        nogen_member(Ref1,RefExs),
        (nm(Qua,_,Qua1);nm(Qua1,_,Qua)),
        (F=F1;F=sogg,F1=ogg;F=ogg,F1=sogg),
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,Qua1,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        nogen_member(Ref,RefExs),
        mcon(Qua,'_',Q1),
        mcon(Q1,Head,Q2),
        (coinmatchS(Qua1,Qua);
        coinmatchS(Qua1,Q2)),         
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
        (Qua=percent;Qua=percentage),
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,Qua1,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        nogen_member(Ref,RefExs),
        stringof(List,Qua1),
        reverse(List,['%'|Rev]),
        qstrict_head_match(Head,Qua1,K),
        \+nm(Head,_,Num),\+nm(Qua1,_,Num1),
        !,
      eval_dets_quants_head(R,Quan,Heads,Quan1),
      !.
eval_dets_quants_head(R,[Head-Qua|Quan],Heads,Quan1):-
      evalrefsquants(R,Head,Qua),
      Quan1\=[],nonvar(Quan1),
      on(Head1-Qua1,Quan1),
        Qua\=Qua1,
      remove(Head1-Qua1,Quan1,Quant1),
      checkintensf(Qua,Qua1,Head,Quan1),
      (main_head_match(Head,Head1,K)
        ;
        matchcoins(Head,Head1)
       ;
       sloppy_match(Head,Head1,K)
       ;
       recover_descs(Qua1,Des),is_list(Des),on(Head,Des)),
      (remove(Head-Head1,Heads,Heads1);Heads1=Heads),
      eval_dets_quants_head(R,Quan,Heads1,Quan1),
      !.

matchcoins(Head,Head1):-
      matchcoin(Head,Head1)
      ;
      matchcoin(Head,Head1),
      !.

matchcoin(dollar,$).
matchcoin(dollars,$).
matchcoin(£,sterling).
matchcoin(£,sterlings).
matchcoin(pound,£).
matchcoin(euro,'€').
matchcoin(pounds,£).
matchcoin(euros,'€').


coinmatchS(A,B):-
     coinmatch(A,B)
     ;
     coinmatch(B,A),
     !.

coinmatch(nickel,5).
coinmatch(nickel,20).
coinmatch(nickel,100).
coinmatch(100,pound).
coinmatch(20,pound).
coinmatch(shilling,12).
coinmatch(nickel,'5_cent').
coinmatch(nickel,'1_20th').
coinmatch(nickel,'1_100th').
coinmatch('100_pence',pound).
coinmatch('100_penny',pound).
coinmatch('20_shilling',pound).
coinmatch('1_shilling','12_pence').
coinmatch('1_shilling','12_penny').


matchrefstabquan(Qua,RefExs):-
        Ref1=ref_ex(SnX1,He1,Tab1,_,Gen1,Num1,Cats1,F1/Role1)/_-_,
         nogen_member(Ref1,RefExs),
         nogen_member(def0,Tab1),
         nogen_member(Int,Tab1),
         (qm(Int);integer(Int)),
         Int = Qua,
         !.
evalrefsquants(R,Head,Qua):-
        (Qua=2;Qua=two),
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,He1,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        nogen_member(Ref,RefExs),
        recover_descs(He1,Des),is_list(Des),
        on(and,Des),
        !.
evalrefsquants(R,Head,Qua):-
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,He1,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        nogen_member(Ref,RefExs),
        main_head_match(Head,He1,K),
        nogen_member(def0,Tab),
        quant_entailed(Qua,def0),
      !.

evalrefsquants(R,Head,Qua):-
        R=[Refs,RefExs],
        Ref=ref_ex(SnX,Head,Tab,_,Gen,Num,Cats,F/Role)/_-_,
        Ref1=ref_ex(SnX1,He1,Tab1,_,Gen1,Num1,Cats1,F1/Role1)/_-_,
        cwn(Head),
        nogen_member(Ref,Refs),
        nogen_member(Ref1,RefExs),
        nogen_member(def0,Tab),
        nogen_member(def0,Tab1),
        nogen_member(more_than,Tab),
        nogen_member(more_than,Tab1),
        integer(He1),
        nogen_member(Int,Tab),
        integer(Int),
        Int < He1,
      !.

checkintensf(Qua,Qua1,Head,Quan1):-
          findall(Qua2,(on(Head-Qua2,Quan1),
                    Qua2\=Qua, Qua2\=Qua1,
                    intsf(Qua2)),Quas), Quas=[],
      !.

notintersect(En1):-
        findall(En1,
              (advi(En1);
               advt(En1);
               atya(En1,_)
               ; 
               citiesinfer(En1,Hyper,Super)
               ; 
               citiesinfer(_,En1,Super)
               ; 
               citiesinfer(_,_,En1)
%               hrv(En1,0)
               ), Ens), 
        Ens=[].
        
checknsem(Lex):-
    trova_CatSem(n,Lex,Cat),
    Cat\=nil
    ;
    search_wn_cats(Lex,Cat),
    Cat\=nil
    ;
    sk(Lex,K), stringof(Lis,K), Lis=[1|_]
    ;
    dc(Lex,K),(on(n,K);on(npl,K)),
      !.


/*
eval_dets_quants_head([],Quan1):-
      findall(Qua,(
         on(Head1-Qua1,Quan1),
        (quant_entailed(Qua1,Qua)
         ;
         quant_entailed(Qua,Qua1))),Quas),
         (Quas=[]
         ;
         on(some,Qua)
         ;
         on(many,Qua)),!.
*/
quant_entailed(B,A):-nonvar(A), nonvar(B), B=any.
quant_entailed(A,B):-nonvar(A), nonvar(B), B=any.
quant_entailed(few,Qua):-   
   nm(Qua,_,Qua1),
   Qua1<10
   ;
   integer(Qua),
   Qua<10,
      !.
quant_entailed(Qua,few):-   
   nm(Qua,_,Qua1),
   Qua1<10
   ;
   integer(Qua),
   Qua<10,
      !.
quant_entailed(two,both).
quant_entailed(two,either).
quant_entailed(both,two).
quant_entailed(either,two).
quant_entailed(def0,some).
quant_entailed(some,def0).
quant_entailed(a,one).
quant_entailed(some,a_few).
quant_entailed(some,many).
quant_entailed(some,other).
quant_entailed(many,all).
quant_entailed(last,former).
quant_entailed(last,past).
quant_entailed(past,former).
quant_entailed(next,future).
quant_entailed(many,numerous).
quant_entailed(majority,numerous).
quant_entailed(majority,many).
quant_entailed(minority,a_few).
quant_entailed(minority,some).
quant_entailed(Qua,Qua1):-
    spy_lower(Qua,Low,1),
    quant_entailed(Low,Qua1)
    ;
    spy_lower(Qua1,Low1,1),
    quant_entailed(Low1,Qua).

intransitives(Rte,First):-
      best_role1(Rte,Pred,Role),
      best_role1(First,Pred1,Role2),
      v(Pred,Cats),
      v(Pred1,Cats1),
      intr(Cats,Cats1),
     !.

intr(Cats,Cats1):-
   (I=i;I=ti;I=erg;I=imp),
    on(I,Cats),!.

lightverbsp(be).
lightverbsp(there_be).
lightverbsp(have).
lightverbsp(become).
lightverbsp(get).
lightverbsp(bear).

lightverbs(be).
lightverbs(there_be).
lightverbs(have).
lightverbs(become).
lightverbs(get).

superlight(W,[residence,location]):-
   locateverbs(Verbs),
   on(W,Verbs),
   !.
superlight(W,[work,activity,action,human_activity,human_action,act,exploit,deed]):-
   activityverbs(Verbs),
   on(W,Verbs),
   !.
superlight(W,[phenomenon,event,social_relation,relation]):-
   stateverbs(Verbs),
   on(W,Verbs),
   !.
superlight(W,[situation,possession,knowledge,amount,information,accomplishment,achievement]):-
   existverbs(Verbs),
   on(W,Verbs),
   !.
superlight(W,[situation,event,activity,accomplishment,achievement]):-
   aspectverbs(Verbs),
   on(W,Verbs),
   !.
locateverbs([host,locate,situate,place,reside,base]).
activityverbs([employ,use,produce,work,work_for,participate,affiliate_with,play,serve,head]).
stateverbs([happen,occur,stand_for,take_place,take_part,hold_position]). 
existverbs([call,mean,see,stay,live,become,belong,amount,reach,render,last,include,show]). 
aspectverbs([begin,continue,cause,finish,end,start,stop,interrupt]).

/* activity verbs*/
light_verbs(employ).
light_verbs(engage).
light_verbs(affiliate).
light_verbs(use).
light_verbs(produce).
light_verbs(work).
light_verbs(work_for).
light_verbs(participate).
light_verbs(affiliate_with).
light_verbs(play).
light_verbs(serve).
light_verbs(head).

/* state verbs*/
light_verbs(host).
light_verbs(locate).
light_verbs(situate).
light_verbs(place).
light_verbs(reside).
light_verbs(base).
light_verbs(border).

/* result verbs */
light_verbs(stand_for).
light_verbs(happen).
light_verbs(occur).
light_verbs(take_place).
light_verbs(take_part).
light_verbs(hold_position).
light_verbs(represent).
light_verbs(hold).

/* aspect verbs */
light_verbs(begin).
light_verbs(continue).
light_verbs(start).
light_verbs(finish).
%light_verbs(attempt).
light_verbs(stop).
light_verbs(interrupt).
light_verbs(cause).

light_verbs(there_be).
light_verbs(be).
light_verbs(have).
light_verbs(become).
light_verbs(belong).
light_verbs(appear).
light_verbs(call).
light_verbs(come_from).
light_verbs(see).
light_verbs(show).
light_verbs(stay).
light_verbs(live).
light_verbs(get).
light_verbs(reach).
light_verbs(found).
light_verbs(last).
light_verbs(render).
light_verbs(include).
light_verbs(mean).
light_verbs(constitute).
light_verbs(amount).
light_verbs(find):-
   H=..[voice,passive,V,find],
   Dgr=..[dgrs,N,H],
   Dgr.

%penalties(First,Pred-_,progr-opaque):-
%penalties1(First,Pred-_,neg):-
%search_same_pred(Rtes,First,Pred,-1):-
%search_same_pred1(Rtes,First,Pred,-1):-
%same_pred(Rtes,First,Pred,-1):-
%same_mainhead(Quests,First,Score):-
%same_head(Quest,First,Score):-
%best_match(Quest,Pred-Role):-
%same_role(Pred-Role,First,-100):-
%compute_scores(Score, Score):- 
%compbestcand([_-Quest|QuestEval],First,Weight-First):-
%compare_best_candidate(QuestEval,[First-Name|AnswEval],[FirstWeight-Name|BestCand]):-
%weight_dgr(Dgr,EvPref-Dgr):-
%weight_dgr1(Dgr,EvPref-Dgr1):-
%eval_dgrs1([Dgr|Dgrs],QuestEval):-
%compute_rests([V-Dgr|Input],[_-Dgr|Heads]):-
%extract_head_dep(FFirs, Pred,Ent):-
%eval_dets_head(Hyp, Tex):-
%same_compl_newp(Pred,Quest,First,Score,Head):-
%same_sechead_newp(Pred,Quest,First,Score,Head):-
%conflmainrole_heads(Pred,Quest,First,Score,Head):-
%identical_GR(Ent,Quest,Rtes):-
%check_head_head(Head1,Head1):-
%eval_head_depend(Rtes,First,Head,NewHead-Head):-
%complex_induct(Rtes,Sem, Pred, Ent,Func-Role):-
%best_role_induct(Rtes,Pred1, Pred, Pred1-Role):-
%best_roles_induct(Rtes,Pred1, Pred, Pred1-Role):-
%check_pred_argument(Pred,Pred1,Quest):-
%similar_pred(Pred,Rtes,First,Gov,10):-
%evaluate_penaltiess(Type1,[Type2],Pred,QuestEval,First,[Score]):-
%assess_eval_preds(Pred,Quest,First,Score,Head):-
%best_role1(Rtes,Sem, Sem-Role):-
%best_role2(Rtes,Pred, Sem-Role):-
%best_role3(Rtes,Pred, Sem-Role):-
%recover_pred_dep(Rtes,Quests,Pred,Pred1,Pred2,Gov):-
%quasi_identical_GR(Ent,Quest,Rtes):-
%check_evaluate_secondary_head(Head1,[RefEx|RefExs]):-
%compute_GRs([_-Dgr|Input],[F|Heads]):-
%compute_scoremod22(Rte,First,Weight-First,Refs):-
%collect_all_heads_deps(Rte,First,[RteHeads_Sort,RteDeps_Sort,FirstHeads_Sort,FirstDeps_Sort,RteGRs_Sort,RteSRs_Sort,FirstGRs_Sort,FirstSRs_Sort,RteMod,FirstMod]):-
%compute_heads([_-Dgr|Input],[Head|Heads]):-
%compute_deps([_-Dgr|Input],[Pre|Heads]):-
%compute_GRs([_-Dgr|Input],[F|Heads]):-
%compute_SRs([_-Dgr|Input],[R|Heads]):-
%collect_all_scores_headdeps(RestR,RestF,[Score]):-
%examine_score_head_preds(RHeads,FHeads,Score):-
%examine_score_head_pred1([arb|RHeads],FHeads,Score):-
%examine_score_head_pred2(RHeads,FHeads,[10]):-
%collect_all_scores_GRSR(Rte,First,[RteGRs,RteSRs],[FirstGRs,FirstSRs],[Score]):-
%examine_score_GRSR(Rte,First,[],RteSRs,Score):-
%same_mainhead2(Quests,First,Score):-
%recover_pred_ent(Rte,First,Pred1,Pred2,Ent1,Ent2, Role, Role1):-
%verify_consistent_preds(Rte,First, RefExs,[Role,Role1]):-
%same_head_newp(Pred,Rte,First,Score,Head):-
%compute_scoremod3(Rtes,First,1-First,Refs):-
%confl_main_role_heads(Pred,Quest,First,Score,Head):-
%paraf_score_modules(Rte,First, RefExs, true-0.97):-
%compute_scoremod0(Rte,First,Weight-First,Refs):-
%check_same_pred(Pred,Rte,First):-
%extract_check_heads(Rte,First, Scors):-
%extract_compute_deps([First|Second],[FirstHeads|Texts]):-
%extract_check_head_attributes(Rte,First, Text,Hypo,Scors):-
%head_attributess(Text,Hypo,Rte, First, RteHeads_Sort, FirstHeads_Sort, Scors):-
%select_figures_by_preds(Rte, First, Pred1, Pred2):-
%extract_head_pred_attr(H,Rte, First, Pred,Pred1):-
%extract_head_predattr(H,Rte,Figs, [Pred|Dep]):-
%head_attributes1(Text,Hypo,Rte, First, RteH1, FirstH1, Scors):-
%compute_scoremod5(Rte,First,1-First,Refs):-
%remove_main_hds(Quest,Rte):-
%remove_sec_hds(Quest,Rte,First,Firs):-
%remove_minor_hds(Quest,Rte):-
%detect_adjuncts([],Firs,Arg2):-
%assess_adjuncts(Adjs, Low1, Low2):-
%det_args(Rte,Arg):-
%check_remaining_hds(Rte,First):-
%non_conflicting_arguments(Rte,First):-
%remove_identical_grs(Quest,Rte, Ques,Rt):-
%remove_identicalgrs(Ent,Quest,Rte, Ques,Rt):-
%verify_head_dep(Quest,First, Pred1,Pred2):-
%compute_scoremod2(Rte,First,Weight-First,Refs):-

w_e_pr(Role,Punt):-
     pr1(Role,Punt),
     !.
w_e_pr(Role,Punt):-
     pf1(Role,Punt),
     !.
w_e_pr(det,100):-!.
w_e_pr(aux,100):-!.
w_e_pr(ante,100):-!.
w_e_pr(mod,100):-!.
w_e_pr(ncmod,100):-!.
w_e_pr(cmod,100):-!.
w_e_pr(Role,1000):-
     !.

collect_all_pred([],[]):-!.
collect_all_pred([_-Term|Rte],[P|Preds]):-
      Term=..[P|_],
      collect_all_pred(Rte,Preds),
      !.

make_chars([],[]):-!.
make_chars([P|SortP],[ChP|Chars]):-
      stringof(ChP,P),
      make_chars(SortP,Chars),
      !.
make_chars([P|SortP],Chars):-
      make_chars(SortP,Chars),
      !.

check_ord(El, Rest, [El|Items]):-!.
check_ord(El, Rest, [El1|Items]):-
   Rest=[El|Nitems],
   !.

mremove_check( _, [], [] ).
mremove_check( RemoveItems, [El|Rest], Rems ):-
  remove( El, RemoveItems, Nremove ),
  check_ord(El, Rest, RemoveItems),
  !,
  mremove_check( Nremove, Rest, Rems ).
mremove_check( RemoveItems, [El|Rest], [El|Rems] ):-
  mremove_check( RemoveItems, Rest, Rems ).

%closest_match([],Pred1,[]):-!.
/*
closest_match(Chars1,Pred1,P):-
      Chars1=[A],
      mremove_check(A,Pred1,Rest),
      length(Rest,L),
      length(A,L1),
      length(Pred1,L2), 
      L3 is L1-L2, 
      L3 =<2, 0=<L3, 
      (L=L3;L4 is L3 * -1, L=L4;L=<2),
      stringof(A,P),
      !.
*/
stemmed(0,L1,L2,Pred,Pred1,Pred2):-
      L1 < L2,
      reverse(Pred1,[P|Rest]),
      reverse(Rest,Pred2)
      ;
      L2 < L1,
      reverse(Pred,[P|Rest]),
      reverse(Rest,Pred2),
      !.
stemmed(1,L1,L2,Pred,Pred1,Pred2):-
      L1 < L2,
      reverse(Pred1,[P|Rest]),
      reverse(Rest,Pred2)
      ;
      L2 < L1,
      reverse(Pred,[P|Rest]),
      reverse(Rest,Pred2),
      !.
stemmed(2,L1,L2,Pred,Pred1,Pred2):-
      L1 < L2,
      reverse(Pred1,[P,Q|Rest]),
      reverse(Rest,Pred2)
      ;
      L2 < L1,
      reverse(Pred,[P,Q|Rest]),
      reverse(Rest,Pred2),
      !.
stemmed(3,L1,L2,Pred,Pred1,Pred2):-
      L1 < L2,
      reverse(Pred1,[P,Q,W|Rest]),
      reverse(Rest,Pred2)
      ;
      L2 < L1,
      reverse(Pred,[P,Q,W|Rest]),
      reverse(Rest,Pred2),
      !.
      

closest_match(Chars1,Pred1,P):-
      Chars1=[A],
      mremove_check(A,Pred1,Rest),
      length(Rest,L),
      is_list(A),
      length(A,L1),
      length(Pred1,L2), 
      L3 is L1-L2, 
      L=<1, 
      (L=L3;
      L4 is L3 * -1, L=L4;
      L=<2, L3=<2),
      stringof(A,P),
      stemmed(L,L1,L2,A,Pred1,Pred2),
      (matchstring(Pred1,Pred2);
       matchstring(Pred2,Pred1)),
     !.
closest_match([Chars1|SortP1],Pred1,[P|Evl]):-
      mremove_check(Chars1,Pred1,Rest),
      length(Rest,L),
      is_list(Chars1),
      length(Chars1,L1),
      length(Pred1,L2), 
      L3 is L1-L2, 
      L3 =<2, 
      (L=L3;L4 is L3 * -1, L=L4;L=<2),
      stringof(Chars1,P),
      closest_match(SortP1,Pred1,Evl),
      !.
closest_match([Chars1|SortP1],Pred1,[P|Evl]):-
      mremove_check(Chars1,Pred1,Rest),
      length(Rest,L),
      is_list(Chars1),
      length(Chars1,L1),
      length(Pred1,L2), 
      L=<1, 
      L3 is L1-L2, 
      (L=L3;L4 is L3 * -1, L=L4;L=<2, L3=<2),
      stringof(Chars1,P),
      closest_match(SortP1,Pred1,Evl),
      !.
closest_match([Chars1|SortP1],Pred1,Evl):-
      closest_match(SortP1,Pred1,Evl),
      !.

similar_doubt_verb(Pred1,Pred,Rtes,First):-
      (Pred1=suspect,Pred=cause,
        Mod=..[_-Pred,modal,_],
      on(Mod,Rtes);
      Pred=suspect,Pred1=cause,
        Mod1=..[_-Pred1,modal,_],
      on(Mod1,First)),
      !.

similar_doubt_verb(Pred1,Pred,Rtes,First):-
      sysv(suspect-Verbs),
      sysv(cause-Verbs1),
      (on(Pred1,Verbs),on(Pred,Verbs1),
        Mod=..[_-Pred,modal,_],
        on(Mod,Rtes);
       on(Pred,Verbs),on(Pred1,Verbs1),
        Mod1=..[_-Pred1,modal,_],
       on(Mod1,First)),
      !.

check_differences(Out1,Out2,Cats):-
      remove_all(Out1,Out2,Res1),
      remove_all(Out2,Out1,Res2),
      weigh_intersection(Res1,Res2,Cats),
      !.

weigh_intersection([],[],[]):-!.
weigh_intersection([],[Ent1|Res2],[Cats|ResCats]):-
      (jj(Ent1),Cats=[mod];up_wn(Ent1,Cats,T)),      
      weigh_intersection([],Res2,ResCats),
      !.
weigh_intersection([],[Ent1|Res2],[mod|Cats]):-
      jj(Ent1),     
      weigh_intersection([],Res2,Cats),
      !.
weigh_intersection([Ent1|Res2],[],[Cats|ResCats]):-
      (jj(Ent1),Cats=[mod];up_wn(Ent1,Cats,T)),      
      weigh_intersection(Res2,[],ResCats),
      !.
weigh_intersection([Ent1|Res2],[],[mod|Cats]):-
      jj(Ent1),     
      weigh_intersection(Res2,[],Cats),
      !.

weigh_intersection([Ent|Res1],Res2,AllCats):-
      fct(Ent),
      weigh_intersection(Res1,Res2,AllCats),
      !.

weigh_intersection(Res1,[Ent|Res2],AllCats):-
      fct(Ent),
      weigh_intersection(Res1,Res2,AllCats),
      !.

weigh_intersection([Ent|Res1],[Ent1|Res2],AllCats):-
      (up_wn(Ent,Cats,K),Cats\=[],
       up_wn(Ent1,Cats1,T),Cats1\=[],
       controlla_cats(Cats,Cats1), Cats2=[]
        ;
       up_wn(Ent,Cats,K),
       Cats\=[],
       jj(Ent1), 
       append(Cats,[mod],Cats2)
       ;
       up_wn(Ent1,Cats,T),
       Cats\=[],
       jj(Ent), 
       append(Cats,[mod],Cats2)),      
      weigh_intersection(Res1,Res2,ResCats),
      append(Cats2,ResCats,AllCats),
      !.
weigh_intersection([Ent|Res1],[Ent1|Res2],Cats):-
      jj(Ent),jj(Ent1),     
      weigh_intersection(Res1,Res2,Cats),
      !.
weigh_intersection([Ent|Res1],Res2,Cats):-
      weigh_intersection(Res1,Res2,Cats),
      !.

match_cats_sem(Ent,En):-
       up_wn(Ent,Cats,K),Cats\=[],
       up_wn(En,Cats1,T),Cats1\=[],
       controlla_cats(Cats,Cats1),
      is_list(Cats),
      is_list(Cats1),
       length(Cats,L),
       length(Cats1,L),
       !.

check_all_mults(Outs1,OutLow):-
      check_mults(Outs1,Ou1),
      appiattisci(Ou1,Ou),
      sort(Ou,Out),
      lower_all(Out,OutLow),
      !.

check_mults([],[]):-!.
check_mults([Pred|Outs1],[Preds|Ou1]):-
     stringof(Pre,Pred),
      (on('_',Pre);      
       on('-',Pre)),
      recover_descs(Pred,Preds),
      check_mults(Outs1,Ou1),
      !.
check_mults([Pred|Outs1],[Pred|Ou1]):-
      check_mults(Outs1,Ou1),
      !.
lower_all([],[]):-!.
lower_all([and([W|W1])|Out],[LW|OutLow]):-
      tolower(W,LW),
      append(W1,Out,Outs),
      lower_all(Outs,OutLow),
      !.
lower_all([or([W|W1])|Out],[LW|OutLow]):-
      tolower(W,LW),
      append(W1,Out,Outs),
      lower_all(Outs,OutLow),
      !.
lower_all([W|Out],[LW|OutLow]):-
      tolower(W,LW),
      lower_all(Out,OutLow),
      !.

entail(online,internet).
entail(online,web).
entail(online,website).
entail(issue,unveil).
entail(issue,boost).
entail(border,separate).
entail(lash,batter).
entail(kick_off,take_place).
entail(invade,arrive).
entail(reach,travel).
entail(go_into,go_to).
entail(fail,abolish).
entail(facilitate,better).
entail(defeat,lose).
entail(file,involve).
entail(return,send).
entail(revise,write).
entail(divide,flow).
entail(behead,kidnap).
entail(wed,engage).
entail(cruise,locate).
entail(widow,wife).
entail(punish,prevent).
entail(suppress,prevent).
entail(wounded,survive).
entail(attack,kill).
entail(killed,dead).
entail(killed,shot_dead).
entail(kill,die).
entail(airplane,airport).
entail(airplane,aviation).
entail(murder,death).
entail(collide,die).
entail(sell,cost).
entail(write,author).
entail(write,editor).
entail(support,donate).
entail(invent,originate).
entail(be_member,belong).
entail(invent,develop).
entail(contribute,develop).
entail(retire,live).
entail(buy,belong).
entail(win,receive).
entail(terrorist_attack,bomb).
entail(raise,create).
entail(increase,create).
entail(decrease,destroy).
entail(decrease,lower).
entail(joint_venture,partner).
entail(joint_venture,business).
entail(hit,ravage).
entail(kill,ravage).
entail(open,start).
entail(accuse,ban).
entail(suffer,complain).
entail(flare,pollution).
entail(independence,separatist).
entail(trademark,product).
entail('Socceros','Australia').
entail('Royal_Navy','British').
entail(student,classmate).
entail(cannabis,drug).
entail(cannabinoids,drug).
entail(pot,drug).
entail(veteran,soldier).
entail(newsagent,vendor).
entail(newsagent,newspaper).
entail(invent,found).
entail(arrest,involve).
entail(A,B):-
    is_in(A,B).
entail(A,B):-
    is_in(B,A).
entail(A,B):-
    lw4(A,_,B,_).
entail(A,B):-
    lw4(B,_,A,_).
entail(A,B):-
    hbs(A,B).
entail(A,B):-
    hbs(B,A).
entail(A,B):-
    fnc(A,v,B1),
    recover_descs(B1,List),
    reverse(List,Rev),Rev=[B|_],
    !.
entail(A,B):-
    fnc(B,v,B1),
    recover_descs(B1,List),
    reverse(List,Rev),Rev=[A|_],
    !.
find_role_scores(Role1,Role2):-
      w_e_pr(Role1,Punt1),
      w_e_pr(Role2,Punt2),
      Punt1\=Punt2,
      !.

/* two roles are opposing roles when they are different and
they belong to the higher hierarchy of roles 

opposing_roles(Role,R):-
    \+ Role=theme_unaff,
    \+ R=theme_unaff,
    \+ Role=theme_bound,
    \+ R=theme_bound,
    \+ Role=theme_nonaff,
    \+ R=theme_nonaff,
    !.
*/
opposing_roles(Role,R):-
      (Pr=r0;Pr=r1;Pr=r2;Pr=r3),
%      (Pr=r1;Pr=r2),
       (Role1=..[Pr,Role];
         filter_roles(Role,R1),
         Role1=..[Pr,R1]),
      Role1,
      (Prr=r0;Prr=r1;Prr=r2;Prr=r3),
%      (Prr=r1;Prr=r2),
      (Role2=..[Prr,R];
        filter_roles(R,R2),
        Role2=..[Prr,R2]),
      Role2,
      Pr\=Prr.

/* in addition the two role can belong to the lower part of the
hierarchy but one of them must be different from "specif";
or else if it is "specif", the other must belong to the higher
hierarchy of roles - this is related to the often noted remark
that higher roles can be SUBJect of NP */

opposing_roles(Role,R):-
      w_e_pr(Role,Punt1),
      w_e_pr(R,Punt2),
%      Punt1\=Punt2,
      Role\=R,
      (Punt1=<10,Punt2=<10
      ;
      10<Punt1, Punt1=<40,
      10<Punt2, Punt2=<40
%      (\+ r0(Role); \+ r0(R))
      ;
      (Punt1<5 
      % \+ r0(R)
      ;
        Punt2<5
        % \+ r0(Role) \+ r2(Role)
      )
      ),
      !.
test_rolearg(F/prop):-!.
test_rolearg(F/Role):-
      (Pr=r0;Pr=r1;Pr=r2),
       Role1=..[Pr,Role],
      Role1,
      !.
test_rolearg(F/Role):-
      w_e_pr(Role,Punt),
      Punt=<10,!.
test_rolearg(prop):-!.
test_rolearg(Role):-
      (Pr=r0;Pr=r1;Pr=r2),
       Role1=..[Pr,Role],
      Role1,
      !.
test_rolearg(Role):-
      w_e_pr(Role,Punt),
      Punt=<10,!.

test_roleadj(F/Role):-
       Pr=r3,
       Role1=..[Pr,Role],
      Role1,
      !.
test_roleadj(F/R):-
      w_e_pr(R,Punt),
      10<Punt,Punt\=1000,!.
test_roleadj(Role):-
       Pr=r3,
       Role1=..[Pr,Role],
      Role1,
      !.
test_roleadj(R):-
      w_e_pr(R,Punt),
      10<Punt,Punt\=1000,!.


compute_operators(Rte,First):-
      compute_modal(Rte,RteMod),
      compute_modal(First,FirstMod),
      collect_all_mods(RteMod,FirstMod,Score3),
      Score3=[],!.

evaluate_propositional_antonyms(Rte,First):-
      is_list(Rte),
      is_list(First),
      length(Rte,L),length(First,L1), 
      (L=<6;L1=<6),
       !.
evaluate_propositional_antonyms(Rte,First):-
      is_list(Rte),
      is_list(First),
    length(Rte,L),length(First,L1), 
    7=<L,7=<L1,
    compute_heads(Rte,RteHeads),
    sort(RteHeads,RteHeads_Sort),
    compute_heads(First,FirstHeads),
    sort(FirstHeads,FirstHeads_Sort),
    findall(Pred1-Pred2,
       (on(Pred1,RteHeads_Sort),
       on(Pred2,FirstHeads_Sort),
       \+ check_semantic_antonimy(Pred1,Pred2)), Preds),
     sort(Preds,Predsort), 
     length(Predsort,L2), L2=<3,
     !.

neg_pred(no_more).
neg_pred(never).
neg_pred(no).
neg_pred(Term):-
   istv(Term).
neg_pred(Term):-
   istv(Term1),
   match_approximate(Term1,Term).
recover_vcomp_coml(Gov):-
      coml(Gov,Subs),
      appiattisci(Subs,Subsa),
      (on(vcomp/prop/oc,Subsa);
        on(vcomp/prop/sc,Subsa);
        on(vcomp/prop/for,Subsa)),
      assess_doubtverb(Gov),
      !.

notdoubts_verb(Pred):-
      doubt_verbs(Preds),
      findall(Pred,on(Pred,Preds),Predd),Predd=[],
      negate_verbs(Preds1),
      findall(Pred,on(Pred,Preds1),Predd1),Predd1=[],
      contradict_verbs(Preds2),
      findall(Pred,on(Pred,Preds2),Predd2),Predd2=[],
      !.

yesdoubts_verb(Pred):-
      doubt_verbs(Preds),
      findall(Pred,on(Pred,Preds),Predd),Predd\=[]
      ;
      negate_verbs(Preds1),
      findall(Pred,on(Pred,Preds1),Predd1),Predd1\=[]
      ;
      contradict_verbs(Preds2),
      findall(Pred,on(Pred,Preds2),Predd2),Predd2=[],
      !.
contradict_verbs(Verbs):-
      sysv(contradict-Verb),
      append([contradict],Verb,Verbs),
      !.

transl_sem(when,temporal).
transl_sem(where,locative).
transl_sem(how,modal).
transl_sem(how_much,measure).
transl_sem(who,agent).
transl_sem(what,theme_aff).
transl_sem(whose,poss).
transl_sem(why,result).
transl_sem(Sem,nil).

w_e_pref(det,10):-!.
w_e_pref(aux,10):-!.
w_e_pref(ante,10):-!.
w_e_pref(mod,10):-!.
w_e_pref(ncmod,10):-!.
w_e_pref(cmod,10):-!.
w_e_pref(modal,-10):-!.
w_e_pref(progr,-10):-!.
w_e_pref(neg,-10):-!.
w_e_pref(Func-Role,EvPref):-
     pr1(Role,Punt1),
     pf1(Func,Punt2),
     EvPref is Punt1 *  Punt2,
     !.

not_conflict_args(Quest,First):-
       compute_ind_GRs(Quest,Text),
       compute_ind_GRs(First,Hypo),
       Text\=[],Hypo\=[],
       check_same_roles(Text,Hypo),
       !.

check_same_roles(Text,Hypo):-
       confl_main_role_heads(Pred,Text,Hypo,Score,Head),
       !.

check_first_letter(Head,Head1):-
      stringof([H|_],Head),
      stringof([H|_],Head1),
      !.
separateGRs([], [],[], []):-!.
separateGRs([First|[]], [Ind-RefEx],[GR],[Ind-Costs]):-
          remove(Fir,First,[]),
          Fir=..[Ind,All,Costs],
          All=[GR,RefExx],
          RefExx=[Ars,_,RefEx],
    !.
separateGRs([First|Evals], [RefEx|RefExs],[GR|GRs],[Ind-Costs|Rest]):-
          remove(Fir,First,[]),
          Fir=..[Ind,All,Costs],
          All=[GR,RefExx],
          RefExx=[Ars,_,RefEx],
    separateGRs(Evals, RefExs,GRs,Rest),
    !.
separateGRs([First|Evals], [RefEx|RefExs],[GR|GRs],[Ind-Costs|Rest]):-
          First=..[Ind,All,Costs],
          All=[GR,RefExx],
          RefExx=[Ars,_,RefEx],
    separateGRs(Evals, RefExs,GRs,Rest),
    !.
separate_GRs(Evals, RefEx,GRs, Cost):-
    separateGRs(Evals, RefExss,GRss, Costs),
    reverse(RefExss,RefExs),
    remove(I-Refs,RefExs,Rest),
    appiattisci(Rest,Rests),
    RefEx=[Refs,Rests],
    reverse(GRss,GRs),
    reverse(Costs,Cost),
    !.

findnegationprop(Hypo,D):-
      on(A-B-C-D-E-F-G-H-I,Hypo)
      ;
      on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1,Hypo)
      ;
      on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text),
      !.

searchnegations([Qua],Predss):-
      Qua=no,
      (on(Cl-Pre-R-Hea-Ind,Predss)
       ;
      on(Hea-R-Ind,Predss),atomic(Hea), \+ grammw(Hea,_)), 
      checksemanticantinomy(Hea),
      !.


induce_noun_adj_wn(Hea1,Des):-
      atomic(Hea1),
      (spy_lower(Hea1,LHea1,1),
        H1=LHea1;H1=Hea1),
      findall(Co, sk(H1,Co), Codes),
      Codes\=[],
      findall(Wn, (
                 on(Cos,Codes),
                 (
                   per(Cos,_,Wn,_)
                   ;
                   der(Cos,_,Wn,_))
                   ), Coss),
      Coss\=[],
      findall(W, (
                 on(Cor,Coss), 
                 stringof([F|_],Cor),F=1,
                 sk(W,Cor)                    
                 ), Ws),
      Ws\=[],
      selectders(Ws,Hea1,Ders),
      sort(Ders,Des),!.

induce_noun_verb_wn(Hea1,Des):-
      atomic(Hea1),
      (spy_lower(Hea1,LHea1,1),
        H1=LHea1;H1=Hea1),
      findall(Co, sk(H1,Co), Codes),
      Codes\=[],
      findall(Wn, (
                 on(Cos,Codes),
                 (
                   per(Cos,_,Wn,_)
                   ;
                   der(Cos,_,Wn,_))
                   ), Coss),
      Coss\=[],
      findall(W, (
                 on(Cor,Coss), 
                 stringof([F|_],Cor),F=2,
                 sk(W,Cor)                    
                 ), Ws),
      Ws\=[],
      selectvders(Ws,Hea1,Ders),
      sort(Ders,Des),
      !.


selectvders([],Hea1,[]):-!.
selectvders([W|Ws],Hea1,[W|Ders]):-
        stringof(Lisw,W),
        stringof(Lish,Hea1),
        matchder(Lisw,Lish),
      selectvders(Ws,Hea1,Ders),
      !.
selectvders([W|Ws],Hea1,Ders):-
      selectvders(Ws,Hea1,Ders),
      !.

matchder([],[W|Lish]):-!.
matchder([W|Lisw],[W|Lish]):-
        matchder(Lisw,Lish),
      !.

selectders([],Hea1,[]):-!.
selectders([W|Ws],Hea1,[W|Ders]):-
        stringof([S|_],W),
        stringof([R|_],Hea1),R=S,
      selectders(Ws,Hea1,Ders),
      !.
selectders([W|Ws],Hea1,Ders):-
      selectders(Ws,Hea1,Ders),
      !.

match_noun_adj_wn(Hea1,Hea2):-
      atomic(Hea1),
      atomic(Hea2),
      (spy_lower(Hea1,LHea1,1),
        H1=LHea1;H1=Hea1),
      (spy_lower(Hea2,LHea2,1),
        H2=LHea2;H2=Hea2),
      findall(Co, sk(H2,Co), Codes),
      Codes\=[],
      findall(Wn, (
                 on(Cos,Codes),
                 (
                   per(Cos,_,Wn,_)
                   ;
                   der(Cos,_,Wn,_))
                   ), Coss),
      Coss\=[],
      findall(W, (
                 on(Cor,Coss),
                 sk(W,Cor)), Ws),
      Ws\=[],
      on(H1,Ws),
      !.

/* 79T text
'ncmod-specif'('_', mogadishu-sn3, capital).
'ncmod-specif'('_', mogadishu-sn3, 'Somalia-s_').
hypo
'Mogadishu'-theme_unaff-sn1, capital-prop-sn2, 
somalia-specif-sn2,
*/

gethead_nominal(TextAdjs,TextArgs,Predss,Predss1,Hea2,Id1):-
      on(Id1-Hea-specif-Hea2,TextAdjs);
      on(Hea2-specif-Id1,TextAdjs);
      on(Id1-Hea-specif-Hea2,TextArgs);
      on(Hea2-specif-Id1,TextArgs);
      on(Id1-Hea-specif-Hea2,Predss1);
      on(Hea2-specif-Id1,Predss1),
      !.
      
getroles(A,LArgsV,R11,R12):-
      cat_gramm(A, CatGr, Aspect, LArgsV),
      on(sn/sogg/R11/_,LArgsV),
      on(sn/ogg/R12/_,LArgsV),
    !.

build_prop_new(Av,Text,Text1):-
      (on(A-B-P1-D-E-F-G-H-I,Text),
       atomic(A),
       New=Av-B-P1-D-E-F-G-H-I
       ;
       on(A-B-P1-D-E-F-G-H-I-K,Text),
       atomic(A),
       New=Av-B-P1-D-E-F-G-H-I-K
       ;
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text),
       atomic(A1),
       New=Av-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N
        ;
       on(A-T-C1-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N-Res,Text),
       atomic(A),
       New=Av-T-C1-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N-Res
      ),
      append([New],Text,Text1),
      !.
      

/*
lexical_matching_module(ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
    match_head_roles(Predss,Predss1,RefExs, Score),
    matchpropositionalgen(Hypo,Text,A,A1),
    True=true-999,
    !.

lexical_matching_module(ArgsProp,Predss,AdjsProp,Predss1,RefExs, Hypo,Text,True):-
      ArgsProp=[RteArg,Predss|Hyps],
      AdjsProp=[RteAdj,Predss1|Texs],
      cmatchhead_role(Predss,Predss1,RefExs,Roles),
      Roles\=[],
      length(Roles,L),
      length(Predss,L1),
      length(Hypo,L2),
      matchpropositionalgen(Hypo,Text,P,A1),
      (L=1, Score=5000, 
             (L1=1;1<L1,L2=1,\+lightverbsp(P))
             ; 
       L=2, Score=4000; 
       L=3, Score=3000; 
       L=4, Score=2000;
       4<L, Score=1500),
      True=true-Score,
     !.
*/     
cmatchhead_role([],Rest,[RefEx,RefEx1], []):-!.
cmatchhead_role([Head-R-Id|Preds],Preds1,[_-[RefEx],RefEx1], [Head/R-R1|Roles]):-
      collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C,C1,R1),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1<L;C=C1),
      cmatchhead_role(Preds,Preds2,[RefEx,RefEx1],Roles),
      !.
cmatchhead_role([Head-R-Id|Preds],Preds1,[_-[RefEx],RefEx1|_], [Head/R-R1|Roles]):-
      collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C,C1,R1),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1<L;C=C1),
      cmatchhead_role(Preds,Preds2,[RefEx,RefEx1],Roles),
      !.
cmatchhead_role([Head-R-Id|Preds],Preds1,[RefEx,RefEx1], [Head/R-R1|Roles]):-
      collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C,C1,R1),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1<L;C=C1),
      cmatchhead_role(Preds,Preds2,[RefEx,RefEx1],Roles),
      !.
cmatchhead_role([Head-R-Id|Preds],Preds1,[RefEx,RefEx1|_], [Head/R-R1|Roles]):-
      collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C,C1,R1),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1<L;C=C1),
      cmatchhead_role(Preds,Preds2,[RefEx,RefEx1],Roles),
      !.
cmatchhead_role([Head-R-Id|Preds],Preds1,[RefEx,RefEx1], Roles):-
      cmatchhead_role(Preds,Preds1,[RefEx,RefEx1],Roles),
      !.
cmatchhead_role([Head-R-Id|Preds],Preds1,[RefEx,RefEx1|RefEx2], Roles):-
      cmatchhead_role(Preds,Preds1,[RefEx,RefEx1],Roles1),
      cmatchhead_role(Preds,Preds1,[RefEx,RefEx2],Roles2),
      append(Roles1,Roles2,Roles),
      !.

compute_score_module([Rte,First], RefExs, true-0.73):-
    length(Rte,L),length(First,L1), 
     2=<L,4=<L1,
     clean_refexs(RefExs, NRefExs),
    test_compute_score(Rte,First),
    compute_scoremod(Rte,First, Scores, Score, Modal),
    Scores=[A,B],
    Modal=[],
    (A\=[0],A=[Sco], (Sco<1000; 2000<Sco)
      ;
    Score=true-Sc, Sc=<130),
    B=0,
    verify_consistent_preds(Rte,First, NRefExs,Roles),
    findall(Ro,(on(Ro,Roles),nonvar(Ro),(Ro=_-specif;Ro=mod)),Rol),Rol=[],
    !.

measure_length(Files):-
      Files=[Rte,First],
      length(Rte,L),length(First,L1), 
      1<L,2<L1,
      !.


rte_evaluationmodule(Fname, Score, RefExs, Files):-
      Files=[Rte,First],
      length(Rte,L),length(First,L1), 
      (1=<L,2=L1;1=L,4=<L1;L1=<2, 3=<L),
     (compute_scoremod2(Rte,First,Weight-First,Head)
%      ;quasi_identical_GR(Ent,First,Rte)
      ;
      best_role1(Rte,Pred,Role),
      best_role1(First,Pred1,Role1),       
      clean_refexs(RefExs, NRefExs),
     ( 
       verify_consistent_preds(Rte,First, NRefExs,Roles)        
         ;
        check_veridicity(Pred,Rte,First,Head1)
         ;
         identical_GR(En,Rte,First)
         ;
        quasi_identical_GR(En,First,Rte))
       ),
      evaluate_propopaques(Pre,Rte,First),
     eval_head_depend(Rte,First,Head,NewHead),
     eval_main_head(NewHead, RefExs),
     general_consistency_check(Rte,First),
     Score=true-0.64,
    !.

rte_evaluationmodule(L, false, Evals, Files):-
    !.

propositional_coherence(Rte,Quest):-
%      (F=aux;F=progr;F=modal;F=neg),
      Quest=[First|Rest],
      (Dgr=..[Head,Ind,F,Pred1]
       ;
       Dgr=..[Head,Ind,F,Pred1,obj]
       ;
       Dgr=..[Head,Ind,F,_,Pred1]
       ;
       Dgr=..[Head,Ind,F,Pred1,_]),
       (
       Dgr1=..[Head1,Ind1,F1,Pred]
       ;
       Dgr1=..[Head1,Ind1,F1,Pred,obj]
       ;
       Dgr1=..[Head1,Ind1,F1,_,Pred]
       ;
       Dgr1=..[Head1,Ind1,F1,Pred,_]
       ),
      on(_-Dgr,Rte),
      on(_-Dgr1,First),
       F=Fu-Ro, Ro\=specif,
       F1=Fu1-Ro1, Ro1\=specif,
      (consistent_preds(Head,Head1,Score1);
          check_main_head_roles(Head,Head1);
            light_verbs(Head);
            light_verbs(Head1)),
      evaluate_opaques(Pred,Rte,First),
      \+ evaluate_guilt(Rte,First),
      evaluate_propopaques(Head,Rte,First),
      evaluate_propopaques(Head1,Rte,First),
      assess_penalty([Head,Head1],Rte,First,Score2),Score2=[],
      !.
      
checkmatch_approximate(Headd,Headd1):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
      checkmatch_approximates(Headd,Headd1),
      !.
/*
checkmatch_approximate(Headd,Headd1):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
      check_main_head_roles(Headd,Headd1),
      !.
*/      
checkmatch_approximates(Head,Head1):-
      match_approximate(Head1,Head),
      Score=0,
      !.
checkmatch_approximates(Head,Head1):-
       (s_is_ax(Head1,Head);
        s_is_ax(Head,Head1);
        s_is_ax(Head,Head2),checkmatch_approximates(Head2,Head1);
        s_is_ax(Head1,Head2),checkmatch_approximates(Head2,Head)),
      !.
checkmatch_approximates(Head,Head1):-
       up_wn(Head,Cats,K),
       up_wn(Head1,Cats1,T),
       !,
       Cats\=[],Cats1\=[],
%       (
       controlla_cats(Cats,Cats1),
       intersection(Cats,Cats1, Ints), 
       length(Ints,L), 
       (2=<L,
        (if_first_name(Head1),if_first_name(Head)
        ;
        \+ if_first_name(Head),
        \+ if_first_name(Head1)),
       (on(luogo,Cats),on(luogo,Cats1),\+on(umano,Cats)
       ;
       \+on(luogo,Cats),\+on(luogo,Cats1))
       ;
       (Cats=[];Cats1=[]),
       (
        (on(luogo,Cats),on(luogo,Cats1))
        ;
        (on(istituzione,Cats),on(istituzione,Cats1))
        ;
        (on(legale,Cats),on(legale,Cats1))
        ;
        (on(techno,Cats),on(techno,Cats1))
        )),
%        ;
%        Cats=Cats1),
       !.


check_similar_multiword(Pred,Pred1, Pred1):-
     integer(Pred1),
     stringof(Pre,Pred),
      (on('_',Pre);      
       on('-',Pre)),
      recover_descs(Pred,Preds),
      on(Num,Preds),
      nm(Num,_,Nu),
      similar_numbers(Preds,Pred1),
      !.
check_similar_multiword(Pred,Pred1, Pred1):-
     Pred\=[],Pred1\=[],
     stringof(Pre,Pred),
      (on('_',Pre);      
       on('-',Pre)),
      recover_descs(Pred,Preds),
      (on(Pred1,Preds)
        ;
        remove(Head,Preds,Pres),
        checkmatch_approximate(Head,Pred1),
        on(Hea,Pres),
       (findall(Co,sk(Hea,Co),Codes),Codes\=[],
        on(Co1,Codes),
        stringof([F|_],Co1),F\=1
        ;
        toupper(Head,Up),
        if_first_name(Up),
        \+ checkallabbr(Hea),
        checkmatch_approximate(Up,Pred1)
        ;
        lemmatize_dic(Hea,Lem,K),
        checkmatch_approximate(Lem,Pred1))
        ;
        (remove('_',Pre,Pre1);remove('-',Pre,Pre1)),
        stringof(Pre1,Word),Word=Pred1
        ),
      !.
check_similar_multiword(Pred,Pred1, Pred1):-
     Pred\=[],Pred1\=[],
     check_lower_head(Pred,LowHead),
     stringof(Pre,Pred),
      (on('_',Pre);      
       on('-',Pre)),
      recover_descs(LowHead,Preds),
      (on(Pred1,Preds)
        ;
        reverse(Preds,RevP),
        RevP=[Head|_],
        remove(Head,Preds,Pres),
        checkmatch_approximate(Head,Pred1),
        on(Hea,Pres),
       (findall(Co,sk(Hea,Co),Codes),Codes\=[],
        on(Co1,Codes),
        stringof([F|_],Co1),F\=1
        ;
        toupper(Head,Up),
        if_first_name(Up),
        \+ checkallabbr(Hea)
        ;
        lemmatize_dic(Hea,Lem,K),
        checkmatch_approximate(Lem,Pred1))
        ),
      !.
check_similar_multiword(Pred,Pred1, Pred1):-
     Pred\=[],Pred1\=[],
     check_lower_head(Pred1,LowHead),
     stringof(Pre,Pred),
      (on('_',Pre);      
       on('-',Pre)),
      recover_descs(Pred,Preds),
      (on(LowHead,Preds)
        ;
        remove(Head,Preds,Pres),
        checkmatch_approximate(Head,LowHead),
        on(Hea,Pres),
       (findall(Co,sk(Hea,Co),Codes),Codes\=[],
        on(Co1,Codes),
        stringof([F|_],Co1),F\=1
        ;
        toupper(Head,Up),
        if_first_name(Up),
        \+ checkallabbr(Hea)
        ;
        lemmatize_dic(Hea,Lem,K),
        checkmatch_approximate(Lem,Pred1))
      ),
      !.
check_similar_multiword(Pred,Pred1, Pred1):-
     Pred\=[],Pred1\=[],
     stringof(Pre,Pred),
     stringof(Pre1,Pred1),
      (on('_',Pre);      
       on('-',Pre)),
      (on('_',Pre1);      
       on('-',Pre1)),
      recover_descs(Pred,Preds),
      recover_descs(Pred1,Preds1),
      (is_list(Preds),
        length(Preds,L1); L1=1),
      (is_list(Preds1),
       length(Preds1,L2);L2=1),
      (
         findall(Pp,
               (on(Pp,Preds),
                on(Pp,Preds1)),Ps),
      length(Ps,L),(L=L1;L=L2)
                ;
         findall(Head,
                 (on(Head1,Preds),
                  on(Head,Preds1),
                  checkmatch_approximate(Head1,Head)),Heads),
      length(Heads,L),(L=L1;L=L2)
      ),
      !,
      findall(Pp,(
                 on(Abbr,Preds),checkallabbr(Abbr),
                 on(Abbrs,Preds1),checkallabbr(Abbrs),Abbrs\=Abbr),Abb),Abb=[],
      !.

similar_numbers(Preds,Pred1):-
      sort(Preds,SortP),
      create_number(SortP,Pred1),
      !.

create_number([Num|SortP],Pred1):-
      nm(Num,_,Nu),
      on(Sec,SortP),
      nm(Sec,_,SNu),
      Pred1 is Nu + SNu,!.
         

check_lower_head(Head,LowHead):-
      atomic(Head),
      spy_lower(Head,LowHead,1),
      !.

not_similar([],Pred):-!.
not_similar([Pre|Preds],Pred):-
      verify_derivations(Pre,Pred),
      not_similar(Preds,Pred),!.

assess_similar_predss(Preds,Rtes,First,Scores):-
      conflicting_main_role_heads(Pred,Rtes,First,Score4,Head2),
      Score4=0,
      assess_similar_preds(Preds,Rtes,First,Scoress),
      compute_scores(Scoress, Score1), Score1\=[],
      Scores is Score1 - 100000,
      !.
assess_similar_predss(Preds,Rtes,First,100):-
      conflicting_main_role_heads(Pred,Rtes,First,Score4,Head2),
      Score4=0,
      length(Rtes,L1), L1=<5,
      length(First,L2),L2=<13,
      !.

assess_similar_preds(Pred,Rtes,First,[Score|Scores]):-
      atomic(Pred),
      similar_pred(Pre,Rtes,First,NewPred,Score),
      verify_derivations(Pred,NewPred),
      assess_similar_preds([Pred,NewPred],Rtes,First,Scores),
      !.
assess_similar_preds(Pred,Rtes,First,[Score|Scores]):-
      atomic(Pred),
      similar_pred(Pre,First,Rtes,NewPred,Score),
      verify_derivations(Pred,NewPred),
      assess_similar_preds([Pred,NewPred],Rtes,First,Scores),
      !.
assess_similar_preds(Preds,Rtes,First,[Score|Scores]):-
      list(Preds),
      similar_pred(Pred,Rtes,First,NewPred,Score),
      not_similar(Preds,NewPred),
      append([NewPred],Preds,NPreds),
      assess_similar_preds(NPreds,Rtes,First,Scores),
      !.
assess_similar_preds(Preds,Rtes,First,[Score|Scores]):-
      list(Preds),
      similar_pred(Pred,First,Rtes,NewPred,Score),
      not_similar(Preds,NewPred),
      append([NewPred],Preds,NPreds),
      assess_similar_preds(NPreds,Rtes,First,Scores),
      !.
assess_similar_preds(Pred,Rtes,First,Score):-
      atomic(Pred),
      similar_pred(Pre,Rtes,First,NewPred,Score),
      Pred=NewPred,
      !.      
assess_similar_preds(Pred,Rtes,First,[]):-!.

auxsbe(be).
auxsbe(being).
auxsbe(been).
auxsbe(was).
auxsbe(were).
auxsbe(is).
auxsbe(are).
auxsbe(am).

auxshave(having).
auxshave(have).
auxshave(had).
auxshave(has).

check_basem(would, will).
check_basem(should, shall).
check_basem(could, can).
check_basem(does, do).
check_basem(did, do).
check_basem(Base, Base).

check_baseh(Base, have):-!.
check_baseb(Base, be):-!.
check_based(Base, do):-!.

contractions(vsupn, Base, Head):-
   check_basem(Base, Head),!.
contractions(ausan, Base, Head):-
   check_baseh(Base, Head),!.
contractions(ausen, Base, Head):-
   check_baseb(Base, Head),!.
contractions(ausdn, Base, Head):-
   check_based(Base, Head),!.

checksyn_veridicity(Pred,Quest,First,Head1):-
       number_heads(Quest,L), 
      same_head_newp(Pred,Quest,First,Score1,Head1),
      Head1\=it,Head1\=there,
      findall(Score,(same_compl_newp(Pred,Quest,First,Score,Head),
      (L=<3; 3<L, Head\=Head1)),
          Scores),
      conflict_main_role_heads(Pred,Quest,First,Score4,Head2),
      append([Score1],Scores,StatsAll),
      sommatoria(StatsAll, Score2,_), 
      !,
      (Score2<1, Score4=0;
%    L=<3, 
      Scores\=[], 
%   Score2<10, 
        Score4=0
        ;
        Scores\=[], Score4=0, 0<Score1
/*        ;
        Scores=[], Score4=0
        ;
        Scores=[], 
        number_heads(Quest,L), L=<3, 
        number_heads(First,L1), L1=<9
*/
       ),
      !.

conflict_main_role_heads(Pred,Quest,First,Scor,Head):-
      findall(Score, conflmainrole_heads(Pred,Quest,First,Score,Head), Scores),
      findall(0, on(0,Scores), Zeros),
      length(Zeros,L),
      sommatoria(Scores, Score2,_),
      (L=0, Scores\=[], Score2=0, Scor=0;
       Score2=0, Scores\=[], Scor=0;
       0<L, Score2 < 1000*L, Scor=0;
       core_arguments(Quest,First), Scor=0;
        Scor=1000),
      !.

search_recursively(Pred1,[Pred2]):-
   sysv(Pred2-Syns1),
   on(Pred1,Syns1),
      !.
search_recursively(Pred1,[Pred2|Syns]):-
   sysv(Pred2-Syns1),
   (on(Pred1,Syns1),!
    ;
    search_recursively(Pred1,Syns)),!.

search_recursively(Pred1,[Pred2|Syns]):-
    search_recursively(Pred1,Syns),!.

exploit_synsets(Pred1,Pred2):-
   sysv(Pred1-Syns1),
   search_recursively(Pred2,Syns1),!.

exploit_synsets(Pred1,Pred2):-
   sysv(Pred2-Syns1),
   search_recursively(Pred1,Syns1),!.

check_synset(Pred,Pred,10):-!.
check_synset(Pred1,Pred2,-10):-
   not_antons(Pred1,Pred2),
   sysv(Pred1-Syns1),
   sysv(Pred2-Syns2),
   (on(Pred1,Syns2)
    ;
    on(Pred2,Syns1)),
      !.
check_synset(Pred1,Pred2,10):-
   not_antons(Pred1,Pred2),
   sysv(Pred1-Syns1),
   on(Pred2,Syns1),
      !.
check_synset(Pred1,Pred2,10):-
   not_antons(Pred1,Pred2),
   sysv(Pred2-Syns1),
   on(Pred1,Syns1),
      !.
check_synset(Pred1,Pred2,10):-
   not_antons(Pred1,Pred2),
   findall(Code1,rgt(Pred1,Code1),Codes1),
   Codes1\=[],
   findall(Code2,rgt(Pred2,Code2),Codes2),
   Codes2\=[],
   intersection(Codes1,Codes2, Ints), Ints\=[],
   !.


/*
check_synset(Pred1,Pred2,10):-
   not_antons(Pred1,Pred2),
   match_noun_adj_wn(Pred1,Pred2),
   !.


check_synset(Pred1,Pred2,100):-
   not_antons(Pred1,Pred2),
   mb(Pred1,Inds1),
   mb(Pred2,Inds2),
   (is_list(Inds1),is_list(Inds2),
     intersection(Inds1,Inds2, Ints), 
     Ints\=[]
     ;
    is_list(Inds1),atomic(Inds2),
     on(Inds2,Inds1)
     ;
    is_list(Inds2),atomic(Inds1),
     on(Inds1,Inds2)
     ;
     Inds1=Inds2
    ), 
   !.
*/

/*
findall(Pred,(
           on(Ind,Inds1),mbl(Pred,Ind)),Preds1),
   findall(Pred,(
           on(Ind,Inds2),mbl(Pred,Ind)),Preds2),
   intersection(Preds1,Preds2, Ints), Ints\=[],
*/

           
check_synset(Pred1,Pred2,100):-
    citiesinfer(Pred1,Hyper,Super),
    checkcityinfer(Pred2,Hyper,Super),
    !.

check_synset(Pred1,Pred2,100):-
    citiesinfer1(Pred1,Hyper,Super),
    checkcityinfer(Pred2,Hyper,Super),
    !.
check_synset(Pred1,Pred2,100):-
    getborough(Pred1,Pred),
    tolower(Pred,K),
    tolower(Pred2,K),
    !.
check_synset(Pred1,Pred2,100):-
    citiesinfer(Pred2,Hyper,Super),
    checkcityinfer(Pred1,Hyper,Super),
    !.

check_synset(Pred1,Pred2,100):-
    citiesinfer1(Pred2,Hyper,Super),
    checkcityinfer(Pred1,Hyper,Super),
    !.
check_synset(Pred1,Pred2,100):-
    getborough(Pred2,Pred),
    tolower(Pred,K),
    tolower(Pred1,K),
    !.
    
check_synset(Pred1,Pred2,100):-
   not_antons(Pred1,Pred2),
   findall(A,sk(Pred1,A),Codes1), Codes1\=[],
   findall(B,sk(Pred2,B),Codes2), Codes2\=[],
   (
     findall(Pred,(on(A,Codes1),
                 on(Pred,Codes2),
                   (
                   at(A,Pred);
                   cls(A,Integer,Pred,Integer,Type);
%                   cs(A,Pred);
                   der(A,Ty1,Pred,Ty2);
                   ent(A,Pred);
                   hyp(A,Pred);
                   ins(A,Pred);
                   mm(A,Pred);
                   mp(A,Pred);
                   ms(A,Pred);
                   per(A,Ty1,Pred,Ty2);
                   ppl(A,Ty1,Pred,Ty2);
                   sa(A,Ty1,Pred,Ty2);
                   sim(A,Pred);
                   vgp(A,Ty1,Pred,Ty2))
                ),
                Preds1),
                Preds1\=[]
                ;
      findall(Pred,(on(Pred,Codes1),
                 on(A,Codes2),
                   (
                   at(A,Pred);
                   cls(A,Integer,Pred,Integer,Type);
%                   cs(A,Pred);
                   der(A,Ty1,Pred,Ty2);
                   ent(A,Pred);
                   hyp(A,Pred);
                   ins(A,Pred);
                   mm(A,Pred);
                   mp(A,Pred);
                   ms(A,Pred);
                   per(A,Ty1,Pred,Ty2);
                   ppl(A,Ty1,Pred,Ty2);
                   sa(A,Ty1,Pred,Ty2);
                   sim(A,Pred);
                   vgp(A,Ty1,Pred,Ty2))
                ),
                Preds2),
   Preds2\=[]),
   !.

check_synset(Pred1,Pred2,99):-
      nbk(Pred1,A,B),
      Pred2=A
      ;
      nbk(A,Pred1,B),
      Pred2=A,!.
/*
check_synset(Pred1,Pred2,Scores):-
   not_antons(Pred1,Pred2),
   findall(A,sk(Pred1,A),Codes1), Codes1\=[],
   findall(B,sk(Pred2,B),Codes2), Codes2\=[],
      findall(Pred,(on(A,Codes2),
                   (
                   at(A,Pred);
                   cls(A,Integer,Pred,Integer,Type);
                   der(A,Ty1,Pred,Ty2);
                   ent(A,Pred);
                   hyp(A,Pred);
                   ins(A,Pred);
                   mm(A,Pred);
                   mp(A,Pred);
                   ms(A,Pred);
                   per(A,Ty1,Pred,Ty2);
                   ppl(A,Ty1,Pred,Ty2);
                   sa(A,Ty1,Pred,Ty2);
                   sim(A,Pred);
                   vgp(A,Ty1,Pred,Ty2))
                ),
                Preds2),
                Preds2\=[],
     findall(Pred,(on(A,Codes1),
                   (
                   at(A,Pred);
                   cls(A,Integer,Pred,Integer,Type);
%                   cs(A,Pred);
                   der(A,Ty1,Pred,Ty2);
                   ent(A,Pred);
                   hyp(A,Pred);
                   ins(A,Pred);
                   mm(A,Pred);
                   mp(A,Pred);
                   ms(A,Pred);
                   per(A,Ty1,Pred,Ty2);
                   ppl(A,Ty1,Pred,Ty2);
                   sa(A,Ty1,Pred,Ty2);
                   sim(A,Pred);
                   vgp(A,Ty1,Pred,Ty2))
                ),
                Preds1),
                Preds1\=[],
      matchinfer(Codes1,Preds1,Codes2,Preds2,Score),
      Scores is Score * 8,
      !.
*/
matchinfer(Codes1,Preds1,Codes2,Preds2,11):-
      on(Cod,Codes1),
      on(Cod,Preds2)
      ;
      on(Cod,Codes2),
      on(Cod,Preds1),
      !.
      
matchinfer(Codes1,Preds1,Codes2,Preds2,Score):-
      findall(Pred,(on(Cod,Codes1),sk(Pred,Cod)),NPred1), NPred1\=[],
      sort(NPred1,NPre1),
      findall(Pred,(on(Cod,Codes2),sk(Pred,Cod)),NPred2), NPred2\=[],
      sort(NPred2,NPre2),
      findall(Pred,(on(Cod,Preds1),sk(Pred,Cod)),NPreds1), NPreds1\=[],
      sort(NPreds1,NPres1),
      findall(Pred,(on(Cod,Preds2),sk(Pred,Cod)),NPreds2), NPreds2\=[],
      sort(NPreds2,NPres2),
      append(NPre1,NPres1,NPres11),
      append(NPre2,NPres2,NPres22),
      checkheadmatch(NPres11,NPres22,Scores),
      length(Scores,Score),
      !.

checkheadmatch([],[],[]):-!.
checkheadmatch([],NPres22,[]):-!.
checkheadmatch(NPres22,[],[]):-!.
checkheadmatch(NPres1,NPres2,[Head-Head1|Scores]):-
      elimina(Head,NPres1,Pred1),
      matchinfer(Head,Head1,NPres2,Pred2),
      checkheadmatch(Pred1,Pred2,Scores),
      !.
checkheadmatch(NPres1,NPres2,[]):-
      !.

matchinfer(Head,Head1,NPres2,Pred2):-
      elimina(Head1,NPres2,Pred2),
      match_approximate(Head,Head1),
      !.
matchinfer(Head,Head1,Pred2,Pred2):-
      !.

checkcityinfer(Pred2,Super,[]):-
    atomic(Super), Pred2=Super,
    !.
checkcityinfer(Pred2,Super,[]):-
    is_list(Super), 
    on(Pred2,Super),
    !.
checkcityinfer(Pred2,Super,Pred2):-
    !.
checkcityinfer(Pred2,Pred2,Super):-
    !.
checkcityinfer(Pred2,Hyper,Super):-
    is_list(Super),
    on(Pred2,Super)
    ;
    is_list(Hyper),
    on(Pred2,Hyper),    
    !.

match_anton([],[]):-!.
match_anton([],Pol1):-!.
match_anton(Pol,[]):-!.
match_anton(Pol,[Pol1]):-
     atomic(Pol),
     match_antons(Pol,Pol1),!.
match_anton(Pol,Pol1):-
      atomic(Pol),
      atomic(Pol1),
      match_antons(Pol,Pol1),!.
match_anton([Pol],[Pol1]):-
      match_antons(Pol,Pol1),!.
match_anton([Pol],[Pol1|Pols1]):-
      match_antons(Pol,Pol1),
      match_anton(Pol,Pols1),
      !.
match_anton([Pol|Pols],[Pol1]):-
      match_antons(Pol,Pol1),
      match_anton(Pols,Pols1),
      !.
match_anton([Pol|Pols],[Pol1|Pols1]):-
      match_antons(Pol,Pol1),
      match_anton(Pols,Pols1),
      !.
match_anton(Pols,Pols1):-
      list(Pols),list(Pols1),
      on(P,Pols),on(P,Pols1),
      !.

match_antons(1,2).
match_antons(0,2).
match_antons(2,0).
match_antons(2,1).
match_antons(2,2).
match_antons(1,1).
match_antons(0,0).

/* in ogni caso il pred che gov non deve essere negativo */
neg_check_semantic_antonimy(Gov,Pred,Poll):-
%      check_semantic_antonimy(Gov,Pred),
      findall(Pol,hrv(Gov,Pol),Pols),
      findall(Pol1,hrv(Pred,Pol1),Pols1),
      (
        (Pols=[1];Pols=[2]),Poll=Pols
        ;
        (Pols1=[1];Pols1=[2]),Poll=Pols1
        ),!.
neg_check_semantic_antonimy(Gov,Pred,Pols):-
      hrv(Gov,Pol), 
      hrv(Pred,Pol1), 
      Pol1=Pol,
      (Pol=[1];Pol=[2]),
      Pols=Pol1,
      !.

ants(rise,fall).
ants(fall,rise).
ants(rise,drop).
ants(drop,rise).
ants(soar,fall).
ants(fall,soar).
ants(sell,buy).
ants(buy,sell).
ants(die,kill).
ants(kill,die).
ants(leave,return).
ants(order,take_order).
ants(A,B):-
   (atv(A);atv(B)),
   (atvs(A,Bs), on(B,Bs)
    ;
   atvs(B,As), on(A,As)),!.
    

check_semantic_antonimy(Pred1,Pred2):-
   findall(Score,allcheck_semantic_antonimy(Pred1,Pred2,Score),Scores),
   appiattisci(Scores,Scors),
   Scors=[],
   !.
check_semantic_antonimy(Pred1,Pred2):-
      findall(Pred1,ants(Pred1,Pred2),Preds),Preds=[],
      findall(Pol,hrv(Pred1,Pol),Pols),
      findall(Pol1,hrv(Pred2,Pol1),Pols1),
      sort(Pols,SPols),
      sort(Pols1,SPols1),
      match_anton(SPols,SPols1),
      !.
check_semantic_antonimy(Pred1,Pred2):-
      findall(Pred1,ants(Pred1,Pred2),Preds),Preds=[],
      findall(Pol,hrv(Pred1,Pol),Pols),Pols=[],
      findall(Pol1,hrv(Pred2,Pol1),Pols1),Pols1=[],
      !.
check_semantic_antonimy(Pred1,Pred2):-
      findall(Pred1,ants(Pred1,Pred2),Preds),Preds=[],
      findall(Pol,hrv(Pred1,Pol),Pols),Pols=[],
      findall(Pol1,hrv(Pred2,Pol1),Pols1),
      sort(Pols1,SPols1),
      match_anton([],SPols1),
      !.
check_semantic_antonimy(Pred1,Pred2):-
      findall(Pred1,ants(Pred1,Pred2),Preds),Preds=[],
      findall(Pol,hrv(Pred1,Pol),Pols),
      findall(Pol1,hrv(Pred2,Pol1),Pols1),Pols1=[],
      sort(Pols,SPols),
      match_anton([],SPols),
      !.
/*
check_semantic_antonimy(Pred1,Pred2):-
      findall(Pred1,ants(Pred1,Pred2),Preds),Preds=[],
      check_synset(Pred1,Pred2,Score),!.
*/
real_semantic_antonimy(Pred1,Pred2):-
      findall(Pred1,ants(Pred1,Pred2),Preds),Preds\=[],
      !.
real_semantic_antonimy(Pred1,Pred2):-
      \+ consistent_preds(Pred1,Pred2,L),
      !.

eval_penalties([],use-opaque,Pred,Rte,First,10):-!.
eval_penalties(use-opaque,[],Pred,Rte,First,10):-!.
eval_penalties([],progr-opaque,Pred,Rte,First,10):-!.
eval_penalties(progr-opaque,[],Pred,Rte,First,10):-!.
eval_penalties(neg,modal,Pred,QuestEval,First,100):-!.
eval_penalties(modal,neg,Pred,QuestEval,First,100):-!.
eval_penalties(modal,progr-opaque,Pred,QuestEval,First,[]):-
     !.
eval_penalties(progr-opaque,modal,Pred,QuestEval,First,[]):-
     !.
eval_penalties([],neg,Pred,QuestEval,First,100):-!.
eval_penalties(neg,[],Pred,QuestEval,First,100):-!.
eval_penalties(modal,NewPred-opaque,Pred,Rte,First,Score):-
      on(_-Dgr,First),
      Dgr=..[Gov,_,NewPred],
      assess_penalty(Gov,Rte,First,modal),
      !.
eval_penalties(NewPred-opaque,modal,Pred,Rte,First,Score):-
      on(_-Dgr,First),
      Dgr=..[Gov,_,NewPred],
      assess_newpred(Gov,First,modal),
      !.
eval_penalties(neg,NewPred-opaque,Pred,Rte,First,Score):-
      on(_-Dgr,First),
      Dgr=..[Gov,_,NewPred],
      assess_newpred(Gov,First,neg),
      !.
eval_penalties(NewPred-opaque,neg,Pred,Rte,First,Score):-
      on(_-Dgr,First),
      Dgr=..[Gov,_,NewPred],
      assess_newpred(Gov,First,neg),
      !.
eval_penalties(modal,NewPred-opaque,Pred,Rte,First,Score):-
      on(_-Dgr,Rte),
      Dgr=..[Gov,_,NewPred],
      assess_newpred(Gov,Rte,modal),
      !.
eval_penalties(NewPred-opaque,modal,Pred,Rte,First,Score):-
      on(_-Dgr,Rte),
      Dgr=..[Gov,_,NewPred],
      assess_newpred(Gov,Rte,modal),
      !.
eval_penalties(neg,NewPred-opaque,Pred,Rte,First,Score):-
      on(_-Dgr,Rte),
      Dgr=..[Gov,_,NewPred],
      assess_newpred(Gov,Rte,neg),
      !.
eval_penalties(NewPred-opaque,neg,Pred,Rte,First,Score):-
      on(_-Dgr,Rte),
      Dgr=..[Gov,_,NewPred],
      assess_newpred(Gov,Rte,neg),
      !.
eval_penalties(NewPred-opaque,[],Pred,Rte,First,Score):-
      on(_-Dgr,First),
      term_to_atom(xcomp-_,Fun),
      Dgr=..[Gov,Fun,Pred],
      !.
eval_penalties([],NewPred-opaque,Pred,Rte,First,Score):-
      on(_-Dgr,Rte),
      term_to_atom(xcomp-_,Fun),
      Dgr=..[Gov,Fun,Pred],
      !.
eval_penalties(NewPred-opaque,[],Pred,Rte,First,Score):-
      notdoubts_verb(NewPred),
      !.
eval_penalties([],NewPred-opaque,Pred,Rte,First,Score):-
      notdoubts_verb(NewPred),
      !.

evaluate_opaques(Pred,Rte,First):-
      findall(Pred,
       (on(_-Dgr,First),
        term_to_atom(ccomp-_,Fun),
        Dgr=..[Gov,Fun,_,Pred],
        assess_doubtverb(Gov)), Preds1),
      findall(Pred,
        (on(_-Dgr,Rte),
        term_to_atom(ccomp-_,Fun),
         Dgr=..[Gov,Fun,_,Pred],
         assess_doubtverb(Gov)), Preds2),
      Preds1=Preds2,
      findall(Gov1,
       (on(_-Dgr1,First),
        term_to_atom(xcomp-_,Fun),
        Dgr1=..[Pred,_,Fun,Gov1], \+ light_verbs(Pred)),
        Preds3),
      findall(Gov1,
        (on(_-Dgr2,Rte),
        term_to_atom(ccomp-_,Fun),
         Dgr2=..[Pred,_,Fun,Gov1], \+ light_verbs(Pred)),
         Preds4),
      (Preds3=[]; Preds4=[];
        Preds3=Preds4
       ;
       member(Pre,Preds3),member(Pre,Preds4)
       ;
       check_participials(Preds3,Preds4)
       ;
      number_heads(Rte,L), L=<2),
     !.

evaluate_guilt(Rte,First):-
       (
       findall(Pred-Pre,
         (
         term_to_atom(iobj-_,Fun),
          Dgr=..[Gov,_,Fun,_,Pred],
          on(_-Dgr,First),
         term_to_atom(ncmod-_,Fun1),
          Dgr1=..[Pred,_,Fun1,_,Pre],
          on(_-Dgr1,First),
          guilt(Govs), on(Gov,Govs)), Preds1)
          ;
       findall(Pred-Pre,
         (
         term_to_atom(obj-_,Fun),
          Dgr=..[Gov,_,Fun,Pre1],
          on(_-Dgr,First),
         term_to_atom(ncmod-_,Fun1),
          Dgr1=..[Pred,_,Fun1,_,Pre],
          on(_-Dgr1,First),
          guilt(Govs), on(Gov,Govs)), Preds1)),
      findall(Pred1-Pre,
        (
         term_to_atom(subj-theme_aff,Fun),
         Dgr=..[Pred1,_,Fun,Pre,obj],
         on(_-Dgr,Rte)), Preds2),
       Preds1\=[],Preds2\=[],
       on(P1-Pre,Preds1),on(P2-Pre,Preds2),
       (consistent_preds(P1,P2,Score1);
          check_main_head_roles(P1,P2);
          light_verbs(P1);
          light_verbs(P2);
          search_synonym(P1,P2)),
      !.

search_synonym(Pred1,Pred2):-
     sysv(Pred2-Syns),
     on(Pre,Syns),
     match_approximate(Pred1,Pre),
      !.
search_synonym(Pred1,Pred2):-
     sysv(Pred1-Syns),
     on(Pre,Syns),
     match_approximate(Pred2,Pre),
      !.


guilt([accuse,arraign, asperse, blame, charge, charge_formally, charge_in_return, criminate, impeach, incriminate, reproach]).
 
check_participials([],Preds4):-
     on(Pred,Preds4),
     lemmatize_dic_v(Pred, Lemma, S),
     (S=d;S=n;S=t),!.
     
check_participials(Preds4,[]):-
     on(Pred,Preds4),
     lemmatize_dic_v(Pred, Lemma, S),
     (S=d;S=n;S=t),!.

evaluate_propopaques(Pred,Rte,First):-
      findall(Pred,
       (on(Ind-Gov-Ro-Pred-Id,First),
         assess_doubtverb(Gov)), Preds1),
      findall(Pred,
        (on(Ind-Gov-Ro-Pred-Id,First),
         assess_doubtverb(Gov)), Preds2),
      Preds1=Preds2,
     !.

assess_doubtverb(Gov):-
    coml(Gov,Subs), 
    (on(fcomp/_,Subs);on(vcomp/_,Subs)),
    (doubt_verbs(Verbs),
     on(Gov,Verbs)
     ;
     try_verbs(Verbs),
     on(Gov,Verbs)
     ),!.

assess_newpred(Pred,First,Type):-
      penalties(First,Pred-_,Type),
     !.

infer_same_pred(Quest,Rte,Pred,Score):-
      best_role1(Quest,Pred1,Role1),
      best_role1(Rte,Pred2,Role2),
      on(_-Dgr,Rte),
         term_to_atom(Fun-Role,Fu),
      (Dgr=..[Pred2,Fu,Head|_]
       ;
      Dgr=..[Pred2,Fu,Head]),
      collect_all_pred(Quest,Preds1),
      sort(Preds1,SortP1),
      collect_all_pred(Rte,Preds2),
      sort(Preds2,SortP2),
      make_chars(SortP1,Chars1),
      make_chars(SortP2,Chars2),
      stringof(ChP1,Pred1),
      stringof(ChP2,Pred2),
      closest_match(Chars2,ChP1,Evls1),
      closest_match(Chars1,ChP2,Evls2),
      (Evls1=[], on(Pred,Evls2);
       Evls2=[], on(Pred,Evls1);
       Evls1\=[], Evls2\=[],on(Pred,Evls1),on(Pred,Evls2)),
      Pred\=Pred1,Pred\=Pred2,
      findall(Pen1,penalties(Quest,Pred1-Role1,Pen1),Pens1),Pens1=[],
      findall(Pen2,penalties(Rte,Pred2-Role2,Pen2),Pens2),Pens2=[],
      recover_pred_dep(Rte,Quest,Pred,Pred1,Pred2,Gov),
      findall(Pen3,penalties(Rte,Gov-Role,Pen3),Pens3),Pens3=[],
      w_e_pref(Fun-Role,Score).

almost_similar_preds(Pred1,Pred2):-
       atomic(Pred1),atomic(Pred2),
      (consistent_preds(Pred1,Pred2,Scoree1)
        ;
        consistent_similar_pred(Pred1,Pred2)
      ;
      light_verbs(Pred1)
      ;
      light_verbs(Pred2)
      ),
    !.   

test_compute_score(Rte,First):-
    findall(Pred, (same_pred(Rte,First,Pred,Score1),
                    best_role1(Rte,Pred,Role),
                    best_role_induct(Rte,Pred,Ent,Rol),
                    best_roles_induct(First,Pred,Ent1,Rol2),
                    valid_heads(Ent,Ent1), Ent=Ent1),
                  Ents), 
    Ents=[],
    findall(Pred1, (search_same_pred(Rte,First,Pred1,Score),
                    best_role1(Rte,Pred1,Role1)),
                  Ents1), 
    Ents1=[],
    best_role1(Rte,Pred,Role),
     non_creation_pred(Pred), Pred\=be,
    !.

valid_heads(Head,Head):- \+ fct(Head),!.
valid_heads(Head,Head1):-
     nt(Head),nt(Head1)
     ;
     nt(Head), recover_descs(Head1,Des),
     on(H,Des), nt(H)
     ;
     nt(Head1), recover_descs(Head,Des),
     on(H,Des), nt(H),     
     !.
valid_heads(Head,Head1):-
     findall(a, (fct(Head);fct(Head1)), A),
      A=[],
      atomic(Head),
      atomic(Head1),
      spy_lower(Head,LowH,K),
      spy_lower(Head1,LowH1,K1),
     findall(a, (fct(LowH);fct(LowH1)), A1),
      (A1=[];K=K1),
     (\+ qmq(Head), \+ qmq(Head1)
       ;
      qmq(Head), qmq(Head1)),
      \+ checkallabbr(Head),
      \+ checkallabbr(Head1),
    !.

validhead(Head):-
     nt(Head),
     !.
validhead(Head):-
      atomic(Head),
      spy_lower(Head,LowH,K),
     findall(a, fct(LowH), A1),
      A1=[],
     (\+ qmq(Head)
       ;
      qmq(Head),
      \+ checkallabbr(Head)),
    !.

check_main_head_roles([],Headd1):-!.
check_main_head_roles(Headd,[]):-!.
check_main_head_roles(Headd,Headd1):-
          nt(Headd),nt(Headd1),!.

check_main_head_roles(Headd,Headd1):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
      atomic(Head),atomic(Head1),
      (Head=Head1,Score=0;
      spy_lower(Head,LowHead,1),
      LowHead=Head1,Score=0;
      spy_lower(Head1,LowHead1,1),
      LowHead1=Head,Score=0;
      (check_similar_multiword(Head,Head1, Pred2)
      ;     
      check_similar_multiword(Head1,Head, Pred2)),
       Score=0
       ;
       match_approximate(Head1,Head),
       Score=0
        ;
       (s_is_ax(Head1,Head);
       s_is_ax(Head,Head1);
       s_is_ax(Head,Head2),checkmatch_approximates(Head2,Head1);
        s_is_ax(Head1,Head2),checkmatch_approximates(Head2,Head)
         )
        ;       
       search_wn_cats(Head,Cats),Cats\=[],
       search_wn_cats(Head1,Cats1),Cats1\=[],
       controlla_cats(Cats,Cats1),
       intersection(Cats,Cats1, Ints), 
       length(Ints,L), 
       (1<L;Cats=Cats1;alllengths(Cats,Cats1,L)),
       privileged_classes(Cats,Cats1,Ints)),
       !.

privileged_classes(Cats,Cats,Cats):-!.
privileged_classes(Cats,Cats1,Cats):-!.
privileged_classes(Cats1,Cats,Cats):-!.
privileged_classes(Cats,Cats1,Ints):-
      on(umano,Cats),on(umano,Cats1)
      ;
      on(istituzione,Cats),on(istituzione,Cats1)
      ;
     on(luogo,Cats),on(luogo,Cats1)
      ;
      on(tecno,Cats),on(tecno,Cats1)
       ;
      on(informa,Cats),on(informa,Cats1)
     ;
      on(legale,Cats),on(legale,Cats1)
      ;
      on(evento,Cats),on(evento,Cats1),
       !.
privileged_classes(Cats,Cats1,Ints):-
      \+ on(umano,Ints),
      \+ on(istituzione,Ints),
       \+ on(luogo,Ints),
       \+ on(evento,Ints),
      \+ on(tecno,Ints),
      \+ on(informa,Ints),
      \+ on(legale,Ints),
        !.

cconsistent_preds(Pred,Pred1,-1):-
      nonvar(Pred),nonvar(Pred1),Pred=Pred1,!.
cconsistent_preds(Pred1,Pred2,Score1):-
      \+ lightverbs(Pred1),
      \+ lightverbs(Pred2),
      check_semantic_antonimy(Pred1,Pred2),
      check_synset(Pred1,Pred2,Score1).
cconsistent_preds(Pred1,Pred2,-1):-
       entail(Pred1,Pred2).
cconsistent_preds(Pred1,Pred2,-1):-
       entail(Pred2,Pred1).
cconsistent_preds(Pred1,Pred2,-1):-
       check_pbfs(Pred1,Pred2).
cconsistent_preds(Pred1,Pred2,-1):-
      \+ lightverbs(Pred1),
      \+ lightverbs(Pred2),
       search_verb_inference(Pred1,Pred2),
       !.
cconsistent_preds(Pred1,Pred2,10):-
      \+ light_verbs(Pred1),
      \+ light_verbs(Pred2),
      consistent_similar_pred(Pred1,Pred2),!.
 
constr_main_head_roles(Headd,Headd1):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
      (Head=Head1,Score=0;
      spy_lower(Head,LowHead,1),
      LowHead=Head1,Score=0;
      spy_lower(Head1,LowHead1,1),
      LowHead1=Head,Score=0;
      (check_similar_multiword(Head,Head1, Pred2)
      ;     
      check_similar_multiword(Head1,Head, Pred2)),
       Score=0
       ;
       match_approximate(Head1,Head),
       Score=0
       ;
       cconsistent_preds(Head1,Head,Score)
       ;
       (s_is_ax(Head1,Head);
       s_is_ax(Head,Head1);
       s_is_ax(Head,Head2),checkmatch_approximates(Head2,Head1);
        s_is_ax(Head1,Head2),checkmatch_approximates(Head2,Head)
       )
       ),!.


constr_main_head(Headd,Headd1):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
      (Head=Head1,Score=0;
      spy_lower(Head,LowHead,1),
      LowHead=Head1,Score=0;
      spy_lower(Head1,LowHead1,1),
      LowHead1=Head,Score=0;
       (s_is_ax(Head1,Head);
       s_is_ax(Head,Head1);
       s_is_ax(Head,Head2),checkmatch_approximates(Head2,Head1);
        s_is_ax(Head1,Head2),checkmatch_approximates(Head2,Head)
       )
       ),!.

alllengths(Cats,Cats1,LL):-
      length(Cats,L),
      length(Cats1,L1),
      (L=L1;L=2,L1=1;L1=2,L=1;1<LL),
      !.
main_head_match(Headd,Headd1,10):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
       (s_is_ax(Head1,Head);
       s_is_ax(Head,Head1);
       s_is_ax(Head,Head2),checkmatch_approximates(Head2,Head1);
        s_is_ax(Head1,Head2),checkmatch_approximates(Head2,Head)
      ;
      Head=Head1), 
     !.
     
main_head_match(Headd,Headd1,10):-
      check_head_index(Headd,Headd1,Head,Head1),
      (generic_head1(Head,CatSem),
       recover_descs(Head1,Names), 
       (is_list(Names),
        on(Name,Names),
        toupper(Name,Nam),
        if_first_name(Nam), Head2=Nam
        ;
        atomic(Names),
       (if_first_name(Names);CatSem\=nil
           ), Head2=Names)
       ;
       generic_head1(Head1,CatSem),
       recover_descs(Head,Names), 
       (is_list(Names),
        on(Name,Names),
        toupper(Name,Nam),
        if_first_name(Nam), Head2=Nam
        ;
        atomic(Names),
        (if_first_name(Names);CatSem\=nil
           ), Head2=Names)
       ;
       generic_head1(Head,CatS),
       generic_head1(Head1,CatSem),Head2=Head1
       ;
       tolower(Head,Nam),
       generic_head1(Nam,CatSem),Head2=Head1
       ),
       search_wn_cats(Head,Cats),Cats\=[],
       search_wn_cats(Head1,Cats1),Cats1\=[],
%       trova_CatSem(C,Head2,Cats),Cats\=[],
%       trova_CatSem(C,Head,Cats1),Cats1\=[],
       controlla_cats(Cats,Cats1),
       intersection(Cats,Cats1, Ints), 
       length(Ints,L), 
       1=<L,
       computediff(Cats1,Cats,Diff), Diff=<2,
       (Cats=Cats1;alllengths(Cats,Cats1,L)),
       privileged_classes(Cats,Cats1,Ints),
      !.
main_head_match(Headd,Headd1,100):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
      spy_lower(Head,LowHead,1),
      spy_lower(Head1,LowHead1,1),
       generic_head1(LowHead,Cats),
       generic_head1(LowHead1,Cats1),
       controlla_cats(Cats,Cats1),
       intersection(Cats,Cats1, Ints), 
       length(Ints,L), 
       (1=<L;Cats=Cats1;alllengths(Cats,Cats1,L)),
       privileged_classes(Cats,Cats1,Ints),
      !.
main_head_match(Headd,Headd1,Score):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
      (Head=Head1,Score=0;
      spy_lower(Head,LowHead,1),
      LowHead=Head1,Score=0;
      spy_lower(Head1,LowHead1,1),
      LowHead1=Head,Score=0;
      (check_similar_multiword(Head,Head1, Pred2)
      ;     
      check_similar_multiword(Head1,Head, Pred2)),
       Score=0       
       ;
       match_approximate(Head1,Head), Score=100
       ;
       consistent_preds(Head,Head1,Score)
       ;
       (s_is_ax(Head1,Head);
       s_is_ax(Head,Head1);
       s_is_ax(Head,Head2),checkmatch_approximates(Head2,Head1);
        s_is_ax(Head1,Head2),checkmatch_approximates(Head2,Head)
       ),
       Score=0),!.

computediff(Cats1,Cats,Diff):-
       is_list(Cats),is_list(Cats1),
       length(Cats1,L1),
       length(Cats,L),
       (L1<L, Diff is L - L1
        ;
        L<L1, Diff is L1 - L
        ;
        L=L1, Diff=0),
        !.
strict_head_match(Headd,Headd1,Score):-
      check_head_index(Headd,Headd1,Head,Head1),
      valid_heads(Head,Head1),
      (Head=Head1,Score=0;
      spy_lower(Head,LowHead,1),
      LowHead=Head1,Score=0;
      spy_lower(Head1,LowHead1,1),
      LowHead1=Head,Score=0
      ;
     (check_similar_multiword(Head,Head1, Pred2)
      ;     
      check_similar_multiword(Head1,Head, Pred2)),Score=100
       ;
       consistent_preds(Head,Head1,Score)
       ;
       (s_is_ax(Head1,Head);
       s_is_ax(Head,Head1);
       s_is_ax(Head,Head2),checkmatch_approximates(Head2,Head1);
        s_is_ax(Head1,Head2),checkmatch_approximates(Head2,Head)
       ),
       Score=0),!.

qstrict_head_match(Headd,Headd1,Score):-
      check_head_index(Headd,Headd1,Head,Head1),
      (Head=Head1,Score=0;
      spy_lower(Head,LowHead,1),
      LowHead=Head1,Score=0;
      spy_lower(Head1,LowHead1,1),
      LowHead1=Head,Score=0
      ;
     (check_similar_multiword(Head,Head1, Pred2)
      ;     
      check_similar_multiword(Head1,Head, Pred2)),Score=100
       ;
       consistent_preds(Head,Head1,Score)
       ;
      (s_is_ax(Head1,Head);
       s_is_ax(Head,Head1);
       s_is_ax(Head,Head2),checkmatch_approximates(Head2,Head1);
        s_is_ax(Head1,Head2),checkmatch_approximates(Head2,Head)
       ),
       Score=0),!.
/*
main_head_match(Head,Head1,10):-
     s_is_ax(Head1,Headd), Head\=Headd,
     main_head_match(Head,Headd,Head1),!.
main_head_match(Head,Head1,10):-
     s_is_ax(Head,Headd), Head1\=Headd,
     main_head_match(Head1,Headd,Head1),!.
*/

core_arguments(Quest,First):-
       compute_GRs(Quest,GRs1),
       length(GRs1,L),
       findall(F,(on(F,GRs1),
         (F=obj;F=iobj;F=arg_mod;F=xcomp;F=ccomp)),Fs),
       compute_GRs(First,GRs2),
       findall(F,(on(F,GRs2),
         (F=obj;F=iobj;F=arg_mod;F=xcomp;F=ccomp)),Fs1),
         (Fs=[],Fs1=[];Fs=[]), 
          (3<L
          ;
           L=<3, 
           findall(a, (on(mod,GRs1);on(ncmod, GRs1)), A), 
            length(A,L1),
          (L=3, L1=<1; L=<2, L1=0)
           ;
         intransitives(Quest,First)
      ),
    !.

neg_pred_class(Pred2):-
    sysv(Pred2-Preds);
    on(Pred2,Preds),!.

match_resultsstrict(Rte,First,Pred1-Ent,[Pred2-Ent1|Pres2],Score2):-
      main_head_match(Ent,Ent1,Sco),
      similar_pred(_,Rte,First,Pred,Score1),
      check_semantic_antonimy(Pred1,Pred2),
      evaluate_propositional_antonyms(Rte,First),
      findall(Score4, same_sechead_newp(Pred,Rte,First,Score4,Head), Scores1),
      findall(Score3, same_head(Rte,First,Score3), Scores),
      eval_score_heads_deps(L,Pred1,Score1,Score22,Scores,Scores1),
     !.
match_resultsstrict(Rte,First,Pred1-Ent,[Pred2-Ent1|Pres2],Score2):-
     match_resultsstrict(Rte,First,Pred1-Ent,Pres2,Score2),
     !.

match_resultsstr(Rte,First,Pred1-Ent,[Pred2-Ent1|Pres2],Score2):-
      main_head_match(Ent,Ent1,Sco),
      check_semantic_antonimy(Pred1,Pred2),
      findall(Score4, same_sechead_newp(Pred,Rte,First,Score4,Head), Scores1),
      findall(Score3, same_head(Rte,First,Score3), Scores),
      !.
match_resultsstr(Rte,First,Pred1-Ent,[Pred2-Ent1|Pres2],Score2):-
     match_resultsstr(Rte,First,Pred1-Ent,Pres2,Score2),
     !.

number_heads(Rte,N):-
    appiattisci(Rte,Rtes),
    compute_heads(Rtes,RteHeads),
    length(RteHeads,N),!.

compute_modal([],[]):-!.
compute_modal([_-Dgr|Input],[modal|Heads]):-
      Dgr=..[Pred,modal,Mod],
      Mod\=will,
         compute_modal(Input,Heads),
    !.
compute_modal([_-Dgr|Input],[neg|Heads]):-
      Dgr=..[Pred,neg|_],
         compute_modal(Input,Heads),
    !.
compute_modal([_-Dgr|Input],[neg|Heads]):-
         term_to_atom(adj-mod,Fu),
      Dgr=..[Pred,Fu,Neg|_],
      neg_pred(Neg),
         compute_modal(Input,Heads),
    !.
compute_modal([_-Dgr|Input],[opaque|Heads]):-
         term_to_atom(xcomp-_,Fu),
      Dgr=..[Gov,Fu,Pred],
      coml(Gov,K),
     assess_doubtverb(Gov),
      compute_modal(Input,Heads),
    !.


compute_modal([_-Dgr|Input],[opaque|Heads]):-
         term_to_atom(ccomp-_,Fu),
      Dgr=..[Gov,Fu,Pred],
     assess_doubtverb(Gov),
     compute_modal(Input,Heads),
    !.


compute_modal([_-Dgr|Input],[opaque|Heads]):-
         term_to_atom(xcomp-_,Fu),
      Dgr=..[Gov,Fu,Pred],
      (Gov=suspect;
       sysv(suspect-Verbs),
       on(Gov,Verbs)),
         compute_modal(Input,Heads),
     !.

compute_modal(Input,[opaque]):-
      best_role1(Input,Gov,Role),
      (Gov=suspect;
       sysv(suspect-Verbs),
       on(Gov,Verbs)),!.
compute_modal([_-Dgr|Input],Heads):-
         compute_modal(Input,Heads),
    !.

compute_modal(Input,[]):-!.

intersection([],X,[]):-
  !.

intersection([X|R],Y,[X|Z]):- 
  nogen_member(X, Y),
  !,
  intersection(R, Y, Z).

intersection([_|R],Y,Z):-
  intersection(R,Y,Z).

check_pbfs(Pred1,Pred2):-
   pbf(Pred1,Sim1,Roles1),
   pbf(Pred2,Sim2,Roles2),
   concat_atom(L1,' ',Sim1),
   append([Pred1],L1,L11),
   concat_atom(L2,' ',Sim2),
   append([Pred2],L2,L22),
   intersection(L11,L22,Int),
   Int\=[],
   length(Int,L),
   1<L,
   !.
   
checklightverbs(Pred,Pred1):-
   lightverbs(Pred),
   lightverbs(Pred1),
   !.

checklightverbs(Pred,Pred1):-
   lightverbs(Pred),
   light_verbs(Pred1),SemCats=[situation,become,possession,possess,being],
   on(Ca,SemCats),
   constr_main_head_roles(Ca,Pred1)
   ;
   lightverbs(Pred1),
   light_verbs(Pred),SemCats=[situation,become,possession,possess,being],
   on(Ca,SemCats),
   constr_main_head_roles(Ca,Pred),
   !.

checklightverbs(Pred,Pred1):-
       lightverbs(Pred),SemCats=[situation,become,possession,possess,being],
       on(Ca,SemCats),
       constr_main_head_roles(Ca,Pred1)
       ;
       light_verbs(Pred),
       superlight(Pred,SemCats),
       on(Ca,SemCats),
       constr_main_head_roles(Ca,Pred1)
       ;
       light_verbs(Pred1),
       superlight(Pred1,SemCats),
       on(Ca,SemCats),
       constr_main_head_roles(Ca,Pred),
      !.
checklightverbs(Pred,Pred1):-
       lightverbs(Pred1),SemCats=[situation,become,possession,possess,being],
       on(Ca,SemCats),
       constr_main_head_roles(Ca,Pred)
       ;
       light_verbs(Pred1),
       processverb(Pred)
       ;
       light_verbs(Pred),
       processverb(Pred1),
      !.
   
consistent_preds(Pred,Pred1,-1):-
      nonvar(Pred),nonvar(Pred1),
      checklightverbs(Pred,Pred1),
      !.
consistent_preds(Pred,Pred1,-1):-
      nonvar(Pred),nonvar(Pred1),Pred=Pred1,!.
consistent_preds(Pred1,Pred2,Score1):-
      \+ lightverbs(Pred1),
      \+ lightverbs(Pred2),
      check_semantic_antonimy(Pred1,Pred2),
      check_synset(Pred1,Pred2,Score1).
consistent_preds(Pred1,Pred2,-1):-
       entail(Pred1,Pred2).
consistent_preds(Pred1,Pred2,-1):-
       entail(Pred2,Pred1).
consistent_preds(Pred1,Pred2,-1):-
       check_pbfs(Pred1,Pred2).
consistent_preds(Pred1,Pred2,-1):-
      \+ lightverbs(Pred1),
      \+ lightverbs(Pred2),
       search_verb_inference(Pred1,Pred2),
       !.

consistent_preds(Pred1,Pred2,10):-
      \+ light_verbs(Pred1),
      \+ light_verbs(Pred2),
      consistent_similar_pred(Pred1,Pred2),!.
/*
consistent_preds(Pred1,Pred2,10):-
      consistent_similarpred(Pred1,Pred2),!.
*/
consistent_similarpred(Pred,Pred1):-nonvar(Pred),nonvar(Pred1),Pred=Pred1,!.
consistent_similarpred(Pred1,Pred2):-
      findall(Pred1,ants(Pred1,Pred2),Preds),Preds=[],
      findall(Pre, (
                   vmtn(Pred2),vmtn(Pred1)
                   ;
                   vwth(Pred2),vwth(Pred1)
                   ;
                   vcpt(Pred2),vcpt(Pred1)
                   ;
                   vcgt(Pred2),vcgt(Pred1)
                   ;
                   vbdy(Pred2),vbdy(Pred1)
                   ), Preds1),Preds1\=[],
                   !.

consistent_similar_pred(Pred,Pred1):-nonvar(Pred),nonvar(Pred1),Pred=Pred1,!.
consistent_similar_pred(Pred1,Pred2):-
      findall(Pred1,ants(Pred1,Pred2),Preds),Preds=[],
      findall(Pol,hrv(Pred1,Pol),Pols),
      findall(Pol1,hrv(Pred2,Pol1),Pols1),
      sort(Pols,SPols),
      sort(Pols1,SPols1),
%      SPols\=[],SPols1\=[],
      match_anton(SPols,SPols1),      
     (sysv(Pred2-Syns2),
       on(Pred3,Syns2),
       (match_approximate(Pred1,Pred3)
        ;
        search_verb_inference(Pred1,Pred3))
      ;
       sysv(Pred1-Syns1),
       on(Pred3,Syns1),
       (match_approximate(Pred2,Pred3)
        ;
        search_verb_inference(Pred2,Pred3))
      ;
       findall(Pred1-Pred2,(sysv(Pred1-Syns1);sysv(Pred2-Syns2)),Pres), Pres=[],
       match_approximate(Pred2,Pred1)
       ),!.

consistent_similar_pred(Pred1,Pred2):-
       match_approximate(Pred2,Pred1),!.

intsf(a_lot).
intsf(even).
intsf(far).
intsf(over).
intsf(pretty).
intsf(quite).
intsf(rather).
intsf(so).
intsf(too).
intsf(utterly).
intsf(very).
intsf(as).
intsf(as_much).
intsf(at_least).
intsf(at_most).
intsf(more).
intsf(more_than).
intsf(most).
intsf(much).
intsf(much_more).
intsf(no_more_than).

intsf1(enough).
intsf1(indeed).
intsf1(just).
intsf1(about).
intsf1(almost).
intsf1(around).

intsf2(less).
intsf2(less_than).
intsf2(only).


    
non_focused_pred(Pred,Rte,First):-
   non_focused_pred1(Pred,Rte,First),
   non_focused_pred2(Pred,Rte,First),
   !.

non_focused_pred1(Pred,Rte,First):-
      findall(Gov1,
       (on(_-Dgr1,First),
        Dgr1=..[Pred,adj-mod,Gov1], intsf(Gov1)),
        Preds3),
      findall(Gov1,
        (on(_-Dgr2,Rte),
         Dgr2=..[Pred,adj-mod,Gov1], intsf(Gov1)),
         Preds4),
      Preds3=Preds4,
      findall(Gov1,
       (on(_-Dgr1,First),
        Dgr1=..[Gov1,adj-mod,Pred], intsf(Gov1)),
        Preds1),
      findall(Gov1,
        (on(_-Dgr2,Rte),
         Dgr2=..[Gov1,adj-mod,Pred], intsf(Gov1)),
         Preds2),
      Preds1=Preds2,
      !.
non_focused_pred2(Pred,Rte,First):-
      findall(Gov1,
       (on(_-Dgr1,First),
        Dgr1=..[Pred1,adj-mod,Gov1,Pred], intsf(Gov1)),
        Preds3),
      findall(Gov1,
        (on(_-Dgr2,Rte),
         Dgr2=..[Pred1,adj-mod,Gov1,Pred], intsf(Gov1)),
         Preds4),
      Preds3=Preds4,
      !.
match_dangerous(RteDeps_Sort,FirstHeads_Sort):-
    danger_item(A),
    member(A,RteDeps_Sort),
    member(A,FirstHeads_Sort),
    !.
match_dangerous(RteDeps_Sort,FirstHeads_Sort):-
    danger_item(A),
    member(A,RteDeps_Sort),
    danger_item(B),
    member(B,FirstHeads_Sort),
    !.
match_dangerous(RteDeps_Sort,FirstHeads_Sort):-
    danger_item(A),
    member(A,RteDeps_Sort),
    member(B,FirstHeads_Sort),
    health(B),
    !.

danger_item(damage).
danger_item(danger).
danger_item(dangerous).
danger_item(risk).
danger_item(risky).

match_aspect(esistenza,I1):-!.
match_aspect(I,esistenza):-!.
match_aspect(I,I1):-
     on(I,[ist_soc,perloc,riportivo,attivita,risultato,achiev,achieviter,accomp,cambiamento]),
     on(I1,[ist_soc,perloc,riportivo,attivita,risultato,achiev,achieviter,accomp,cambiamento]),
      !.
match_aspect(I,I1):-
     on(I,[attivita,affettivo,ist_soc,perloc,riportivo,stato,soggettivo,psych,emotivo,percettivo,modale]),
     on(I1,[attivita,affettivo,ist_soc,perloc,riportivo,stato,soggettivo,psych,emotivo,percettivo,modale]),
      !.

match_aspect(I,I1):-
     \+ on(I,[ist_soc,perloc,riportivo,attivita,risultato,achiev,achieviter,accomp,cambiamento]),
     \+ on(I1,[ist_soc,perloc,riportivo,attivita,risultato,achiev,achieviter,accomp,cambiamento]),
     \+ on(I,[attivita,affettivo,ist_soc,perloc,riportivo,stato,soggettivo,psych,emotivo,percettivo,modale]),
     \+ on(I1,[attivita,affettivo,ist_soc,perloc,riportivo,stato,soggettivo,psych,emotivo,percettivo,modale]),
      !.

checkmodals(nil,nil,nil,nil):-!.
checkmodals(nil,nil,G,Prog):-!.
checkmodals(E,will,NIL,Prog):-!.
checkmodals(will,Mod,G,Prog):-!.
checkmodals(E,Mod,G,Prog):-
      E\=nil, Mod=nil, Prog\=nil
       ;
      Mod\=nil, G\=nil, E=nil
       ;
      Mod\=nil, G\=nil
       ;
      E\=nil, Progr\=nil
       ;
      Mod\=nil, E\=nil,
      modaltypology(E,Mod),
      !.

checkmodals_deps(A,E,Mod,G,Prog,Hypo,Text):-
      checkmodals(E,Mod,G,Prog),
      !.
checkmodals_deps(A,E,Mod,G,Prog,Hypo,Text):-
      (E=nil,Mod\=nil;E\=nil,Mod=nil),
      (on(A-T-P2-D-Mod-Prog-Aux-Pro-I1-J-K-Gov-M-N,Text);
        on(A-T-P2-D-Mod-Prog-Aux-Pro-I1-J-K-Gov-M-N-Res,Text)
       ),
      (on(Gov-B-C-De-E-F-G-H-I,Text)
        ;
       on(Gov-T1-C1-D1-Mod1-Prog1-Aux1-Pro1-I2-J1-K1-L1-M1-N1,Text)
        ;
       on(Gov-T1-C1-D1-Mod1-Prog1-Aux1-Pro1-I2-J1-K1-L1-M1-N1-Re,Text)
       ),
      checkmodals(E,Mod1,G,Prog1),
      !.

checkmodals_deps(A,E,Mod,G,Prog,Hypo,Text):-
      (E=nil,Mod\=nil;E\=nil,Mod=nil),
      (on(Gov-T1-C-De-E-F-G-H-I,Hypo)
        ;
       on(Gov-T1-C1-D1-Mod1-Prog1-Aux1-Pro1-I2-J1-K1-L1-M1-N1,Hypo)
        ;
       on(Gov-T1-C1-D1-Mod1-Prog1-Aux1-Pro1-I2-J1-K1-L1-M1-N1-Re,Hypo)
       ),
       lightverbs(Gov),
       !.
        
modaltypology(E,Mod):-
    modal(E, Pred1, _, _, _,_),
    modal(Mod, Pred2, _, _, _,_),
    (modtyp(Pred1,Pred2);modtyp(Pred2,Pred1)),
     !.

modtyp(E,E):-!.
modtyp(may,can):-!.
modtyp(may,might):-!.
modtyp(may,ought):-!.
modtyp(may,shall):-!.
modtyp(may,should):-!.
modtyp(would,ought):-!.
modtyp(will,shall):-!.
%modtyp(will,should):-!.
modtyp(will,set_to):-!.
modtyp(will,going_to):-!.
modtyp(will,meant_to):-!.
modtyp(will,can):-!.
modtyp(will,would):-!.
modtyp(shall,would):-!.
modtyp(shall,must):-!.
%modtyp(shall,should):-!.
modtyp(should,must):-!.
modtyp(has_to,must):-!.
modtyp(had_to,must):-!.
modtyp(should,ought):-!.
modtyp(has_to,should):-!.
modtyp(had_to,should):-!.

check_danger_risk(Rte,First):-
    compute_heads(Rte,RteHeads),
    sort(RteHeads,RteHeads_Sort),
    compute_heads(First,FirstHeads),
    sort(FirstHeads,FirstHeads_Sort),
    match_dangerous(RteHeads_Sort,FirstHeads_Sort),
    !.

%temporal_consistency(RefExs, Rte,First):-!.
temporal_consistency(RefExs, Adjs, Rte,First):-
   temporal_consistp(RefExs, Adjs, Rte,First),
   !.

advts(Sem):-
  nonvar(Sem),
  advt(Sem),!.
advts(Sem):-
  nonvar(Sem),
   nt(Sem),!.
advts(Sem):-
  nonvar(Sem),
   recover_descs(Sem,Preds),
   on(Pred,Preds),Pred\=Sem,
   advts(Pred),!.

tsyn(year-_,annually).
tsyn(week-_,weekly).
tsyn(day-_,dayly).
tsyn(month-_,monthly).
tsyn(night-_,nightly).
tsyn(fortnight-_,fornightly).

match_temp_syn(Enn-Enn1,En-En1):-
   tsyn(Enn-Enn1,En1),
   !.
match_temp_syn(Enn-En1,En-En1):-
   !.
match_temp_syn(En-Enn1,En-En1):-
   !.

match_def_temp(En-Prep):-
   \+ integer(En),!.

match_def_temp(En-Prep):-
   integer(En),
   En<2005,!.

check_intersective([],[],Hyp,Tex):-!.
check_intersective([],Ents2,Hyp,Tex):-
        on(En-En1,Ents2),
        findall(En-En1,(advi(En);advi(En1)), Ens), 
        Ens=[],  
        match_def_temp(En-En1),  
        !.
check_intersective(Ents1,[],Hyp,Tex):-
         on(En-En1,Ents1),
         findall(En-En1,(advi(En);advi(En1)), Ens), 
         Ens=[],     
        !.
check_intersective(Ents1,Ents2,Hyp,Tex):-
        Ents1\=[], Ents2\=[],
        on(En-En1,Ents2),
        (
         on(En-En1,Ents1)
          ;
         on(Enn-Enn1,Ents1), 
         match_temp_syn(Enn-Enn1,En-En1)
          ;
         findall(En-En1,(advi(En);advi(En1)), Ens), 
         Ens=[]),      
        !.

check_subord_role_temp(Ent):-
     subord_role(Ent, Role), 
     (Role=temp_prec;Role=temp_seq;Role=temp_coinc),
        !.

check_subord_role_temp(Ent):-
     tipo_agg(temporale, Ent, Feats),
        !.

temporal_consistp(RefExs, Adjs, Rte,First):-
     (RefExs=[Id-Hyps,Tex|Res];
        RefExs=[Hyps,Tex|Res]),
           (Hyps=[Hyp];Hyp=Hyps),
      Ref=ref_ex(Ind,Ent,Tab,P,G,N,Cats,Func/Ruolo)/S-_,
      Ref1=ref_ex(Ind1,Ent1,Tab1,P1,G1,N1,Cats1,Func1/Ruol)/S1-_,
      findall(Ent-Ent1,
       (Ruolo=Ruol, Ruolo=Role,
        temp_rol(Role),
         (
           on(Ref,Hyp),
           on(Ref1,Tex))
            ), Ents),
            sort(Ents,En1),
      findall(Ent-Ent1,
         (temp_rol(Ruolo),
           on(Ref,Hyp),
           temp_rol(Ruol),
           on(Ref1,Tex)
            ), Ents2),
            sort(Ents2,En2),
      findall(Ent,
         (
           temp_rol(Ruolo),
           on(Ref,Hyp)), Ents3),
            sort(Ents3,En3),
      findall(Ent,
         (
           temp_rol(Ruolo),
           on(Ref,Tex)), Ents4),
            sort(Ents4,En4),
      findall(Ent,
         (on(Ref,Hyp), on(tempo,Cats), checksemcategories(Cats), \+ grammw(Ent,_)
           ), Ents5),
            sort(Ents5,En5),
      findall(Ent1,
         ( on(Ref1,Tex), on(tempo,Cats1), checksemcategories(Cats1), \+ grammw(Ent1,_)), Ents6),
      append(Ents5,Ents6,Ents7),
            sort(Ents7,En7),
        Adjs=[Adj1,Adjs1|_],
        extractheads22(Rte,Adj1,Heads),
        extractheads22(First,Adjs1,Heads1),
        findall(A,(on(_-A,Heads),on(A,En7)),Ass),
        sort(Ass,As),
     (
        En1=[],En3=[],
        (En7=[];Ents5=[];Ents6=[]),
        As=[]
        ;
        (En1\=[],
         on(A-A,En1)
          ;En3\=[]),
         (nogen_member(A,En3),nogen_member(A,Ents6)
         ;
        nogen_member(A,Ents3),nogen_member(A1,Ents4),
        main_head_match(A,A1,K))
        ;
       (
        nogen_member(A,Ents5),nogen_member(A,Ents6)
        ;
        nogen_member(A,Ents5),nogen_member(A,Ents4)
        ;
        nogen_member(A,Ents5),nogen_member(A1,Ents6),
        main_head_match(A,A1,K)
        ;
        Ents5\=[],
        on(A,En5), on(A,Ents6))
        ;
        Ents5=[],
        As=[]
        ;
        (As=[],nogen_member(A,En7),nogen_member(Ref,Tex)
         ;
        nogen_member(A,En5),
        nogen_member(A,As)
        ;
        nogen_member(A,En3),nogen_member(Ref,Tex),
         \+ on(Ent,Ents7),
        main_head_match(A,Ent,K)        
        )),
        (As=[]
         ;
         En3=[],En5=[]
         ;
         As\=[],
         (
         (nogen_member(A,En7);
          nogen_member(A,As)),
          nogen_member(P-A,Heads),
          nogen_member(P1-A1,Heads1),
          main_head_match(A,A1,K)
          ;
          nogen_member(A1,As),
          nogen_member(P-A1,Heads)),
        (nogen_member(P1-A1,Heads1);nogen_member(A1-P1,Heads1)),
        !,
        match_secondarypreds(P,P1,A,A1,Heads1,Heads)
       ),
      !.

checksemcategories(Cats):-
   \+ nogen_member(attivita,Cats), 
   \+ nogen_member(umano,Cats), 
   \+ nogen_member(pubblic,Cats), 
   \+ nogen_member(tecno,Cats), 
      !.


wrtsc(Sc):-
  write(Sc),write('  '),
  !.
match_secondarypreds(P,P1,A,A1,Heads1,Heads):-
        consistent_preds(P,P1,Sc), wrtsc(Sc)
         ;
         nogen_member(P1-Z1,Heads1),
         Z1\=A1,
         (
%          sloppy_match(P,Z1,K1)
%          ;
          main_head_match(P,Z1,K1), wrtsc(K1)
          ;
          nogen_member(P-Z,Heads),Z\=A,
          nogen_member(P1-Z1,Heads1),Z1\=A1,
          (sloppy_match(Z,Z1,K1), wrtsc(K1)
          ;
          main_head_match(Z,Z1,K1), wrtsc(K1))
          ),
      !.

same_govern(As,Adj,HeadsGov):-
       findall(Pre1-Head1,(on(Pre,As), 
       (
       (on(Sn-Pre-R1-Sem-Head1,Adj),
         on(Cl-Head1-R11-Pred-Id1,Adj);
         on(Cl-Head1-R1-Pre-Id1,Adj)),
          stringof(List,Cl),List=[c|_]), Pre1=Pre
          ;
       (on(Sn-Pre-R1-Sem-Pred,Adj),
        on(Sn1-Pred-R11-Pre-Sn,Adj),  
         on(Cl-Head1-R1-Pred-Sn1,Adj),
          stringof(List,Cl),List=[c|_]), Pre1=Pre
          ;
       (on(Sn-Pre-R1-Sem-Pred,Adj),
        on(Sn1-Pred-R11-Pre-Sn,Adj),  
         on(Sn1-Pred-R2-Se-Head1,Adj),
          stringof(List,Head1),List\=[s,n|_]), Pre1=Pre
          ;
       (on(Pre-R1-Sem-Pred,Adj), Pred\=_-_, prepos(Sem),
        on(Sn1-Pred-R11-Head1,Adj),Pre\=_-_,
          stringof(Lis,Sn1),Lis=[s,n|_],
          stringof(List,Head1),List\=[s,n|_]), Pre1=Pre
          ;
       (on(Sn-Pre-R1-Sem-Pred,Adj),
        on(Sn1-Pred-R11-Pre-Sn,Adj),  
        on(Sn1-Pred-R2-Se-Head1,Adj),prepos(Se)), Pre1=Pred
        ), Heads),
       sort(Heads,HeadsGov),
       !.

extractheads22(Rest,Adjs,HeadsGov):-
       findall(Head1, 
       (on(Cl-Pre1-R1-Head1-Id1,Rest), (\+ grammw(Head1,_);qmq(Head1));
        on(Cl-Head1-R1-Pre1-Id1,Rest), (\+ grammw(Head1,_);qmq(Head1));
        on(Id-Head1-R1-Id1,Rest), Id\=_-_, (\+ grammw(Head1,_);qmq(Head1));
        on(Head1-R1-Id1,Rest), Id1\=_-_, (\+ grammw(Head1,_);qmq(Head1))
        ), Heads),
      sort(Heads,Headss),
      same_govern(Headss,Adjs,HeadsGov),
      !.

compute_rte(QuestEval,[], RefExs,[]):-!.
compute_rte(QuestEval,[First-Name|AnswEval], RefExs,[FirstWeight-Name|BestCand]):-
    length(QuestEval,L),length(First,L1), 2=<L, 5<L1,
    comprte(QuestEval,First,FirstWeight,Head),
    eval_head_depend(QuestEval,First,Head,NewHead),
    eval_main_head(NewHead, RefExs),
    compute_rte(QuestEval,AnswEval,RefExs,BestCand),
    !.
compute_rte(QuestEval,[First-Name|AnswEval], RefExs,[FirstWeight-Name|BestCand]):-
    length(QuestEval,L),length(First,L1), L1=<8,
    comprte1(QuestEval,First,FirstWeight,Head),
    eval_head_depend(QuestEval,First,Head,NewHead),
    eval_main_head(NewHead, RefExs),
    compute_rte(QuestEval,AnswEval,RefExs,BestCand),
    !.
compute_rte(QuestEval,[First-Name|AnswEval], RefExs,[FirstWeight-Name|BestCand]):-
    length(QuestEval,L),length(First,L1), (2=L;1=L), 7=<L1,
    comprte2(QuestEval,First,FirstWeight,Head),
    eval_head_depend(QuestEval,First,Head,NewHead),
    eval_main_head(NewHead, RefExs),
    compute_rte(QuestEval,AnswEval,RefExs,BestCand),
    !.

not_argument_best_role(First,Pre):-
      findall(Ent, best_roles_induct(First,Pred2,Ent,Role2), Ents),
      (nonvar(Pre),
        \+ member(Pre,Ents);var(Pre), Ents=[]),!.

non_semantic_head(Ent):-
    Ent\=it,Ent\=there,Ent\=arb,!.
non_integer(Sem):-
       \+ integer(Sem),!.

match_cats_sem(Ent,En,[RefEx|RefExs]):-
    Ref=ref_ex(Ind,Ent,Tab,_,_,_,CatSem,Func/Ruolo)/S-_,
    Ref1=ref_ex(Ind1,En,Tab1,_,_,_,CatSem1,Func1/Ruolo1)/S1-_,
    on(Ref,RefEx),
    appiattisci(RefExs,RefExss),
    on(Ref1,RefExss),
       controlla_cats(CatSem,CatSem1),
      !.

/*
match_cats_sem(Ent,En,Refs):-
       up_wn(Ent,Cats,K),Cats\=[],
       up_wn(En,Cats1,T),Cats1\=[],
       controlla_cats(Cats,Cats1),
       length(Cats,L),
       length(Cats1,L),
       !.
*/

collect_all_mods([],[],[]):-
        !.
collect_all_mods([],Heads2,3000):-
        !.
collect_all_mods(Heads1,[],3000):-
        !.
collect_all_mods(Heads1,Heads2,Score):-
        evaluate_mods(Heads1,Heads2,Score),
        !.


evaluate_mods(Heads1,Heads2,Score):-
      compute_evaluate_penalties(Heads1,Heads2,Scores),
      compute_scores(Scores, Score),
       !.

compute_evaluate_penalties([],[],[]):-!.
compute_evaluate_penalties([],Heads,[-1]):-
       !.
compute_evaluate_penalties(Heads,[],[-1]):-
       !.
compute_evaluate_penalties([Pen|Heads1],[Pen|Heads2],Scores):-
      compute_evaluate_penalties(Heads1,Heads2,Scores),
       !.
compute_evaluate_penalties([Pen1|Heads1],[Pen2|Heads2],Scores):-
            Pen1\=Pen2,
      remove(Pen1,Heads2,Heads),
      append([Fun2],Heads,Heads3),
      compute_evaluate_penalties(Heads1,Heads3,Scores),
       !.
compute_evaluate_penalties([Pen1|Heads1],[Pen2|Heads2],Scores):-
            Pen1\=Pen2,
      remove(Pen2,Heads1,Heads),
      append([Fun1],Heads,Heads3),
      compute_evaluate_penalties(Heads3,Heads2,Scores),
       !.
compute_evaluate_penalties(Heads3,Heads2,[-1]):-
       !.

normalize_roles(tema_bound,theme_bound).
normalize_roles(tema_aff,theme_aff).
normalize_roles(tema_eff,theme_eff).
normalize_roles(tema_emot,theme_emot).
normalize_roles(tema_nonaff,theme_nonaff).
normalize_roles(locat,locative).
normalize_roles(theme,theme_nonaff).
normalize_roles(theme,theme_aff).
normalize_roles(theme,theme_unaff).
normalize_roles(theme,theme_emot).
normalize_roles(theme,theme_bound).
normalize_roles(theme,theme_eff).

/*
check_beborn(Rte,be):-
    findall(Prop,(
      on(_-Dgr,Rte),
      term_to_atom(xcomp-Prop,Fu),
      Dgr=..[be,Fu,born]),Props),Props=[],!.
check_beborn(Rte,Pred):-Pred\=be,!.
*/

checkargsborn(Props,Props1):-
    on(Arg,Props),
    on(Arg,Props1),
    remove(Arg,Props,Propss),
    remove(Arg,Props1,Propss1),
    on(Pred,Propss),
    on(Pred1,Propss1),
    main_head_match(Pred,Pred1,Sco),
    !.
    
    

check_nativebeborn(First,Rte,bear):-
    findall(Prop,on(Ind-bear-Role-Prop-Id, Rte),Props),
     Props\=[],
    (
     findall(Prop,on(Ind-native-Role-Prop-Id, First),Props1),
      Props1\=[]
      ;
     (Home=home;Home=hometown),
     findall(Prop,on(Ind-Home-Role-Prop-Id, First),Props1),
      Props1\=[]
      ),
      checkargsborn(Props,Props1),
      !.

check_nativebeborn(First,Rte,bear):-
    findall(Prop,on(Ind-bear-Role-Prop-Id, First),Props),
     Props\=[],
    (
     findall(Prop,on(Ind-bear-Role-Prop-Id, Rte),Props1),
      Props1\=[]
      ;
     findall(Prop,on(Ind-native-Role-Prop-Id, Rte),Props1),
      Props1\=[]
      ;
     (Home=home;Home=hometown),
     findall(Prop,on(Ind-Home-Role-Prop-Id, Rte),Props1),
      Props1\=[]
      ),
      checkargsborn(Props,Props1),
      !.

check_nativebeborn(First,Rte,bear):-
    findall(Prop,(on(Ind-Prop-specif-Born, First),
                      recover_descs(Born, Propp),on(born,Propp)),
                        Props),
     Props\=[],
    (
     findall(Prop,on(Ind-bear-Role-Prop-Id, Rte),Props1),
      Props1\=[]
      ;
     findall(Prop,on(Ind-native-Role-Prop-Id, Rte),Props1),
      Props1\=[]
      ;
     (Home=home;Home=hometown),
     findall(Prop,on(Ind-Home-Role-Prop-Id, Rte),Props1),
      Props1\=[]
      ),
      checkargsborn(Props,Props1),
      !.


not_antons(Pred1,Pred2):-
   findall(Code1,rgt(Pred1,Code1),Codes1),
   Codes1\=[],
   findall(Code2,rgt(Pred2,Code2),Codes2),
   Codes2\=[],
   intersection(Codes1,Codes2, Ints), Ints\=[],
   findall(A-B,(rtant(A,B),on(A,Ints),on(B,Ints)),Ants),
   Ants=[],   
   !.

not_antons(A,B):-
   findall(A-B,
         ( (atv(A);atv(B)),
           (atvs(A,Bs), on(B,Bs)
             ;
             atvs(B,As), on(A,As))),
       Ants), Ants=[],!.

not_antons(A,B):-
   findall(A-B,
         ( (sk(A,C1);sk(B,C2)),
           (ant(C1,_,C2,_)
             ;
             ant(C2,_,C1,_))),
       Ants), Ants=[],
       !.
not_antons(Pred1,Pred2):-
          s_h_c1(Pred1,Pred2, Score),
           allcheck_semantic_antonimy(Pred1,Pred2,Score1),
           s_h_c2(Pred1,Pred2, Score2),
           (not_double_doubts([Pred1],[Pred2]),Score3=0
                      ;Score3=1000),
                      !.
%           sommatoria([Score,Score1,Score2,Score3], Scors).           
           

check_location_consistency([],[]):-!.
check_location_consistency(Ents,Ents1):-
      Ents\=[], 
      on(Ent,Ents),
      on(Ent,Ents1),
      !.
check_location_consistency(Ents,Ents1):-
      Ents\=[], 
      on(Ent,Ents),
      on(Ent1,Ents1),
      (s_is_ax(Ent,Ent1);s_is_ax(Ent1,Ent)),
      !.
check_location_consistency(Ents,Ents1):-
      Ents\=[], 
      on(Ent,Ents),
      on(Ent1,Ents1),
      (
        (\+ integer(Ent); \+ integer(Ent1)),
         strict_head_match(Ent,Ent1,Sco)
         ;
        (integer(Ent); integer(Ent1)),
         Ent=Ent1),
      !.
check_locative_consist([],[],[],[],Rte,First):-!.
/*
check_locative_consist(Ents1,Ents2,Ents3,Ents4,Rte,First):-
      Ents1\=[],
      Ents2\=[],
     !.
*/
check_locative_consist(Ents,Ents2,Ents3,Ents4,Rte,First,RefExs):-
      Ents3\=[],Ents4\=[],
      (check_location_consistency(Ents3,Ents4),
       check_loc_cons(Ents3,Ents4,Rte,First)
       ;
       on(Ent,Ents3),on(En,Ents3),
       match_cats_sem(Ent,En,RefExs)
       ),
      !.

check_locative_consist(Ents,Ents2,Ents3,Ents4,Rte,First,RefExs):-
      Ents\=[],Ents2\=[],
      (check_location_consistency(Ents,Ents2),
       check_loc_cons(Ents,Ents2,Rte,First)
       ;
       on(Ent,Ents),on(En,Ents2),
       match_cats_sem(Ent,En,RefExs)
       ),
      !.

check_temp_consist([],[],[],[],Rte,First):-!.
check_temp_consist(Ents,Ents2,Ents3,Ents4,Rte,First):-
      Ents3\=[],Ents4\=[],
      check_location_consistency(Ents3,Ents4),
      check_temp_cons(Ents3,Ents4,Rte,First),
      !.
check_temp_consist(Ents,Ents2,Ents3,Ents4,Rte,First):-
      Ents\=[],Ents2\=[],
      check_location_consistency(Ents,Ents2),
      check_temp_cons(Ents,Ents2,Rte,First),
      !.
check_temp_consist(Ents,Ents2,Ents3,Ents4,Rte,First):-
      Ents=[];Ents3=[],
%       ;
%      Ents2\=[],Ents4\=[],
      !.

check_loc_cons(Ents3,Ents4,Rte,First):-
      (on(Ent-Ent1,Ents3),
       on(Ent-Ent2,Ents4)
      ;
       on(Ent,Ents3),
       on(Ent,Ents4)),
      (on(Ent-Role-Ind,Rte),
       nonvar(Ind),
       (loc_rol(Role);Role=goal),
       on(Ent-Role1-Ind1,First),
       nonvar(Ind1),
       (loc_rol(Role1);Role1=goal),
       on(Ind-Hea-Rol-En-Id, Rte),
       on(Ind1-Hea1-Rol1-En1-Id1,First),
       strict_head_match(Hea,Hea1,Sco)
       ;
       on(Id-Hea-Role-Ent-Ind, Rte),
       (loc_rol(Role);Role=goal),
       on(Id1-Hea1-Role1-Ent-Ind1,First),
       (loc_rol(Role1);Role1=goal),
       strict_head_match(Hea,Hea1,Sco)
       ;
       on(Ind-Hea-Rol-Ent, Rte),
       on(Id1-Hea1-Role1-Ent-Ind1,First)
       ),
       !.
check_temp_cons(Ents3,Ents4,Rte,First):-
      (on(Ent-Ent1,Ents3),
       on(Ent-Ent2,Ents4)
      ;
       on(Ent,Ents3),
       on(Ent,Ents4)),
      (on(Ent-Role-Ind,Rte),
       nonvar(Ind),
       (temp_rol(Role);Role=goal),
       on(Ent-Role1-Ind1,First),
       nonvar(Ind1),
       (temp_rol(Role1);Role1=goal),
       on(Ind-Hea-Rol-En-Id, Rte),
       on(Ind1-Hea1-Rol1-En1-Id1,First),
       strict_head_match(Hea,Hea1,Sco)
       ;
       on(Id-Hea-Role-Ent-Ind, Rte),
       (temp_rol(Role);Role=goal),
       on(Id1-Hea1-Role1-Ent-Ind1,First),
       (temp_rol(Role1);Role1=goal),
       strict_head_match(Hea,Hea1,Sco)
       ;
       on(Ind-Hea-Rol-Ent, Rte),
       on(Id1-Hea1-Role1-Ent-Ind1,First)
       ),
       !.
       
     

check_veridicity(Pred,Quest,First,Head1):-
      same_head_newp(Pred,Quest,First,Score1,Head1),
      Head1\=it,Head1\=there,
      findall(Score,(same_compl_newp(Pred,Quest,First,Score,Head),Head\=Head1),
          Scores),
      conflicting_main_role_heads(Pred,Quest,First,Score4,Head2),
      append([Score1],Scores,StatsAll),
      sommatoria(StatsAll, Score2,_),
       !,
      (Score2<1, Score4=0;
       number_heads(Quest,L), L=<3, Scores=[], % Score2<10, 
        Score4=0
        ;
        Scores\=[], Score4=0, 0<Score1
        ;
        Scores=[], Score4=0
/*
        ;
        Scores=[], 
        number_heads(Quest,L), 2<L, 
        number_heads(First,L1), 9=<L1
*/       ),
      !.

conflicting_main_role_heads(Pred,Quest,First,0,Head):-
      light_verbs(Pred),
%      checksyn_veridicity(Pred,Quest,First,Head),
      !.

conflicting_main_role_heads(Pred,Quest,First,Scor,Head):-
      findall(Score, confl_main_role_heads(Pred,Quest,First,Score,Head), Scores),
      findall(0, on(0,Scores), Zeros),
      length(Zeros,L),
      sommatoria(Scores, Score2,_),
      (L=0, Scores\=[], Score2=0, Scor=0;
       Score2=0, Scores\=[], Scor=0;
       0<L, Score2 < 1000*L, Scor=0;
       core_arguments(Quest,First), Scor=0;
        Scor=1000),
      !.
eval_score_heads_deps(L,Pred1,Score1,Score22,Scores,Scores1):-
      (Score1\=0,
        Score1<400;
       (Score22=0;Score22=[0])
          ;
       Score22\=0,Score22\=[0],
       (atomic(Score22),Score222=[Score22];list(Score22),Score222=Score22),
       append(Score222,Scores,Scorre),
       append(Scores1,Scorre,Scorr),
       compute_scores(Scorr, Score44),
       (5000<Score44, 
          (Score44\=40000;
             L=<3;
            (Pred1=be;Pred1=have))
        ;
        findall(0, on(0,Scorr), Zeros),
        length(Zeros,L1),
         (3=<L1;
          1=<L1,
             (L=<3;
           (Pred1=be;Pred1=have)))
        )
       ),
       !.
search_location_ent(First,Rtes,Pred1,Pred2):-
      complex_induct(First,Pred1,_,Head,ncmod-locative),
      complex_induct(Rtes,Pred2,_,Head1,ncmod-locative),
      main_head_match(Head,Head1,Sco),
      !.
search_location_ent(First,Rtes,Pred1,Pred2):-
      complex_induct(First,Pred1,_,Head,ncmod-locative),
      complex_induct(Rtes,Pred2,_,Head1,ncmod-locative),
      complex_induct(Rtes,Head1,_,Head2,ncmod-specif),
      main_head_match(Head,Head2,Sco),
      !.
search_location_ent(First,Rtes,Pred1,Pred2):-
      complex_induct(Rtes,Pred2,_,Head,ncmod-locative),
      complex_induct(First,Pred1,_,Head1,ncmod-locative),
      complex_induct(First,Head1,_,Head2,ncmod-specif),
      main_head_match(Head,Head2,Sco),
      !.

%general_consistency_check(RefExs, Adjs,Predss,Predss1):-!.
general_consistency_check(RefExs, Adjs,Predss,Predss1):-
     Adjs=[Adj1,Adjs1|_],
     writenl(_,'**********************'),
     locative_consistency(RefExs, Adjs,Predss,Predss1),
     evaluate_quantifiers(RefExs, Predss,Predss1),
     temporal_consistency(RefExs, Adjs,Predss,Predss1),
     conditionality_consistency(Predss,Predss1),
      !.

questosi:-
     nl,
     writenl(_,'**********************'),
     writenl(_,'GENERAL CONSISTENCY CHECKS PASSED'),
     writenl(_,'**********************'),
     nl,!.
     
validate_heads(Pred1,Pred):-
   atomic(Pred),atomic(Pred1),
   consistent_preds(Pred1,Pred,Score1),
   !.

validate_heads(Pred1,Pred):-
   light_verbs(Pred1);light_verbs(Pred),
   !.
loc_rol(locat).
loc_rol(locativo).
loc_rol(loc_in).
loc_rol(location).
loc_rol(loc_direct).
loc_rol(loc_origin).
%loc_rol(prop).

temp_rol(tempor).
temp_rol(temporal).
temp_rol(temporale).
%temp_rol(prop).

locative_consistency(RefExs, Adjs,Rte,First):-
           (RefExs=[Id-Hyps,Tex|Res];
           RefExs=[Hyps,Tex|Res]),
           (Hyps=[Hyp];Hyp=Hyps),
      Ref=ref_ex(Ind,Ent,Tab,P,G,N,Cats,Func/Ruolo)/S-_,
      Ref1=ref_ex(Ind1,Ent1,Tab1,P1,G1,N1,Cats1,Func1/Ruol)/S1-_,
      findall(Ent-Ent1,
       (Ruolo=Ruol, Ruolo=Role,
        loc_rol(Role),
         (
           on(Ref,Hyp),
           on(Ref1,Tex))
            ), Ents),
            sort(Ents,En1),
      findall(Ent-Ent1,
         (loc_rol(Ruolo),
           on(Ref,Rte),
           loc_rol(Ruol),
           on(Ref1,First)
            ), Ents2),
            sort(Ents2,En2),
      findall(Ent,
         (
           loc_rol(Ruolo),
           on(Ref,Hyp)), Ents3),
            sort(Ents3,En3),
      findall(Ent,
         (
           loc_rol(Ruolo),
           on(Ref,Tex)), Ents4),
            sort(Ents4,En4),
      findall(Ent,
         (on(Ref,Hyp), nogen_member(luogo,Cats), \+ nogen_member(attivita,Cats), \+ nogen_member(umano,Cats), \+ grammw(Ent,_)
           ), Ents5),
            sort(Ents5,En5),
      findall(Ent1,
         ( on(Ref1,Tex), nogen_member(luogo,Cats1), \+ nogen_member(attivita,Cats1),\+ nogen_member(umano,Cats1), \+ grammw(Ent1,_)), Ents6),
      append(Ents5,Ents6,Ents7),
            sort(Ents7,En7),
        Adjs=[Adj1,Adjs1|_],
        extractheads22(Rte,Adj1,Heads),
        extractheads22(First,Adjs1,Heads1),
        findall(A,(on(_-A,Heads),on(A,En7)),Ass),
        sort(Ass,As),
     (
        En1=[],En3=[],
        (En7=[];Ents5=[];Ents6=[]),
        As=[]
        ;
        (En1\=[],
         on(A-A,En1)
          ;En3\=[]),
         (nogen_member(A,En3),nogen_member(A,Ents6)
         ;
        nogen_member(A,Ents3),nogen_member(A1,Ents4),
        main_head_match(A,A1,K))
        ;
       (
        nogen_member(A,Ents5),nogen_member(A,Ents6)
        ;
        nogen_member(A,Ents5),nogen_member(A,Ents4)
        ;
        nogen_member(A,Ents5),nogen_member(A1,Ents6),
        main_head_match(A,A1,K)
        ;
        Ents5\=[],
        on(A,En5), on(A,Ents6))
        ;
        Ents5=[],
        As=[]
         ;
        nogen_member(A,En5),
        nogen_member(A,As)
        ;
        (As=[],nogen_member(A,En7),nogen_member(Ref,Tex)
        ;
        nogen_member(A,En3),nogen_member(Ref,Tex),
         \+ on(Ent,Ents7),
        main_head_match(A,Ent,K)        
        )),
      (As=[]
        ;
        As\=[],
         (
         (nogen_member(A,En7);
          nogen_member(A,As)),
          nogen_member(P-A,Heads),
          nogen_member(P1-A1,Heads1),
          main_head_match(A,A1,K)
          ;
          nogen_member(A1,As),
          nogen_member(P-A1,Heads)),
        (nogen_member(P1-A1,Heads1);nogen_member(A1-P1,Heads1)),
        !,
        match_secondarypreds(P,P1,A,A1,Heads1,Heads)
       ),
      !.

intersectivity_consistency(RefExs,Rte,Quest):-!.
intersectivity_consistency(RefExs,Rte,Quest):-
      findall(Mod-Head,(
             on(Head-Ro-Ind,Rte), Ro\=det, Ro\=form,
             on(Mod-R-Ind,Rte), R\=det, R\=form, 
             atomic(Mod), Mod\=Head,
                  \+ grammw(Mod,_)), Mods),
      findall(Mod-Head,(
             on(Head-Ro-Ind,Quest),Ro\=det, Ro\=form,
             on(Mod-R-Ind,Quest), R\=det, R\=form, 
             atomic(Mod), Mod\=Head,
                  \+ grammw(Mod,_)), Mods1),
       append(Mods1,[],AllHs),
       sort(AllHs,AllHss),
        (Mods=[],Mods1=[]
          ;
         Mods\=[],Mods1\=[],
         findall(Pred-M,(
                        on(Pred-M,Mods),
                        on(Pred-M,Mods1)), AllMod
                         ),
         sort(AllMod,AllMods),
         length(AllMods,L),
         length(Mods,L1),
         (L1=L
          ;
          L1\=L,
          findall(Mod-R,(
                         on(Mod-R-Ind,Rte), atomic(Mod),\+ grammw(Mod,_),
                         \+ on(Mod-R,AllMods)), Restt),
          Restt\=[],
          sort(Restt,Rest),
          evaluate_intersects(Rest,Rte,AllHss,RefExs))
          ;
          Mods=[],Mods1\=[],
          evaluate_mintersects(AllHss,Quest,RefExs)
          ),
      !.


evaluate_mintersects(A,Quest,RefExs):-!.
evaluate_mintersects([Head-I|Rest],Quest,RefExs):-
      Head=I,
      evaluate_mintersects(Rest,Quest,RefExs),
      !.
evaluate_mintersects([Head1-_|Rest],Quest,RefExs):-
      (fct(Head1);qm(Head1)),
      !,
      evaluate_mintersects(Rest,Quest,RefExs),
      !.
evaluate_mintersects([En1-En|Rest],Rte,RefEx):-
        findall(En1,
              (advi(En1);
               advt(En1);
               atya(En1,_);
               hrv(En1,0)), Ens), 
        Ens=[],  
      evaluate_mintersects(Rest,Rte,RefEx),
      !.

evaluate_intersects([],Rte,Mods,RefEx):-!.
evaluate_intersects([Head1-I|Rest],Rte,Mods,RefEx):-
      on(Head1-R-Ind,Rte),
      evaluate_intersects(Rest,Rte,Mods,RefEx),
      !.
evaluate_intersects([Head1-_|Rest],Rte,Mods,RefEx):-
      (fct(Head1);qm(Head1)),
      !,
      evaluate_intersects(Rest,Rte,Mods,RefEx),
      !.
evaluate_intersects([Head1-_|Rest],Rte,Mods,RefEx):-
      on(Head2-_,Mods),
      valid_heads(Head2,Head1),
      strict_head_match(Head1,Head2,Sco),
      !,
      evaluate_intersects(Rest,Rte,Mods,RefEx),
      !.
evaluate_intersects([Head1-_|Rest],Rte,Mods,RefEx):-
      checkrefexs_onfs([Head1],RefEx),
      !,
      evaluate_intersects(Rest,Rte,Mods,RefEx),
      !.
evaluate_intersects([Head1-_|Rest],Rte,Mods,RefEx):-
      findall(Code, sk(Head1,Code), Codes),
      !,
      (Codes=[]
      ;
       Codes\=[],
       match_sks_per(Codes)
       ;
       on(Co,Codes),
       stringof([F|_],Co),F\=3,F\=1),
      evaluate_intersects(Rest,Rte,Mods,RefEx),
      !.
evaluate_intersects([En-En1|Rest],Rte,Mods,RefEx):-
        findall(En-En1,
              (advi(En);advi(En1);
               advt(En);advt(En1);
               atya(En,_);atya(En1,_);
               atyn(En,_);atyn(En1,_)), Ens), 
        Ens=[],  
      evaluate_intersects(Rest,Rte,Mods,RefEx),
      !.

checkrefexs_onfs([],RefEx):-!.
checkrefexs_onfs([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
          nogen_member(Ent-T-Fea/_, Texs),
          Fea=[P,C,N,Cats,Ro],
          nogen_member(Ent-T1-Fea1/_, Hyp),
          Fea1=[P,_,N,Cats,Ro1],
          !.
checkrefexs_onfs([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
          nogen_member(Ent-T-Fea/_, Texs),
          Fea=[P,C,N,Cats,Ro],
          nogen_member(Ent-T1-Fea1/_, Hyp),
          Fea1=[P,_,N,Cats1,Ro1],
          !.
checkrefexs_onfs([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
          nogen_member(Ent1-T-Fea/_, Texs),
          Fea=[P,C,N,Cats,Ro],
          nogen_member(Ent-T1-Fea1/_, Hyp),
          main_head_match(Ent,Ent1,Sco), Sco=<100,
          !.
checkrefexs_onfs([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
          nogen_member(Ent-T-Fea/_, Texs),
          Fea=[P,C,N,Cats,Ro],
          nogen_member(Ent1-T1-Fea1/_, Hyp),
          main_head_match(Ent,Ent1,Sco), Sco=<100,
          !.

checkrefexs_onfs([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          nogen_member(Ent-T-Fea/_, Hyp),
          Fea=[P,C,N,Cats,Ro],
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
          nogen_member(Ent1-T1-Fea1/_, Texs),
          main_head_match(Ent,Ent1,Sco), Sco=<100,
          !.

match_sks_per(Codes):-
       findall(Co,(
            on(Co,Codes),
             (stringof([F|_],Co),F=1
                ;
                per(Co,N,Wn,P))),Cos),
                Cos=[],
       !.     


/*
conditionality_consistency(Rte,Quest):-
      findall(Mod,(
             on(Id-Pre-Ro-Head-Ind,Rte),
             on(Mod-R-Ind,Rte), atomic(Mod)), Mods),
      findall(Mod,(
             on(Id-Pre-Ro-Head-Ind,Quest),
             on(Mod-R-Ind,Quest), atomic(Mod)), Mods1),
        findall(Pol,(
             on(Pred,Mods),
             hrv(Pred,Pol)),Pols),
        findall(Pol,(
             on(Pred,Mods1),
             hrv(Pred,Pol)),Pols1),
        findall(Pol,(
             on(Pred,Mods1),
             istv(Pred)),Pols2),
        findall(Pol,(
             on(Pred,Mods),
             istv(Pred)),Pols3),
        (Pols2=[],Pols3=[]
          ;
         Pols2\=[],Pols3\=[],
         on(Pred-M,Pols2),
         on(Pred-M,Pols3)
        (Pols=[],
         Pols1=[]
          ;
         Pols1\=[],
         \+ on(0,Pols1)
          ;
         Pols\=[],
         \+ on(0,Pols)
          ;
         Pols\=[],Pols1\=[],
         on(Pred,Pols),
         on(Pred,Pols1)
         )
*/

checkadverbs(Mod,Mod1):-
     stringof(List,Mod),
     reverse(List,[Y,L|Adj]),
     Y=y,L=l, 
     reverse(Adj,Mod11),
     stringof(Mod11,Mod1),
     !.
     
conditionality_consistency(Rte,Quest):-
    newcheckindamissible(Rte,Quest,Inas), 
    !,
    Inas=[],
%    !.
%   conditionality_consistency(Rte,Quest):-
      findall(Mod-Head,(
             on(Id-Pre-Ro-Head-Ind,Rte),
             (on(Mod-R-Ind,Rte);
              on(Mod-R-Ind,Rte);
              on(Mo-R-Id,Rte),
              on(Mo-R-Id1,Rte), Id1\=Id,
              on(Mod-Rol-Id1,Rte)
              ), 
             atomic(Mod), 
             (             
             hrvd(Mod,Pol), Pol=0
             ;
              checkadverbs(Mod,Mod1),
                (hrvd(Mod1,Pol), Pol=0
                 ;
                 istv(Mod1))
              ;
              istv(Mod))
              ), Mods),
      findall(Mod-Head,(
             on(Id-Pre-Ro-Head-Ind,Quest),
             (on(Mod-R-Ind,Quest);
              on(Mod-R-Ind,Quest);
              on(Mo-R-Id,Quest),
              on(Mo-R-Id1,Quest), Id1\=Id,
              on(Mod-Rol-Id1,Quest)
              ), 
              atomic(Mod), 
             (hrvd(Mod,Pol), Pol=0
              ;
              checkadverbs(Mod,Mod1),
                (hrvd(Mod1,Pol), Pol=0
                 ;
                 istv(Mod1))
              ;
              istv(Mod))
             ), Mods1),
      (
        Mods=[],Mods1=[]
        ;
        findall(Pol,(
             on(Pred-_,Mods1),
             (istv(Pred), Pol=0
              ;
              checkadverbs(Pred,Mod1),
             (hrvd(Mod1,Pol), Pol=0
              ;
             istv(Mod1), Pol=0))
             ),Pols2),
        findall(Pol,(
             on(Pred-_,Mods),
             (istv(Pred), Pol=0
              ;
              checkadverbs(Pred,Mod1),
             (hrvd(Mod1,Pol), Pol=0
              ;
             istv(Mod1), Pol=0))
              ),Pols3),
        (Pols2=[],Pols3=[]
          ;
         Pols2\=[],Pols3\=[],
         on(Pred-M,Pols2),
         on(Pred-M,Pols3)
         ;
         Mods1\=[],
          on(Pred-M,Mods1),
          findall(Head,(
             on(Id-Pre-Ro-Head-Ind,Rte)
                            ), Modss),
          \+ on(M,Modss)
          ;
         Mods\=[],
          on(Pred-M,Mods),
          findall(Head,(
             on(Id-Pre-Ro-Head-Ind,Quest)
                           ), Modss1),
          \+ on(M,Modss1)
          ;
         Mods\=[],Mods1\=[],
         on(Pred-_,Mods),
         on(Pred-_,Mods1)
         )
         ),
      !.

/*
conditionality_consistency(Rte,Quest):-
      Quest=[First|_],
      findall(Pred,
       (on(_-DGR,Rte), 
         term_to_atom(Fun-Role,Fu),
        DGR=..[Pred,Fu|_],
          (Fun=adj;Fun=cmod),
          (Role=subord;Role=mod);
        on(_-DGR1,First), 
         term_to_atom(Fun-Role,Fu),
        DGR1=..[Pred,Fu|_], 
          (Fun=adj;Fun=cmod),
          (Role=subord;Role=mod)), Ents),
      (Ents\=[],
        findall(Ent-Role,
          ( on(Ent,Ents), subord_role(Ent, Role), 
               (Role=advers;Role=cond)), Roles), 
          (Roles=[]; 
           Roles\=[], 
           (on(Dis-cond,Roles),
            check_same_pred(Dis,Rte,First)
            ;
             on(Dis-advers,Roles)))
       ;
       Ents=[]),
      findall(Sem,
       (on(_-DGR,Rte), 
         term_to_atom(Fun-Role,Fu),
        DGR=..[Pred,Fu, Sem|_], 
          (Fun=adj;Fun=cmod),
          (Role=subord;Role=mod);
        on(_-DGR1,First), 
         term_to_atom(Fun-Role,Fu),
        DGR1=..[Pred,Fu, Sem|_], 
          (Fun=adj;Fun=cmod),
          (Role=subord;Role=mod)), Ents1),
      (Ents1\=[], 
        findall(Ent1-Role,
          (on(Ent1,Ents1), subord_role(Ent1, Role), 
              (Role=advers;Role=cond)), Roles1), 
          (Roles1=[]; 
           Roles1\=[], 
           (on(Dis-cond,Roles1),
            check_same_pred(Dis,Rte,First)
            ;
             on(Dis-advers,Roles1)))
       ;
       Ents1=[]),
       !.
*/


semantic_head_consistency([],[], Score):-!.
semantic_head_consistency([],First, Score):-!.
semantic_head_consistency(First,[], Score):-!.
semantic_head_consistency(Rte,First, Scors):-
       findall(Score,
         (on(Pred1,Rte),
           on(Pred2,First),
           s_h_c1(Pred1,Pred2, Score)),Scores1),

       findall(Score,
         (on(Pred1,Rte),
           on(Pred2,First),
           allcheck_semantic_antonimy(Pred1,Pred2,Score)),
           Scors3),
/*       length(Rte,R1),
       length(First,R2), R3 is R2 - R1,
       (R3=0,Scors3=Scores3;
        R3=<3,Scors3=Scores3;
        3<R3,Scors3=[0];
        (on(be,Rte);on(be,First)), 
          3<R3,Scors3=[0]),
*/
       findall(Score,
         (on(Pred1,Rte),
           on(Pred2,First),
           s_h_c2(Pred1,Pred2, Score)),Scores2),
       length(Scores2,L),
       (L=0,Scors2=Scores2;
        0<L,
        not_double_doubts(Rte,First),Scors2=[0]
         ;Scors2=Scores2),
       append(Scores1,Scors2,Scoress),
       append(Scoress,Scors3,Scores),
       appiattisci(Scores,Scorr),
        sort(Scorr,Scor),
        sommatoria(Scor, Scors).

allcheck_semantic_antonimy(Pred1,Pred2,1000):-
     all_check_semantic_antonimy(Pred1,Pred2),
     !.
allcheck_semantic_antonimy(Pred,Pred,[]):-
     !.


all_check_semantic_antonimy(Pred1,Pred2):-
      atvs(Pred1,Preds), on(Pred1,Preds);
      atvs(Pred2,Preds), on(Pred1,Preds),!.
all_check_semantic_antonimy(Pred1,Pred2):-
      atyn(Pred1,Preds), on(Pred1,Preds);
      atyn(Pred2,Preds), on(Pred1,Preds),!.
all_check_semantic_antonimy(Pred1,Pred2):-
      atya(Pred1,Preds), on(Pred1,Preds);
      atya(Pred2,Preds), on(Pred1,Preds),!.
all_check_semantic_antonimy(Pred1,Pred2):-
      neg_check_semantic_antonimy(Pred1,Pred2,Pols),
      Pols\=[],!.

not_double_doubts(Rte,First):-
      doubt_verbs(Preds),
      on(Pred1,Rte),
      on(Pred1,Preds),
      on(Pred2,First),
      on(Pred2,Preds),!.
not_double_doubts(Rte,First):-
      try_verbs(Preds),
      on(Pred1,Rte),
      on(Pred1,Preds),
      on(Pred2,First),
      on(Pred2,Preds),!.

s_h_c1(Pred1,Pred2, []):-
       findall( Pred1-Pred2 ,
           ants(Pred1, Pred2) ,
                          Ents ),
        Ents=[],!.
s_h_c1(Rte,First, 1000):-!.
s_h_c2(Pred1,Pred2, []):-
       findall( Pred1 ,
          (doubt_verbs(Preds),
            (on(Pred1,Preds);
             on(Pred2,Preds))
             ),
             Ents ),
        Ents=[],!.
s_h_c2(Pred1,Pred2, []):-
       findall( Pred1 ,
          (try_verbs(Preds),
            (on(Pred1,Preds);
             on(Pred2,Preds))
             ),
             Ents ),
        Ents=[],!.
s_h_c2(Rte,First, 1000):-!.


semantic_consistency(Rte,First, Score):-
      findall(Pred1-Pred2, 
             (best_role_induct(Rte,Pred1,Ent,Role),
             best_roles_induct(First,Pred2,Ent,Role2),
             Ent\=it,Ent\=there
       ), Preds),
      (Preds\=[],
       on(Pred1-Pred2,Preds),
       findall(Score1,
            (check_semantic_antonimy(Pred1,Pred2),
               check_synset(Pred1,Pred2,Score1)), Ents), 
        Ents\=[],
        Score=true
        ;
        length(Rte,L), L=<3,
        Pred1=be,
        Score=true
        ;
        Score=false),!.

/*
compute_score_module([Rte,[]], RefExs, Score):-!.

compute_score_module([Rte,First], RefExs, true-0.95):-
     clean_refexs(RefExs, NRefExs),
     compute_scoremod0(Rte,First,Weight-First,NRefExs),
     Score=true-Weight,
    !.

compute_score_module([Rte,First], RefExs, true-0.91):-
     clean_refexs(RefExs, NRefExs),
     compute_scoremod2(Rte,First,Weight-First,NRefExs),
     Score=true-Weight,
    !.

compute_score_module([Rte,First], RefExs, true-0.83):-
     clean_refexs(RefExs, NRefExs),
     compute_scoremod3(Rte,First,Weight-First,NRefExs),
     Score=true-Weight,
    !.

compute_score_module([Rte,First], RefExs, true-0.87):-
     clean_refexs(RefExs, NRefExs),
     compute_scoremod22(Rte,First,Weight-First,NRefExs),
     Score=true-Weight,
    !.

compute_score_module([Rte,First], RefExs, true-0.78):-
     clean_refexs(RefExs, NRefExs),
     compute_scoremod5(Rte,First,Weight-First,NRefExs),
     Score=true-Weight,
    !.

compute_score_module([Rte,First], RefExs, true-0.73):-
    length(Rte,L),length(First,L1), 
     2=<L,4=<L1,
     clean_refexs(RefExs, NRefExs),
    test_compute_score(Rte,First),
    compute_scoremod(Rte,First, Scores, Score, Modal),
    Scores=[A,B],
    Modal=[],
    (A\=[0],A=[Sco], (Sco<1000; 2000<Sco)
      ;
    Score=true-Sc, Sc=<130),
    B=0,
    verify_consistent_preds(Rte,First, NRefExs,Roles),
    findall(Ro,(on(Ro,Roles),nonvar(Ro),(Ro=_-specif;Ro=mod)),Rol),Rol=[],
    !.


compute_score_module([Rte,First], RefExs, true-0.68):-
    length(Rte,L),length(First,L1), 
    (2=L;L1=<3),
     clean_refexs(RefExs, NRefExs),
    test_compute_score(Rte,First),
    compute_scoremod(Rte,First, Scores, Score, Modal),
    Scores=[A,B],
    Score\=false,
    (A\=[0],A=[Sco], (Sco<900; 1500<Sco)
      ;
    Score=true-Sc, Sc=<100),
    B=0,
    verify_consistent_preds(Rte,First, NRefExs,Roles),
    !.
*/
    
absent_non_figures(RteHeads_Sort, FirstHeads_Sort, Figs1, Figs2):-
    find_figures(RteHeads_Sort, Figs1),
    find_figures(FirstHeads_Sort, Figs2),
    !.
select_numbers(Rte, Pred, Figs, Numbso):-
    findall(Dep, extract_head_predattr(Pred,Rte, Figs, Dep),Numbs),
    appiattisci(Numbs,Numb),
    sort(Numb,Numbso).

compare_length(L1,L2,L3,Ints,100):-
    L3 = L2;  L3 = L1.
compare_length(L1,L2,L3,Ints,50):-
    L4 is L1 - L3,
    L4 = L2.
compare_length(L1,L2,L3,Ints,50):-
    L4 is L2 - L3,
    L4 = L1.

evaluate_perc_numbs(Numbs1, Numbs2, L2, L):-
    append(Numbs1, Numbs2, Numbs),
    elimina_doppi(Numbs,ElNumb),
    length(Numbs, L1),
    length(ElNumb, L),
    L3 is L1 - L,
    L3 = L2,
    !.

evaluate_numbers(Numbs1, Numbs2, Ints, Perc):-
   length(Numbs1,L1), 1=<L1,
   length(Numbs2,L2), 1=<L2,
   length(Ints,L3), 
   evaluate_perc_numbs(Numbs1, Numbs2, L3, L),
   Perc is L3 / L,
   !.

check_numbers(Rte, First, [],Figs2,Pred1, Pred2):-!.
check_numbers(Rte, First, Figs2,[],Pred1, Pred2):-!.
check_numbers(Rte, First, Figs1,Figs2,Pred1, Pred2):-
   Figs1\=[],Figs2\=[],
   select_numbers(Rte, Pred1, Figs1, Numbs1),
   select_numbers(First, Pred2, Figs2, Numbs2),
   (intersection(Numbs1, Numbs2, Ints), Ints\=[],
     evaluate_numbers(Numbs1, Numbs2, Ints, Perc)
      ;
     on(Fig,Figs1),on(Fig,Figs2)),
   !.   
find_figures([], []):-!.
find_figures([[]|F], Figs):-
    find_figures(F, Figs),
    !.
find_figures([W|RteHeads], [W|Figs]):-
    atomic(W),
    name(W,[W1|Name]),
    numb_char(W1),
    find_figures(RteHeads, Figs),
    !.
find_figures([W|RteHeads], [W|Figs]):-
      integer(W),
    find_figures(RteHeads, Figs),
    !.
find_figures([W|RteHeads], [W|Figs]):-
    recover_descs(W,Preds),
    on(W1,Preds), 
    atomic(W1),
    (integer(W1);
      name(W,Name),
      on(W1,Name),
      numb_char(W1)),
    find_figures(RteHeads, Figs),
    !.
find_figures([W|RteHeads], Figs):-
    find_figures(RteHeads, Figs),
    !.

pattern_match_attr(W, Pred, Pred1):-
      qm(W),
      Pred=Pred1,!.

pattern_match_attr(W, Pred, Pred1):-
      \+ qm(W),
      semantic_head_consistency([Pred],[Pred1], Scors), !.        

pattern_match_attr(W, Pred, Pred1):-
      (\+ qm(W);W=number),
      constr_main_head_roles(Pred,Pred1), !.        

non_creation_pred(Pred):-
     findall(Pre, (
          cretv(Cv), sysv(Cv-Pre)), Pres),
     appiattisci(Pres,Preds),
     \+ on(Pred,Preds),
      !.

non_creation_pred(Pred):-
     findall(Pre, (
          discretv(Cv), sysv(Cv-Pre)
          ), Pres),
     appiattisci(Pres,Preds),
     on(Pred,Preds),
      !.
non_creation_pred(Pred):-
      ngt(Pred),
      !.

yescreation_pred(Pred):-
     findall(Pre, (
          cretv(Cv), sysv(Cv-Pre)), Pres),
     appiattisci(Pres,Preds),
     on(Pred,Preds),
      !.

cretv(constitute).
cretv(establish).
cretv(launch).
cretv(plant).
cretv(base).
cretv(build).
cretv(cause).
cretv(compose).
cretv(construct).
cretv(create).
cretv(design).
cretv(devise).
cretv(discover).
cretv(begin).
discretv(finish).
discretv(stop).
discretv(destroy).


verify_be_propos(Hyps,Texs, RefExs, [Texts,Hypos]):-
      Texts=[RteArg,Predss],
      on(Cl-B-R-Head-Id,RteArg),
      lightverbs(B),
      j(Head),
      disaccess_wsj(Head,Best),
      Best=jj,
%      !,
      findall(Pol,hrv(Head,Pol),Pols),Pols\=[],
      Hypos=[RteAdj,Predss1],
      append(RteArg,RteAdj,Hypo),
      append(Predss,Predss1,Text),
      (nogen_member(Cl0-Pr-Ro-Head2-Id0,Text);
      nogen_member(I-Head2-Role-Id0,Text), I\=_-_),
      findall(Pol,hrv(Head2,Pol),Pols1),Pols1\=[],
       \+ match_anton(Pols,Pols1),
      elimina(Cl-B-R-Head-Id,RteArg,Rest),
      (Rest=[];
       Rest\=[],
       nogen_member(Cl1-Pred-R1-Head1-Id1,Rest),
       findall(Pol,hrv(Pred,Pol),Pols3),Pols3\=[],
       (nogen_member(Cl2-Pr1-Ro1-Head11-Id0,Text);
        nogen_member(I1-Head11-Role1-Id0,Text);
        nogen_member(I1-Head11-Role1-(Gov-Id0),Text);
        nogen_member(I1-Gov-Role1-Head11,Text)),
        strict_head_match(Head11,Head1,Sco),
        findall(Pol,hrv(Head1,Pol),Pols2),Pols2\=[],
         \+ match_anton(Pols3,Pols2)
       ),
      !.

verify_be_propos(Hyps,Texs, RefExs, [Texts,Hypos]):-
      Texts=[RteArg,Predss],
      extractfirstpredhead(RteArg,Heads),
      Hypos=[RteAdj,Predss1],
      append(RteArg,RteAdj,Hypo),
      append(Predss,Predss1,Text),
      matchall_pred(Text,Heads,Texs),
      findall(B1,on(Cl1-B1-R1-Head1-Id1,Predss),Heas),
      sort(Heas,Heass),
%      !,
      extract_headtext_hypo(Text,RteArg,Hyps,Texs,Rest),
      extractheads1(Rest,Headss),
      append(Headss,Heads,Headd),
      extractheads2(Text,Texs,Heads1),
      append(Heass,Heads1,Headd1),
      sort(Headd,H1),
      sort(Headd1,H2),
      matchextractedheads(H1, H2,Match,NoMatch),
      length(Match,L),
%      length(RteArg,L1),L1=<2, L=2,
      (1=<L;
      length(RteArg,L1),L1=<2, L=2
      ;
      length(Rest,L2),L2=<3,L=1),
      head_relation_match(Match,Rest,Id0,Text,Texs),
      checkheadsinters(NoMatch),
               sort(Hypo,RteA),
               sort(Text,Tex),
      newcheckindamissible(RteA,Tex,Inas1), Inas1=[],
      extractheads3(RefExs, Hypos,Texts,Hyps,Texs),
      !.

verify_be_propos(Hyps,Texs, RefExs, [Texts,Hypos]):-
      Texts=[RteArg,Predss],
      extractfirstpredhead(RteArg,Heads),
      Hypos=[RteAdj,Predss1],
      matchall_adjs(RteAdj,Heads,Head-Head2-Role-Pred-I),
      append(RteArg,RteAdj,Hypo),
      append(Predss,Predss1,Text),
      searchmatch(Text,Texs,Head2-Role-Pred-I),
      findall(B1,on(Cl1-B1-R1-Head1-Id1,Predss),Heas),
      sort(Heas,Heass),
%      !,
      extract_headtext_hypo(Text,RteArg,Hyps,Texs,Rest),
      extractheads1(Rest,Headss),
      append(Headss,Heads,Headd),
      extractheads2(Text,Texs,Heads1),
      append(Heass,Heads1,Headd1),
      sort(Headd,H1),
      sort(Headd1,H2),
      (matchextractedheads(H1, H2,Match,NoMatch),
      !
      ;
      matchextractedheads(H1, H2,Match,NoMatch),      
      head_relation_match(Match,Rest,Id0,Text,Texs)
      ),
      length(Match,L), 
%      length(RteArg,L1),L1=<2, L=2,
      (1=<L;
      length(RteArg,L1),L1=<2, L=1
      ;
      length(Rest,L2),L2=<3,L=1),
      checkheadsinters(NoMatch),
               sort(Hypo,RteA),
               sort(Text,Tex),
      newcheckindamissible(RteA,Tex,Inas1), Inas1=[],
      extractheads3(RefExs, Hypos,Texts,Hyps,Texs),
      !.

verify_be_propos(Hyps,Texs, RefExs, [Texts,Hypos]):-
      Texts=[RteArg,Predss],
      Hypos=[RteAdj,Predss1],
      append(RteArg,RteAdj,Hypo),
      append(Predss,Predss1,Text),
      extractfirstpredhead(RteArg,Heads),
      extract_head_text_hypo(Text,RteArg,Head,Head1,Head2,Rest),
      length(RteArg,L1),
%      (L1=<2,
%       Head\=Head1, 
%       (Head1\=Head2;Head1=Head2),
%        head_relation_match(Match,Id0,Text,Texs)
%       ;
       2=<L1,
      (on(Cl-B-R11-Head11-Id11,Rest);
       on(Cl-B-R11-Head11-(G-Id11),Rest)),
      (Head11\=Head;Head11\=Head1),
      on(Head3-R3-Id3,Text),
        checknegdependent(Head3,Predss),
      (appropriatehead(R11,Head11);
      appropriatehead(R3,Head3)),
      strict_head_match(Head11,Head3,Sco),
      !.

verify_be_propos(Hyps,Texs, RefExs, [Hypos,Texts]):-
      Hypos=[RteArg,Predss],
     (findall(B,(on(Cl-B-R-Head-Id,RteArg),
                      light_verbs(B)),L), L=[]
                      ;
       findall(B,(on(Cl-B-R-Head-Id,RteArg),
                     stringof(List,Cl), List=[c|_],
                      \+ light_verbs(B)),L), L\=[]
                      ;
       findall(B,(on(Cl-B-R-Head-Id,RteArg),
                      light_verbs(B)),L), L\=[],
       findall(B,(on(Cl-B-R-Head-Id,RteArg),
                     stringof(List,Cl), List=[c|_],
                      \+ light_verbs(B)),L1), L1\=[]
                      ),
      !.

extract_head_text_hypo(Text,RteArg,Head,Head1,Head2,Rest):-
      on(HeadT-R0-Id0,Text),
      remove(Cl-B-R-Head-Id,RteArg,Rest),
      main_head_match(Head,HeadT,K),
      (Rest\=[],
       (on(Cl-B-R1-Head1-Id1,Rest);
        on(Cl-B-R1-Head1-(G-Id1),Rest)),
        on(Head2-R2-Id2,Text),
        (appropriatehead(R1,Head1);
        appropriatehead(R2,Head2)),
        strict_head_match(Head1,Head2,Sco)
        ;
        Rest=[]),
      !.

extract_headtext_hypo(Text,RteArg,Hyps,Texs,Rest):-
      remove(Cl-B-R-Head-Id,RteArg,Rest),
      R\=prop,
      (Rest\=[],
       (on(Cl-B-_/R1-Head1-Id1,Rest);
       on(Cl-B-_/R1-Head1-(G-Id1),Rest)),
       (on(Id0-_/R2-Head2-Id2,Text);
        on(Id0-R2-Head2-Id2,Text);
        on(Head2-_/R2-Id2,Texs);
        on(Head2-R2-Id2,Texs)),
        (appropriatehead(R1,Head1);
        appropriatehead(R2,Head2)),
        strict_head_match(Head1,Head2,Sco)
        ;
        Rest=[]),
      !.
extract_headtext_hypo(Text,RteArg,Hyps,Texs,Rest):-
      remove(Cl-B-R-Head-Id,RteArg,Rest),
      (Rest\=[],
       R\=prop,
       (on(Cl-B-_/R1-Head1-Id1,Rest);
       on(Cl-B-R1-Head1-Id1,Rest)),
        (on(Id0-_/R2-Head2-Id2,Text);
        on(Id0-R2-Head2-Id2,Text);
        on(Head2-_/R2-Id2,Texs);
        on(Head2-R2-Id2,Texs)),
        (appropriatehead(R1,Head1);
        appropriatehead(R2,Head2)),
        translaterole(R2,Headds),
        on(Headd,Headds),
        check_main_head_roles(Head1,Headd)
              ;
        Rest=[]),
      !.

translaterole(comitativo,[participant,share]).
translaterole(result,[result,achievement]).
translaterole(strumentale,[tool,instrument,cause,illness,emergency]).


appropriatehead(R,Head1):-
      R\=prop,
      \+ light_verbs(Head1),
      \+ jj(Head1),
      !.

matchall_pred(Text,[Head|Heads],Texs):-
      (on(Cl0-Pr-Ro-Head2-Id0,Text);
      on(I-Head2-Role-Id0,Text), I\=_-_;
      on(Head2-Role-Id0,Texs)),
      main_head_match(Head,Head2,Sco),
      !.
matchall_pred(Text,[Head|Heads],Texs):-
      matchall_pred(Text,Heads,Texs),
      !.
extractfirstpredhead(RteArg,Heas):-
      findall(Head,(
             (on(Cl-B-R-Head-Id,RteArg)
             ;
             on(Cl-B-_/prop-Head1-Id,RteArg),
             on(Cl1-Head1-R-Head-Id1,RteArg)
             ),
               light_verbs(B),
                 R\=prop, \+ grammw(Head,_)), Heads),
      Heads\=[],sort(Heads,Heas),
      !.

matchall_adjs(RteAdj,[Head|Heads],Head-Head2-Role-Pred-I):-
      on(I-Head2-Role-Pred,RteAdj),
      main_head_match(Head,Head2,Sco),
      !.
matchall_adjs(RteAdj,[Head|Heads],M):-
      matchall_adjs(RteAdj,Heads,M),
      !.

searchmatch(Text,Texs,Head2-Role-Pred-I):-
      (on(Cl0-Pr-Ro-Pred-Id0,Text);
       on(Cl0-Pr-Ro-Pred1-I,Text);
       on(I-Pred-Role-Id0,Text), I\=_-_;
       on(Head2-Role-Id0,Texs)
       ).


/***************************     compute_scoremod1    **********************/

compute_scoremod1(Rtes,First,1-Score2,Ent):-
   computesc1(Rtes,First,1-Score2,Ent),
    !.

compute_scoremod1(Rtes,First,1-Score2,Ent):-
   computesc2(Rtes,First,1-Score2,Ent),
    !.

/*
358
X be target of Y
Y send to X
*/

getpredants(Rte,Pred):-
      (Dgr=Ind-Pred-R-Ent
       ;
       Dgr=Ind-Pred-R-Ent-_),
       Ind\=_-_,
       on(Dgr,Rte).
       
computesc1(Rtes,First,1-Score2,Ent1):-
      complex_induct1(Rtes,be,target,Ent1,xcomp-_),
      nonvar(Ent1),
      complex_induct3(First,send,Ent1,letter_bomb,obj-_),
      assess_penalty(contribute,Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent1):-
      complex_induct1(First,be,target,Ent1,xcomp-_),
      nonvar(Ent1),
      complex_induct3(Rtes,send,Ent1,letter_bomb,obj-_),
      assess_penalty(contribute,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent1):-
      complex_induct1(Rtes,be,owner,Ent1,xcomp-_),
      complex_induct0(Rtes,be,_,Ent,subj-_),
      on(Id-owner-specif-Ent2,Rtes),
      nonvar(Ent),
      nonvar(Ent1),
      on(Ind-Ent2-poss-Poss,First),
      assess_penalty(contribute,Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent1):-
      complex_induct1(Rtes,be,member,Ent1,xcomp-_),
      complex_induct0(Rtes,be,_,Ent,subj-_),
      on(Id-Ent2-ncmod/specif-Sem-member,Rtes),
      nonvar(Ent),
      nonvar(Ent1),
      complex_induct0(First,join,_,Ent4,subj-_),
      complex_induct0(First,join,_,Ent3,xcomp-_),
      Ent4=Ent,
      main_head_match(Ent2,Ent3,K),
      assess_penalty(contribute,Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,build,_,Ent1,subj-_),
      complex_induct0(Rtes,build,_,Ent,arg_mod-_),
      nonvar(Ent),
      nonvar(Ent1),
      on(Ind-Ent-specif-Ent2,First),
      main_head_match(Ent1,Ent2,K),
      assess_penalty(contribute,Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent1):-
      getpredants(First,Pred1),
      getpredants(Rtes,Pred2),
      \+ check_semantic_antonimy(Pred1,Pred2),
      complex_induct0(First,Pred1,_,Ent1,subj-_),
      nonvar(Ent1),
      (Obj=obj;Obj=obj2;Obj=arg_mod),
      complex_induct3(Rtes,Pred2,Ent1,_,Obj-_),
      assess_penalty(buy,Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent1):-
      getpredants(First,Pred1),
      getpredants(Rtes,Pred2),
      \+ check_semantic_antonimy(Pred1,Pred2),
      complex_induct0(First,Pred1,_,Ent1,subj-_),
      nonvar(Ent1),
      (Obj=obj;Obj=obj2),
      complex_induct3(Rtes,Pred2,Ent1,_,Obj-_),
      assess_penalty(buy,Rtes,First,Score2),Score2=[],
      !.

/*
137
police detain X
X arrested
*/

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct1(Rtes,detain,police,Ent,subj-_),
      nonvar(Ent),
      complex_induct1(First,arrest,Ent,Ent1,obj-_),
      Ent\=Ent1,
      assess_penalty(contribute,Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct3(First,detain,Ent,police,subj-_),
      Ent\=police,
      complex_induct1(Rtes,arrest,Ent,Ent1,obj-_),
      Ent\=Ent1,
      assess_penalty(contribute,Rtes,First,Score2),Score2=[],
      !.


computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,'co-author',_,Ent,subj-_),
      nonvar(Ent),
      complex_induct2(First,contribute,_,section,obj-_),
      complex_induct2(First,contribute,_,Ent,subj-_),
      assess_penalty(contribute,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct3(Rtes,be,Ent,quicker,xcomp-_),
      complex_induct2(First,cut,_,cost,obj-_),
      complex_induct2(First,cost,_,time,ncmod-_),
      assess_penalty(cut,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct3(First,be,Ent,quicker,xcomp-_),
      complex_induct2(Rtes,cut,_,cost,obj-_),
      complex_induct2(Rtes,cost,_,time,ncmod-_),
      assess_penalty(cut,Rtes,First,Score2),Score2=[],
      !.

/*
computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,support,_,Ent1,subj-_),
      nonvar(Ent1),
      (complex_induct0(First,support,_,Ent,obj-_)
       ;
      complex_induct1(First,show,policy,_,obj-_),
      complex_induct0(First,policy,_,Ent2,mod),
      nonvar(Ent2),
      (Ent2\=Ent1;checkmarrynames(Ent2,Ent1,Rtes)),
      complex_induct2(First,policy,_,support,ncmod-_)),
      main_head_match(Ent2,Ent1,Sco),
      assess_penalty(rise,Rtes,First,Score2),Score2=[],
      !.
*/

computesc1(Rtes,First,1-Score2,Ent1):-
      complex_induct2(Rtes,rise,profit,_,subj-_),
      complex_induct0(Rtes,profit,_,Ent1,ncmod-_);
      nonvar(Ent1),
      complex_induct2(First,reach,increase,_,obj-_),
      complex_induct0(First,reach,_,Ent2,subj-_),
      nonvar(Ent2),
      (Ent2\=Ent1;checkmarrynames(Ent2,Ent1,Rtes)),
      main_head_match(Ent2,Ent1,Sco),
      assess_penalty(rise,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,invent,_,Ent,subj-_),
      nonvar(Ent),
      complex_induct2(First,develop,Sem,Ent,subj-_),
      complex_induct2(First,develop,Sem,invention,obj-_),
      assess_penalty(develop,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,invent,_,Ent,subj-_),
      nonvar(Ent),
      complex_induct2(First,develop,Sem,Ent,subj-_),
      complex_induct2(First,develop,Sem,invention,obj-_),
      assess_penalty(develop,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct3(Rtes,be,inventor,Ent,xcomp-_),
      nonvar(Ent),
      complex_induct1(Rtes,be,Ent,Ent1,subj-_),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,Rtes)),
      complex_induct0(First,originate,Sem,Ent2,subj-_),
      assess_penalty(originate,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,border_on,_,Ent,subj-_),
      complex_induct0(Rtes,border_on,_,Ent1,obj-_),
      nonvar(Ent1),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,Rtes)),
      complex_induct2(First,mark,Sem,side,obj-_),
      (complex_induct4(First,side,of,Ent1,ncmod-_);
      complex_induct4(First,side,of,Ent1,ncmod-_)),
      assess_penalty(mark,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      marryPreds(Pred),
      complex_induct0(Rtes,Pred,_,Ent,subj-_),
      complex_induct0(Rtes,Pred,_,Ent1,coord-_),
      Ent\=Ent1,
      (complex_induct0(First,Pred,_,Ent,_-_);
      complex_induct0(First,Pred,_,Ent1,_-_);
      complex_induct0(First,be,_,husband,_-_);
      complex_induct0(First,be,_,wife,_-_);
      complex_induct4(First,Ent,of,wife,_-_);
      complex_induct4(First,Ent1,of,husband,_-_)
      ),
      assess_penalty(marry,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      marryPreds(Pred),
      complex_induct0(Rtes,Pred,_,Ent,subj-_),
      (complex_induct4(Rtes,Pred,to,Ent1,iobj-_);
      complex_induct1(Rtes,Pred,Sem,Ent1,obj-_);
      Ent1=Ent),
      nonvar(Ent1),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,Rtes)),
      (complex_induct0(First,Pred,_,Ent,_-_);
      complex_induct0(First,Pred,_,Ent1,_-_);
      complex_induct0(First,be,_,husband,_-_);
      complex_induct0(First,be,_,wife,_-_);
      complex_induct4(First,Ent,of,wife,_-_);
      complex_induct4(First,Ent1,of,husband,_-_)
      ),
      assess_penalty(marry,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      marryPreds(Pred),
      complex_induct0(First,Pred,_,Ent,subj-_),
      complex_induct0(First,Pred,_,Ent1,coord-_),
      Ent\=Ent1,
      (complex_induct0(Rtes,Pred,_,Ent,_-_);
      complex_induct0(Rtes,Pred,_,Ent1,_-_);
      complex_induct0(Rtes,be,_,husband,_-_);
      complex_induct0(Rtes,be,_,wife,_-_);
      complex_induct4(Rtes,Ent,of,wife,_-_);
      complex_induct4(Rtes,Ent1,of,husband,_-_)
      ),
      assess_penalty(marry,Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      marryPreds(Pred),
      complex_induct0(First,Pred,_,Ent,subj-_),
      (complex_induct4(First,Pred,to,Ent1,iobj-_);
      complex_induct1(First,Pred,Sem,Ent1,obj-_);
      Ent1=Ent),
      nonvar(Ent1),
      (complex_induct4(Rtes,Pred,_,Ent,_-_);
      complex_induct4(Rtes,Pred,_,Ent1,_-_);
      complex_induct4(Rtes,be,_,husband,_-_);
      complex_induct4(Rtes,be,_,wife,_-_);
      complex_induct4(Rtes,Ent,of,wife,_-_);
      complex_induct4(Rtes,Ent1,of,husband,_-_)
      ),
      assess_penalty(marry,Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct4(Rtes,lead,to,Ent,iobj-_),
      complex_induct0(Rtes,lead,_,Ent1,subj-_),
      nonvar(Ent),
      nonvar(Ent1),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,Rtes)),
      complex_induct1(First,recover,Ent1,_,subj-_),
      match_approximate(Ent,recover),
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct4(First,lead,to,Ent,iobj-_),
      complex_induct0(First,lead,_,Ent1,subj-_),
      nonvar(Ent),
      nonvar(Ent1),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,First)),
      complex_induct1(Rtes,recover,Ent1,_,subj-_),
      match_approximate(Ent,recover),
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct4(Rtes,go,in,Ent1,iobj-_),
      nonvar(Ent1),
      complex_induct0(Rtes,go,_,Ent,subj-_),
      complex_induct4(Rtes,Ent1,in,response,ncmod-_),
      nonvar(Ent),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,Rtes)),
      complex_induct1(First,respond,Ent,_,subj-_),
      assess_penalty([go,respond],Rtes,First,Score2),Score2=[],
      !.

computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct4(First,step_down,as,_,ncmod-_),
      complex_induct0(First,step_down,_,Ent,subj-_),
      nonvar(Ent),
      complex_induct1(Rtes,quit,Ent,_,subj-_),
      assess_penalty([quit,step_down],Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct4(First,struggle,with,Ent1,iobj-_),
      complex_induct0(First,struggle,_,Ent,subj-_),
      nonvar(Ent),nonvar(Ent1),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,First)),
      complex_induct1(Rtes,have,Ent,_,subj-_),
      complex_induct1(Rtes,have,Ent1,_,xcomp-_),
      /*on(E1-HD1,First),
       on(E-HD,Rtes),
       HD1=..[ScorEnts,Gr,money],
       HD=..[ScorEnts,Gr1,economic], */
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct2(First,hurl,_,obscenity,obj-_),
      complex_induct0(First,hurl,_,Ent,subj-_),
      nonvar(Ent),
      complex_induct1(Rtes,curse,Ent,_,subj-_),
      assess_penalty([curse,hurl],Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,see,_,Ent,obj-_),
      complex_induct0(Rtes,see,_,Se,adj-_),
      nonvar(Ent),
      complex_induct0(First,make,_,Ent2,subj-_),
      complex_induct0(First,make,_,Manner,xcomp-_),
      complex_induct2(First,Ent2,_,Ent,ncmod-_),
%      identical_GR(Ent1,First,Rtes),
      (Se=clearly,Manner=difficult;
        Se=clearly,Manner=easy),
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      complex_induct1(Rtes,use,be,_,xcomp-_),
      complex_induct0(Rtes,be,_,Ent,subj-_),
      nonvar(Ent),
      complex_induct1(First,find,Ent,_,subj-_),
      identical_GR(Ent1,First,Rtes),
      assess_penalty([use,find],Rtes,First,Score2),Score2=[],
      !.
computesc1(Rtes,First,1-Score2,Ent):-
      (Ccomp=ccomp;Ccomp=coord),
      complex_induct2(First,believe,_,be,Ccomp-_),
      complex_induct3(Rtes,be,Ent,monotheistic,subj-_),
      complex_induct1(First,believe,god,_,F-_),
      complex_induct0(First,Ent2,_,only,adj-_),
      assess_penalty([be,believe],Rtes,First,Score2),Score2=[],
      !.

relatives([parent, husband,son, daughter, sibling, sister, brother, twin, father, mother, father_in_law, sister_in_law, 'brother-in-law', 'mother-in-law', 'father-in-law', 'sister-in-law', 'brother_in_law', mother_in_law, grandchild, grand_father, grandfather, granddad, granddaddy, granddaughter, grand_mother, grandmother, grandma, granduncle, grandparent, grandson, nephew, niece, cousin, ant, uncle, child,wife]).
employers([employee,assistant,'blue-collar_worker',breadwinner,casual,casual_laborer,common_laborer,day_laborer,factory_worker,flunky,free_lance,'free-lancer','full-time_worker',girl_Friday,hand,helper,hired_hand,hired_man,hireling,industrial_worker,inferior,jobber,jobholder,junior,laborer,laboring_man,man_Friday,menial,mercenary,migrant,moiler,myrmidon,navvy,office_temporary,pensioner,proletarian,right-hand_man,roustabout,salaried_worker,secondary,'self-employed_person',servant,stiff,subordinate,temporary,toiler,underling,understrapper,wage_earner,wage_slave,wageworker,worker,workgirl,workhand,working_girl,workingman,workingwoman,workman],
[employer,boss,business,bwana,chef,chief,church_dignitary,company,consumer,corporation,director,ecclesiarch,elder,enjoyer,establishment,firm,gaffer,goodman,governor,guru,head,husband,liege,liege_lord,lord,lord_paramount,manager,master,organization,outfit,overlord,owner,padrone,paramount,paterfamilias,patriarch,patron,proprietor,rabbi,sahib,seigneur,seignior,starets,teacher,user]).

checkmarrynames(Ent,Ent1,Rte):-
    on(Id-V-Ro-Ent-Ind,Rte),
    on(Id-V-Ro1-Ent1-Ind1,Rte),
    (on(Head-specif-Ind,Rte)
     ;
     on(Ind-Ent-specif-Head,Rte)
     ;
     on(And-coord/_-Indc,Rte),
     recover_descs(And,Des),
     recover_descs(Ent,Des1),
     (on(Ent,Des);
      on(Ent1,Des);
      on(En,Des1),on(En,Des))
     ),
     (on(Head1-specif-Ind1,Rte)
     ;
     on(Ind1-Ent1-specif-Head1,Rte)
     ;
     on(And-coord/_-Indc,Rte),
     recover_descs(And,Des),
     recover_descs(Ent1,Des1),
     (on(Ent,Des);
      on(Ent1,Des);
      on(En1,Des1),on(En1,Des))
     ),
    Head\=Head1,
    !.
marryPreds(marry).
marryPreds(get_married).
    
/* computesc2 */
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,fire,_,Ent1,obj-_),
      complex_induct0(Rtes,fire,_,Ent,subj-_),
      nonvar(Ent),nonvar(Ent1),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,Rtes)),
      complex_induct2(First,send,_,Ent,subj-_),
      complex_induct0(First,send,_,Ent2,obj-_),
      complex_induct2(First,Ent2,_,dismissal,ncmod-_),
      complex_induct2(First,dismissal,_,Ent1,ncmod-_),
      assess_penalty([fire,send],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct3(First,be,Ent1,relative,xcomp-_),
      complex_induct0(First,be,_,Ent,subj-_),
      nonvar(Ent),nonvar(Ent1),
      (Ent\=Ent1;checkmarrynames(Ent,Ent1,First)),
      complex_induct2(Rtes,Pred,_,Ent,_-_),
      complex_induct3(Rtes,Pred,Ent1,son,ncmod-_),
      assess_penalty([be,Pred],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct3(Rtes,be,Ent1,Rel,xcomp-_),
      relatives(Rels),
      on(Rel,Rels),
      complex_induct2(Rtes,be,_,Ent,subj-_),
      nonvar(Ent),nonvar(Ent1),
      complex_induct2(First,Pred,_,Ent,_-_),
      Ent\=Ent1,
      complex_induct3(First,Pred,Sem,Rel1,ncmod-_),
      on(Rel1,Rels),
      assess_penalty([be,Pred],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct3(Rtes,be,Ent1,relative,xcomp-_),
      complex_induct2(Rtes,be,_,Ent,subj-_),
      nonvar(Ent),nonvar(Ent1),
      complex_induct2(First,Pred,_,Ent,_-_),
      Ent\=Ent1,
      relatives(Rels),
      on(Rel,Rels),
      complex_induct3(First,Pred,Sem,Rel,ncmod-_),
      assess_penalty([be,Pred],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct3(First,be,wounded,Ent1,xcomp-_),
      complex_induct0(First,be,_,Ent,subj-_),
      nonvar(Ent),nonvar(Ent1),
      Ent\=Ent1,
      complex_induct2(Rtes,survive,_,Ent,subj-_),
      complex_induct0(Rtes,survive,_,Ent3,obj-_),
      complex_induct0(Rtes,survive,_,Ent2,xcomp-_),
      complex_induct2(First,assassination,_,Ent2,ncmod),
      complex_induct2(First,wounded,_,Ent3,ncmod-_),
      assess_penalty([survive,be],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct3(First,fail,act_on,threat,xcomp-_),
      complex_induct2(Rtes,ignore,_,threat,obj-_),
      assess_penalty([fail,ignore],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct0(First,treat,_,Ent,subj-_),
      complex_induct0(First,treat,Se,En,ncmod-_),
      nonvar(Ent),nonvar(En),
      Ent\=En,
      complex_induct0(Rtes,receive,Ent,_,subj-_),
      complex_induct3(Rtes,receive,_,treatment,obj-_),
      complex_induct3(Rtes,receive,Se,En,ncmod-_),
      assess_penalty([treat,receive],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct0(First,treat,_,Ent,subj-_),
      complex_induct0(First,treat,_,En,obj-_),
      nonvar(Ent),nonvar(En),
      Ent\=En,
      complex_induct2(Rtes,combat,_,Ent,subj-_),
      complex_induct2(Rtes,combat,_,En,obj-_),
      assess_penalty([treat,combat],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct2(First,apply,_,pressure,obj-_),
      complex_induct0(First,pressure,_,Ent,ncmod-_),
      nonvar(Ent),
      (complex_induct1(Rtes,pressurize,Ent,_,obj-_);
      complex_induct1(Rtes,pressurise,Ent,_,obj-_)),
      assess_penalty([apply,pressurise],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      best_role_induct(Rtes,hold,Ent,Role),
      complex_induct0(Rtes,Pre,Obj,En,obj-_),
      nonvar(Ent),nonvar(En),
      Ent\=En,
      best_role_induct(First,be,Ent,Role2),
      complex_induct3(First,be,Obj,En1,xcomp-_),
      complex_induct0(First,En1,Sem,dominant,mod),
      assess_penalty([hold,be],Rtes,First,Score2),Score2=[],
      !.


computesc2(Rtes,First,1-Score2,Ent):-
      best_role_induct(Rtes,hold,Ent,Role),
      nonvar(Ent),
      best_role_induct(First,open,Ent,Role2),
      search_location_ent(First,Rtes,open,hold),
      assess_penalty([hold,open],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct3(Rtes,take,long,Ent,xcomp-_),
      nonvar(Ent),
      complex_induct0(First,rise,_,Ent1,_-R1),
      (R1=temporal;R1=temp;nt(Ent1)),
      assess_penalty([take,rise],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,take,Obj,Dep,obj-Rol),
      complex_induct3(Rtes,take,Ent2,complete,xcomp-_),
      nonvar(Ent2),
      complex_induct3(First,last,Obj,Ent,subj-_),
      nonvar(Ent),
      Ent\=Ent2,
      complex_induct3(First,last,Obj,Ent2,obj-_),
      complex_induct3(First,Ent,Dep,Ent1,ncmod-locative),
      assess_penalty([take,last],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,last,Obj,Ent,subj-_),
      complex_induct3(Rtes,last,Obj,Ent2,obj-_),
      complex_induct3(Rtes,Ent,Dep,Ent1,ncmod-locative),
      nonvar(Ent),nonvar(Ent2),
      Ent\=Ent2,
      complex_induct3(First,take,Obj,Dep,obj-Rol),
      complex_induct3(First,take,Ent2,complete,xcomp-_),
      assess_penalty([take,last],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct3(First,hold,Ent,captive,obj-_),
      complex_induct0(Rtes,detain,_,Ent1,_-_),
      nonvar(Ent),nonvar(Ent1),
      Ent\=Ent1,
      complex_induct0(First,Ent1,_,En,ncmod-_),
      complex_induct0(Rtes,Ent1,_,En1,ncmod-_),
      constr_main_head_roles(En,En1),
      assess_penalty([hold,detain],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct3(Rtes,kill,Ent,_,subj-_),
      complex_induct3(Rtes,accuse,kill,Ent,xcomp-_),
      complex_induct2(First,charge,_,death,ncmod-_),
      identical_GR(Ent,Rtes,First),
      assess_penalty([accuse,charge],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct3(Rtes,be,in_favor_of,Ent1,ncmod-_),
%      complex_induct3(First,clear,way,Ent,obj-Theme),
      complex_induct3(First,clear,to,Ent,xcomp-Theme),
      nonvar(Ent),nonvar(Ent1),
      Ent\=Ent1,
      (match_approximate(Ent,Ent1);
       findall(M,nbk(M,Ent,_),Ms),
       on(Ma,Ms),
       main_head_match(Ma,Ent1,_)),
      assess_penalty([be,clear],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,Pred,Sem,Ent1,subj-_),
      complex_induct0(First,close,Ent,Pred1,obj-theme_unaff),
      nonvar(Pred),nonvar(Pred1),
      match_approximate(Pred,Pred1),
      identical_GR(Ent1,Rtes,First),
      assess_penalty([Pred,close],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,donate,Sem,Ent1,subj-_),
      complex_induct3(First,raise,donation,Pred1,obj-theme_aff),
      nonvar(Ent1),
      identical_GR(Ent1,Rtes,First),
      assess_penalty([raise,donate],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,impose,Sem,Ent1,obj-_),
      (Theme=theme_bound;Theme=theme_unaff),
      complex_induct1(First,be,Ent1,Pred1,subj-Theme),
      complex_induct4(First,be,under,Ent,ncmod-_),
      nonvar(Ent),nonvar(Ent1),
      Ent\=Ent1,
      complex_induct2(Rtes,impose,Se,Ent,subj-_),
      assess_penalty([inpose_on,be],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,put,Sem,Ent1,obj-_),
      complex_induct3(Rtes,put,Se,sanction,iobj-_),
      complex_induct3(First,lift,Pred1,embargo,obj-_),
      nonvar(Ent1),
      complex_induct2(First,lift,_,Ent1,ncmod-_),
      (Theme=xcomp;Theme=xadj),
      complex_induct2(First,push,_,lift,Theme-_),
      complex_induct0(First,push,_,Ent,subj-_),
      nonvar(Ent),
      Ent\=Ent1,
      complex_induct0(First,Ent,_,Ent2,ncmod-_),
      nonvar(Ent2),
      complex_induct2(Rtes,_,_,Ent2,Func-_),
      assess_penalty([put,lift],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(First,educate,_,Ent1,subj-_),
      complex_induct3(First,Pred,_,Ent,coord-_),
      complex_induct2(First,Pred,_,fluent,xcomp-_),
      complex_induct2(Rtes,speak,_,Ent1,subj-_),
      complex_induct0(First,Ent,_,Ent2,ncmod-_),
      nonvar(Ent2),nonvar(Ent1),
      Ent1\=Ent2,
      complex_induct2(Rtes,_,_,Ent2,obj-_),
      assess_penalty([educate,Pred],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,Pred1,Ent1,leave,xcomp-_),
      complex_induct0(First,Pred2,Sem,travel,obj-_),
      term_to_atom(Score-Pred1,Sco),
      Neg=..[Sco,neg, Head1],
      on(Neg, Rtes),
      neg_pred_class(Pred2),
      !.
computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct3(Rtes,continue,Ent1,send,xcomp-_),
      complex_induct2(First,change,Sem,plan,obj-_),
      term_to_atom(Score-Pred1,Sco),
      Neg=..[Sco,neg, Head1],
      on(Neg, First),
      !.

computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,thank,_,Ent,obj-_),
      complex_induct1(First,recognize,Ent,_,obj-_),
      term_to_atom(Score-like,Sco),
      Mod=..[Sco,modal, will], 
      on(Neg,Rtes),
      !.

computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,acknowledge,_,Ent,obj-_),
      nonvar(Ent),
      complex_induct1(First,recognize,Ent,_,obj-_),
      term_to_atom(Score-like,Sco),
      Mod=..[Sco,modal, will], 
      on(Neg,Rtes),
      !.

computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(First,thank,_,Ent,obj-_),
      nonvar(Ent),
      complex_induct1(Rtes,recognize,Ent,_,obj-_),
      term_to_atom(Score-like,Sco),
      Mod=..[Sco,modal, will], 
      on(Neg,Rtes),
      !.

computesc2(Rtes,First,1-Score2,Ent1):-
      complex_induct0(First,acknowledge,_,Ent,obj-_),
      nonvar(Ent),
      complex_induct1(Rtes,recognize,Ent,_,obj-_),
      term_to_atom(Score-like,Sco),
      Mod=..[Sco,modal, will], 
      on(Neg,Rtes),
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      identical_GR(Ent,Rtes,First),
      complex_induct0(Rtes,name,_,Ent,subj-_),
      complex_induct3(First,appointment,Pred1,Ent,ncmod-_),
      Ent\=it,Ent\=there,
      assess_penalty([name,Pred],Rtes,First,Score2),Score2=[],
      !.
computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct0(First,help,Sem,Ent,obj-_),
      nonvar(Ent),
      complex_induct3(Rtes,get,Ent,Sem,obj-_),
      complex_induct0(First,put,Pred1,Ent1,ncmod-_),
      complex_induct3(Rtes,spend,money,Pred,ncmod-_),
      assess_penalty([help,get],Rtes,First,Score2),Score2=[],
      assess_penalty([spend,put],Rtes,First,Scor2),Scor2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,live,_,Ent,subj-_),
      nonvar(Ent),
      complex_induct0(First,Pred,Se,Ent,subj-_),
     (Home=home;Home=hometown),
      complex_induct0(First,Home,Pred1,Ent1,ncmod-_),
      complex_induct0(Rtes,Pre,Ent1,S,ncmod-_),
      nonvar(Ent1),
     (Home=home;Home=hometown),
      complex_induct3(First,Home,Ent1,S,ncmod-_),
      assess_penalty([live,Pred],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      identical_GR(Ent,Rtes,First),
      complex_induct0(Rtes,fear,Sem,Ent,subj-_),
      nonvar(Ent),
      complex_induct2(First,verge,Pred1,Ent,ncmod-_),
      non_semantic_head(Ent),
      assess_penalty([fear,verge],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rtes,First,1-Score2,Ent):-
      identical_GR(Ent,Rtes,First),
      complex_induct0(Rtes,bring,Sem,Ent,ncomp-_),
      nonvar(Ent),
      complex_induct3(First,raise,Pred1,Ent,xcomp-_),
      non_semantic_head(Ent),
      assess_penalty([bring_in,raise],Rtes,First,Score2),Score2=[],
      !.


computesc2(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,call,Sem,Ent,subj-_),
      nonvar(Ent),
      complex_induct1(First,Pred1,Ent,Se,subj-_),
      non_semantic_head(Ent),
      complex_induct0(Rtes,Ent,Pre,Ent1,ncmod-_),
      nonvar(Ent1), \+ grammw(Ent1,_),
      complex_induct0(First,Pred,See,Ent1,ncmod-_),
      (Pred=call;Pred=name),
      assess_penalty([call,Pred],Rtes,First,Score2),Score2=[],
      !.

computesc2(Rte,First,1-Score2,Ent1):-
     check_danger_risk(Rte,First),
     length(Rte,L), L<10,
     !.



compute_scoremod11(Rte,First,1-Score2,Ent):-
      best_role_induct(Rte,bear,Ent,Role),
     (Home=home;Home=hometown),
      complex_induct0(First,Pred,Sem,Home,F-_),
      complex_induct2(First,Home,_,Ent,Ncm-_),
      non_semantic_head(Ent),
      length(Rte,L),length(First,L1),
      Dif is L - L1, Dif < 3,
%      check_nativebeborn(First,Rte,bear),
      evaluate_propopaques(Pred1,Rte,First),
      evaluate_propopaques(Pred2,Rte,First),
      assess_penalty([bear,Pred],Rte,First,Score2),
      (Score2=[];Score2\=100),
      !.
compute_scoremod11(Rte,First,1-Score2,Ent):-
      best_role_induct(Rte,bear,Ent,Role),
     (Home=home;Home=hometown),
      complex_induct2(First,Home,_,Ent,Ncm-_),
      complex_induct2(First,bear,Sem,Home,subj-_),
      non_semantic_head(Ent),
      length(Rte,L),length(First,L1),
      Dif is L - L1, Dif < 3,
%      check_nativebeborn(First,Rte,bear),
      evaluate_propopaques(Pred1,Rte,First),
      evaluate_propopaques(Pred2,Rte,First),
      assess_penalty([bear,Pred],Rte,First,Score2),
      (Score2=[];Score2\=100),
      !.
compute_scoremod11(Rte,First,1-Score2,Ent):-
      best_role_induct(Rte,bear,Ent,Role),
      best_role_induct(First,return,Ent,Role2),
      ( complex_induct0(First,return,Ent1,_,Obj-_),
         nonvar(Ent1);
       complex_induct0(First,return,_, Ent1,Obj-_),
         nonvar(Ent1)),
      non_semantic_head(Ent),
     (Home=home;Home=hometown),
      main_head_match(Home,Ent1,Sco),
      length(Rte,L),length(First,L1),
      Dif is L - L1, Dif < 3,
      complex_induct0(Rte,bear,Sem,_,subj-_),
      evaluate_propopaques(Pred1,Rte,First),
      evaluate_propopaques(Pred2,Rte,First),
      assess_penalty([bear,return],Rte,First,Score2),
      (Score2=[];Score2\=100),
      !.

compute_scoremod11(Rte,First,1-Score2,Ent):-
      best_role_induct(Rte,be,Ent,Role),
      best_role_induct(First,come,Ent,Role2),
      complex_induct0(Rte,be,Ent1,Home,obl-loc_origin),
      complex_induct2(First,come,Ent1,Home,obl-locat),
      assess_penalty([be,come],Rte,First,Score2),
      (Score2=[];Score2\=100),
      !.

compute_scoremod11(Rte,First,1-Score2,Ent):-
      best_role_induct(Rte,bear,Ent,Role),
      best_role_induct(First,leave,Ent,Role2),
     (Home=home;Home=hometown),
      ( complex_induct3(First,leave,Ent1,Home,obj-_),
         nonvar(Ent1);
       complex_induct1(First,leave,Home, Ent1,obj-_),
         nonvar(Ent1)),
      non_semantic_head(Ent),
      main_head_match(Ent,Ent1,Sco),
      length(Rte,L),length(First,L1),
      Dif is L - L1, Dif < 3,
      complex_induct0(Rte,bear,Sem,_,subj-_),
      evaluate_propopaques(Pred1,Rte,First),
      evaluate_propopaques(Pred2,Rte,First),
      assess_penalty([bear,leave],Rte,First,Score2),
      (Score2=[];Score2\=100),
      !.

compute_scoremod11(Rte,First,1-Score2,Ent):-
      best_role_induct(Rte,Pred1,Ent,Role),
      best_role_induct(First,Pred2,Ent,Role2),
      non_semantic_head(Ent),
      length(Rte,L),length(First,L1),
      Dif is L - L1, Dif < 3,
      check_nativebeborn(First,Rte,bear),
      evaluate_propopaques(Pred1,Rte,First),
      evaluate_propopaques(Pred2,Rte,First),
      assess_penalty([Pred1,Pred2],Rte,First,Score2),
      (Score2=[];Score2\=100),
      !.

compute_scoremod11(Rte,First,1-Score2,Ent):-
      identical_GR(Ent,Rte,First),
      complex_induct0(Rte,bear,Sem,_,subj-_),
      complex_induct0(Rte,Sem,_,Ent,ncmod-_),
      complex_induct0(First,bear,Se,_,subj-_),
      evaluate_propopaques(Pred1,Rte,First),
      evaluate_propopaques(Pred2,Rte,First),
      assess_penalty([Pred1,Pred2],Rte,First,Score2),
      (Score2=[];Score2\=100),
      !.

compute_scoremod11(Rte,First,1-Score2,Ent):-
      number_heads(Rte,L), L=<3,
      best_role_induct(First,Pred2,Ent,Role2),
%      \+ check_beborn(First,be),
      complex_induct0(Rte,Sem,_,Ent,ncmod-_),
      complex_induct1(Rte,bear,Sem,_,subj-_),
      non_semantic_head(Ent),
      evaluate_propopaques(Pred1,Rte,First),
      evaluate_propopaques(Pred2,Rte,First),
      assess_penalty([Pred1,Pred2],Rte,First,Score2),Score2=[],
      !.

compute_scoremod11(Rtes,First,1-Score2,Ent):-
      complex_induct0(First,be,_,Ent,subj-_),
%      \+ check_beborn(First,be),
      complex_induct2(Rtes,connect,_,Ent,ncmod-_),
      complex_induct0(Rtes,connect,_,Ent1,ncmod-_),
      nonvar(Ent),nonvar(Ent1),
      complex_induct2(First,be,_,Ent1,ncmod-_),
      complex_induct0(First,be,_,Ent2,adj-mod),
      findall(Type2,penalties(Rtes,connect-_,Type2),Types2),
      Types2\=[],
      !.

compute_scoremod11(Rte,First,1-Score2,Ent):-
      number_heads(Rte,L), L=2,
      length(First,L1),5=<L1,
      complex_induct0(Rte,Pred,_,Ent,subj-_),
      light_verbs(Pred),
      complex_induct0(Rte,Pred,_,Ent1,xcomp-_),
      nonvar(Ent),nonvar(Ent1),
      complex_induct2(First,Ent1,_,Ent,ncmod-_),
      assess_penalty([be,Pred],Rte,First,Score2),Score2=[],
      !.

compute_scoremod11(Rte,First,1-Score2,Ent):-
      number_heads(Rte,L), L=3,
      length(First,L1),5=<L1,
      complex_induct0(Rte,Pred,_,There,subj-_),
      light_verbs(Pred), nonvar(There), There=there,
      complex_induct0(Rte,Pred,_,Ent1,xcomp-_),
      nonvar(Ent1),
      complex_induct2(First,Ent1,_,Ent,ncmod-_),
      assess_penalty([be,Pred],Rte,First,Score2),Score2=[],
      !.

compute_scoremod11(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,be,Sem,Ent1,subj-_),
      complex_induct0(First,Ent2,Pred,Se,adj-_),
      match_approximate(Ent1,Ent2),
      complex_induct0(Rtes,be,Pre,S,xcomp-_),
      Pre\=Ent1,
      complex_induct0(Rtes,Pre,_,Ent3,ncmod-_),
      complex_induct0(Rtes,Ent3,_,Spec,ncmod-_),
      complex_induct0(First,Pred,_,Ent4,subj-agent),
      recover_descs(Ent4, PredS),
      on(Abr,PredS),
      s_is_ax(Abr,Spec),
      assess_penalty([be,Pred],Rtes,First,Score2),Score2=[],
      !.


compute_scoremod11(Rtes,First,1-Score2,Ent1):-
      complex_induct0(Rtes,be,Sem,Ent1,subj-_),
      complex_induct0(Rtes,Pre,by,Ent2,arg_mod-_),
      complex_induct0(Rtes,be,_,Spec,xcomp-_),
      complex_induct0(First,Pred,_,Spec,obj-_),
      complex_induct0(First,Sem,_,Ent3,ncmod-_),
      nonvar(Ent1),
      complex_induct2(First,Pred,_,Ent1,ncmod-_),
      Pred=include,
      assess_penalty([be,Pre],Rtes,First,Score2),Score2=[],
      !.

compute_scoremod11(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,be,Sem,Ent,subj-_),
      nonvar(Ent),
      complex_induct0(First,Pred,Se,Ent,subj-_),
      non_semantic_head(Ent),
      length(Rtes,L),length(First,L1), L=<5,L1=<5,
      complex_induct0(Rtes,name,Pre,Ent1,ncmod-_),
      nonvar(Ent1),
      complex_induct3(First,Pred,Se,Ent1,subj-_),
      assess_penalty([be,Pred],Rtes,First,Score2),Score2=[],
      !.


compute_scoremod11(Rtes,First,1-Score2,Ent):-
      complex_induct0(Rtes,be,Sem,Ent,subj-_),
      nonvar(Ent),
      complex_induct0(First,Pred,Se,Ent,subj-_),
      non_semantic_head(Ent),
      length(Rtes,L),length(First,L1), L=<5,L1=<5,
      complex_induct0(Rtes,be,Pre,Ent1,ncmod-Role),
      Role\=locative,Role\=locat,
      Ent1\=Ent,
      complex_induct3(First,Pred,Se,Ent1,ncmod-Rol),
      Rol\=locative,Rol\=locat,
      assess_penalty([be,Pred],Rtes,First,Score2),Score2=[],
      !.

check_propositionalgen(Hypo,Text,A,A,E,E1,F,F1):-
      findall(M1w, 
              (on(Aw-Bw-Cw-Dw-Ew-Fw-Gw-Hw-Iw-J1w-K1w-L1w-M1w-N1w,Text);
               on(Aw-Bw-Cw-Dw-Ew-Fw-Gw-Hw-Iw-J1w-K1w-L1w-M1w-N1w-Pw,Text)),
              As),
      (match_modality(A,E,E1,As)
       ;
       match_modality(A,E,F1,As)),
      matchnegs(A-A,F,F1),
      !.
/*
check_propositionalgen(Hypo,Text,A,A1,E,E1,F,F1):-
      lightverbs(A);lightverbs(A1),
      !.
*/

check_propositionalgen(Hypo,Text,A,A1,E,E1,F,F1):-
      findall(Aw, 
              (on(Aw-Bw-Cw-Dw-Ew-Fw-Gw-Hw-Iw,Text);
               on(Aw-Bw-Cw-Dw-Ew-Fw-Gw-Hw-Iw-J1w-K1w-L1w-M1w-N1w,Text);
               on(Aw-Bw-Cw-Dw-Ew-Fw-Gw-Hw-Iw-J1w-K1w-L1w-M1w-N1w-Pw,Text)),
              As),
%      (\+ on(A,As);A=A1),
      findall(M1w, 
              (on(Aw-Bw-Cw-Dw-Ew-Fw-Gw-Hw-Iw-J1w-K1w-L1w-M1w-N1w,Text);
               on(Aw-Bw-Cw-Dw-Ew-Fw-Gw-Hw-Iw-J1w-K1w-L1w-N1w-M1w-Pw,Text)),
              Ms),
      (make_allchecksprops(Ms,As,A,A1,E,E1)
      ;
      make_allchecksprops(Ms,As,A,A1,E,F1)),
      matchnegs(A-A1,F,F1),
      !.

make_allchecksprops(Ms,As,A,A1,E,E1):-
      (checknegativemods(Ms,B)
         ;
       A=A1
       ),
       (allconsistent_preds(A,A1,P)
                ;
        A\=A1),
       match_modality(A,E,E1,As),
      !.

processverb(begin).
processverb(start).
processverb(interrupt).
processverb(stop).
processverb(continue).
processverb(end).
processverb(finish).
processverb(terminate).
processverb(initiate).
processverb(set_out).

checknegativemods([],[]):-!.
checknegativemods([nil|Ms],B):-
      checknegativemods(Ms,B),
      !.
checknegativemods([W|Ms],B):-
      \+ ngt(W),
      checknegativemods(Ms,B),
      !.
checknegativemods([W|Ms],W):-
      ngt(W),
      !.

matchnegs(A-A1,F,F1):-
     negcongs(F),
     negcongs(F1)
     ;
     F=not,
     F1=not
     ;
     negcongs(F),
     F1=not
     ;
     negcongs(F1),
     F=not,
      !.
matchnegs(A-A1,F,F1):-
     negcongs(F),
     npspv(A),
     \+ negcongs(F1),
     F1 \= not
     ;
     negcongs(F1),
     npspv(A1),
     \+ negcongs(F),
     F \= not,
      !.
matchnegs(A-A1,F,F1):-
     checknegdoubt(A),
     checknegdoubt(A1)
     ;
     checknegdoubt(A),
     (negcongs(F1);
     F1 = not)
     ;
     checknegdoubt(A1),
     (negcongs(F);
     F = not),
      !.
matchnegs(A-A1,F,F1):-
     \+ negcongs(F),
     \+ negcongs(F1),
     F \= not,
     F1 \= not,
      !.

/*
match_modality(A,E,E,G):-
     checkdoubt(A,G),!.
match_modality(A,E,E1,G):-
       lightverbs(A),!.
*/
match_modality(A,E,E1,G):-
       modtyp(E,E1)
%       checkdoubt(A,G)
        ;
       modtyp(E1,E), 
%       checkdoubt(A,G),
       !.
/*
match_modality(A,E,E1,G):-
       modtyp(E,E1);modtyp(E1,E)), 
       doubt_verbs(Verbs),
       findall(V, (on(V,G), on(V,Verbs)),Ds), Ds=[],!.
*/
checkdoubt(A,G):-
       doubt_verbs(Verbs),
       findall(V, (on(V,G), on(V,Verbs)),Ds), 
           (Ds=[];Ds\=[],nogen_member(A,Ds)),
       negate_verbs(Verbs1),
       findall(V, (on(V,G), on(V,Verbs1)),Ds1),
           (Ds1=[];Ds1\=[],nogen_member(A,Ds1)),
       contradict_verbs(Verbs2),
       findall(V, (on(V,G), on(V,Verbs2)),Ds2),
           (Ds2=[];Ds2\=[],nogen_member(A,Ds2)),
       try_verbs(Verbs3),
       findall(V, (on(V,G), on(V,Verbs3)),Ds3),
           (Ds3=[];Ds3\=[],nogen_member(A,Ds3)),
       !.
checknegdoubt(A):-
       doubt_verbs(Verbs),
       nogen_member(A,Verbs)
       ;
       negate_verbs(Verbs1),
       nogen_member(A,Verbs1)
       ;
       contradict_verbs(Verbs2),
       nogen_member(A,Verbs2)
       ;
       ntry_verbs(Verbs3),
       nogen_member(A,Verbs3),
       !.
       
head_relation_match(Heads,Rest,Id0,Text,Texs):-
      on(Head,Heads),
      (on(Cl0-Pr-Ro-Head-Id0,Text),Hea=Head;
      on(I-Head-Role-Id0,Text), I\=_-_,Hea=Head, Pr=Head;
      on(Head-Rol-Id2,Texs),Hea=Head, Pr=Head;
      Head=Hea-_,
      (on(Cl0-Pr-Ro-Hea1-Id0,Text);
       on(I-Hea1-Role-Id0,Text), I\=_-_, Pr=Hea1;
       on(Hea1-Rol-Id2,Texs), Pr=Hea1)
       ),
       main_head_match(Hea,Hea1,Score),
      (Rest\=[],
       (on(Cl-Prr-Ro1-Hea-Id,Rest);
         on(Id-Hea-Ro1-Sem-Prr,Rest)),
       (check_synset(Pr,Prr,Sc)
       ;
       lightverbs(Prr)
       ;
       superlight(Prr,SemCats),
       on(Ca,SemCats),
       main_head_match(Ca,Hea1,Scor)
       )
       ;
       Rest=[]),
       !.

/*
head_relation_match(Heads,Rest,Id0,Text,Texs):-
      (on(Cl0-Pr-Ro-Hea1-Id0,Text);
       on(I-Hea1-Role-Id0,Text), I\=_-_, Pr=Hea1;
       on(Hea1-Rol-Id2,Texs), Pr=Hea1),
      on(Head,Heads),
      Head=Hea-_,
      Hea\=Hea1,
      on(Cl-Prr-Ro1-Hea2-Id,Rest),
      main_head_match(Hea2,Hea1,Score),
       (check_synset(Pr,Prr,Sc)
       ;
       lightverbs(Prr)
       ;
       superlight(Prr,SemCats),
       on(Ca,SemCats),
       main_head_match(Ca,Hea1,Scor)
       ),
       !.
*/
identbecheck(Rest,Head):-
      on(Cl0-Pr-Ro-Head-Id0,Rest);
      on(I-Head-Role-Id0,Rest), I\=_-_,
       !.

test_args_antes([],[]):-!.
test_args_antes([Ind-Pred-R-[]-Id|Args],NArgs):-
   test_args_antes(Args,NArgs),
    !.
test_args_antes([Ind-Pred-R-Arg-Id|Args],[Ind-Pred-R-Arg1-Id|NArgs]):-
   test_risolto(Arg,Arg1),
   test_args_antes(Args,NArgs),
    !.
test_args_antes([Arg|Args],NArgs):-
   test_args_antes(Args,NArgs),
    !.


test_risolto(Pre,Pred1):-
       (atomic(Pre),Pr=Pre;
        is_list(Pre),Pre=[Pr]),
       tolower(Pr,Pred),
       pred_p(pro, Pred, _, _, _),
       H=..[ante,V,Pre,Pred1],
       Dgr=..[dgrs, N, H],
       Dgr,
       \+ pred_p(pro, Pred1, _, _, _),
       !.

test_risolto(Pre,Pred1):-
       (atomic(Pre),Pr=Pre;
        is_list(Pre),Pre=[Pr]),
       tolower(Pr,Pred),
       ap_engl(Pred, G, N),
       H=..[ante,V,Pre,Pred1],
       Dgr=..[dgrs, N, H],
       Dgr,
       \+ pred_p(pro, Pred1, _, _, _),
       \+ ap_engl(Pred1, G1, N1),
       !.
test_risolto(Pre,Pred1):-
       (atomic(Pre),Pr=Pre;
        is_list(Pre),Pre=[Pr]),
       tolower(Pr,Pred),
       pred_p(pro, Pred, _, _, _),
       risolto(NoFr, Ind, Pre, Pred1),
       \+ pred_p(pro, Pred1, _, _, _),
       !.

test_risolto(Pre,Pred1):-
       (atomic(Pre),Pr=Pre;
        is_list(Pre),Pre=[Pr]),
       tolower(Pr,Pred),
       ap_engl(Pred, G, N),
       risolto(NoFr, Ind, Pre, Pred1),
       \+ pred_p(pro, Pred1, _, _, _),
       \+ ap_engl(Pred1, G1, N1),
       !.
test_risolto(Pred,Pred):-
        !.
extractheads1(Rest,Headss):-
       findall(Head1, (on(Cl-Pre1-R1-Head1-Id1,Rest), \+ grammw(Head1,_);
       on(Cl-Pre1-R1-Head1-(G-Id1),Rest), \+ grammw(Head1,_);
      on(Id-Head1-R1-Id1,Rest), Id\=_-_, \+ grammw(Head1,_);
      on(Id-Head1-R1-(G-Id1),Rest), \+ grammw(Head1,_)), Heads),
      sort(Heads,Headss),
      !.

extractheads2(Text, Texs,Headss):-
      findall(Head1, (on(Cl1-Pr1-Ro1-Head1-Id0,Text), \+ grammw(Head1,_);
      on(I1-Head1-Role1-Id0,Text), I1\=_-_, \+ grammw(Head1,_);
      on(I1-Head1-Role1-(Gov-Id0),Text), \+ grammw(Head1,_);
      on(I1-Gov-Role1-Head1,Text), I1\=_-_, \+ grammw(Head1,_);
      on(Head1-Role1-Id2,Texs), \+ grammw(Head1,_)), Heads),
      sort(Heads,Headss),
      !.
      
extractheads3(RefExs, Hypos,Texts,Hyps,Texs):-
      Hypos=[RteAdj,Predss1],
      Texts=[RteArg,Predss],
      append(RteArg,RteAdj,Hypo),
      append(Predss,Predss1,Text),
      append(Hypo,Hyps,Allhypos),
      append(Text,Texs,Alltexts),
      findargpredpairs(Allhypos,Pairsh),
      findargpredpairs(Alltexts,Pairst),
      length(Pairsh,Lh),
      length(Pairst,Lt),
      matchpairsargpreds(RefExs,Pairsh,Pairst,Rests),
      appiattisci(Rests,Rest),
      (Rest=[]
       ;
       length(Rest,Lr), 
       Lr =< 6,
       matchrestargspreds(RefExs, Rest,Pairst,Alltexts,Left),
       appiattisci(Left,Lef),
      !,
      Lef=[]
%      evaluateleft(Lh,Lt,Lr,Lef)
      ),
      !.

evaluateleft(Lh,Lt,Lr,[]):-
    Lh =<3,
    !.

evaluateleft(Lh,Lt,Lr,Left):-
      3 =< Lh,
      length(Left,L),
      (L=0
      ;
%      L\=0,
      L=1,
      Res is Lt - Lh, 
      10 =< Res,
      on(W-_,Left),
      recover_descs(W,Ws),
      spy_lower(W,_,P1),
      findall(Ww,( 
                   (is_list(Ws),
                    on(Ww,Ws)
                    ;
                    atomic(Ws),Ww=Ws),
                    spy_lower(Ww,Low,Pol),
                    (
                     Pol=1
                     ;
                     (hrvd(Low,Val)
                     ;
                     hrvd(W,Val)),                
                     (atomic(Val),(Val=0;Val=2)
                      ;
                      is_list(Val),(on(0,Val);on(2,Val)))
                      )
                      ;
                      qmq(W)
                      ;
                      locwn(W)
                     ),Wors), Wors=[],
      on(_-W1,Left),
      spy_lower(W1,_,P2),
      recover_descs(W1,Ws1),
      findall(Ww1,(
                   (is_list(Ws1),
                    on(Ww1,Ws1)
                    ;
                    atomic(Ws1),Ww1=Ws1),
                   spy_lower(Ww1,Low1,Pol1),
                   (
                     Pol1=1
                     ;
                   (hrvd(Low1,Val)
                    ;
                    hrvd(Ww1,Val)),
                   (atomic(Val),(Val=0;Val=2)
                      ;
                     is_list(Val),(on(0,Val);on(2,Val)))
                     )
                      ;
                      qmq(W1)
                      ;
                      locwn(W1)
                     ),Wors1), Wors1=[],
/*      P1=P2,
      Res is Lt - Lh,
      (L=<2,Res=<10, 2=<Lr
      ;
      L=<3,Res=<2, 2=<Lr),
*/      nl,nl,
      write('RECOVERED SLOPPY SEMANTIC SIMILARITY between the following words'),
      nl,
      write(Left),
      nl,nl
      ),
      !.

hrvd(Low,Val):-
   hrv(Low,Val).
hrvd(Low,0):-
   remarkevents(Low),
   !.
remarkevents(V):-
   mdangr(Evs), on(V,Evs)
   ;
   illw(Evs), on(V,Evs)
   ;
   guilt(Evs), on(V,Evs)
   ;
   danger_item(V)
   ;
   ngt(V),
   !.

sloppy_match(Pred,Pred,111):-!.

sloppy_match(Pred1,Pred2,111):-
   (\+ processverb(Pred1), \+ processverb(Pred2);
     processverb(Pred1),processverb(Pred2)),
   sloppymatch(Pred1,Pred2),
   !.      
sloppy_match(Pred1,Pred2,111):-
   (\+ processverb(Pred1), \+ processverb(Pred2);
     processverb(Pred1),processverb(Pred2)),
      atomic(Pred1),
      atomic(Pred2),
    \+ if_first_name(Pred1),
    \+ if_first_name(Pred2),
    \+ locwn(Pred1),
    \+ locwn(Pred2),
   spy_lower(Pred1,Pre1,Po),
   spy_lower(Pred2,Pre2,Pol),
   (Po=1;Pol=1),
   sloppymatch(Pre1,Pre2),
   !.      
sloppy_match(Pred1,Pred2,111):-
   cac(Pred1,Pred2),
   !.
sloppy_match(Pred1,Pred2,111):-
   c_cat(Pred1,Pred2),
   !.
sloppy_match(Pred1,Pred2,111):-
      atomic(Pred1),
      atomic(Pred2),
   spy_lower(Pred1,Pre1,Po),
   spy_lower(Pred2,Pre2,Pol),
   cac(Pred1,Pred2),
   !.
sloppy_match(Pred1,Pred2,111):-
      atomic(Pred1),
      atomic(Pred2),
   spy_lower(Pred1,Pre1,Po),
   spy_lower(Pred2,Pre2,Pol),
   c_cat(Pred1,Pred2),
   !.
  
sloppymatch(Pre1,Pre2):-
   not_antons(Pre1,Pre2),
   (remarkevents(Pre1),remarkevents(Pre2)
    ;
    \+remarkevents(Pre1),\+remarkevents(Pre2)),
   findall(Pol1-Pol2,(hrvd(Pre1,Pol1);hrvd(Pre2,Pol2)),Pols),
   (Pols=[];
     Pols\=[],findall(P,((on(P-_,Pols);on(_-P,Pols)),
                     nonvar(P),P=0),Ps), 
                     (Ps=[]
                     ;
                     length(Ps,L1),
                     length(Pols,L2),
                     L1=L2)),
   mb(Pre1,Inds1),
   mb(Pre2,Inds2),
   (is_list(Inds1),is_list(Inds2),
     intersection(Inds1,Inds2, Ints), 
     Ints\=[]
     ;
    is_list(Inds1),atomic(Inds2),
     on(Inds2,Inds1)
     ;
    is_list(Inds2),atomic(Inds1),
     on(Inds1,Inds2)
     ;
     Inds1=Inds2
    ),
    length(Ints,L), 1=<L,
   !.

process_rest_pas(RefExs,Head,Pred,[Head2-Pred1|Pairst],Alltexts,[]):-
         processverb(Pred),
       ( 
%       sloppy_match(Head,Head2,L)
%       ;
       stringof(List,Head2), on('_',List),
       main_head_match(Head,Head2,L)
       ;
       stringof(List,Head2), on('_',List),
       main_head_match(Head,Head2,L)
       ),
        trova_CatSem(n,Pred1,CatSem), 
        (on(evento,CatSem);on(attivita,CatSem);on(tempo,CatSem)),
        !.
process_rest_pas(RefExs,Head,Pred,[Pred2-Pred1|Pairst],Alltexts,[]):-
       main_head_match(Pred2,Pred,L),
       Ref=ref_ex(Ind,Pred,Tab,_,_,_,CatSem,Func/Ruolo)/S-_,
       RefExs=[Refss,RefEx1],
       on(Ref, Refss),
       on(Head,Tab),
        !.
process_rest_pas(RefExs,Head,Pred,[Head1-Pred1|Pairst],Alltexts,[]):-
       main_head_match(Pred1,Pred,L),
       Ref=ref_ex(Ind,Head,Tab,_,_,_,CatSem,Func/Ruolo)/S-_,
       Ref1=ref_ex(Ind1,Head1,Tab1,_,_,_,CatSem1,Func1/Ruolo1)/S1-_,
       RefExs=[Refss,RefEx1],
       on(Ref, Refss),
       on(Ref1, RefEx1),
      intersection(CatSem,CatSem1, Ints), 
      (length(Ints,L), 
       (1<L;CatSem=CatSem1)
       ;
       CatSem=[A],generic_head(Head,Ca),
       controlla_cats(Ca,CatSem1)
       ;
       CatSem1=[A],generic_head(Head1,Ca1),
       controlla_cats(Ca1,CatSem)
       ),
        !.
process_rest_pas(RefExs,Head,Pred,[Head1-Pred2|Pairst],Alltexts,[]):-
       (main_head_match(Pred,Pred2,Sco);
         consistent_preds(Pred,Pred2,L)),
        (spy_lower(Head,Low,Pol), Pol=0
        ;
        spy_lower(Head,Low,Pol), 
        spy_lower(Head1,Low1,Pol1), 
        (Pol=Pol1
          ;
          Low=Head1
          ;
          Head=Low1
          ;
          jj(Low)
          ;
          \+ mub(Head))
         ),
       main_head_match(Head,Head1,Sc),
%        sloppy_match(Head,Head1,L)),
        !.
process_rest_pas(RefExs,Head,Pred,[Head1-Pred2|Pairst],Alltexts,[]):-
       nogen_member(I-Head1-specif-Head,Alltexts),
       main_head_match(Pred,Pred2,Sco),
%         sloppy_match(Pred,Pred2,L)),
        !.
process_rest_pas(RefExs,Head,Pred,[Head1-Pred2|Pairst],Alltexts,[]):-
       integer(Head),
       locwn(Pred),
       consistent_preds(Pred,Head1,Sco),       
       main_head_match(Head,Pred2,L1),
        !.
process_rest_pas(RefExs,Head,Pred,[Head2-Pred1|Pairst],Alltexts,Rest):-
        process_rest_pas(RefExs,Head,Pred,Pairst,Alltexts,Rest),
        !.
/*
process_rest_pas(RefExs,Head,Pred,Pairst,Alltexts,[Head-Pred]):-
        !.
*/        
newrestmatchheadpreds(Head,Pred,Pairst):-
      (nogen_member(Head1-Pred1,Pairst);
        nogen_member(Pred1-Head1,Pairst)),
       recover_descs(Head1,Heads), 
       is_list(Heads), length(Heads,L), 1<L,
       on(Pred2,Heads),
       consistent_preds(Pred,Pred2,Sco),       
       on(Head2,Heads), Head2\=Pred2,
       main_head_match(Head,Head2,L1),
        !.
newrestmatchheadpreds(Head,Pred,Pairst):-
       integer(Head),
       locwn(Pred),
      (nogen_member(Head1-Pred1,Pairst);
        nogen_member(Pred1-Head1,Pairst)),
       consistent_preds(Pred,Head1,Sco),       
      (nogen_member(Head11-Pred2,Pairst);
        nogen_member(Pred2-Head11,Pairst)),
       main_head_match(Head,Pred2,L1),
        !.
newrestmatchheadpreds(Head,Pred,Pairst):-
       locwn(Pred),
      (nogen_member(Head1-Pred1,Pairst);
        nogen_member(Pred1-Head1,Pairst)),
       consistent_preds(Pred,Head1,Sco),       
      (nogen_member(Head11-Pred2,Pairst);
        nogen_member(Pred2-Head11,Pairst)),
       main_head_match(Head,Pred2,L1),
        !.


matchrestargspreds(RefExs, [],Pairst,Alltexts,[]):-!.
matchrestargspreds(RefExs, [[]-Pred|Pairsh],Pairst,Alltexts,Left):-
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-[]|Pairsh],Pairst,Alltexts,Left):-
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
      newrestmatchheadpreds(Head,Pred,Pairst),
      matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.

matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
      (s_is_ax(Head,Trans);
        s_is_ax(Pred,Trans)),
       recover_descs(Trans,Heads),
       on(Pred2,Heads),
      (nogen_member(Head1-Pred1,Pairst);
        nogen_member(Pred1-Head1,Pairst)),
       consistent_preds(Pred2,Pred1,Sco),       
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       nogen_member(Head-Pred,Pairst),
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       (prepos(Head),
       nogen_member(Pred-Pred1,Pairst),
       trova_CatSem(n,Pred1,CatSem), 
       (on(tempo,CatSem);on(nquant,CatSem))
       ;
       prepos(Pred),
       nogen_member(Head-Pred1,Pairst),
       trova_CatSem(n,Pred1,CatSem), 
       (on(tempo,CatSem);on(nquant,CatSem))
       ),
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       (prepos(Head),
       nogen_member(Pred2-Pred1,Pairst),
       spy_lower(Pred2,Low,Pol), 
       spy_lower(Pred,Low1,Pol1), Pol=Pol1,
       main_head_match(Pred2,Pred,L),
       Ref=ref_ex(Ind,Pred,Tab,_,_,_,CatSem,Func/Ruolo)/S-_,
       RefExs=[Refss,RefEx1],
       on(Ref, Refss),
       (on(nquant,CatSem)
        ;
        Ref1=ref_ex(Ind1,Pred2,Tab1,_,_,_,CatSem1,Func1/Ruolo1)/S1-_,
        on(Ref1, RefEx1),
        controlla_cats(CatSem,CatSem1)
        )
        ;
       prepos(Pred),
       nogen_member(Pred2-Pred1,Pairst),
       spy_lower(Pred2,Low,Pol), 
       spy_lower(Pred,Low1,Pol1), Pol=Pol1,
       main_head_match(Pred2,Head,L),
       Ref=ref_ex(Ind,Head,Tab,_,_,_,CatSem,Func/Ruolo)/S-_,
       RefExs=[Refss,RefEx1],
       on(Ref, Refss),
       (on(nquant,CatSem)
        ;
        Ref1=ref_ex(Ind1,Pred2,Tab1,_,_,_,CatSem1,Func1/Ruolo1)/S1-_,
        on(Ref1, RefEx1),
        controlla_cats(CatSem,CatSem1)
        )),
        matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       (prepos(Head),
       nogen_member(Pred2-Pred1,Pairst),
       spy_lower(Pred2,Low,Pol), 
       spy_lower(Pred,Low1,Pol1), Pol=Pol1,
       main_head_match(Pred2,Pred,L),
       on(Cl-Pred2-Ro1-Head1-Id0,Alltexts),
       stringof(List,Cl), List=[c|_]
       ;
       prepos(Head),
       nogen_member(Pred2-Pred1,Pairst),
       spy_lower(Pred2,Low,Pol), 
       spy_lower(Pred,Low1,Pol1), Pol=Pol1,
       main_head_match(Pred2,Head,L),
       on(Cl-Pred2-Ro1-Head1-Id0,Alltexts),
       stringof(List,Cl), List=[c|_]),
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       prepos(Head),
       nogen_member(Head1-Pred1,Pairst),
       prepos(Head1),
       (main_head_match(Pred1,Pred,L)
       ;
       integer(Pred),
       qm(Pred1),
       stringof(List,Pred1),
       (remove('/',List,Lis);remove('%',List,Lis)),
       stringof(Lis,Int),
       Int=Pred
       ;
       integer(Pred1),
       qm(Pred),
       stringof(List,Pred),
       (remove('/',List,Lis);remove('%',List,Lis)),
       stringof(Lis,Int),
       Int=Pred1
       ),
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       locwn(Head),
       spy_lower(Head,Low,Pol), Pol=1,
       nogen_member(Pred2-Head,Pairst),
       prepos(Pred2),
       (nogen_member(Pr-Pred,Pairst);
         nogen_member(Pr-Pred1,Pairst),
       main_head_match(Pred1,Pred,L)),
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
        process_rest_pas(RefExs,Head,Pred,Pairst,Alltexts,Rest),
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
       (spy_lower(Head,Low,Pol),
        Pol=1,
        (wsentence_start(Head);
           wsentence_start(Hea),strictmatch_approximate(Hea,Head)),
         Head1=Low, Pred1=Pred
        ;
        spy_lower(Pred,Low,Pol),
        Pol=1,
        (wsentence_start(Pred);
           wsentence_start(Hea),strictmatch_approximate(Hea,Pred)),
          Head1=Head,Pred1=Low),
       (nogen_member(Head1-Pred1,Pairst);
       nogen_member(Pred1-Head1,Pairst)),
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
      spy_lower(Head,Low,Pol),
      nogen_member(Head1-Pred,Pairst),
      spy_lower(Head1,Low1,Pol1),
      Low=Low1,
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,Left):-
      (ownpred(Pred),
      on(Head-poss-Id,Alltexts)
      ;
      ownpred(Head),
      on(Pred-poss-Id,Alltexts)
      ;
      ownpred(Head),
      on(Pred1-poss-Id,Alltexts),
      lightverbs(Pred)
      ),
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head|Pairsh],Pairst,Alltexts,Left):-
       atomic(Head),Head\=_-_,
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.
matchrestargspreds(RefExs, [Head-Pred|Pairsh],Pairst,Alltexts,[Head-Pred|Left]):-
       matchrestargspreds(RefExs, Pairsh,Pairst,Alltexts,Left),
      !.

ownpred(own).
ownpred(owner).
ownpred(possess).
ownpred(possessor).

checkverbproclight(Pred,Pred2):-
%    \+ lightverbs(Pred), \+ lightverbs(Pred2),
    (
    \+ processverb(Pred), \+ processverb(Pred2);
     processverb(Pred),processverb(Pred2)),
     !.

process_pas(RefExs,Head,Pred,[Head2-Pred2|Pairst],[]):-
           qmq(Head),
       trova_CatSem(n,Head2,K),
       (qmq(Head2);
       is_list(K),on(nquant,K)),
       checkverbproclight(Pred,Pred2),
        consistent_preds(Pred,Pred2,L),
        !.
process_pas(RefExs,Head,Pred,[Head2-Pred2|Pairst],[]):-
        spy_lower(Head,Low,Pol), 
        spy_lower(Head2,Low1,Pol1), 
         (Pol=Pol1;Low=Head2;Head=Low1;wsentence_start(Head)),
        main_head_match(Head,Head2,Sco),
        checkverbproclight(Pred,Pred2),
        consistent_preds(Pred,Pred2,L),
        !.
process_pas(RefExs,Head,Pred,[Head2-Pred2|Pairst],[]):-
        spy_lower(Head,Low,Pol), 
        spy_lower(Pred2,Low1,Pol1), 
         (Pol=Pol1;Low=Pred2;Head=Low1;wsentence_start(Head)),
        main_head_match(Head,Pred2,Sco),
        checkverbproclight(Pred,Head2),
        consistent_preds(Pred,Head2,L),
        !.
process_pas(RefExs,Head,Pred,[Head2-Pred2|Pairst],[]):-
        spy_lower(Pred,Low,Pol), 
        spy_lower(Head2,Low1,Pol1), 
         (Pol=Pol1;Low=Head2;Pred=Low1;wsentence_start(Head)),
        main_head_match(Head2,Pred,Sco),
        checkverbproclight(Pred2,Head),
        consistent_preds(Head,Pred2,L),
        !.
process_pas(RefExs,Head,Pred,[Head2-Pred2|Pairst],[]):-
        spy_lower(Head,Low,Pol), 
        spy_lower(Head2,Low1,Pol1), 
         (Pol=Pol1;Low=Head2;Head=Low1;wsentence_start(Head)),
        main_head_match(Head,Head2,Sco),
        nogen_member(Pred3-Head3,Pairst),
        checkverbproclight(Pred3,Pred),
        consistent_preds(Pred,Pred3,L),
        main_head_match(Head3,Pred,Sc),
%         sloppy_match(Head3,Pred,Sc),
        !.
process_pas(RefExs,Head,Pred,[Head2-Pred2|Pairst],[]):-
        spy_lower(Pred,Low,Pol), 
        spy_lower(Head2,Low1,Pol1), 
         (Pol=Pol1;Low=Head2;Pred=Low1;wsentence_start(Head)),
        main_head_match(Head2,Pred,Sco),
        nogen_member(Pred3-Head3,Pairst),
        checkverbproclight(Pred3,Head),
        consistent_preds(Head,Pred3,L),
        main_head_match(Head3,Pred,Sc),
%         sloppy_match(Head3,Pred,Sc),
        !.
process_pas(RefExs,Head,Pred,[Head2-Pred2|Pairst],[]):-
        spy_lower(Head,Low,Pol), Pol=1,
        (nogen_member(Pred-Pred2,Pairst),
         nogen_member(Pred-Head2,Pairst),
         nogen_member(Head1-Pred3,Pairst),
%         sloppy_match(Head1,Pred,Sco),
        main_head_match(Head1,Pred,Sco),
        (nogen_member(Pred3-Pred0,Pairst)
         ;
        nogen_member(Pred0-Pred3,Pairst)),
        main_head_match(Head,Pred0,Scor),
        nogen_member(Pred0-Head3,Pairst), Head3\=Pred3,
        nogen_member(Head3-Pred1,Pairst), 
        nogen_member(Head4-Pred1,Pairst), 
        nogen_member(Head4-Pre,Pairsh)
        ),
        !.
process_pas(RefExs,Head,Pred,[Head2-Pred2|Pairst],Rest):-
        process_pas(RefExs,Head,Pred,Pairst,Rest),
        !.
process_pas(RefExs,Head,Pred,Pairst,[Head-Pred]):-
        !.

matchpairsargpreds(RefExs,[],Pairst,[]):-!.
matchpairsargpreds(RefExs,[Head-Pred|Pairsh],Pairst,Rest):-
      nogen_member(Head-Pred,Pairst),
      matchpairsargpreds(RefExs,Pairsh,Pairst,Rest),
      !.
matchpairsargpreds(RefExs,[Head-Pred|Pairsh],Pairst,Rest):-
      spy_lower(Head,Low,Pol),
      nogen_member(Head1-Pred,Pairst),
      spy_lower(Head1,Low1,Pol1),
      Low=Low1,
      matchpairsargpreds(RefExs,Pairsh,Pairst,Rest),
      !.
matchpairsargpreds(RefExs,[Head-Pred|Pairsh],Pairst,Rest):-
      nogen_member(Head1-Pred,Pairst),
      main_head_match(Head,Head1,Scor),
      matchpairsargpreds(RefExs,Pairsh,Pairst,Rest),
      !.
matchpairsargpreds(RefExs,[Head-Pred|Pairsh],Pairst,Rest):-
      nogen_member(Head-Pred1,Pairst),
      consistent_preds(Pred,Pred1,Scor),
      matchpairsargpreds(RefExs,Pairsh,Pairst,Rest),
      !.
matchpairsargpreds(RefExs,[Head-Pred|Pairsh],Pairst,[Res|Rest]):-
      process_pas(RefExs,Head,Pred,Pairst,Res),
      matchpairsargpreds(RefExs,Pairsh,Pairst,Rest),
      !.        
matchpairsargpreds(RefExs,[Head|Pairsh],Pairst,Rest):-
      atomic(Head), Head\=_-_,
      matchpairsargpreds(RefExs,Pairsh,Pairst,Rest),
      !.        
matchpairsargpreds(RefExs,Pairsh,Pairst,Pairsh):-
      !.
            
cleanoutput([],[]):-!.
cleanoutput(['discourse bound'-_|Pairss],Pairs):-
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([Art-_|Pairss],Pairs):-
     arts(Art),
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([Art-_|Pairss],Pairs):-
      stringof(List,Art), List=[s,n|_],
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([Art-_|Pairss],Pairs):-
      stringof(List,Art), List=[c,l|_],
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([Art-_|Pairss],Pairs):-
     stringof(List,Art),
     length(List,L),1=L,
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([and-V|Pairss],Pairs):-
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([of-V|Pairss],Pairs):-
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([V-of|Pairss],Pairs):-
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([to-V|Pairss],Pairs):-
     inf_v(V,_),
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([nil-_|Pairss],Pairs):-
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([_-nil|Pairss],Pairs):-
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([_-Art|Pairss],Pairs):-
     arts(Art),
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([_-(A-B-C)|Pairss],Pairs):-
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([_-_-(A-B)|Pairss],Pairs):-
     cleanoutput(Pairss,Pairs),
     !.
cleanoutput([A|Pairss],[A|Pairs]):-
     cleanoutput(Pairss,Pairs),
     !.

findargpredpairs(Text,Pairs):-
     findargpredpair(Text,Pairss),
     cleanoutput(Pairss,Pairs),
     !.
findargpredpair(Text,Pairs):-
      findall(Head1-Gov, 
      (on(Cl1-Gov-Ro1-Head1-Id0,Text),
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1))
      ;
      on(I1-Head1-Role1-Sem-Gov,Text),
      on(Cl1-Gov-Ro1-Head1-Id0,Text), 
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1))
      ;
      on(Head1-Role1-I1,Text), I1\=_-_, Role1\=det,
      on(I1-Head1-Role-Sem-Gov,Text),
      on(Cl1-Gov-Ro1-Head-Id0,Text), 
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1))
      ;
      on(Head1-Role1-I1,Text), I1\=_-_, Role1\=det,
      on(I1-Head-Role-Head1,Text),
      on(Cl1-Gov-Ro1-Head-I1,Text), 
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1))
      ;
      on(I1-Head1-Role1-Dep,Text), I1\=_-_, Role1\=det,
      on(I1-Head1-Role-Sem-Gov,Text),
      on(Cl1-Gov-Ro1-Head-Id0,Text), 
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1))
      ;
      on(Head1-Role1-Id2,Text), Id2\=_-_, Role1\=det,
      on(I1-Head1-Role1-Sem-Gov,Text),
      on(Cl1-Gov-Ro1-Head-Id0,Text), 
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1))
      ;
      on(Head1-Role1-I1,Text), Head1\=_-_,Role1\=_-_,I1\=_-_,
      on(Gov-Ro1-I1,Text), Gov\=_-_,I1\=_-_, Rol\=_-_,
      Role1\=det,Ro1\=det,
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);qmq(Head1))
      ;
      on(Cl1-Gov1-Ro1-Head-I1,Text), 
      on(I1-Head-ncmod/Role-Head1-Sn,Text),
      (temp_rol(Role);loc_rol(Role)),
      on(Cl1-Gov1-Ro2-Head2-I2,Text), Head2\=Head,
      on(I2-Head2-specif-Gov,Text),
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov-Ro1-Head-Sn,Text),
      qm(Head),
      on(Sn-Head-ncmod/specif-Hea-Sn1,Text),
      on(Sn1-Hea-ncmod/Role-Head2-Sn2,Text),
      on(Sn2-Head2-ncmod/Role-Sem-Hea,Text),
      sub_w_sn(Sem,compar),
      on(Sn-Head2-specif-Head1,Text), Head2\=_-_, Sn\=_-_,
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov-Ro1-Head-Sn,Text),
      qm(Head),
      on(Sn-Head-ncmod/specif-Hea-Sn1,Text),
      on(Sn1-Hea-ncmod/Role-Head1-Sn2,Text),
      on(Sn2-Head1-ncmod/Role-Sem-Hea,Text),
      sub_w_sn(Sem,compar),
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov-Ro1-Head-I1,Text), 
      on(Gov-Ro-Sem-Head1,Text), Gov\=Head1,atomic(Head1)
      ;
      on(Cl1-Gov1-Ro1-Head-I1,Text), 
      on(I1-Head-ncmod/Role-Head1-Sn,Text),
      (temp_rol(Role);loc_rol(Role)),
      on(Cl1-Gov1-Ro2-Gov-I2,Text), Gov\=Head, Gov\=Head1,
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov1-Ro1-Head-I1,Text),
      lightverbs(Gov1),
      on(Sn-Head1-ncmod/Role1-Sem-Head,Text),
      on(Sn1-Gov-ncmod/Role-Sem1-Gov1,Text),
      (temp_rol(Role);loc_rol(Role)),
      on(Gov-ncmod/Role-Sn1,Text), Gov\=Head1,
        atomic(Gov),atomic(Head1)
      ;
      on(Cl1-Gov1-Ro1-Gov-I1,Text), 
      on(Sn-Head1-ncmod/Role-Hea-Gov1,Text),
      (temp_rol(Role);loc_rol(Role)),
      on(Head1-ncmod/Role-Sn,Text), Gov\=Head1,
        atomic(Gov),atomic(Head1)
      ;
      on(Sn-Gov-ncmod/Role-Head1-Gov1,Text), Gov\=Head1,
        atomic(Gov),atomic(Head1),
      (temp_rol(Role);loc_rol(Role))
      ;
      on(Sn-Gov-specif-Head1,Text), Gov\=_-_, Sn\=_-_,
        atomic(Gov),atomic(Head1)
      ;
      on(Sn-Gov-mod-Head1,Text), Gov\=_-_, Sn\=_-_,
        atomic(Gov),atomic(Head1)
      ;
      on(Head1-det-I1,Text), I1\=_-_, 
      on(I1-Gov-Role-Head1,Text),
        atomic(Gov),atomic(Head1),
       (\+ grammw(Head1,_);prepos(Head1);qmq(Head1))
      ), Heads),
      sort(Heads,Pairs),
      !.

/* extend information associated to adjuncts, to arguments of the governing predicates*/

matchextractedheads(Heads, Heads1,[Head-Head2|Headds],No):-
           nogen_member(Head,Heads),
           nogen_member(Head2,Heads1),
           main_head_match(Head,Head2,Sco),
       remove_all([Head,Head2],Heads,Hs),
       remove_all([Head,Head2],Heads1,Hs1),
       matchextractedheads(Hs, Hs1,Headds,No),
       !.
/*
matchextractedheads(Heads, Heads1,[Head-Head2|Headds],No):-
           nogen_member(Head,Heads),
           nogen_member(Head2,Heads1),
           sloppy_match(Head,Head2,Sco),
       remove_all([Head,Head2],Heads,Hs),
       remove_all([Head,Head2],Heads1,Hs1),
       matchextractedheads(Hs, Hs1,Headds,No),
       !.
*/
matchextractedheads(Heads, Heads1,[],Heads):-
       !.

checkheadsinters([]):-!.
checkheadsinters(Heads):-
       findall(H,(on(H,Heads),notintersect(H)),K),
       K=Heads,
       !.


matchpropositional(Hypo,Text,Args):-
       Args=[Hyp,Tex],
      (on(A-B-C-D-E-F-G-H-I,Hypo),
      on(A1-T-C1-D-Mod-Prog-Aux-J-I1,Text)
        ;
      on(A1-B-C-D-E-F-G-H-I,Text),
      on(A-T-C1-D-Mod-Prog-Aux-J-I1,Hypo)
        ;
      on(Ind-A-C-D-Id,Hyp),
      on(In1-B-C1-A1-I,Tex)
       ),
      checkmodals_deps(A,E,Mod,G,Prog,Hypo,Text),
      match_aspect(I,I1),
      (allconsistent_preds(A,B,Score);
      allconsistent_preds(A,A1,Score)),
      !.
matchpropositional(Hypo,Text,Args):-
       Args=[Hyp,Tex],
      (on(A-B-C-D-E-F-G-H-I,Hypo),
      on(A1-T-C1-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N,Text)
       ;
      on(A1-B-C-D-E-F-G-H-I,Text),
      on(A-T-C1-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N,Hypo)
        ;
      on(Ind-A-C-D-Id,Hyp),
      on(In1-B-C1-A1-I,Tex)
       ),
      checkmodals_deps(A,E,Mod,G,Prog,Hypo,Text),
      match_aspect(I,I1),
      (allconsistent_preds(A,B,Score);
      allconsistent_preds(A,A1,Score)),
      !.
matchpropositional(Hypo,Text,Args):-
       Args=[Hyp,Tex],
      (on(A-B-C-D-E-F-G-H-I,Text),
      on(A1-T-C1-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N-Res,Hypo)
        ;
      on(A1-B-C-D-E-F-G-H-I,Hypo),
      on(A-T-C1-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N-Res,Text)
        ;
      on(Ind-A-C-D-Id,Hyp),
      on(In1-B-C1-A1-I,Tex)
       ),
      checkmodals_deps(A,E,Mod,G,Prog,Hypo,Text),
      match_aspect(I,I1),
      (allconsistent_preds(A,B,Score);
      allconsistent_preds(A,A1,Score)),
      !.

matchpropositional(Hypo,Text,Args):-
       Args=[Hyp,Tex],
      (on(A-B-P1-D-E-F-G-H-I,Text),
       on(A1-T-P2-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N-Res,Hypo)
       ;
      on(A1-B-P1-D-E-F-G-H-I,Hypo),
      on(A-T-P2-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N-Res,Text)
       ;
      on(A1-B-P1-D-E-F-G-H-I,Text),
       on(A-T-P2-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N,Hypo)
       ;
      on(A-B-P1-D-E-F-G-H-I,Hypo),
      on(A1-T-P2-D-Mod-Prog-Aux-Pro-I1-J-K-L-M-N,Text)
       ;
      on(A-B-P1-D-E-F-G-H-I,Hypo),
      on(A1-T-P2-D-Mod-Prog-Aux-J-I1,Text)
        ;
      on(A1-B-P1-D-E-F-G-H-I,Text),
      on(A-T-P2-D-Mod-Prog-Aux-J-I1,Hypo)
              ;
      on(Ind-A-C-D-Id,Hyp),
      on(In1-B-C1-A1-I,Tex)
       ),
      (allconsistent_preds(A,B,Score);
      allconsistent_preds(A,A1,Score)),
      checkmodals_deps(A,E,Mod,G,Prog,Hypo,Text),
      match_aspect(I,I1),
      !.

extractbestrols([], []):-!.
extractbestrols([Sco|Scores], [Sco|BScore]):-
      Sco=<50,
%      Sco=<30,
      extractbestrols(Scores, BScore),
      !.
extractbestrols([Sco|Scores], BScore):-
      extractbestrols(Scores, BScore),
      !.

lengthscore(Score,L):-
            2=<L, Score < 210;
            3=<L, Score < 310;
            4=<L, Score < 410;
            5=<L, Score < 510;
            7=<L, Score < 610;
            8=<L, Score < 750;
            9=<L, Score < 810;
            10=<L, Score < 1000;
            15=<L, 1000 =< Score,
            !.
 lengthscore(Score,L):-
            L=<2, Score < 210;
            L=<3, Score < 310;
            L=<4, Score < 410;
            L=<5, Score < 510;
            L=<7, Score < 610;
            L=<8, Score < 750;
            L=<9, Score < 810;
            L=<10, Score < 1000;
            L=<15, 1000 =< Score,
            !.
           
evalbest_roles(Scores, Score,Roles):-
            Score < 150,
            !.
          
evalbest_roles(Scores, Score,Roles):-
          length(Roles,L), 
          lengthscore(Score,L),
          extractbestrols(Scores, BScore),
          length(BScore,L1), 
%          1=<L1,
          1<L1,
          !.

match_head_roles(P,[],[],RefExs, Score):-nonvar(Score),!.
match_head_roles(P,Preds,Preds1,RefExs, Score):-
      match_head_role(Preds,Preds1,Roless),
      cleanroles(Roless,Roles),
      check_role_adequacy(Roles,Scores),
      (
       Scores\=[],
       sommatoria(Scores, Score,_),
       evalbest_roles(Scores, Score,Roles)
       ;
       P=passive, Score=088,
       on(Ent-subj/_-Id,Preds),
       (on(Ent1-obj/_-Id1,Preds1);
        on(Ent1-iobj/_-Id1,Preds1);
        on(Ent1-xcomp/_-Id1,Preds1)),
        main_head_match(Ent,Ent1,K)
       ),
      !.

match_head_roles(P,[Head-R-Id|Preds],Preds1,[Refss,RefEx1], Score):-
      (Refss=_-RefExs;RefExs=Refss),
      appiattisci(RefExs,RefEx),
%      Ref=Head-Def-[P,G,N,C,Ro]/_,
%      remove(Head1-R1-Id1,Preds1, Preds2),
%      Ref1=Head1-Def1-[P1,G1,N1,C1,Ro1]/_,
    Ref=ref_ex(Ind,Ent,Tab,_,_,_,C,Func/Ruolo)/S-_,
    Ref1=ref_ex(Ind1,En,Tab1,_,_,_,C1,Func1/Ruolo1)/S1-_,
      (on(Ref, RefEx),
         on(Ref1, RefEx1);
       on(Ref, RefEx1),
        on(Ref1, RefEx)),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints),
      sloppy_match(En,Ent,K),
      length(Ints,L), 
      (1<L;C=C1;privileged_classes(C,C1,Ints)),
      match_head_roless(Preds,Preds1,[RefEx,RefEx1],100,Score),
%      !,
      Score\=400,
      !.

match_head_roles(P,[Head-R-Id|Preds],Preds1,[RefEx,RefEx1], Score):-
      match_head_roless(Preds,Preds1,[RefEx,RefEx1],Scores,Score),
      !,
      Score\=400,
      !.
   
match_head_roless([],Preds1,[RefEx,RefEx1], Score, Score):-!.
match_head_roless([Head-R-Id|Preds],Preds1,[RefEx,RefEx1], Score, Scores):-
      grammw(Head,K),
      match_head_roless(Preds,Preds1,[RefEx,RefEx1],Score,Scores),
      !.
match_head_roless([Head-R-Id|Preds],Preds1,[RefEx,RefEx1], Score, Scores):-
%      Ref=Head-Def-[P,G,N,C,Ro]/_,
%      remove(Head1-R1-Id1,Preds1, Preds2),
%      Ref1=Head2-Def1-[P1,G1,N1,C1,Ro1]/_,
    Ref=ref_ex(Ind,Ent,Tab,_,_,_,C,Func/Ruolo)/S-_,
    Ref1=ref_ex(Ind1,En,Tab1,_,_,_,C1,Func1/Ruolo1)/S1-_,
      (on(Ref, RefEx),
         on(Ref1, RefEx1);
       on(Ref, RefEx1),
        on(Ref1, RefEx)),
%      Def\=0,Def1\=0,
%      main_head_match(Head,Head2,Sco),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      Ints\=[],
      length(Ints,L), 
      (1<L;C=C1;privileged_classes(C,C1,Ints)),
      (nonvar(Score), 
            (Preds\=[], 
                    (Score\=400, Scores is Score - 50;
                     Score=400, Scores=300)
                         ;
               Preds=[],
                     (Score\=400, 
                             (var(Scores), Scores=200; nonvar(Scores));
                             Score=400,
                            (var(Scores), Scores=300; nonvar(Scores))
                             ))
        ;
        var(Score), Preds\=[], Score=100,
      match_head_roless(Preds,Preds1,[RefEx,RefEx1],Score, Scores)),
      !.
match_head_roless([Head-R-Id|Preds],Preds1,[RefEx,RefEx1], Score, Scores):-
      (Scores=400,Scorr=Scores;Score=400,Scorr=400;Scorr=Scores),
      match_head_roless(Preds,Preds1,[RefEx,RefEx1],Scorr, Score),
      !.
extract_head_coord(Head,Hea,R1,Preds1):-      
     (atomic(Head), 
       on(Hea-R1-Id1,Preds1),
       main_head_match(Hea,Head,Sco),Hea1=Head
       ;
       nonvar(Head),
       Head=..[and,Args],
       on(Hea,Args),
       on(Hea-R1-Id1,Preds1)).
      
match_besthead_role([],Rest, []):-!.
match_besthead_role([Head-R-Id|Preds],Preds1, [R-R3|Roles]):-
      extract_head_coord(Head,Hea,R1,Preds1),
      w_e_pr(R1,Punt),
      Punt=<10,
%      Punt=<40, 
      on(Head1-R2-Id1,Preds1), 
      w_e_pr(R2,Punt1),
%      Punt1=<50, 
      Punt1=<40, 
%      Punt1=<20, 
%      Punt1=<10, 
       (R3=R2
        ;
       R3=R1),
      check_main_head_roles(Hea,Head1),
%      main_head_match(Hea,Head1,Sco),
      elimina(Hea-R1-Id1,Preds1, Preds2),
      match_besthead_role(Preds,Preds2,Roles),
      !.
match_besthead_role([Head-R-Id|Preds],Preds1, Roles):-
      match_besthead_role(Preds,Preds1,Roles),
      !.

match_head_role([],Rest, []):-!.
match_head_role([Head-R-Id|Preds],Preds1, Roles):-
      nonvar(R),
      (R=det;R=form),
      match_head_role(Preds,Preds1,Roles),
      !.
/*
match_head_role([Head-R-Id|Preds],Preds1, [Head/R-Heads/R2|Roles]):-
%      on(Head-R1-Id1,Preds1),
      nonvar(R),
      extract_head_coord(Head,Hea,R1,Preds1),
      remove(Hea-R1-Id1,Preds1, Preds2),
%      check_role_adequacy([R-R1],Scores),
%      Scores\=[],
      remove(Heads-R2-Id2,Preds1, Preds3),
      nonvar(Id2), Id2=Id1,
      Heads\=Head, R2\=det,
      match_head_role(Preds,Preds3,Roles),
      !.
*/

match_head_role([Head-R-Id|Preds],Preds1, [Head/R-Hea/R1|Roles]):-
%      on(Head-R1-Id1,Preds1),
      nonvar(R),
      extract_head_coord(Head,Hea,R1,Preds1),
      elimina(Hea-R1-Id1,Preds1, Preds2),
      checkid(Id1),
       R1\=det,
      (on(Hea-R1-Id1,Preds2),
       Predss=[Head-R-Id|Preds]
       ;
       Predss=Preds),
      match_head_role(Preds,Preds2,Roles),
      !.
match_head_role([Head-R-Id|Preds],Preds1, [Head/R-Head1/R1|Roles]):-
      nonvar(R),
      atomic(Head),
      nogen_member(Head1-R1-Id1,Preds1),
      checkid(Id1),
      main_head_match(Head,Head1,Sco),
      elimina(Head1-R1-Id1,Preds1, Preds2),
      match_head_role(Preds,Preds2,Roles),
      !.
match_head_role([Head-R-Id|Preds],Preds1, [Head/R-Head1/R1|Roles]):-
      nonvar(R),
      \+ atomic(Head),
      nonvar(Head),
      on(Head1-R1-Id1,Preds1),
      checkid(Id1),
      Head=..[and,Arg], on(Hea,Arg),
      main_head_match(Hea,Head1,Sco),
      elimina(Head1-R1-Id1,Preds1, Preds2),
      match_head_role(Preds,Preds2,Roles),
      !.
match_head_role([Head-R-Id|Preds],Preds1, Roles):-
      match_head_role(Preds,Preds1,Roles),
      !.

checkid(Id):-
      stringof(List,Id),
      List=[s,n|_],!.

check_role_adequacy([],[]):-!.
check_role_adequacy([R-R1|Roles],[Score|Scores]):-
      lessstrictcheck(R, R1, Score),
      check_role_adequacy(Roles,Scores),
      !.
check_role_adequacy([R-R1|Roles],Scores):-
      check_role_adequacy(Roles,Scores),
      !.

strictcheck(R,R1,1):-
       \+ opposing_roles(R1,R),
      !.
/*
strictcheck(R,R,1):-
        R\=specif,
        w_e_pr(R,Punt),
        (10<Punt, Punt=<40
         ;
         Punt=<10),         
        !.
strictcheck(R,R1,Score):-
      w_e_pr(R,Punt),
      w_e_pr(R1,Punt1),
      (Score is Punt + Punt1,
       \+ opposing_roles(R1,R)
       ;
      checkspecif(Punt,Punt1,R,R1), Score=100),
%       Score=100),
      !.
*/
lessstrictcheck(F/R,F1/R,1):-
        R\=specif, R\=det, R\=mod,
        w_e_pr(R,Punt),
        (10<Punt, Punt=<40
         ;
         Punt=<10),         
        !.
lessstrictcheck(R,R,1):-
      R\=_/_,
        R\=specif, R\=det, R\=mod,
        w_e_pr(R,Punt),
        (10<Punt, Punt=<40
         ;
         Punt=<10),         
        !.
lessstrictcheck(F/R,R,1):-
        R\=specif, R\=det, R\=mod,
        w_e_pr(R,Punt),
        (10<Punt, Punt=<40
         ;
         Punt=<10),         
        !.
lessstrictcheck(R,F/R,1):-
        R\=specif, R\=det, R\=mod,
        w_e_pr(R,Punt),
        (10<Punt, Punt=<40
         ;
         Punt=<10),         
        !.
lessstrictcheck(F/R,F1/R1,Score):-
      w_e_pr(R,Punt),
      w_e_pr(R1,Punt1),
      Score is Punt + Punt1,
%      strict_opposing_roles(R1,R),
      opposing_roles(R1,R),
      \+ inadmissibles(R,R1),
      (R=R1, \+ r0(R);R\=R1),
      checkspecif(Punt,Punt1,R,R1),
      !.
lessstrictcheck(R,F1/R1,Score):-
      R\=_/_,
      w_e_pr(R,Punt),
      w_e_pr(R1,Punt1),
      Score is Punt + Punt1,
%      strict_opposing_roles(R1,R),
      opposing_roles(R1,R),
      \+ inadmissibles(R,R1),
      (R=R1, \+ r0(R);R\=R1),
      checkspecif(Punt,Punt1,R,R1),
      !.
lessstrictcheck(F/R,R1,Score):-
      R1\=_/_,
      w_e_pr(R,Punt),
      w_e_pr(R1,Punt1),
      Score is Punt + Punt1,
%      strict_opposing_roles(R1,R),
      opposing_roles(R1,R),
      \+ inadmissibles(R,R1),
      (R=R1, \+ r0(R);R\=R1),
      checkspecif(Punt,Punt1,R,R1),
      !.
lessstrictcheck(R,R1,Score):-
      R\=_/_,
      R1\=_/_,
      w_e_pr(R,Punt),
      w_e_pr(R1,Punt1),
      Score is Punt + Punt1,
%      strict_opposing_roles(R1,R),
      opposing_roles(R1,R),
      \+ inadmissibles(R,R1),
      (R=R1, \+ r0(R);R\=R1),
      checkspecif(Punt,Punt1,R,R1),
      !.

checkspecif(Punt1,Punt2,R,Role):-
      10<Punt1, Punt1=<40,
      10<Punt2, Punt2=<40,
      (        Role\=specif, Role\=det, Role\=mod
          ;
                R\=specif, R\=det, R\=mod
       )
      ;
      (Punt1<5, r0(R);Punt2<5, r0(Role))
      ;
      \+ r0(Role),\+ r0(R),
      !.

check_strict_role_adequacy([],[]):-!.
check_strict_role_adequacy([A],[]):-var(A),!.
check_strict_role_adequacy([R-R1|Roles],[Score|Scores]):-
      lessstrictcheck(R,R1,Score),
%      strictcheck(R,R1,Score),
      check_strict_role_adequacy(Roles,Scores),
      !.
check_strict_role_adequacy([R-R1|Roles],Scores):-
      check_strict_role_adequacy(Roles,Scores),
      !.

inadmissibles(R,R1):-
      filterrroles(R1,R),
      r1(R),
      r2(R1),
      !.
inadmissibles(R,R1):-
      filterrroles(R1,R),
      filter_roles(R,Ro),
      R\=Ro,
      r1(Ro),
      r2(R1),
      !.
inadmissibles(R,R1):-
      filterrroles(R1,R),
      filter_roles(R1,Ro1),
      R1\=Ro1,
      r1(R),
      r2(Ro1),
      !.
/*
inadmissibles(R,R1):-
      r1(R),
      r3(R1),!.
inadmissibles(R,R1):-
      r3(R),
      r1(R1),!.
*/
inadmissibles(R,R1):-
      filterrroles(R1,R),
      r2(R),
      r1(R1),!.
inadmissibles(R,R1):-
      filterrroles(R1,R),
      filter_roles(R,Ro),
      R\=Ro,
      r2(Ro),
      r1(R1),
      !.
inadmissibles(R,R1):-
      filterrroles(R1,R),
      filter_roles(R1,Ro1),
      R1\=Ro1,
      r2(R),
      r1(Ro1),
      !.
inadmissibles(attr,R1):-
      r1(R1),
      !.
inadmissibles(R1,attr):-
      r1(R1),
      !.

filterrroles(R1,R):-
    R1\=theme_unaff,R1\=theme_bound,
    R\=theme_unaff,R\=theme_bound,
    R\=tema_bound,R1\=tema_bound,
    !.
    
checkrefexs_loc([],RefEx):-!.
checkrefexs_loc([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
          checkluogo(Texs,Ent,Cats),
          checkluogo(Hyp,Ent,Cats),
          !.
checkrefexs_loc([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
          checkluogo(Texs,Ent,Cats),
          checkluogo(Hyp,Ent1,Cats1),
/*          (controlla_cats(Cats,Cats1)
             ;
            trova_CatSem(n,Ent,Cats2),
            controlla_cats(Cats,Cats2)),
*/          !.
checkrefexs_loc([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
           checkluogo(Texs,Ent1,Cats),
           checkluogo(Hyp,Ent,Cats1),
          (main_head_match(Ent,Ent1,Sco)
           ;
          citiesinfer(Ent,Hyper1,Super1),
          checkcityinfer(Ent1,Hyper2,Super2),
          (Hyper1=Super2;Hyper2=Super1)),
/*           ;
           controlla_cats(Cats,Cats1)
           ;
           trova_CatSem(n,Ent,Cats2),
           controlla_cats(Cats,Cats2)),
*/          !.
checkrefexs_loc([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
          checkluogo(Texs,Ent,Cats),
          checkluogo(Hyp,Ent1,Cats1),
          (main_head_match(Ent,Ent1,Sco)
           ;
          citiesinfer(Ent,Hyper,Super),
          citiesinfer(Ent,Hyper1,Super1),
          checkcityinfer(Ent1,Hyper2,Super2),
          (Hyper1=Super2;Hyper2=Super1)),
/*            ;
            controlla_cats(Cats,Cats1)
            ;
            trova_CatSem(n,Ent,Cats2),
            controlla_cats(Cats,Cats2)),
*/          !.

checkrefexs_loc([Ent|Ents2],RefEx):-
          (RefEx=[Id-Hyps,Tex|Res];
          RefEx=[Hyps,Tex|Res]),
          (Hyps=[Hyp];Hyp=Hyps),
           checkluogo(Hyp,Ent,Cats),
          (Res=[], Texx=Tex;
              Res\=[], append(Tex,Res,Texx)),
          appiattisci(Texx,Texs),
           checkluogo(Texs,Ent1,Cats1),
          (main_head_match(Ent,Ent1,Sco)
           ;
          citiesinfer(Ent,Hyper,Super),
          citiesinfer(Ent,Hyper1,Super1),
          checkcityinfer(Ent1,Hyper2,Super2),
          (Hyper1=Super2;Hyper2=Super1)),
/*            ;
            controlla_cats(Cats,Cats1)
            ;
            trova_CatSem(n,Ent,Cats2),
            controlla_cats(Cats,Cats2)),
*/          !.

/*  le chiamata singole verificano che la lista non sia vuota ma che vi siano due
entita luogo simili : se c'e' una sola indicazione locativa va bene

checkrefexs_loc([Ent|Ents2],RefEx):-
           (RefEx=[Id-Hyps,Tex|Res];
           RefEx=[Hyps,Tex|Res]),
           (Hyps=[Hyp];Hyp=Hyps),
           checkluogo(Hyp,Ent,Cats),
           \+ on(luogo,Cats),
           !.
*/


checkluogo(Hyp,Ent,Cats):-
           on(Ent-T-Fea/_, Hyp),
           Fea=[P,C,N,Cats,Ro]
            ;
           Ref=ref_ex(Ind,Ent,Tab,P,G,N,Cats,Func/Ruolo)/S-_,
           on(Ref,Hyp),
           !.

identical_GR(Ent,Rte,First):-
       Dgr=Ind-Pred-F/R-Ent-Id,
       on(Dgr,Rte),
       Dgr1=Ind1-Pred-F/R-Ent-Id1,
       on(Dgr1,First).
identical_GR(Ent,Rte,First):-
       Dgr=Ind-Pred-F/R-Ent-Id,
       on(Dgr,Rte),
       Dgr1=Ind1-Pred1-F1/R1-Ent1-Id1,
       on(Dgr1,First),
       main_head_match(Ent,Ent1,Sco),
       consistent_preds(Pred,Pred1,L),
       (w_e_pr(R,Punt);
       w_e_pr(R1,Punt)),
       Punt=<4,!.

identical_Roles(Ent,Rte,First):-
       Dgr=Ind-Pred-F/R-Ent-Id,
       on(Dgr,Rte),
       Dgr1=Ind1-Pred1-F1/R1-Ent1-Id1,
       on(Dgr1,First),
       main_head_match(Ent,Ent1,Sco),
       consistent_preds(Pred,Pred1,L),
       (w_e_pr(R,Punt);
       w_e_pr(R1,Punt)),
       Punt=<4,!.

extra_identical_Roles(Ent,Rte,First,R-R1,Pred-Pred1):-
       Dgr=Ind-Pred-F/R-Ent-Id,
       on(Dgr,Rte),
       (Dgr1=Ind1-Pred1-F1/R1-Ent1-Id1;
         Dgr1=Ind1-Pred1-F1/R1-Ent1, Ind1\=_-_;
         Dgr1=Ind1-Pred1-F1/R1-(Ent1-Id1)),
       on(Dgr1,First),
       main_head_match(Ent,Ent1,Sco),
       consistent_preds(Pred,Pred1,L),
       (w_e_pr(R,Punt);
       w_e_pr(R1,Punt)),
       Punt=<4,!.

extra_identical_Roles(Ent,Rte,First,R-R1,Pred-Ent1):-
       Dgr=Ind-Pred-F/R-Ent-Id,
       on(Dgr,Rte),
       sy(Pred),
        coml(Pred, Subs),
        appiattisci(Subs,Sub),
        on(fcomp/_,Sub),
       (Dgr1=Ind1-Pred1-F1/R1-Ent1-Id1;
         Dgr1=Ind1-Pred1-F1/R1-Ent1, Ind1\=_-_;
         Dgr1=Ind1-Pred1-F1/R1-(Ent1-Id1)),
       on(Dgr1,First),
       main_head_match(Ent,Pred1,Sco),
%       consistent_preds(Pred,Pred1,L),
       (w_e_pr(R,Punt);
       w_e_pr(R1,Punt)),
       Punt=<4,!.

extra_identical_Roles(Ent,Rte,First,R-R1,Pred-Ent1):-
       Dgr=Ind-Pred-F/R-Ent-Id,
       (Dgr1=Ind1-Pred1-F1/R1-Ent1-Id1;
         Dgr1=Ind1-Pred1-F1/R1-Ent1, Ind1\=_-_;
         Dgr1=Ind1-Pred1-F1/R1-(Ent1-Id1)),
       on(Dgr1,First),
       on(Dgr,Rte),
       sy(Pred1),
        coml(Pred1, Subs),
        appiattisci(Subs,Sub),
        on(fcomp/_,Sub),
       main_head_match(Pred,Ent1,Sco),
%       consistent_preds(Pred,Pred1,L),
       (w_e_pr(R,Punt);
       w_e_pr(R1,Punt)),
       Punt=<4,!.

nextra_identical_Roles(Ent,Rte,First,R-R1):-
       Dgr=Ind-Pred-F/R-Ent-Id,
       on(Dgr,Rte),
       (Dgr1=Ind1-Pred1-F1/R1-Ent1-Id1;
       Dgr1=Ind1-Pred1-F1/R1-Ent1, Ind1\=_-_;
         Dgr1=Ind1-Pred1-F1/R1-(Ent1-Id1)),
       on(Dgr1,First),
       main_head_match(Ent,Ent1,Sco),
       (w_e_pr(R,Punt);
       w_e_pr(R1,Punt)),
       Punt=<4,!.

strict_opposing_roles(Role,R):-
%      (Pr=r0;Pr=r1;Pr=r2;Pr=r3),
       (Pr=r1;Pr=r2),
       (Role1=..[Pr,Role];
         filter_roles(Role,R1),
         Role1=..[Pr,R1]),
        Role1,
       (Role2=..[Pr,R];
        filter_roles(R,R2),
        Role2=..[Pr,R2]),
       Role2,
      !.
strict_opposing_roles(Role,R):-
      w_e_pr(R,Punt),
      w_e_pr(Role,Punt1),
      Pun is Punt - Punt1,
      Pun1 is Punt + Punt1,
      (
      0=<Pun, 
         Pun=< 2;
       Pun=<0, Pu is Punt1 - Punt, 
          (Pu =<2; 10 < Pu)), 
      (X=1;X=2;X=3;X=4;X=5;X=10;X=12),
      Pun1 =< 4*X,
      !.

check_evaluate_idioms_light(RteArg, A):-
        findall(P-Head,
                      on(Cl-P-R1-Head-Id,RteArg), Pheads),
        sort(Pheads,Phead),
        findall(P1-Head1,
                        on(Cl1-P1-R2-Head1-Id1,A), Pheads1),
        sort(Pheads1,Phead1),
        Phead1\=[],
        match_heads_idioms(Phead,Phead1),
        !.

match_heads_idioms([P-Head|Rest],Pheads):-
        (
         (light_verbs(P),
           on(P1-Head1,Pheads),
           findall(Pol,hrv(P1,Pol),Pols),
            (Pols\=[],
            \+ on(0,Pols); Pols=[])
            ;
             check_idioms(P,Head))
         ;
        match_heads_idioms(Rest,Pheads)
        ),
        !.
match_heads_idioms([P-Head|Rest],Pheads):-
        match_heads_idioms(Rest,Pheads),
        !.

collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C2,C2,Head/R1):-
      list(RefEx),list(RefEx1),
      recover_descs(Head,Heads),
      (atomic(Heads),Head1=Head;
      is_list(Heads), on(Head1,Heads)),
      appiattisci(RefEx,RX),appiattisci(RefEx1,RX1),
      Ref=ref_ex(Ind,Head1,Tab,P,G,N,C,Func/Ruolo)/S-_,
      Ref1=ref_ex(Ind1,Head2,Tab1,P1,G1,N1,C1,Func1/Ruolo1)/S1-_,
      nogen_member(Ref, RX),
      nogen_member(Ref1, RX1),
      main_head_match(Head2,Head1,L),
      elimina(Head2-R1-Id1,Preds1, Preds2),
      append(C,C1,C2),!.

collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C2,C2,Head/R1):-
      list(RefEx),list(RefEx1),
      appiattisci(RefEx,RX),appiattisci(RefEx1,RX1),
      Ref=ref_ex(Ind,Head,Tab,P,G,N,C,Func/Ruolo)/S-_,
      on(Head1-R1-Id1,Preds1),
      Ref1=ref_ex(Ind1,Head1,Tab1,P1,G1,N1,C1,Func1/Ruolo1)/S1-_,
      nogen_member(Ref, RX),
      nogen_member(Ref1, RX1),
      main_head_match(Head,Head1,L),
      elimina(Head1-R1-Id1,Preds1, Preds2),
      append(C,C1,C2),!.

cmatch_head_role([],Rest,[RefEx,RefEx1], []):-!.
cmatch_head_role([Head-R-Id|Preds],Preds1,[_-[RefEx],RefEx1], [Head/R-R1|Roles]):-
      collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C,C1,R1),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1=<L;C=C1),
      privileged_classes(C,C1,Ints),
      cmatch_head_role(Preds,Preds2,[RefEx,RefEx1],Roles),
      !.
cmatch_head_role([Head-R-Id|Preds],Preds1,[_-[RefEx],RefEx1|_], [Head/R-R1|Roles]):-
      collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C,C1,R1),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1=<L;C=C1),
      privileged_classes(C,C1,Ints),
      cmatch_head_role(Preds,Preds2,[RefEx,RefEx1],Roles),
      !.
cmatch_head_role([Head-R-Id|Preds],Preds1,[RefEx,RefEx1], [Head/R-R1|Roles]):-
      collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C,C1,R1),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1=<L;C=C1),
      privileged_classes(C,C1,Ints),
      cmatch_head_role(Preds,Preds2,[RefEx,RefEx1],Roles),
      !.
cmatch_head_role([Head-R-Id|Preds],Preds1,[RefEx,RefEx1|_], [Head/R-R1|Roles]):-
      collect_feats_refs(Head,RefEx,RefEx1,Preds1,Preds2,C,C1,R1),
      controlla_cat1(C,C1),
      intersection(C,C1, Ints), 
      length(Ints,L), 
      (1=<L;C=C1),
      privileged_classes(C,C1,Ints),
      cmatch_head_role(Preds,Preds2,[RefEx,RefEx1],Roles),
      !.
cmatch_head_role([Head-R-Id|Preds],Preds1,[RefEx,RefEx1], Roles):-
      cmatch_head_role(Preds,Preds1,[RefEx,RefEx1],Roles),
      !.
cmatch_head_role([Head-R-Id|Preds],Preds1,[RefEx,RefEx1|RefEx2], Roles):-
      cmatch_head_role(Preds,Preds1,[RefEx,RefEx1],Roles1),
      cmatch_head_role(Preds,Preds1,[RefEx,RefEx2],Roles2),
      append(Roles1,Roles2,Roles),
      !.
evaluate_quantifiers(RefExs, Predss,Predss1):-
      remove_dets_quants(Predss,Quan),
      remove_dets_quants(Predss1,Quan1),
      appiattisci(Quan,Quas),
      appiattisci(Quan1,Quas1),
      sort(Quas1,Quan11),
      sort(Quas,Quann),
      findall(Head-Head1,(
                  on(Head-Qua,Quan),on(Head-Qua1,Quan1), Head1=Head
                   ;
                  on(Head-Qua,Quan),on(Head1-Qua1,Quan1),
                  check_main_head_roles(Head,Head1)),
                   Heads),
      sort(Heads,Heas),
      eval_dets_quants_head(RefExs,Quann,Heas,Quan11),
      searchnegation(RefExs, Quann,Predss1,Qua), Qua=[],
      !.

%searchnegation(RefExs, Quan,Predss, Quas):-!.
searchnegation(RefExs, [],Predss,[]):-!.
searchnegation(RefExs, [Head-Qua|Quan],Predss, [Qua|Quas]):-
%      Qua=no,
     checknegword(Qua),
     (on(Cl-Pre-R-Hea-Ind,Predss)
       ;
      on(Hea-R-Ind,Predss),atomic(Hea), \+ grammw(Hea,_)), 
      checksemanticantinomy(Hea),
      on(Cl-Pre-R-Hea-Ind,Predss),
      searchnegation(RefExs, Quan,Predss,Quas),
      !.
searchnegation(RefExs, [Head-Qua|Quan],Predss, Quas):-
     (\+ checknegword(Head)
      ;
      on(Cl-Pre-R-Head1-Ind,Predss),
      recover_descs(Head1,Heads),
      (is_list(Heads),
       on(Hea,Heads)
       ;
       atomic(Heads), Hea=Heads),
       (main_head_match(Head,Hea,Sco)
        ;
        sloppy_match(Head,Hea,L)),
        quant_entailed(Qua,def0)
      ;
      Ref=ref_ex(Ind,Head1,Tab,_,_,_,CatSem,Func/Ruolo)/S-_,
      RefExs=[Refss,RefEx1],
      on(Ref, RefEx1),
      recover_descs(Head1,Heads),
      (is_list(Heads),
       on(Hea,Heads)
       ;
       atomic(Heads), Hea=Heads),
       (main_head_match(Head,Hea,Sco)
        ;
        sloppy_match(Head,Hea,L)),
        quant_entailed(Qua,def0)
      ),
      searchnegation(RefExs, Quan,Predss,Quas),
      !.
searchnegation(RefExs, [Head-Qua|Quan],Predss, [Qua|Quas]):-
      checknegword(Head),
      searchnegation(RefExs, Quan,Predss,Quas),
      !.
searchnegation(RefExs, [Head-Qua|Quan],Predss1,Quas):-
      searchnegation(RefExs, Quan,Predss1,Quas),
      !.

/*
checksemanticantinomy(Pred):-
      atyd(Pred,Preds), on(Pred,Preds),!.
*/
checksemanticantinomy(Pre):-
      checknegword(Pre),
      findall(Pre,(atyn(Pred,Preds), on(Pre,Preds)),Pres),
      Pres\=[],!.
checksemanticantinomy(Pre):-
      checknegword(Pre),
      findall(Pre,(atya(Pred,Preds), on(Pre,Preds)),Pres),
      Pres\=[],!.
checksemanticantinomy(Pred):-
      findall(Pol1,hrv(Pred,Pol1),Pols),Pols\=[],
      on(0,Pols),
      !.

checknegword(Pre):-
     stringof([A,B,C|Res],Pre),
     negword(A,B,C),
     \+ negex(Pre),
     Res\=[],
     !.

%negword(a,b,C).
%negword(i,n,C).
negword(u,n,C).
%negword(i,l,C).
%negword(i,m,C).
%negword(i,r,C).
negword(d,i,s).
negword(n,o,n).

negex(disambiguate).
negex(disarm).
negex(disbar).
negex(discern).
negex(discover).
negex(discipline).
negex(disclose).
negex(discount).
negex(discourse).
negex(discreet).
negex(discriminate).
negex(discriminating).
negex(discuss).
negex(disembark).
negex(disembarrass).
negex(disencumber).
negex(disentangle).
negex(dish).
negex(disinfect).
negex(disinfest).
negex(disinvolve).
negex(disk).
negex(diskjockey).
negex(dislocate).
negex(dismount).
negex(disoblige).
negex(dispatch).
negex(dispel).
negex(dispense).
negex(display).
negex(distemper).
negex(distend).
negex(distil).
negex(distinct).
negex(distinguish).
negex(distinguishable).
negex(distribute).
negex(distributed).
negex(distributive).
negex(district).
negex(discernible).
negex(discerning).
negex(individual).
negex(indoor).
negex(induced).
negex(inductive).
negex(indulgent).
negex(industrial).
negex(information).
negex(informative).
negex(informed).
negex(ingenuous).
negex(inhabited).
negex(inhaled).
negex(injectable).
negex(injured).
negex(inland).
negex(inner).
negex(innocent).
negex(innocuous).
negex(inspiring).
negex(instead).
negex(institutional).
negex(institutionalized).
negex(instructive).
negex(instrumental).
negex(inshore).
negex(inside).
negex(insured).
negex(intellectual).
negex(intelligent).
negex(intelligible).
negex(intended).
negex(intense).
negex(intensifying).
negex(intensive).
negex(intercontinental).
negex(interdepartmental).
negex(interested).
negex(interesting).
negex(interior).
negex(intermediate).
negex(internal).
negex(international).
negex(interrogative).
negex(interspecies).
negex(interstate).

remove_dets_quants([],[[]]):-!.
remove_dets_quants(Predss,[Head-Qua|Quan]):-
      remove(Qua-xcomp/Prop-Ind,Predss,Preds),
      nonvar(Qua),
      (matchcoin(Qua,_);matchcoin(_,Qua);qmq(Qua);qm(Qua)),
      notexcept(Qua),
      (subtract(Preds,[Cl-Pre-R-Head-Ind],Pred)
       ;
      subtract(Preds,[Head-R-Ind],Pred),atomic(Head)),
%      Pred\=Preds,
      remove_dets_quants(Pred,Quan),
      !.
remove_dets_quants(Predss,[Head-Qua|Quan]):-
      remove(Head-det-Qua-Ind,Predss,Preds),
      \+ arts(Qua),
%      subtract(Predss,[Qua-det-Ind],Preds),
      nonvar(Qua),
      notexcept(Qua),
      (subtract(Preds,[Cl-Pre-R-Head-Ind],Pred)
       ;
      subtract(Preds,[Head-R-Qua-Ind],Pred),atomic(Head)),
%      Pred\=Preds,
      remove_dets_quants(Pred,Quan),
      !.
remove_dets_quants(Predss,[Qua-Head|Quan]):-
      remove(Head-mod-Qua-Ind,Predss,Preds),
      nonvar(Qua),
      (matchcoin(Qua,_);matchcoin(_,Qua)),
      notexcept(Qua),
      (subtract(Preds,[Cl-Pre-R-Head-Ind],Pred)
       ;
      subtract(Preds,[Head-R-Qua-Ind],Pred),atomic(Head)), 
      remove_dets_quants(Pred,Quan),
      !.
remove_dets_quants(Predss,[Head-Qua|Quan]):-
      remove(Head-mod-Qua-Ind,Predss,Preds),
      nonvar(Qua),
      (qmq(Qua);qm(Qua)),
      notexcept(Qua),
      (subtract(Preds,[Cl-Pre-R-Head-Ind],Pred)
       ;
      subtract(Preds,[Head-R-Qua-Ind],Pred),atomic(Head)), 
      remove_dets_quants(Pred,Quan),
      !.
remove_dets_quants(Predss,[Qua-Head|Quan]):-
      remove(Head-specif-Qua-Ind,Predss,Preds),
      nonvar(Qua),
      (matchcoin(Qua,_);matchcoin(_,Qua)),
      (subtract(Preds,[Cl-Pre-R-Head-Ind],Pred)
       ;
      subtract(Preds,[Head-R-Qua-Ind],Pred),atomic(Head)), 
%      Pred\=Preds,
      remove_dets_quants(Pred,Quan),
      !.
remove_dets_quants(Predss,[Head-Qua|Quan]):-
      remove(Head-specif-Qua-Ind,Predss,Preds),
      nonvar(Qua),
      (qmq(Qua);qm(Qua)),
      (subtract(Preds,[Cl-Pre-R-Head-Ind],Pred)
       ;
      subtract(Preds,[Head-R-Qua-Ind],Pred),atomic(Head)), 
%      Pred\=Preds,
      remove_dets_quants(Pred,Quan),
      !.
remove_dets_quants(Predss,[Qua-Head|Quan]):-
      remove(Head-ncmod/specif-Qua-Ind,Predss,Preds),
      nonvar(Qua),
      (matchcoin(Qua,_);matchcoin(_,Qua)),
      (subtract(Preds,[Cl-Pre-R-Head-Ind],Pred)
       ;
      subtract(Preds,[Head-R-Qua-Ind],Pred),atomic(Head)), 
%      Pred\=Preds,
      remove_dets_quants(Pred,Quan),
      !.
remove_dets_quants(Predss,[Head-Qua|Quan]):-
      remove(Head-ncmod/specif-Qua-Ind,Predss,Preds),
      nonvar(Qua),
      (qmq(Qua);qm(Qua)),
      (subtract(Preds,[Cl-Pre-R-Head-Ind],Pred)
       ;
      subtract(Preds,[Head-R-Qua-Ind],Pred),atomic(Head)), 
%      Pred\=Preds,
      remove_dets_quants(Pred,Quan),
      !.
remove_dets_quants(Predss,[]):-
      !.
%intsf(utterly).

notexcept(Qua):-
    Qua\=single,
    Qua\=nil,
    Qua\=one,
    Qua\=tank,
    Qua\=former,
    Qua\=sector,
    Qua\=at,
    Qua\=more,
    Qua\=less,
    Qua\=real,
    Qua\=word,
    Qua\=sign,
    Qua\=norm,
    Qua\=member,
    Qua\=southwest,
    Qua\=northwest,
    Qua\=southeast,
    Qua\=northeast,
    Qua\=south,
    Qua\=west,
    Qua\=north,
    Qua\=east,
    Qua\=increase,
    Qua\=decrease,
    Qua\=way,
    Qua\=case,
    Qua\='One',
    Qua\='More',
    Qua\='Less',
    Qua\='Real',
    Qua\='Word',
    Qua\='Sign',
    Qua\='Norm',
    Qua\='Member',
    Qua\='Southwest',
    Qua\='Northwest',
    Qua\='Increase',
    Qua\='Decrease',
    Qua\='Sector',
    Qua\='At',
    Qua\='Southeast',
    Qua\='Northeast',
    Qua\='South',
    Qua\='Single',
    Qua\='West',
    Qua\='North',
    Qua\='East',
    Qua\='Former',
    Qua\='Way',
    Qua\='Case',
    !.
    
evaluate_quants(Quant,Quant, Refx, Refx1):-
     Quant\=nil,
     !.
evaluate_quants(Quant,Quant1, Refx, Refx1):-
     qm(Quant),
     Ref=ref_ex(Ind,Quant,Tab,_,_,_,CatSem,Func/Ruolo)/S,
     on(Ref,Refx1),
     !.
evaluate_quants(Quant,Quant1, Refx, Refx1):-
     Quant\=nil,
     qm(Quant1),
     Ref=ref_ex(Ind,Quant1,Tab,_,_,_,CatSem,Func/Ruolo)/S,
     on(Ref,Refx),
     !.

evaluate_quantss([],[]):-!.
evaluate_quantss(Quant,[]):-
     qm(Quant),
     !.
evaluate_quantss(Quant,Quant1):-
     qm(Quant),
     qm(Quant1),
     !.
  
appendtexthyp(Hypos,Texts,Hyp,Tex):-
      Hypos=[RteArg,TextArgs|Hyps],
      Texts=[RteAdj,TextAdjs|Texs],
      Hyps=[Txx1,Txx2|Hps],
      append(RteArg,RteAdj,Hypo),
      append(Hypo,Hps,Hypoo),
      appiattisci(Hypoo,Hypoo1),
      sort(Hypoo1,Hyp),
      append(TextArgs,Texs,Textts),
      append(Textts,TextAdjs,Textt),
      appiattisci(Textt,Textt1),
      sort(Textt1,Tex),
     !.

paraf_evaluationmodule(L, True, RefExs, [Hypos,Texts]):-
      appendtexthyp(Hypos,Texts,Hyp,Tex),
      length(Tex,L),
      L < 50,
      computeallparafs(Hyp,Tex,True,Ent),
      !.
      
computeallparafs(Hypoo,Textt,True,Ent):-
      compute_scoremod1(Hypoo,Textt,1-Score2,Ent),
      True=true-1,
      !.

computeallparafs(Hypoo,Textt,True,Ent):-
      compute_scoremod11(Hypoo,Textt,1-Score2,Ent),
      True=true-1,
      !.

/*
verify_ident_propos(Args, Adjs, RefExs, Hypos,Texts):-
      Args=[RteArg,A],
      Adjs=[B,Predss],
      append(RteArg,B,RteA),
      append(A,Predss,Tex),
      extra_identical_Roles(Ent,RteA,Tex,Ro,P1-P2),
      best_role(RteA, Tex, Hypos,Texts, Ent1-R),
      remove(Ent-R1-Id,Hypos,Rest), 
      match_besthead_role(Rest,Texts,Roles),
         check_strict_role_adequacy(Roles,Scores),
         Scores\=[],      
      R1\=specif,
       (
         match_besthead_role(Rest,Texts,Roles);
         cmatch_head_role(Hypos,Texts,RefExs,Roles),
         length(Roles,L),length(Hypos,L1),
         check_lengths(Hypos,L,L1)
          ),
         check_strict_role_adequacy(Roles,Scores),
         Scores\=[],
      !.

verify_ident_propos(Args, Adjs, RefExs, Hypos,Texts):-
      Args=[RteArg,A],
      Adjs=[B,Predss],
      append(RteArg,B,RteA),
      append(A,Predss,Tex),
      on(Cl-P-R-Head-Id,A),
      lightverbs(P),
      on(Cl-P-Role-Hea-Id1,A),
      (Role=prop;w_e_pr(Role,Punt), Punt=<3),
      on(Cl1-P1-R1-Hea1-Id2,RteArg),
      \+ light_verbs(P1),
      (main_head_match(Hea,P1,Sco)
       ;
        main_head_match(Hea,Hea1,Sco)
       ;
       bnc(P1,Preds),
       on(Hea,Preds)),
      !.
verify_ident_propos(Args, Adjs, RefExs, Hypos,Texts):-
      Args=[RteArg,A],
      Adjs=[B,Predss],
%      append(RteArg,B,RteA),
%      append(A,Predss,Tex),
      on(Cl-P-R-Head-Id,RteArg),
%      lightverbs(P),
      on(Cl-P-Role-Hea-Id1,RteArg),
      Head\=Hea,
      (Role=prop;w_e_pr(Role,Punt), Punt=<3),
      on(Cl1-P1-R1-Hea1-Id2,A),
      \+ light_verbs(P1),
      (main_head_match(Hea,P1,Sco)
       ;
        main_head_match(Hea,Hea1,Sco)
       ;
       bnc(P1,Preds),
       on(Hea,Preds)),
      !.
verify_ident_propos(Args, Adjs, RefExs, Hypos,Texts):-
      Args=[RteArg,A],
      Adjs=[B,Predss],
      append(RteArg,B,RteA),
      append(A,Predss,Tex),
      on(Cl-P-R-Head-Id,RteArg),
%      lightverbs(P),
      on(Cl-P-Role-Hea-Id1,RteArg),
      Head\=Hea,
      (Role=prop;w_e_pr(Role,Punt), Punt=<3),
      on(Cl1-P1-R1-Hea1-Id2,A),
      light_verbs(P1),
      (main_head_match(Hea,Hea1,Sco)
       ;
       bnc(P1,Preds),
       on(Hea,Preds)),
      !.

*/
checkindamissible([],[]):-!.
checkindamissible([R-R1|Roles],[R-R1|Inas]):-
      inadmissibles(R,R1),
      checkindamissible(Roles,Inas),
      !.
checkindamissible([R-R1|Roles],Inas):-
%      (r1(R),r4(R1);r1(R1),r4(R)),
      checkindamissible(Roles,Inas),
      !.

checksemverbtype(P):-
%      yescreation_pred(P)
%      ;
%      \+ non_creation_pred(P),
      erggs(P),
      \+ perlocrecipro(P),
      !.
erggs(P):-
    v(P,Types),
    findall(eg,on(eg,Types),Ts), Ts=[],
    !.
perlocrecipro(marry).
perlocrecipro(get_married).

checkoppositefuncts(arg_mod,obj).
checkoppositefuncts(subj,obj).

newcheckindamissible(RteArg,Tex,Inas):-
      findall(R-R2,(
           on(Cl-P-F/R-Head-Id,RteArg),
           stringof(List,Cl), List=[c|_],
           on(Cl1-P1-F1/R-Head-Id1,Tex),
           on(Pred1-ccomp/R3-Cl1,Tex),
           on(Cl2-Pred1-F2/R2-Head2-Id2,Tex),
           on(Cl-P-F2/R4-Head2-Id3,RteArg),
           stringof(List1,Cl1), List1=[c|_]),Roless),
      findall(R-R1,(
           on(Cl-P-F/R-Head-Id,RteArg),
           stringof(List,Cl), List=[c|_],
           on(Cl1-P-F/R1-Head1-Id1,Tex),
           checksemverbtype(P),
           stringof(List1,Cl1), List1=[c|_],
           strict_head_match(Head,Head1,S)),Roles),
           checkindamissible(Roles,Inn),
      findall(R-R1,(
           on(Cl-P-F/R-Head-Id,RteArg),
           stringof(List,Cl), List=[c|_],
           on(Cl1-P-F1/R1-Head1-Id1,Tex),
           checkoppositefuncts(F,F1),
           checksemverbtype(P),
           stringof(List1,Cl1), List1=[c|_],
           strict_head_match(Head,Head1,S)),Rolls),
           checkindamissible(Rolls,Inns),
      findall(P/R-P1/R1,(
           on(Cl-P-F/R-Head-Id,RteArg),
           stringof(List,Cl), List=[c|_],
           on(Cl1-P1-F/R1-Head1-Id1,Tex),
           \+ on(Cl2-P-F/R2-Head2-Id2,Tex),
           checksemverbtype(P),
           stringof(List1,Cl1), List1=[c|_],
           strict_head_match(Head,Head1,S),
           consistent_preds(P,P1,_),
           (on(Cl-P-F1/R11-Head11-Id11,RteArg), F1\=F,
            on(Cl1-P1-F1/R12-Head12-Id12,Tex),           
            main_head_match(Head11,Head12,S)
            ;
            findall(Cl-P,on(Cl-P-F1/R11-Head11-Id11,RteArg),Claus),
            Claus=[Z])
           ),Roles1),
      (Roles1=[],Roless=[],Rolls=[],Inas=Inn
       ;
       Roless\=[],
       append(Inn,Roless,Inas)
       ;
       Rolls\=[],
       append(Inn,Inns,Inas)
       ;
       Roles1\=[],
       vcheckindamissible(Roles1,Inn1),
       (Inn1\=[],
        (on(P/R-P1/R1,Roles1),
         real_semantic_antonimy(P,P1),!,
         Inas=Inn
         ;
         on(P/R-P1/R1,Roles1),
         (checksemverbtype(P);checksemverbtype(P1)),!,
         Inas=Inn
         ;
         append(Inn,Inn1,Inas))
        ;
        Inn1=[],
        append(Inn,Inn1,Inas))
       ),
      !.

vcheckindamissible([],[]):-!.
vcheckindamissible([V/R-V1/R1|Roles],[R-R1|Inas]):-
      inadmissibles(R,R1),
      vcheckindamissible(Roles,Inas),
      !.
vcheckindamissible([V/R-V1/R1|Roles],Inas):-
      vcheckindamissible(Roles,Inas),
      !.

verify_ident_propos(Args, Adjs, RefExs, Hypos,Texts):-
      Args=[RteArg,A|_],
      on(Cl-P-R-Head-Id,RteArg),
      stringof(List,Cl), List=[c|_],
      light_verbs(P),
      !.

verify_ident_propos(Args, Adjs, RefExs, Hypos,Texts):-
      Args=[RteArg,A|_],
      Adjs=[B,Predss|_],
      findall(Head-Hea-Role,(
               on(Cl-P-R-Head-Id,A),
                lightverbs(P),
                on(Cl-P-Role-Hea-Id1,A),
                  Head\=Hea), Headss), 
                  Headss\=[], sort(Headss,Heads),
      findall(Hea-Hea1,(
                on(Head-Hea-Role,Heads),
                (Role=prop;w_e_pr(Role,Punt), Punt=<3),
                on(Cl1-P1-R1-Hea1-Id2,RteArg),
              (
               (main_head_match(Hea,Hea1,Sco)
               ;
               \+ light_verbs(P1),
              (main_head_match(Hea,P1,Sco)
               ;
               main_head_match(Hea,Hea1,Sco))
               ;
               light_verbs(P1),
               main_head_match(Hea,Hea1,Sco))
                ;
                bnc(P1,Preds),
                on(Hea,Preds))
                ), Outs), Outs\=[],
        length(Outs,L),
        length(RteArg,L1),
        length(Heads,L2),
        check_match_length(L1,L,L2),
                \+ on(Cl1-bear-Ru1-Hea1-Id2,RteArg),
                \+ on(Cl1-marry-Ru1-Hea1-Id2,RteArg),
      !.

verify_ident_propos(Args, Adjs, RefExs, Hypos,Texts):-
      Args=[RteArg,A|_],
      Adjs=[B,Predss|_],
      findall(Hea1-Head,(
            on(Cl1-P1-Ru1-Hea1-Id2,RteArg), 
%            stringof(List1,Cl1), List1=[c|_],
            on(Cl-P-R-Head-Id,A)
%            stringof(List,Cl), List=[c|_]
            ), Headss), 
            Headss\=[], sort(Headss,Heads),
             length(RteArg,L1),
             length(Heads,L2),
             (
          findall(Hea1-Hea2,(
                    on(Hea1-Head,Heads),
             check_evaluate_idioms_light(RteArg, A),
             on(Cl-P-Ro-Hea-Id1,A),
%            stringof(List,Cl), List=[c|_],
             on(Cl1-P1-R1-Hea2-Id2,RteArg),
%            stringof(List1,Cl1), List1=[c|_],
             Hea2\=Hea1,
            (main_head_match(Hea1,P,Sco)
             ;
               bnc(P1,Preds),
              on(Hea,Preds))),Outs), Outs\=[],
             length(Outs,L),
             (L1=<L;L2=<L)
               ;
               append(RteArg,B,RteAs),
               sort(RteAs,RteA),
              append(A,Predss,Texs),
               sort(Texs,Tex),
             on(Ent-R1-Id1,Hypos), 
             !,
                length(Hypos,L11),
                best_role(RteA, Tex, Hypos,Texts, Ent1-Rr),
%                match_besthead_role(Rest,Texts,Roles),
                cmatch_head_role(Hypos,Texts,RefExs,Roless),
                cleanroles(Roless,Roles),
                check_strict_role_adequacy(Roles,Scores),
              (Scores\=[], 
               length(Scores,L0),
                check_lengths(Hypos,L0,L11),
                 check_role_adequacy(Roles,Scores)
                 ;
                 Scores=[], L1=<3, L0=0)
                ),
                 checkindamissible(Roles,Inas), Inas=[],
                newcheckindamissible(RteA,Tex,Inas1), Inas1=[],
                \+ on(Cl1-bear-Ru1-Hea1-Id2,RteArg),
                \+ on(Cl1-marry-Ru1-Hea1-Id2,RteArg),
                sommatoria(Scores,Sum), 
                !,
                (nonvar(L0), 
                  (3=<L0, Sum=<40
                   ;
                   4=<L0, L11=< 10, sommatoria(Scores,Sum), Sum=<60)
                 ;
               extractheads3(RefExs, Args,Adjs,Hypos,Texts)
               ),
               !.


verify_indamissible_roles(Hypos,Texts,RefExs):-
                cmatch_head_role(Hypos,Texts,RefExs,Roless),
                cleanroles(Roless,Roles),
                checkindamissible(Roles,Inas), Inas=[],
               !.


cleanroles([],[]):-!.
cleanroles([H/R-H1/R1|Roless],[R-R1|Roles]):-
      cleanroles(Roless,Roles),
      !.

check_lengths(Hypos,L,L1):-!.
check_lengths(Hypos,L,L):-!.
check_lengths(Hypos,L,L1):-
     8<L1, 6=<L
     ; 
     L1=<7, 5=<L
     ; 
     L1=<5, 3=<L
     ; 
     L1=<3, 1=<L
     ; 
%      1<L,
      L1<3,
      (L=2,
       \+ on(_-specif-_,Hypos)
       ;
       on(_-specif-_,Hypos))
       ;
       L=1,
       \+ on(_-specif-_,Hypos),
     !.
check_match_length(L1,L,L2):-
        L1=<L;L2=<L,!.
%        L1=<L;L2=<L;L1=<3,2=<L;3<L1,3=<L,!.


check_idioms(P,Head):-
      mcon(P,'_',Id),
      mcon(Id,Head,Idiom),
      light_verbs(Idiom),
      !.

tranls_role(of,ncmod,specif).
tranls_role(of,ncmod,poss).
tranls_role(P,ncmod,specif).
tranls_role(P,adj,Role).
tranls_role(P,ncmod,Role):-
       pr1(Role,Score),
       4<Score.
tranls_role(P,obl,Role):-
       pr1(Role,Score),
       2<Score.

tranls_role(Sem,xcomp,prop).
tranls_role(to,iobj,goal).
tranls_role(to,iobj,theme_aff).
tranls_role(Sem,subj,R):-
      r0(R).
tranls_role(Sem,subj,R):-
      r1(R).
tranls_role(Sem,subj,R):-
      r2(R).
tranls_role(Sem,obj,R):-
      r1(R).
tranls_role(Sem,obj,R):-
      r2(R).
tranls_role(Sem,obj2,R):-
      r2(R).
tranls_role(P,iobj,R):-
      r3(R).

complex_induct(Rte,Pred,Sem,Ent1,Func-R):-
       nonvar(Pred),
       coplbh(Pred),
       (Dgr=Ind-Pre-R-Ent-Id
       ;Dgr=Ind-Pre-R-(Ent-Id)),
       on(Dgr,Rte),
       (nonvar(Ent1),
        main_head_match(Ent,Ent1,Sco)
        ;var(Ent1),Ent1=Ent),
      !.
complex_induct(Rte,Pred,Ent1,Sem,Func-R):-
       nonvar(Pred),
       coplbh(Pred),
       !,
       (Dgr=Ind-Pre-R-Ent-Id
       ;Dgr=Ind-Pre-R-(Ent-Id)),
       on(Dgr,Rte),
       (nonvar(Ent1),
        main_head_match(Ent,Ent1,Sco)
        ;var(Ent1),Ent1=Ent),
      !.
       

complex_induct(Rte,Pred,Sem,Ent,Func-R):-
       (nonvar(Pred);nonvar(Ent)),
       tranls_role(Sem,Func,R),
       (Dgr=Ind-Pred-R-Ent-Id
       ;Dgr=Ind-Pred-R-(Ent-Id)),
       on(Dgr,Rte),
      !.

complex_induct(Rte,Pred,Sem,Ent,Func-R):-
       (nonvar(Pred);nonvar(Ent)),
       tranls_role(Sem,Func,R),
       Dgr=Pred-R1-Ind,
       on(Dgr,Rte),
       Dgr1=Ent-R-Ind,
       on(Dgr1,Rte),
      !.

complex_induct(Rte,Pred,Sem,Ent,Func-R):-
       (nonvar(Pred);nonvar(Ent)),
       tranls_role(Sem,Func,R),
       Dgr=Ind-Pred-R1-Ent-Id,
       on(Dgr,Rte),
       Dgr1=Sem-R-Id,
       on(Dgr1,Rte),
      !.

complex_induct(Rte,Pred,Ent,Sem,Func-R):-
       (nonvar(Pred);nonvar(Ent)),
       tranls_role(Sem,Func,R),
       Dgr=Ind-Pred-R-Ent,
       on(Dgr,Rte),
      !.
complex_induct(Rte,Pred,Ent,Sem,Func-R):-
       (nonvar(Pred);nonvar(Ent)),
       tranls_role(Sem,Func,R),
       Dgr=Pred-R1-Ind,
       on(Dgr,Rte),
       Dgr1=Ent-R-Ind,
       on(Dgr1,Rte),
      !.


complex_induct(Rte,Pred,Sem,Ent1,Func-R):-
       nonvar(Pred),
       nonvar(Ent1),
       tranls_role(Sem,Func,R),
       (Dgr=Ind-Pred-R-Ent-Id
       ;Dgr=Ind-Pred-R-(Ent-Id)),
       on(Dgr,Rte),
       main_head_match(Ent,Ent1,Sco), 
       (nonvar(Sco),Sco<100;true),
      !.
complex_induct(Rte,Pred,Sem,Ent1,Func-R):-
       nonvar(Pred),
       nonvar(Ent1),
       tranls_role(Sem,Func,R),
       Dgr=Ind-Pred-R-Ent,
       on(Dgr,Rte),
       main_head_match(Ent,Ent1,Sco), 
       (nonvar(Sco),Sco<100;true),
      !.
complex_induct(Rte,Pred,Ent1,Sem,Func-R):-
       nonvar(Pred),
       nonvar(Ent1),
       tranls_role(Sem,Func,R),
       Dgr=Ind-Pred-R-Ent,
       on(Dgr,Rte),
       main_head_match(Ent,Ent1,Sco), 
       (nonvar(Sco),Sco<100;true),
      !.
complex_induct(Rte,Pred,Ent1,Sem,Func-R):-
       nonvar(Pred),
       nonvar(Ent1),
       tranls_role(Sem,Func,R),
       (Dgr=Ind-Pred-R-Ent-Id
       ;Dgr=Ind-Pred-R-(Ent-Id)),
       on(Dgr,Rte),
       main_head_match(Ent,Ent1,Sco), 
       (nonvar(Sco),Sco<100;true),
      !.
best_role_induct(Rte,Pred,Ent,Role2):-
       nonvar(Pred),
       coplbh(Pred),
       Dgr=Ind-Pre-F/R-Ent-Id,
       on(Dgr,Rte),
       w_e_pr(R,Punt),
       Punt=<4,
      !.
best_role_induct(Rte,Pred,Ent1,Role2):-
       nonvar(Pred),
       coplbh(Pred),
       !,
       Dgr=Ind-Pre-F/R-Ent-Id,
       on(Dgr,Rte),
       w_e_pr(R,Punt),
       Punt=<4,
       main_head_match(Ent,Ent1,Sco), 
       (nonvar(Sco),Sco<100;true),
      !.

best_role_induct(Rte,Pred,Ent,Role2):-
%       nonvar(Pred),
       Dgr=Ind-Pred-F/R-Ent-Id,
       on(Dgr,Rte),
       w_e_pr(R,Punt),
       Punt=<4,
      !.
best_role_induct(Rte,Pred,Ent1,Role2):-
%       nonvar(Pred),
       Dgr=Ind-Pred-F/R-Ent-Id,
       on(Dgr,Rte),
       w_e_pr(R,Punt),
       Punt=<4,
       main_head_match(Ent,Ent1,Sco), 
       (nonvar(Sco),Sco<100;true),
      !.

/*
complex_induct0(Rte,Pred,Sem,Ent1,Func-R):-
*/
complex_induct0(Rte,Pred,Sem,Ent,Func-R):-
       nonvar(Sem),nonvar(Func),
       var(Pred),var(Ent),
%       tranls_role(Sem,Func,R),
       Dgr=Ind-Pred-Func/R-Ent,
       on(Dgr,Rte).
%        \+ grammw(Ent,_).
complex_induct0(Rte,Pred,Sem,Ent,Func-R):-
       var(Sem),nonvar(Func),
       nonvar(Pred),var(Ent),
%       tranls_role(Sem,Func,R),
       (Dgr=Ind-Pred-Func/R-Ent
       ;
       Dgr=Ind-Pred-R-Ent-_),
       on(Dgr,Rte).
%        \+ grammw(Ent,_).
complex_induct0(Rte,Pred,Sem,Ent,Func-R):-
       var(Sem),nonvar(Func),
       var(Pred),var(Ent),
%       tranls_role(Sem,Func,R),
       Dgr=Ind-Pred-Func/R-Ent-_,
       on(Dgr,Rte).
%        \+ grammw(Ent,_).
complex_induct0(Rte,Pred,Sem,Ent,Func-R):-
       var(Sem),nonvar(Func),
       nonvar(Pred),var(Ent),
%       tranls_role(Sem,Func,R),
       Dgr1=Ind1-Pred-F/R1-Ent1,
       on(Dgr1,Rte),
       Dgr=Ent-Func/R-Ind,
       on(Dgr,Rte).
%        \+ grammw(Ent,_).
complex_induct0(Rte,Pred,Sem,Ent,Func-R):-
       var(Sem),nonvar(Func),
       var(Pred),
       nonvar(Ent),
%       tranls_role(Sem,Func,R),
       (Dgr=Ind-Pred-Func/R-Ent
       ;
       Dgr=Ind-Pred-Func/R-Ent-_
        ),
       on(Dgr,Rte),
%       \+ grammw(Ent,_),
      !.
complex_induct0(Rte,Pred,Sem,Ent,Func-R):-
       (Dgr=Ind-Pred-Func/R-Ent
       ;
       Func=ncmod,R=specif,
       Dgr=Ind-Pred-R-Ent
       ;
       Dgr=Ind-Pred-Func/R-Ent-_
        ),
       on(Dgr,Rte),
      !.

/*
complex_induct1(Rte,Pred,Sem,Ent1,Func-R):-
*/
complex_induct1(Rte,Pred,Ent1,Sem,Func-R):-
       var(Sem),
       nonvar(Pred),
       coplbh(Pred),
       Dgr1=Indd-Pred-Rd-Entd-Idd,
       on(Dgr1,Rte),
%       !,
       Dgr=Ind-Pre-Func/R-Ent-Id,
       on(Dgr,Rte),
       Pre\=Pred,
       nonvar(Ent1),
       main_head_match(Ent,Ent1,Sco), Sem=Ent,!.
complex_induct1(Rte,Pred,Ent1,Sem,Func-R):-
       var(Sem),
       nonvar(Pred),
       nonvar(Ent1),
       Dgr1=Indd-Pred-Rd-Ent-Idd,
       on(Dgr1,Rte),
%       !,
       Dgr=Ind-Pred-Func/R-Ent1-Id,
       on(Dgr,Rte),
       Ent\=Ent1,
%       main_head_match(Ent,Ent1,Sco), 
       Sem=Ent,!.
complex_induct1(Rte,Pred,Ent1,Sem,Func-R):-
       var(Sem),nonvar(Func),
       nonvar(Pred),nonvar(Ent1),
%       tranls_role(Sem,Func,R),
       (Dgr=Ind-Pred-Func/R-Ent,
       on(Dgr,Rte)
       ;
       Dgr=Pred-R1-Ind,
       on(Dgr,Rte),
       Dgr1=Ent-Func/R-Ind,
       on(Dgr1,Rte)),
       main_head_match(Ent,Ent1,Sco),!.
complex_induct1(Rte,Pred,Sem,Ent,Func-R):-
       (Dgr=Ind-Pred-Func/R-Ent
       ;
       Dgr=Ind-Pred-Func/R-Ent-_
        ),
       on(Dgr,Rte),
      !.

/*
complex_induct2(Rte,Pred,Sem,Ent1,Func-R):-
*/
complex_induct2(Rte,Pred,Sem,Ent1,Func-R):-
       var(Sem),
       nonvar(Pred),
       coplbh(Pred),
       Dgr1=Indd-Pred-Rd-Entd-Idd,
       on(Dgr1,Rte),
       (
        Dgr=Ind-Pre-Func/R-Ent-Id
       ;
       Dgr=Ind-Pre-Func/R-(Ent-Id)),
       on(Dgr,Rte),
       Pre\=Pred,
       nonvar(Ent1),
       main_head_match(Ent,Ent1,Sco), Sem=Ent,
      !.
complex_induct2(Rte,Pred,Sem,Ent1,Func-R):-
       var(Sem),nonvar(Func),
       nonvar(Pred),nonvar(Ent1),
%       tranls_role(Sem,Func,R),
       Dgr1=Indd-Pred-Rd-Entd-Idd,
       on(Dgr1,Rte),
       (Dgr=Ind-Pred-Func/R-Ent-Id
       ;Dgr=Ind-Pred-Func/R-(Ent-Id)),
       on(Dgr,Rte),
       main_head_match(Ent,Ent1,Sco),
      !.
complex_induct2(Rte,Pred,Sem,Ent1,Func-R):-
       var(Sem),nonvar(Func),
       nonvar(Pred),nonvar(Ent1),
%       tranls_role(Sem,Func,R),
       Dgr=Pred-R1-Ind,
       on(Dgr,Rte),
       Dgr1=Ent-Func/R-Ind,
       on(Dgr1,Rte),
       main_head_match(Ent,Ent1,Sco),
      !.
complex_induct2(Rte,Pred,Sem,Ent,Func-R):-
       (Dgr=Ind-Pred-Func/R-Ent
       ;
       Dgr=Ind-Pred-Func/R-Ent-_
        ),
       on(Dgr,Rte),
      !.

/*
complex_induct3(Rte,Pred,Sem,Ent1,Func-R):-
*/
complex_induct3(Rte,Pred,Sem,Ent1,Func-R):-
       var(Sem),
       nonvar(Pred),
       nonvar(Ent1),
       coplbh(Pred),
       Dgr2=Indd-Pred-Rd-Entd-Idd,
       on(Dgr2,Rte),
       (Dgr=Ind-Pre-Func/R-Ent-Id
       ;Dgr=Ind-Pre-Func/R-(Ent-Id)),
       on(Dgr,Rte),
       Pre\=Pred,
       nonvar(Ent1),
       main_head_match(Ent,Ent1,Sco),
       (Dgr1=Ind-Pre-R1-Sem-Id1
       ;Dgr1=Ind-Pre-R1-(Sem-Id1)),
       on(Dgr1,Rte),!.
complex_induct3(Rte,Pred,Sem,Ent,Func-R):-
       var(Sem),nonvar(Func),
       nonvar(Pred),
       nonvar(Ent),
%       tranls_role(Sem,Func,R),
       (Dgr=Ind-Pred-Func/R-Ent-Id
       ;
       Dgr=Ind-Pred-Func/R-(Ent-Id)),
       on(Dgr,Rte),
       (Dgr1=Ind-Pred-R1-Sem-Id1
       ;
       Dgr1=Ind-Pred-R1-(Sem-Id1)),
       on(Dgr1,Rte),!.

complex_induct3(Rte,Pred,Sem,Ent1,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
       coplbh(Pred),
       Dgr2=Indd-Pred-Rd-Entd-Idd,
       on(Dgr2,Rte),
       (Dgr=Ind-Pre-Func/R-Ent-Id
       ;Dgr=Ind-Pre-Func/R-(Ent-Id)),
       on(Dgr,Rte),
       Pre\=Pred,
       nonvar(Ent1),
       main_head_match(Ent,Ent1,Sco),
       (Dgr1=Ind-Pre-R1-Sem-Id1
       ;Dgr1=Ind-Pre-R1-(Sem-Id1)),
       on(Dgr1,Rte),!.
complex_induct3(Rte,Pred,Sem,Ent,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
%       tranls_role(Sem,Func,R),
       (Dgr1=Ind-Pred-Func/R-Sem-Id
       ;
       Dgr1=Ind-Pred-Func/R-(Sem-Id)),
       on(Dgr1,Rte),
       (Dgr=Ind-Pred-R1-Ent-Id1
       ;
       Dgr=Ind-Pred-R1-(Ent-Id1)),
       on(Dgr,Rte),!.
complex_induct3(Rte,Pred,Sem,Ent1,Func-R):-
       var(Sem), nonvar(Func),
       nonvar(Pred),nonvar(Ent1),
%       tranls_role(Sem,Func,R),
       Dgr=Pred-R1-Ind,
       on(Dgr,Rte),
       Dgr1=Ent-Func/R-Ind,
       on(Dgr1,Rte),
       Dgr2=Sem-Func/R-Ind,
       on(Dgr2,Rte),
       main_head_match(Ent,Ent1,Sco), Sco<100,!.
complex_induct3(Rte,Pred,Sem,Ent1,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
       nonvar(Ent1),
%       tranls_role(Sem,Func,R),
       Dgr=Ind-Pred-R1-Ent-Id,
       on(Dgr,Rte),
       Dgr1=Sem-Func/R-Id,
       on(Dgr1,Rte),
       main_head_match(Ent,Ent1,Sco), Sco<100,!.
complex_induct3(Rte,Pred,Ent1,Sem,Func-R):-
       nonvar(Pred),nonvar(Func),
       nonvar(Ent1),
%       tranls_role(Sem,Func,R),
       Dgr=Pred-R1-Ind,
       on(Dgr,Rte),
       Dgr1=Ent-Func/R-Ind,
       on(Dgr1,Rte),
       main_head_match(Ent,Ent1,Sco), Sco<100,
      !.
complex_induct3(Rte,Pred,Sem,Ent1,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
%       coplbh(Pred),
       Dgr2=Indd-Pred-Rd-Ent1-Idd,
       on(Dgr2,Rte),
       Dgr1=Ind-Ent1-Func/R1-Sem-Pred,
       on(Dgr1,Rte),!.

/*
complex_induct4(Rte,Pred,Sem,Ent1,Func-R):-
*/
complex_induct4(Rte,Pred,Ent,Sem,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
       var(Ent),
%       tranls_role(Sem,Func,R),
       (Dgr=Ind-Pred-Func/R-Ent,
        on(Dgr,Rte)
        ;
        Dgr=Ind-Pred-R-Ent1,
        on(Dgr,Rte),
        main_head_match(Ent,Ent1,Sco), Sco<100).
complex_induct4(Rte,Pred,Sem,Ent,Func-R):-
       nonvar(Sem),nonvar(Pred),
%       tranls_role(Sem,Func,R),
       (
       (Dgr=Ind-Pred-Func/R-Ent-Id
       ;
       Dgr=Ind-Pred-Func/R-(Ent-Id)),
       on(Dgr,Rte)
       ;
       (Dgr=Ind-Pred-Func/R-Ent1-Id
       ;
       Dgr=Ind-Pred-Func/R-(Ent1-Id)),
       on(Dgr,Rte),
       main_head_match(Ent,Ent1,Sco), Sco<100
       ).
complex_induct4(Rte,Pred,Sem,Ent,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
%       nonvar(Ent),
%       tranls_role(Sem,Func,R),
       Dgr=Pred-R1-Ind,
       on(Dgr,Rte),
       (Dgr1=Ent-Func/R-Ind,
        on(Dgr1,Rte)
        ;
        Dgr1=Ent1-Func/R-Ind,
        on(Dgr1,Rte),
        main_head_match(Ent,Ent1,Sco), Sco<100).
complex_induct4(Rte,Pred,Sem,Ent,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
       nonvar(Ent),
       Dgr2=Indd-Pred-Rd-Entd-Idd,
       on(Dgr2,Rte),
       (Dgr=Ind-Pre-R0-Pred-Id
       ;
       Dgr=Ind-Pre-R0-(Pred-Id)),
       on(Dgr,Rte),
%       tranls_role(Sem,Func,R),
       (Dgr1=Ent-Func/R-Ind,
        on(Dgr1,Rte)
        ;
        Dgr1=Ent1-Func/R-Ind,
        on(Dgr1,Rte),
       Pre\=Pred,
        main_head_match(Ent,Ent1,Sco), Sco<100).
complex_induct4(Rte,Pred,Sem,Ent,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
       nonvar(Ent),
%       tranls_role(Sem,Func,R),
       Dgr2=Indd-Pred-Rd-Entd-Idd,
       on(Dgr2,Rte),
       Dgr=Ind-Pre-Func/R-Pred-Id,
       on(Dgr,Rte),
       Pre\=Pred,
       (Dgr1=Ind1-Pre1-R1-Ent-Id1,
        on(Dgr1,Rte)
        ;
        Dgr1=Ind1-Pre1-R1-Ent1-Id1,
        on(Dgr1,Rte),
        main_head_match(Ent,Ent1,Sco), Sco<100),
      !.

complex_induct4(Rte,Pred,Sem,Ent,Func-R):-
       nonvar(Sem),
       nonvar(Pred),
       nonvar(Func),
       (Dgr1=Ent-Func/R-Sem-Pred,
        on(Dgr1,Rte)
        ;
        Dgr1=Ind-Ent-Func/R-Sem-Pred,
        on(Dgr1,Rte)),
      !.
     
best_role(Rte,First, Hypos,Texts, Ent-R):-
       findall(Ent,
               (Dgr0=Ent-Func/R0-_,
                on(Dgr0,Hypos),
                Dgr01=Ent1-Func1/R01-_,
                on(Dgr01,Texts),
                (w_e_pr(R0,Punt);
                 w_e_pr(R01,Punt)),
                  main_head_match(Ent,Ent1,Sco), 
                  Punt=<4), Ents),
         sort(Ents,Ens),
       (Ens=[];
        Ens\=[],
        Dgr=Ind-Pred-Func/R-Ent-Id,
        on(Dgr,Rte),
        (Func\=ncmod,Func\=adj
         ;
         Dgr1=Ind1-Pred1-Func1/R1-Ent1-Ind,
         on(Dgr1,Rte)),
        checkdependent(Pred,Rte),
        (Dgr1=Ind1-Pred1-Func1/R1-Ent1-Id1,
        on(Dgr1,First),
        checkdependent(Pred,First),
        checknegdependent(Pred1,First),
        main_head_match(Ent,Ent1,Sco), Sco<100,
        (light_verbs(Pred1),
         (checklightverbs(Pred1,Pred);
           check_synset(Pred,Pred1,Sc))
         ;
         \+ light_verbs(Pred1),
         consistent_preds(Pred,Pred1,L)
         ),
        (w_e_pr(R,Punt);
        w_e_pr(R1,Punt)),
        Punt=<4
         ;
        Dgr1=Ind1-Pred1-Func1/R1-Ent1,
        on(Dgr1,First),
        Ind1\=_-_,
        checkdependent(Pred,First),
        checknegdependent(Pred1,First),
        (light_verbs(Pred1),
         (checklightverbs(Pred1,Pred);
           check_synset(Pred,Pred1,Sc))
         ;
         \+ light_verbs(Pred1),
         consistent_preds(Pred,Pred1,L)
         ),
        main_head_match(Ent,Ent1,Sco), Sco<100,
        w_e_pr(R1,Punt),
        Punt<100
        ;
        Dgr1=Ind1-Pred1-Func1/R1-Ent2-Id1,
        on(Dgr1,First),
        checkdependent(Pred,First),
        checknegdependent(Pred1,First),
        Dgr2=Ent1-R0-Id1,
        on(Dgr2,Texts),
        main_head_match(Ent,Ent1,Sco), Sco<100,
        (light_verbs(Pred1),
         (checklightverbs(Pred1,Pred);
           check_synset(Pred,Pred1,Sc))
         ;
         \+ light_verbs(Pred1),
         consistent_preds(Pred,Pred1,L)
         ),
        (w_e_pr(R,Punt);
        w_e_pr(R1,Punt)),
        Punt=<4
        ;
        length(Ens,Len),
        Len=<3,
        Dgr=Ind-Pred-Func/R-Ent-Id,
        on(Dgr,Rte),
        checkdependent(Pred,Rte),
        (Dgr1=Ind1-Pred1-Func1/R1-Ent1-Id1,
        on(Dgr1,First),
        checkdependent(Pred,First),
        checknegdependent(Pred1,First),
        (light_verbs(Pred1),
         (checklightverbs(Pred1,Pred);
           check_synset(Pred,Pred1,Sc))
         ;
         \+ light_verbs(Pred1),
         consistent_preds(Pred,Pred1,L)
         ),
        (w_e_pr(R,Punt);
        w_e_pr(R1,Punt)),
        Punt=<4
        ))),
        !.
checkdependent(Pred,First)
    :-
    Dgr=Ind1-Pred-ccomp/R1-Pred1,
    (on(Dgr,First),
     pspv(Pred1)
     ;
    \+ on(Dgr,First)),
    !.

pspv(choose).
pspv(regret).
pspv(continue).
pspv(interrupt).
pspv(stop).
pspv(finish).
pspv(end).
pspv(know).
pspv(realize).
pspv(realise).
pspv(oblige).
pspv(order).
pspv(force).
pspv(cause).
pspv(use).
pspv(end).
pspv(push).
pspv(reveal).
pspv(admit).
pspv(confess).
pspv(able).
pspv(aware).
pspv(glad).
pspv(proud).
pspv(lucky).
pspv(notice).
pspv(acknowledge).
pspv(appreciate).
pspv(praise).
pspv(allow).
pspv(accept).
pspv(take_place).
pspv(remember).
pspv(say).
pspv(opportunity).
pspv(chance).
pspv(patience).
pspv(courage).

npspv(forget).
npspv(decline).
npspv(avoid).
npspv(refrain).
npspv(neglect).
npspv(fail).
npspv(deny).
npspv(hesitate).
npspv(refuse).

compute_heads([],[]):-!.
compute_heads([Ind-Pred-F/R-Ent-Id|Rte],[Ent|RteHeads]):-
      \+ adjsroles(R),
      compute_heads(Rte,RteHeads),
      !.
compute_heads([Ind-Pred-F/R-Ent|Rte],[Ent|RteHeads]):-
      \+ adjsroles(R),
    compute_heads(Rte,RteHeads),
      !.
compute_heads([Ind-Ent-Role-Id|Rte],[Ent|RteHeads]):-
      \+ adjsroles(Role), atomic(Ent),
    compute_heads(Rte,RteHeads),
      !.
compute_heads([Ent-Role-Id|Rte],[Ent|RteHeads]):-
    Id\=_-_,
      \+ adjsroles(Role),atomic(Ent),
    compute_heads(Rte,RteHeads),
      !.
compute_heads([Pred-Rest|Rte],[RteHeads1|RteHeads]):-
    is_list(Rest),
    compute_heads(Rest,RteHeads1),
    compute_heads(Rte,RteHeads),
      !.
compute_heads([Ind|Rte],RteHeads):-
    compute_heads(Rte,RteHeads),
      !.
assess_penalty(Preds,Rtes,First,[]):-!.

getdiates(Text,A,Diat):-
    findall(A-C,(        
          on(A-T-C-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text)
          ;
          on(A-T-C-D-E-F-G-H-I-L,Text)
          ;
          on(A-T-C-D-E1-F1-Aux-J-I1,Text)
          ;
          on(A-T-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text)),
          Diat),
     !.
getense(Text,A,Tense):-
    findall(T,(        
          on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text)
          ;
          on(A-T-C-D-E-F-G-H-I-L,Text)
          ;
          on(A-T-V-D-E1-F1-Aux-J-I1,Text)
          ;
          on(A-T-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text)),
          Tense),
     !.
gepreds(Text,Preds):-
    findall(A,(        
          (on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text)
          ;
          on(A-T-C-D-E-F-G-H-I-L,Text)
          ;
          on(A-T-V-D-E1-F1-Aux-J-I1,Text)
          ;
          on(A-T-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text)), atomic(A)),
          Preds),
     !.
negated_governor(Text,A1):-
    findall(D,(        
          (on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text)
           ;
           on(A-B-C-D-E-F-G-H-I-L,Text)
           ;
           on(A-T-V-D-E1-F1-Aux-J-I1,Text)
           ;
           on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text)),
           main_head_match(A,A1,_)),
          Negss),
          sort(Negss,Negs),
     on(Neg,Negs),
     (negcongs(Neg);Neg=not),
     !.
searchallpredsA(Hypo,Text,Hyp1,Tex1):-
    findall(A,(        
          on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Hypo),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-L,Hypo),
          atomic(A)
          ;
          on(A-T-V-D-E1-F1-Aux-J-I1,Hypo),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Hypo),
          atomic(A)),
          Hyp),
    findall(A,(        
          on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-L,Text),
          atomic(A)
          ;
          on(A-T-V-D-E1-F1-Aux-J-I1,Text),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text),
          atomic(A)),
          Tex),
     sort(Tex,Tex1),
     sort(Hyp,Hyp1),
          !.
searchallpredsB(Hypo,Text,Hyp1,Tex1,Pol,B,B1):-
    findall(A,(        
          on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Hypo),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-L,Hypo),
          atomic(A)
          ;
          on(A-T-V-D-E1-F1-Aux-J-I1,Hypo),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Hypo),
          atomic(A)),
          Hyp),
    findall(A,(        
          on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-L,Text),
          atomic(A)
          ;
          on(A-T-V-D-E1-F1-Aux-J-I1,Text),
          atomic(A)
          ;
          on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text),
          atomic(A)),
          Tex),
     sort(Tex,Tex1),
     sort(Hyp,Hyp1),
     (nogen_member(A1,Tex),nogen_member(A,Hyp),
      check_synset(A,A1,Sco), B=A,B1=A1,
       Pol=2
      ;
      Pol=0),
          !.
          
searchallpreds(Hypo,Text,Pol1,A,A1):-
     searchallpredsA(Hypo,Text,Hyp,Tex),
     (nogen_member(A,Tex),nogen_member(A,Hyp),
      A\=[],
      A1=A,
      Pol1=1
      ;
      searchallpredsB(Hypo,Text,Hyp1,Tex1,Pol1,A,A1),
      Pol1=2,
       \+ lightverbs(A),
       \+ lightverbs(A1)
      ;
      nogen_member(A,Tex),nogen_member(A1,Hyp),
      Pol1=2,
      (
%      sloppy_match(A,A1,Sc)
%       ;
       checklightverbs(A1,A)
       ;
       (A1=be;A1=there_be)
       ;
       consistent_preds(A,A1,Sc)
       ;
      aspectverbs(Vs),on(A,Vs),
       getense(Text,A1,Tense),
       on(past,Tense),
       checkmatchsupport(A1)
       ;
      aspectverbs(Vs),on(A,Vs),
       getense(Hypo,A1,Tense),
       on(past,Tense),
       checkmatchsupport(A1)
       ;
      aspectverbs(Vs),on(A1,Vs),
       getense(Text,A,Tense),
       on(past,Tense),
       checkmatchsupport(A)
       ;
      aspectverbs(Vs),on(A1,Vs),
       getense(Hypo,A,Tense),
       on(past,Tense),
       checkmatchsupport(A)
       ;
       (health(A);health(A1))
       )     
      ).
%      !.          

checkmatchsupport(A1):-
      stateverbs(Vs),
      on(A1,Vs)
      ;
      existverbs(Vs),
      on(A1,Vs),
      !.
checkmatchsupport(Lem):-
      cat_gramm(Lem,Cat,CatV,K),
      complessverbs(Lem,CatV),
      !.
searchnegatedlexical(Text):-
      gepreds(Text,Preds),
      nlv(Verbs),
      on(V,Preds),
      on(V,Verbs),
      !.
matchpropositionalgen(PPs,Hypo,Text,Args,Args1):-
      searchallpreds(Hypo,Text,Pol,A,A1),
      (Pol=1,
       matchpropositionalg(Hypo,Text,A,A1),!
      ;
       Pol=0,
       matchpropositionalg(Hypo,Text,A,A1),!
       ;
       Pol=2,
       matchpropositionalg(Hypo,Text,A,A1)
       ;
       nonvar(A),
       lightverbs(A),
       A=A1,
       length(Hypo,L),
       L=1
       ;
       nonvar(A),
       (A=A1,
        on(B-A-subj/C-D-E,Args),
        on(B1-A1-subj/C1-D1-E1,Args1),
        \+ grammw(D,_),\+ grammw(D1,_),
        \+ strict_head_match(D,D1,S)
        ;
        on(B-A-subj/C-D-E,Args),
        \+ on(B1-A-subj/C1-D1-E1,Args1),
        light_verbs(A)
        ;
        on(B-A-subj/C-D-E,Args1),
        \+ on(B1-A-subj/C1-D1-E1,Args),
       light_verbs(A1))
       ;
       negated_governor(Hypo,Ne),
       searchnegatedlexical(Text)
      ),
      !,
      checknegdependent1(A,Text,A1,Hypo,Neg,M1),
      PPs=[V1,V2,Pps],
      findall(R-Gov,(
                  (Fun=xadj;Fun=xcomp),
                   (
                    on(A2-B2-C2-D2-E2-F2-G2-H2-I2-Gov-Fun-R-M1-A-P,Text)
                     ;
                    on(B-E-Fun/R-A-Gov,Args1),
                    stringof(List,Gov), List=[C,L,U|_], 
                    \+ integer(U)
                    ;
                    on(B-Gov-Fun/R-A-Cl,Args1),
                   stringof(List,Cl), List=[c,l|_]),
                   chekgovsn(Gov),
                   \+ pspv(Gov), 
                   (\+ on(A,Pps);
                     \+ on(A,V2))
                   ),Govs),
                   !,
       (Govs=[];
         A=A1, lightverbs(A)
         ;
         Govs\=[],
         checkindexgov(Govs,Gvs),
         (Gvs=[]
         ;
         on(Role-Gov,Gvs),
         \+ negated_governor(Text,Gov),
         (nogen_member(Gov,Pps);
         checkgerundives(A,Gov,Args1);
         lightverbs(Gov);result_verb(Gov); cause_verb(Gov); social_engagement(Gov); inception_verb(Gov))
         )),
      !.

checkindexgov([],[]):-!.
checkindexgov([Gov|Gvs],[Gvs|Rest]):-
   stringof(List,Gov), 
   List=[C,L,N|_],
%   C\=c,C\=s,
%   L\=l,L\=n,
   \+ integer(N),
   checkindexgov(Gvs,Rest),
   !.
checkindexgov([Gov|Gvs],Rest):-
   checkindexgov(Gvs,Rest),
   !.
   

checkgerundives(A,Gov,Args1):-
    on(B-A-Fun/Role-Sem-Gov,Args1),
    (prepos(Sem)
    ;
    on(B1-A1-Fu/Rol-Sem1-Gov,Args1),
    Fu=coord),
    !.
 
/* sto raccogliendo gli infinitivals e
per poter eliminare i participi passati che sono tutti fattivi
devo guardare nella lista dei Pps: se non e' nella lista allora esco,
altrimenti devo escluderlo dalla lista dei tensed perche' in questa
lista ho sia i part_pass che i ind_pass*/

shortmatchpropositionalgen(PPs,Hypo,Text,Args,Args1):-
       matchpropositionalg(Hypo,Text,A,A1),
      PPs=[V1,V2,Pps],
      findall(R-Gov,(
                  (Fun=xadj;Fun=xcomp),
                   (on(B-E-Fun/R-A-Gov,Args1),
                    stringof(List,Gov), List=[C,L|_], C\=c,L\=l
                    ;
                    on(B-Gov-Fun/R-A-Cl,Args1),
                   stringof(List,Cl), List=[c,l|_]),
                   chekgovsn(Gov),
                   \+ pspv(Gov),
                   (\+ on(A,Pps);
                     \+ on(A,V2))
                   ),Govs),
                   !,
       (Govs=[];
         A=A1, lightverbs(A);
         Govs\=[],
%         \+ nogen_member(result-_,Govs),
         on(Role-Gov,Govs),
         \+ negated_governor(Text,Gov),
         (checkgerundives(Role,Gov,Args1);
         lightverbs(Gov);result_verb(Gov); cause_verb(Gov); social_engagement(Gov); 
          inception_verb(Gov))
         ),
      !.

chekgovsn(Gov):-
    stringof(List,Gov), List=[C,L,N|_],
    \+ integer(N), C\= s, L\= n,
      !.

matchpropositionalg(Hypo,Text,A,A1):-
     (on(A1-B-C-D-E-F-G-H-I,Hypo),
      on(A-T-V-D-E1-F1-Aux-J-I1,Text)
        ;
      on(A-B-C-D-E-F-G-H-I,Text),
      on(A1-T-V-D-E1-F1-Aux-J-I1,Hypo)),
      atomic(A),atomic(A1),
      checknegdependent1(A,Text,A1,Hypo,D,M),
      check_propositionalgen(Hypo,Text,A1,A,E,E1,F,F1),
      !.
matchpropositionalg(Hypo,Text,A,A1):-
     (on(A1-B-C-D-E-F-G-H-I-L,Hypo),
      on(A-T-V-D-E1-F1-Aux-J-I1-L1,Text)
        ;
      on(A-B-C-D-E-F-G-H-I-L,Text),
      on(A1-T-V-D-E1-F1-Aux-J-I1-L1,Hypo)),
      atomic(A),atomic(A1),
      checknegdependent1(A,Text,A1,Hypo,D,M),
      check_propositionalgen(Hypo,Text,A1,A,E,E1,F,F1),
      !.
matchpropositionalg(Hypo,Text,A,A1):-
     (on(A1-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1,Hypo),
      on(A-T-V-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text)
       ;
      on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1,Text),
      on(A1-T-V-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Hypo)),
      atomic(A),atomic(A1),
      check_subord_prop(L,L1),
      checknegdependent1(A,Text,A1,Hypo,D,M),
      check_propositionalgen(Hypo,Text,A1,A,E,E1,F,F1),
      !.
matchpropositionalg(Hypo,Text,A,A1):-
     (on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text),
      on(A1-T-V-D-E1-F1-Aux-Pro-I1-J-K-L-M-N-P1,Hypo)
        ;
      on(A1-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P1,Hypo),
      on(A-T-V-D-E1-F1-Aux-Pro-I1-J-K-L-M-N-P,Text)),
      atomic(A),atomic(A1),
      check_subord_prop(M,M1),
      checknegdependent1(A,Text,A1,Hypo,D,M1),
      check_propositionalgen(Hypo,Text,A1,A,E,E1,F,F1),
      !.
matchpropositionalg(Hypo,Text,A,A1):-
     (on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1,Text),
      on(A1-T-V-D-E1-F1-Aux-Pro-I1-J-K-L-M-N-P1,Hypo)
        ;
      on(A1-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1,Hypo),
      on(A-T-V-D-E1-F1-Aux-Pro-I1-J-K-L-M-N-P,Text)),
      atomic(A),atomic(A1),
      check_subord_prop(M,L1),
      checknegdependent1(A,Text,A1,Hypo,D,M1),
      check_propositionalgen(Hypo,Text,A1,A,E,E1,F,F1),
      !.
matchpropositionalg(Hypo,Text,A,A1):-
      (on(A-B-P1-D-E-F-G-H-I,Text),
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Hypo),
       check_subord_prop(L,nil)
       ;
       on(A-B-P1-D-E-F-G-H-I-L,Text),
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L1-M-N,Hypo),
       check_subord_prop(L,nil)
       ;
       on(A-B-P1-D-E-F-G-H-I,Text),
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N-P,Hypo),
       check_subord_prop(M,nil)
       ;
       on(A-B-P1-D-E-F-G-H-I-L,Text),
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L1-M-N-P,Hypo),
       check_subord_prop(M,nil)
       ;
      on(A1-B-P1-D-E-F-G-H-I,Hypo),
      on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text),
       check_subord_prop(L,nil)
       ;
      on(A1-B-P1-D-E-F-G-H-I-L,Hypo),
      on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L1-M-N,Text),
       check_subord_prop(L,nil)
        ;
      on(A1-B-P1-D-E-F-G-H-I,Hypo),
      on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N-P,Text),
       check_subord_prop(M,nil)
       ;
      on(A1-B-P1-D-E-F-G-H-I-L,Hypo),
      on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L1-M-N-P,Text),
       check_subord_prop(M,nil)),
      atomic(A),atomic(A1),
      checknegdependent1(A,Text,A1,Hypo,D,M),
      check_propositionalgen(Hypo,Text,A,A1,E,E1,F,F1)
       ;
     (on(A1-B-P1-D-E-F-G-H-I,Hypo),
      on(A-T-P2-D-E1-F1-Aux-J-I1,Text)
        ;
      on(A1-B-P1-D-E-F-G-H-I-L,Hypo),
      on(A-T-P2-D-E1-F1-Aux-J-I1,Text)
        ;
      on(A-B-P1-D-E-F-G-H-I-L,Text),
      on(A1-T-P2-D-E1-F1-Aux-J-I1,Hypo)
        ;
      on(A-B-P1-D-E-F-G-H-I,Text),
      on(A1-T-P2-D-E1-F1-Aux-J-I1,Hypo)),
      atomic(A),atomic(A1),
      checknegdependent1(A,Text,A1,Hypo,D,M),
       check_propositionalgen(Hypo,Text,A1,A,E,E1,F,F1),
      !.
matchpropositionalg(Hypo,Text,A,A1):-
      (on(A-B-P1-D-E-F-G-H-I,Text),
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Hypo),
       check_subord_prop(L,nil)
       ;
       on(A-B-P1-D-E-F-G-H-I-L,Text),
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L1-M-N,Hypo),
       check_subord_prop(L,nil)
       ;
       on(A-B-P1-D-E-F-G-H-I,Text),
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N-P,Hypo),
       check_subord_prop(M,nil)
       ;
       on(A-B-P1-D-E-F-G-H-I-L,Text),
       on(A1-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L1-M-N-P,Hypo),
       check_subord_prop(M,nil)
       ;
      on(A1-B-P1-D-E-F-G-H-I,Hypo),
      on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N,Text),
       check_subord_prop(L,nil)
       ;
      on(A1-B-P1-D-E-F-G-H-I-L,Hypo),
      on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L1-M-N,Text),
       check_subord_prop(L,nil)
        ;
      on(A1-B-P1-D-E-F-G-H-I,Hypo),
      on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L-M-N-P,Text),
       check_subord_prop(M,nil)
       ;
      on(A1-B-P1-D-E-F-G-H-I-L,Hypo),
      on(A-T-P2-D-E1-F1-Aux-Pro-I1-J-K-L1-M-N-P,Text),
       check_subord_prop(M,nil)),
      atomic(A),atomic(A1),
      checknegdependent1(A,Text,A1,Hypo,D,M),
      check_propositionalgen(Hypo,Text,A,A1,E,E1,F,F1)
       ;
     (on(A1-B-P1-D-E-F-G-H-I,Hypo),
      on(A-T-P2-D-E1-F1-Aux-J-I1,Text)
        ;
      on(A1-B-P1-D-E-F-G-H-I-L,Hypo),
      on(A-T-P2-D-E1-F1-Aux-J-I1,Text)
        ;
      on(A-B-P1-D-E-F-G-H-I-L,Text),
      on(A1-T-P2-D-E1-F1-Aux-J-I1,Hypo)
        ;
      on(A-B-P1-D-E-F-G-H-I,Text),
      on(A1-T-P2-D-E1-F1-Aux-J-I1,Hypo)),
      atomic(A),atomic(A1),
      checknegdependent1(A,Text,A1,Hypo,D,M1),
       check_propositionalgen(Hypo,Text,A1,A,E,E1,F,F1),
      !.

matchpropositionalgen1(Hypo,Text):-
     (on(A-B-C-D-E-F-G-H-I,Hypo),
      on(A1-T-V-D-E-F-Aux-J-I1,Text)
        ;
      on(A1-B-C-D-E-F-G-H-I,Text),
      on(A-T-V-D-E-F-Aux-J-I1,Hypo)),
      !.
matchpropositionalgen1(Hypo,Text):-
      (on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1,Hypo),
      on(A1-T-V-D-E-F-Aux-Pro-I1-J-K-L-M-N,Text)
       ;
      on(A1-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1,Text),
      on(A-T-V-D-E-F-Aux-Pro-I1-J-K-L-M-N,Hypo)),
      check_subord_prop(L,L1),
      !.
matchpropositionalgen1(Hypo,Text):-
      (on(A-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P,Text),
      on(A1-T-V-D-E-F-Aux-Pro-I1-J-K-L-M-N-P1,Hypo)
        ;
      on(A1-B-C-D-E-F-G-H-I-J1-K1-L1-M1-N1-P1,Hypo),
      on(A-T-V-D-E-F-Aux-Pro-I1-J-K-L-M-N-P,Text)),
      check_subord_prop(L,L1),
      !.

matchpropositionalgen1(Hypo,Text):-
      (on(A-B-P1-D-E-F-G-H-I,Text),
       on(A1-T-P2-D-E-F-Aux-Pro-I1-J-K-L-M-N,Hypo)
       ;
       on(A-B-P1-D-E-F-G-H-I,Text),
       on(A1-T-P2-D-E-F-Aux-Pro-I1-J-K-L-M-N-P,Hypo)
       ;
      on(A-B-P1-D-E-F-G-H-I,Hypo),
      on(A1-T-P2-D-E-F-Aux-Pro-I1-J-K-L-M-N,Text)
       ;
      on(A-B-P1-D-E-F-G-H-I,Hypo),
      on(A1-T-P2-D-E-F-Aux-Pro-I1-J-K-L-M-N-P,Text)),
       check_subord_prop(L,nil)
       ;
      on(A-B-P1-D-E-F-G-H-I,Hypo),
      on(A1-T-P2-D-E-F-Aux-J-I1,Text)
        ;
      on(A-B-P1-D-E-F-G-H-I,Text),
      on(A1-T-P2-D-E-F-Aux-J-I1,Hypo),
      !.

checknegdependent1(Pred,First,A1,Hypo,D,M):-
      lightverbs(Pred),
      !.

checknegdependent1(Pred,First,A1,Hypo,D1,M)
    :-
     (
      (on(Pred-T1-P21-D-E1-F1-Aux1-Pro1-I11-Pred1-K1/R1-M1-Dep1-I22,First)
      ;
      on(Pred1-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1/L1-M1-Pred-Dep1,First)
      ;
      on(Pred1-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1-F/L1-M1-Pred-Dep1,First)
      ;
      on(Pred-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1-F/L1-M1-Pred1-Dep1,First)
      ;
      on(A1-T1-P21-D-E1-F1-Aux1-Pro1-I11-Pred1-K1/R1-M1-Dep1-I22,First)
      ;
      on(Pred1-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1-F/L1-M1-A1-Dep1,First)
      ;
      on(A1-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1-F/L1-M1-Pred1-Dep1,First)
      ),
     K1\=coord,
    !,
    (D=nil;D=D1),
    ( nonvar(Pred1),
     (\+ checknegdoubt(Pred1)
     ;
     checknegdoubt(Pred1),
     checknegdoubt(Pred))
      ;
      nonvar(A1),
      (\+ checknegdoubt(A1)
      ;
      checknegdoubt(A1),
       checknegdoubt(Pred)) )
       ;
    findall(Dep1-K1, (on(Pred-T1-P21-D-E1-F1-Aux1-Pro1-I11-Dep1-K1/R1-M1-Pre-I22,First)
                      ;
                      on(Pred1-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-Pred-Dep1,First)
                      ;
                      on(Pred1-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1/L1-M1-Pred-Dep1,First)
                      ;
                      on(Pred-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-Pred1-Dep1,First)
                      ;
                      on(A1-T1-P21-D-E1-F1-Aux1-Pro1-I11-Dep1-K1/R1-M1-Pre-I22,First)
                      ;
                      on(Pred1-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1-F/L1-M1-A1-Dep1,First)
                      ;
                      on(A1-T1-P21-D-E1-F1-Aux1-Pro1-I11-J1-K1-F/L1-M1-Pred1-Dep1,First)),Deps),
    on(Dep1-K1,Deps),
    (Dep1=[];Dep1=nil;K1=coord;K1=cmod,R=topic;
    ( nonvar(Pred1),
     (\+ checknegdoubt(Pred1)
     ;
     checknegdoubt(Pred1),
     checknegdoubt(Pred))
      ;
      nonvar(A1),
      (\+ checknegdoubt(A1)
      ;
      checknegdoubt(A1),
       checknegdoubt(Pred)) )       
       )
    ),
    !.

checknegdependent1(Pred,First,A1,Hypo,D1,M)
    :-
    (on(Pred-T-P2-D-E-F-Aux-Pro-I1-J-K-L-M1-N-Dep,First)
     ;
     on(Pred-T-P2-D-E-F-Aux-Pro-I1-J-K/R-M1-N-Dep,First)
     ;
     on(A1-T-P2-D-E-F-Aux-Pro-I1-J-K-L-M1-N-Dep,First)
     ;
     on(A1-T-P2-D-E-F-Aux-Pro-I1-J-K/R-M1-N-Dep,First)),
%     K\=coord,
    !,
    (D=nil;D=D1),
    \+ negcongs(M),
    \+ negcongs(M1),
    \+ negated_governor(First,A1),
    (Dep\=[],
     on(Pred-Func-Rol-_-Pred1,Dep)
     ;
     (Dep=nil;Dep=[]),
     (
      on(Pred-T1-P21-D1-E1-F1-Aux1-Pro1-I11-Pred1-K1/R1-M1-Dep1-I22,First)
      ;
      on(Pred1-T1-P21-D1-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-Pred-Dep1,First)
      ;
      on(Pred-T1-P21-D1-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-Pred1-Dep1,First)
      ;
      on(A1-T1-P21-D1-E1-F1-Aux1-Pro1-I11-Pred1-K1/R1-M1-Dep1-I22,First)
      ;
      on(Pred1-T1-P21-D1-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-A1-Dep1,First)
      ;
      on(A1-T1-P21-D1-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-Pred1-Dep1,First)
      ),
     K1\=coord,
    !,
    (D1=nil;D=D1),
    ( nonvar(Pred1),
     (\+ checknegdoubt(Pred1)
     ;
     checknegdoubt(Pred1),
     checknegdoubt(Pred))
      ;
      nonvar(A1),
      (\+ checknegdoubt(A1)
      ;
      checknegdoubt(A1),
       checknegdoubt(Pred)) )
       ;
    findall(Dep1-K1, (on(Pred-T1-P21-D1-E1-F1-Aux1-Pro1-I11-Dep1-K1/R1-M1-Pre-I22,First)
                      ;
                      on(Pred1-T1-P21-D1-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-Pred-Dep1,First)
                      ;
                      on(Pred-T1-P21-D1-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-Pred1-Dep1,First)
                      ;
                      on(A1-T1-P21-D1-E1-F1-Aux1-Pro1-I11-Dep1-K1/R1-M1-Pre-I22,First)
                      ;
                      on(Pred1-T1-P21-D1-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-A1-Dep1,First)
                      ;
                      on(A1-T1-P21-D1-E1-F1-Aux1-Pro1-I11-J1-K1-L1-M1-Pred1-Dep1,First)),Deps),
    on(Dep1-K1,Deps),
    (Dep1=[];Dep1=nil;K1=coord;K1=cmod,R=topic;
    ( nonvar(Pred1),
     (\+ checknegdoubt(Pred1)
     ;
     checknegdoubt(Pred1),
     checknegdoubt(Pred))
      ;
      nonvar(A1),
      (\+ checknegdoubt(A1)
      ;
      checknegdoubt(A1),
       checknegdoubt(Pred)) )       
       )
    ),
    !.
checknegdependent1(Pred,First,A1,Hypo,D1,M1)
    :-
    (on(Pred-T-P2-D-E-F-Aux-Pro-I1-J-K-L-M-N,First)
    ;
    on(A1-T-P2-D-E-F-Aux-Pro-I1-J-K-L-M-N,First)),
    !,
    (D=nil;D=D1),
    \+ negcongs(L),
    !.

checknegdependent1(Pred,First,A1,Hypo,D1,M1)
    :-
    (on(Pred-T-P2-D-E-F-Aux-Pro-I1,First)
    ;
    on(Pred-T-P2-D-E-F-Aux-Pro-I1-J,First)
    ;
    on(A1-T-P2-D-E-F-Aux-Pro-I1,First)
    ;
    on(A1-T-P2-D-E-F-Aux-Pro-I1-J,First)),
    !,
    (D=nil; D=D1), 
      \+ negcongs(F),
    \+ negcongs(M1),
    (checknegdoubt(A1),
     checknegdoubt(Pred)
     ;
     \+ checknegdoubt(A1),
     \+ checknegdoubt(Pred)),
    !.


checknegdependent(Pred,First)
    :-
    Dgr=Ind1-Pred1-R1-Pred-Ind,
    on(Dgr,First),
%    negate_verbs(Verbs),
%    \+ on(Pred1,Verbs),
    \+ checknegdoubt(Pred1),
    !.
checknegdependent(Pred,First)
    :-
    term_to_atom(ccomp-prop,Fun),
    Dgr=..[Fun,that,Pred,Gov-_],
    dgrs(N,Dgr),
    !,
%    negate_verbs(Verbs),
%    \+ on(Gov,Verbs),
    \+ checknegdoubt(Pred1),
    !.    
checknegdependent(Pred,First)
    :-
    Dgr=Ind1-Pred1-R1-Pred-Ind,
    findall(F,on(Dgr,First),Fs),Fs=[],
    !.

check_subord_prop(nil,nil):-!.
check_subord_prop(and,_):-!.
check_subord_prop(that,_):-!.
check_subord_prop(_,and):-!.
check_subord_prop(_,that):-!.
check_subord_prop(Sem,nil):-
       (subord_role(Sem, Role),!
         ;
         Role=narrat),
       \+ doubtrole(Role),
      !.
check_subord_prop(nil,Sem):-
       (subord_role(Sem, Role),!
         ;
         Role=narrat),
       \+ doubtrole(Role),
      !.
check_subord_prop(Sem,Sem):-
      !.
check_subord_prop(nil,Sem):-
      \+ subord_role(Sem, Role),!.
check_subord_prop(Sem,nil):-
      \+ subord_role(Sem, Role),!.
check_subord_prop(Sem,Sem1):-
      \+ subord_role(Sem, Role),
      \+ subord_role(Sem1, Role1),!.
check_subord_prop(Sem,Sem1):-
    findall(Se-R,(subord_role(Se,R),nonvar(Se)),Sems),
    (Sems=[];
     on(Sem-Role,Sems),
       \+ doubtrole(Role)
       ;
       on(Sem1-Role,Sems),
       \+ doubtrole(Role)
       ;
       \+ on(Sem,Sems), \+ on(Sem1,Sems)),
    !.
    
doubtrole(hypoth).
doubtrole(cond).
% doubtrole(advers).

strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   spy_lower(Pred2,LowP,1),
   spy_lower(Pred1,LowP2,0),
   strictmatch_approximate(LowP,Pred1),!.

strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof(ChP1,Pred1),
   stringof(ChP2,Pred2),
   length(ChP1,L1), 2<L1,
   length(ChP2,L), 2<L,
   closest_match([ChP2],ChP1,Evl),
    Evl\=[],
      !.
strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof([A,B,C,D,E,F,G|ChP1],Pred1),
   stringof([A1,B1,C1,D1,E1,F1,G1|ChP2],Pred2),
   matchstring([A,B,C,D,E,F,G],[A1,B1,C1,D1,E1,F1,G1]),
   (check_suff_match(ChP1);
     check_suff_match(ChP2);
     ChP2=[G1|Rest],check_suff_match(Rest)
       ),
      !.
strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof([A,B,C,D,E,F|ChP1],Pred1),
   stringof([A1,B1,C1,D1,E1,F1|ChP2],Pred2),
   matchstring([A,B,C,D,E,F],[A1,B1,C1,D1,E1,F1]),
   (check_suff_match(ChP1);
     check_suff_match(ChP2);
     ChP2=[F1|Rest],check_suff_match(Rest);
     ChP1=[], p(Pred1,_)),
      !.
strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof([A,B,C,D,E|ChP1],Pred1),
   stringof([A1,B1,C1,D1,E1|ChP2],Pred2),
   matchstring([A,B,C,D,E],[A1,B1,C1,D1,E1]),
   (check_suff_match(ChP1);
     check_suff_match(ChP2);
     ChP2=[E1|Rest],check_suff_match(Rest);
     ChP1=[], p(Pred1,_)),
      !.
strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof([A,B,C,D|ChP1],Pred1),
   stringof([A1,B1,C1,D1|ChP2],Pred2),
   matchstring([A,B,C,D],[A1,B1,C1,D1]),
   (check_suff_match(ChP1);
     check_suff_match(ChP2);
     ChP2=[D1|Rest],check_suff_match(Rest);
     ChP1=[], p(Pred1,_)),
      !.
strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof([A,B,C|ChP1],Pred1),
   stringof([A1,B1,C1|ChP2],Pred2),
   matchstring([A,B,C],[A1,B1,C1]),
   length(ChP1,L1),length(ChP2,L2),
   L1 =< 4, L2 =< 3,
   (check_suff_match(ChP1);
     check_suff_match(ChP2);
     ChP2=[C1|Rest],check_suff_match(Rest);
     ChP1=[], p(Pred1,_)),
      !.

strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof([A,B,C,D|_],Pred1),
   stringof([J,K,H,A1,B1,C1,D1|_],Pred2),
   matchstring([A,B,C],[A1,B1,C1]),
   stringof([J,K,H],Pref),
     Pref\=dis,
   (H\='_',
    (p(Pref,Feat);checkab(Pref);chabbr(Pref))
    ;
    H='_',
   stringof([J,K],Pre),
    (p(Pre,Feat);checkab(Pre);chabbr(Pre))),
      !.
strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof([A,B,C,D|_],Pred1),
   stringof([J,K,A1,B1,C1,D1|_],Pred2),
   matchstring([A,B,C,D],[A1,B1,C1,D1]),
   stringof([J,K],Pref),
     Pref\=dis,
   (K\='_',
    (p(Pref,Feat);checkab(Pref);chabbr(Pref))
   ;
   K='_',
    (p(J,Feat);checkab(J);chabbr(J))),
      !.
strictmatch_approximate(Pred1,Pred2):-
   atomic(Pred1),atomic(Pred2),
   Pred1\=[],Pred2\=[],
   stringof([A,B,C,D,E,F|ChP1],Pred1),
   stringof([A1,B1,C1,D1,E1,F1|ChP2],Pred2),
   stringof([A,B],Pref),
   matchstring([A,B],[A1,B2]),
   p(Pref,Feat),
   stringof([C,D,E,F|ChP1],Pred11),
   stringof([C1,D1,E1,F1|ChP2],Pred22),
   strictmatch_approximate(Pred11,Pred22),
      !.
