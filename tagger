:- style_check(-singleton).

check_nf(W):-
   on(W, [evidence, proof, fact, hypothesis, possibility, probability, condition, wish, desire, decision]).


excep('A',art).
excep('About',[p,in]).
excep('After',p).
excep('All',qc).
excep('Also',avv).
excep('An',art).
excep('Any',q).
excep('As_yet',ccong).
excep('At',p).
excep('Behind',p).
excep('But',cosu).
excep('By',pda).
excep('Companies',n).
excep('Company',n).
excep('Despite',p).
excep('Each',q).
excep('Even',avv).
excep('Example',n).
excep('Fed',np).
excep('He',pers).
excep('Her',poss).
excep('His',poss).
excep('How',int).
excep('Known_as',ccom).
excep('In',p).
excep('Indeed',avv).
excep('Insert',v).
excep('Its',poss).
excep('None',q).
excep('Others',q).
excep('Out',[avv,p]).
excep('Over',[p,in]).
excep('Please',i).
excep('Press',v).
excep('Rather',npro).
excep('Roughly',[p,in]).
excep('Select',v).
excep('State',n).
excep('States',n).
excep('Still',avv).
excep('The',art).
excep('There',[expl,avv]).
excep('Then',ccong).
excep('Thus',ccong).
excep('To',[p,pt]).
excep('Under',p).
excep('Warning',n).
excep('When',[cosu,int]).
excep('Where',int).
excep('Which',[int]).
excep('While',cosu).
excep('What',[int,rel,relin]).
excep('Who',[int,rel,relin]).
excep('Whom',[int,rel,relin]).
excep('Whose',[int]).
excep('Why',[int]).
excep('Yes',i).
excep('didn-t_',[ausd]).
excep(a,art).
excep(about,[p,in]).
excep(all,qc).
excep(also,avv).
excep(an,art).
excep(and,cong).
excep(any,q).
excep(are,[ause, vc]).
excep(as,[ccom, cosu]).
excep(as_if,[cosu]).
excep(at,p).
excep(be,[ausei, vci]).
excep(been,[ausep, vc]).
excep(behind,p).
excep(being,[aueg, vcg, vprt]).
excep(because,cosu).
excep(boring,vgin).
excep(born,vppin).
excep(both,q).
excep(but,cosu).
excep(by,pda).
excep(closes, [vin, vt]).
excep(companies,n).
excep(company,n).
excep(could,vsup).
excep(despite,p).
excep(do,[ausd,v]).
excep(even,in).
excep(example,n).
excep(few,q).
excep(each,q).
excep(five,num).
excep(for,p).
excep(follows,v).
excep(go,vbin).
excep(going_to,vsup).
excep(set_to,vsup).
excep(has_to,vsup).
excep(have_to,vsup).
excep(had_to,vsup).
excep(having_to,vsup).
excep(he,pers).
excep(her,poss).
excep(his,poss).
excep(how,[int,cosu]).
excep(if,cosu).
excep(in,p).
excep(is,[ause,vc]).
excep(its,poss).
excep(including,p).
excep(known_as,ccom).
excep(least,q).
excep(less,[in,q]).
excep(like,[ccom, v]).
excep(majority,q).
excep(many,q).
excep(may,vsup).
excep(might,vsup).
excep(more,[in, q]).
excep(most,q).
excep(much,q).
excep(need,[n, vbin, vbt, vt,vin]).
excep(neither,[cong,q]).
%excep(no,neg).
excep(none,q).
excep(not,neg).
excep(nothing,q).
excep(on,p).
excep(others,q).
excep(out,[avv,p]).
excep(over,[avv, p, in]).
excep(press,vt).
excep(quite,[grad, in, intj]).
excep(rather,[ccom, in]).
excep(rather_than,[ccom]).
excep(roughly,[p,in]).
excep(says,vt).
excep(sees,vt).
excep(so,[cosu, in]).
excep(so_that,[cosu]).
excep(some,q).
excep(somebody,q).
excep(something,q).
excep(someone,q).
excep(still,avv).
excep(there,[expl,avv]).
excep(than,ccom).
excep(the,art).
excep(then,ccong).
excep(thus,ccong).
excep(to,[p,pt]).
excep(twice,avv).
excep(under,p).
excep(up,avv).
excep(until,[cosu, p]).
excep(very,in).
excep(was,[ause,vc]).
excep(way,n).
excep(were,[ause,vc]).
excep(when,[cosu,int,rel]).
excep(which,[rel,int]).
excep(while,[cosu,n]).
excep(who,[rel,relin,int]).
excep(whom,[rel,relin,int]).
excep(what,[rel,relin,int]).
excep(where,[rel,relin,int]).
excep(whose,[relob]).
excep(whole,q).
excep(why,[rel,relin,int]).
excep(yes,i).
excep(W,[nf]):-
   check_nf(W).
excep(W,[vsup]):-
   W\=may, W\='May',
   supporto(W).
excep(W,[vc,ause]):-
   coplb(W).
excep(W,[vc,ausa]):-
   coplh(W).
excep(W,[in]):-
   intn(W).
excep(W,[nt]):-
   nt(W).

   
/*****************************************************************************/
/* estrai_st : estrae una struttura in base alla tabella
   posn(Functor,Struct,SubStruct).                                            */

estrai_st(SubFunctor,Struct,SubStruct) :- Struct\=[],
                                          functor(Struct,Fun,A),
                                          posn(SubFunctor,Fun,N),
                                          (N =< A),
                                          arg(N,Struct,SubStruct),
                                          functor(SubStruct,SubFunctor,_).

estrai_st(indice,Struct,indice(SPx)) :- Struct\=[],
                                        functor(Struct,sp,A),
                                        estrai_st(sn,Struct,SN),
                                        estrai_st(indice,SN,indice(SNx)),
                                        generasp(SNx,SPx).

estrai_stmod(SubFunctor,Struct,SubStruct,Rest) :- Struct\=[],
                                          functor(Struct,Fun,A),
                                          posn(SubFunctor,Fun,N),
                                          (N =< A),
                                          arg(N,Struct,SubStruct),
                                          functor(SubStruct,SubFunctor,_).
estrai_stadj(SubFunctor,mods([]),[]) :-!.
estrai_stadj(SubFunctor,mods(Struct),SubStruct,Rest) :- 
                     Struct\=[],
                     on(SubStruct,Struct),
                     functor(SubStruct,SubFunctor,_),
                  elimina(SubStruct, Struct, Rest).
estrai_stargs(SubFunctor,args(Struct),SubStruct,Rest) :- 
                     Struct\=[],
                     on(SubStruct,Struct),
                     functor(SubStruct,SubFunctor,_),
                  elimina(SubStruct, Struct, Rest).

/* Specializzata per gli sp! */
/* Agli sp, che nell'albero sintattico non non hanno un indice,
   viene assegnato il simbolo spX con X uguale a quello dell'sn che
   esso controlla. */

genera_sp(SNx,SPx) :- name(SNx,StSNx), /* SPx e' un sp "uguale" all'SNx */
                      list([S1,N1|LNum],StSNx),
                      list([S2,P2],"sp"),
                      list([S2,P2|LNum],StSPx),
                      name(SPx,StSPx).

generasp(SNx,SPx):-  % SPx e' un sp "uguale" all'SNx
  name(SNx,StSNx),
  StSNx = [_,_|LNum],
  StSPx = [115,112|LNum],
  name(SPx,StSPx).
                      

/*********** Tabella per la manipolazione dell'albero sintattico *************/

posn(indice,sn,1). /* cioe' la posizione della struttura indice() in sn e' 1 */
posn(cat,sn,2).
posn(possessivo,sn,2).
posn(coordina,sn,3).
posn(n,sn,3).
posn(npro,sn,3).
posn(pr,sn,3).
posn(indefinito,sn,3).
posn(implicito,sn,3).
posn(prorel,sn,3).
posn(det,sn,4).
posn(args,sn,5).
posn(mods,sn,6).
posn(adjs,sn,7).
posn(adj,mods,2).

posn(funzione,arg,1).
posn(ruolo,arg,2).
posn(sn,arg,3).
posn(sa,arg,3).
posn(sa,arg,3).
posn(sp,arg,3).
posn(infinitiva,arg,3).
posn(inf_con_sub,arg,3).
posn(infinitive_coordinate,arg,3).

posn(sp,adj,2).

posn(funzione,apposizione,1).
posn(ruolo,apposizione,2).
posn(sn,apposizione,3).
posn(funzione,vocativo,1).
posn(ruolo,vocativo,2).
posn(sn,vocativo,3).

posn(funzione,arg,1).
posn(ruolo,arg,2).
posn(sn,arg,3).

posn(prep,sp,1).
posn(sn,sp,2).

posn(cat,sa,1).
posn(a,sa,2).
posn(args,sa,3).
posn(cat,saa,1).
posn(a,saa,2).
posn(args,saa,3).

posn(indice,sn_subordinato,1).
posn(funzione,sn_subordinato,2).
posn(ruolo,sn_subordinato,3).
posn(sn,sn_subordinato,4).

posn(indice,infinitiva,1).
posn(regola,infinitiva,2).
posn(v,infinitiva,3).
posn(cat,infinitiva,4).
posn(args,infinitiva,5).
posn(adjs,infinitiva,6).

posn(indice,asserzione,1).
posn(regola,asserzione,2).
posn(v,asserzione,3).
posn(appoggio,asserzione,4).
posn(cat,asserzione,5).
posn(args,asserzione,6).
posn(adjs,asserzione,7).

posn(v,ip,2).

posn(indice,infinitive_coordinate,1).

posn(indice,inf_con_sub,1).
posn(sub,inf_con_sub,2).
posn(rel,inf_con_sub,3).
posn(infinitiva,inf_con_sub,4).
posn(subordinata,inf_con_sub,5).

posn(indice,asserz_coord,1).

posn(indice,cp_comp,1).
posn(sub,cp_comp,2).
posn(rel,cp_comp,3).
posn(principale,cp_comp,4).
posn(subordinata,cp_comp,5).
posn(sn,relativa,2).


parallel:-
   file_create('verbdic', File, CFile),
   read_filet(File, CFile),
   close(File),
   close(CFile).


read_filet(File, Out):-
    repeat,
    see(File),
    read(File, M),
    (M=end_of_file,
     !
     ;
     M=piv(V, L),
     sort(L,L1),
     write_tags(Out, V, L1),
     fail),
    !.

write_tags(Out, W, P):-
   write(Out, s(W, P)),
   dot(Out).

file_create(N, File, NFile):-
   old('TEXT', File, Vol),
   open(File, read),
   new(NFile, NVol, 'Tokens File Name', N),
   create(NFile, NVol, 'TEXT'),
   open(NFile, write).

check_cost_mod(Nom,SA,Agg,Gen,Num,Cat,Symb):-
     Nom=..[Mod,SA],
     SA=saa(indice(Simb), cat(Cat), agg(Agg, Gen, Num), Spec, args(Ar), adjs(Ad))
     ;
     Nom=..[Mod,SA],
     SA=sa(indice(Simb), cat(Cat), agg(Agg, Gen, Num), args(Ar))
     ;
     Nom=saa(indice(Simb), cat(Cat), agg(Agg, Gen, Num), Spec, args(Ar), adjs(Ad)), SA=Nom
     ;
     Nom=sa(indice(Simb), cat(Cat), agg(Agg, Gen, Num), args(Ar)), SA=Nom,
     !.

assertnp(F,MC,H,Loc,L):-
  (wfst(on), 
   find_pos(H, I, X, Si),
   extract_heads(F, Y-H,Head,Ii),
   Len is L - Loc,
   (stackxp(PH-PLen-L-PMC),
    H=PH,
    Len=Plen, !
    ;
    asserta(stackxp(H-Len-L-MC))),
   Diag=..[H-Fl-X,Len-MC],
   !
   ;
   true).

assertpp(F,MC,H,Loc,Fl):-
  (wfst(on), 
   find_pos(H, I, X, Si),
    nonvar(Loc),
   Len is Fl - Loc,
   (stackxp(PH-PLen-I-PMC),
    H = PH,
    Len = Plen, !
    ;
    asserta(stackxp(H-Len-Fl-MC))),
   Diag=..[H-Fl-X,Len-MC],
   !
   ;
   true).


extract_head(Y-P,Head,I):-
  find_pos(P, I, X, AllP),
   member(Y-Head, X). 

find_headpos(P, I, Head):-
   findall_poss(Si),
   on(I-X, Si),
   nogen_member(P-Head,X),!.

/* extract_head(Y-P,Head,I):-!. */

extract_heads([], Y-P,Head,I):-
   nonvar(P),
   findall_pos(P, I),
   !.

extract_heads([], Y-P,Head,I):-
   var(P),
   findall_pos(P, Is),
   reverse(Is, [I|_]),
   !.

extract_heads(F, Y-P,P,Ii):-
   nonvar(P),
   find_pos(P, I, X, _),
   findall_poss(AllP),
   reverse(AllP, [O-_|_]),
   length(F,L),
   nonvar(L),
   nonvar(O),
   Ii is O - L + 1,
   !.

extract_heads(F, Y-P,Head,I):-
  (find_pos(P, I, X, AllP),
   nogen_member(Y-Head, X) 
   ;
   F=[P1|_],
   extract_head(Z-P1,Head,I1),
   nonvar(Head)
%   I is I1 - 1
   ).

extract_heads(F, Y-Pre, Head,I)
     :-
    (onegr(pp_n,romance) ; onegr(pp_n,deutsch)),
     prep_articolata(Pre,[P,Art]),
     extract_heads(F, Y-P, Head, I),
     !.

extract_heads(F, Y-Pre, Head,I)
     :-
    (onegr(pp_n,romance) ; onegr(pp_n,deutsch)),
     vcl(Pre,P,Art),
     extract_heads(F, Y-P, Head, I),
     !.

extract_heads(F, Y-Pre, Head, I)
     :-
    (onegr(pp_n,romance) ; onegr(pp_n,deutsch)),
     mod_alterato(Pre,Nome,Agg,Gen,Num),
     extract_heads(F, Y-Nome, Head, I),
     !.

extract_heads(F, Y-Pre, Head, I)
     :-
     stringof(Mult,Pre),
     on('_',Mult),
     Head=Pre,
     !.
extract_sec_head(Y-P,Head,K):-
  (find_pos(P, I, X, AllP),
   AllP\=[],
   K is I+1,
   on(K-W, AllP),
   nogen_member(Y-Head, W) 
   ;
   true).

extract_ter_head(Y-P,Head,I):- 
  (find_pos(P, I, X, AllP),
   AllP\=[],
   K is I+2,
   on(K-W, AllP),
   nogen_member(Y-Head, W) 
   ;
   true).
  

assert_ibars(N,Disambs, Parse, Tensed):-
   evaluate_ambiguities(Disambs, Parse, Ambs),
   choose_tensed(Ambs, Tensed),
   (Tensed\=[],
     assert(tensed(Tensed))
     ;
     Tensed=[]),
   !.
   
disamb_all(Tagged,First,Tagged):-
    on(W-V-_,Tagged),
    check_all_verbs(V),
    !.
disamb_all(Tagged,First,New):-
    length(Tagged,L),
%    L<10,
    findall(W,
          (on(_-Word,First),
          on(V-W,Word),
          check_all_verbs(V)),Ws),
    Ws\=[],length(Ws,L1),
    (L1=1,
     Ws=[W],
     changeverbnew(W,Tagged,New)
     ;
     1<L1,
     on(W,Ws),
     changeverbnew1(W,Tagged,New),
     New\=Tagged),     
    !.
disamb_all(Tagged,First,Tagged):-
    !.

changeverbnew(W,[],[]):-!.
changeverbnew(W,[W-V-S|Tagged],[W-v-S|New]):-
    changeverbnew(W,Tagged,New),
    !.
changeverbnew(W,[W1-V-S|Tagged],[W1-V-S|New]):-
    changeverbnew(W,Tagged,New),
    !.
changeverbnew1(W,[],[]):-!.
changeverbnew1(W,[W1-V1-S1,W-V-S|Tagged],[W1-V1-S1,W-v-S|New]):-
    V1\=art,
    changeverbnew1(W,Tagged,New),
    !.
changeverbnew1(W,[W1-V-S|Tagged],[W1-V-S|New]):-
    changeverbnew1(W,Tagged,New),
    !.

tagging_disamb(NoFr, [], Tensed, Tagged, Costs, Input,Out,NFrase):-!.
tagging_disamb(NoFr, Frase, Tensed, Tagged, PCosts, Input,Out,NFrase):-
   Frase\=[],
   Cont = 0,
   sentence_inits,
   ncheck_lexs(NoFr,Cont,Frase,NFrase,First),
   evaluate_garden_path,
   initheaps,
   findall_poss(NWords),
   reverse(NWords,[LToks-_|_]),
   associate_tags(NFrase, NWords, Tags),
   np_chunking(NoFr-Tags, Disambs, Parse),
   reorg(Parse, Parse1),
   disamb_all(Parse1,First,Parse2),
   collect_np(Parse2, Costs, Tagged),
   assert_ibars(NoFr,Disambs, Parse, Tensed),
   retag_verb(Tensed, Tagged, NTagged),
   matchtt(Tagged, NTagged,True),
   parse_costs(Costs, PCosts,True),
   ctofmaps(Symb,PCosts, Out),
%   build_filename(NoFr, Input, FileName),
   ndump_output(FileName,NoFr, NTagged,Out,PCosts),
   !.

compute_ambiguity_class(NoFr,Frase,Amb):-
    ambiguity_class(Frase,NuovaFrase),
    appiattisci(NuovaFrase, Lista),
    length(Lista,L),
    length(Frase,F),
    Amb is L / F,
%    wfront('Feedback'),
%    tell('Feedback'),
    write('Ratio of Tags per Word for Sentence no: '),
    writenl('Feedback',NoFr),
    write('Word Ambiguity Ratio: '),
    writenl('Feedback',Amb),
    findall_poss(Si),
    writenl('Feedback','Lookahead Start Active Chart'),
    writeseqnl('Feedback',Si),
    nl,
    !.

recompute_ambiguity_class(NoFr,Frase,Amb):-
    ambiguity_class(Frase,NuovaFrase),
    appiattisci(NuovaFrase, Lista),
    length(Lista,L),
    length(Frase,F),
    Amb is L / F,
%    wfront('Feedback'),
%    tell('Feedback'),
    nl,
    writenl(_,'New Ratio of Tags per Word after FSA Disambiguation: '),
    writenl('Feedback',Amb),
    findall_poss(Si),
    writeseqnl('Feedback',Si),
    !.
ambiguity_class([],[]):-!.
ambiguity_class([x-A|NuoFrase],NuovaFrase):-
    ambiguity_class(NuoFrase,NuovaFrase),
    !.
ambiguity_class([N-A|NuoFrase],[A|NuovaFrase]):-
    ambiguity_class(NuoFrase,NuovaFrase),
    !.

evaluate_garden_path:-
  findall_poss(Si),
  find_gp_seq(Si,Amb),
  reassert_seq(Si,Amb),
  nl,
  writeseq(_,Amb),
  nl,
  !.

reassert_seq(Si,Si):-!.
reassert_seq(Si,Amb):-
  Si\=Amb,
  abolish(termin/1),
  reassertseq(Amb),  
  !.

reassertseq([]):-!.
reassertseq([N-List|Amb]):-
  assertz(termin(N-List)),
  reassertseq(Amb),  
  !.

find_gp_seq([],[]):-!.
find_gp_seq([0-A, N-B|Si],[0-List, N-B|Ambs]):-
  A=[W], W=n-D,
  B=[W1], W1=r-V,
  retagword(D,NewTag),
  Amb=NewTag-D,
  create_new_list([Amb],List),
  retract(termin(N-B)),
  assertz(termin(N-List)),
  find_gp_seq(Si,Ambs),
  !.
find_gp_seq([N0-A, N-B|Si],[N0-A, N-List|Ambs]):-
  A=[W], W=d-D,
  select_determiner(D),
  B=[W1], W1=v-V,
  retag_word(V,NewTag),
  Amb=NewTag-V,
  create_new_list([Amb],List),
  retract(termin(N-B)),
  assertz(termin(N-List)),
  find_gp_seq(Si,Ambs),
  !.

find_gp_seq([N0-A|Si],[N0-A|Amb]):-
  find_gp_seq(Si,Amb),
  !.
select_determiner(D):-
   (Cat=art;Cat=in),
   extract_determiners(D, [Cat]),
   !.
retagword(V,S):-
  spy_lower(V, Low, 1),
  new_form(Low,S),
  \+ atomic(S), S\=[A],
  !.
retag_word(V,S):-
  new_form(V,S),
  \+ atomic(S), S\=[A],
  !.
retag_word(Lex,[n,v]):-
  new_wn(Lex,_),
  !.
retag_word(Lex,[n,v]):-
  asserta(
            new_n(Lex,Lex,Gen)),
    asserta(
            new_pred_n(Lex, nil, [astratto,oggetto,istituzione], [])),
  !.

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
    v(Verbo,Vinf,Mod,Temp,Pers,Num),
    Vinf=be,
%    !,
     Mod=Modo,
%    Mod=cong, Verbo=were), 
    Temp=Tempo.

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
    v(Verbo,Vinf,Mod,Temp,Pers,Num),
%    !,
    (var(Modo),
      Modo=Mod, Tempo=Temp;
      nonvar(Modo),
      (
       Modo=part,
        (Mod=Modo;
               Mod=ind, 
               check_irregulars(Vinf),
              (nonvar(Tempo),
               Temp=Tempo
               ;
               var(Tempo), Temp\=pres))
         ;
          Modo=ger,Mod=Modo
         ;
         Modo\=part,Modo\=ger
        )),
    verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]).
%    !.
vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
    aux(Verbo,Vinf,Mod,Temp,Pers,Num),
    !,
    (var(Modo),
      Modo=Mod, Tempo=Temp;
      nonvar(Modo),
      (
       Modo=part, 
        (Mod=Modo;
               Mod=ind, 
               check_irregulars(Vinf),
              (nonvar(Tempo),
               Temp=Tempo
               ;
               var(Tempo), Temp\=pres))
         ;
          Modo=ger,Mod=Modo
         ;
         Modo\=part,Modo\=ger
        )),
     verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]),
    !.
vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
    modal(Verbo,Vinf,Mod,Temp,Pers,Num),
    !,
    (var(Modo),
      Modo=Mod, Tempo=Temp;
      nonvar(Modo),
      (
       Modo=part, 
        (Mod=Modo;
               Mod=ind, 
               check_irregulars(Vinf),
              (nonvar(Tempo),
               Temp=Tempo
               ;
               var(Tempo), Temp\=pres))
         ;
          Modo=ger,Mod=Modo
         ;
         Modo\=part,Modo\=ger
        )),
     verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]),
    !.

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
    (var(Modo),
      new_v(Verbo,Vinf,Modo,Tempo,Pers,Nu)
     ;
     nonvar(Modo),
      new_v(Verbo,Vinf,Mod,Tempo,Pers,Nu),
      (Mod=Modo;
        Mod\=Modo,
        verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo])
      )),!.

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
   vmf(Verbo,Vinf,vbd),
   vmf(Verbo,Vinf,vbn),
   Temp=pass, Mod=ind,
   verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]).
vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
   vmf(Verbo,Vinf,vbd),
   Temp=pass, Mod=ind,
   verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]).
vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
   vmf(Verbo,Vinf,vbn),
   Temp=pass, Mod=part,
   verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]),
   !.
vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
   vmf(Verbo,Vinf,vbg),
   Temp=pres, (Mod=progr;Mod=ger),
   verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]),
  !.
vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
   vmf(Verbo,Vinf,vbz),
   Temp=pres, Mod=ind, Pers=3, Num=sing,
   verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]),
  !.

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
      spy_lower(Verbo, LowL, 1),
    v(LowL,Vinf,Mod,Temp,Pers,Num),
    verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]),
    !.

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
      spy_lower(Verbo, LowL, 1),
    (var(Modo),
      new_v(LowL,Vinf,Modo,Tempo,Pers,Nu)
     ;
     nonvar(Modo),
      new_v(LowL,Vinf,Mod,Tempo,Pers,Nu),
      (Mod=Modo;Mod\=Modo,
      var(Pers))),!.

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
      spy_lower(Verbo, LowL, 1),
    sw(LowL-A-D),
    (var(Modo), 
      recover_cat(A,Ct),
      check_vcat(Ct),
      get_lemma_cats_feats(LowL,D,Ct,Vinf,Feat),
      length(D,L),
      nonvar(Feat),
      nogen_member(mood=Mod, Feat),
      nogen_member(tense=Tempo, Feat),
      get_pers_num(Feat,Pers,Num),
      Modo=Mod
     ;
      nonvar(Modo),
      verifica_modo_tempo(LowL,A,D,Vinf,Modo,Tempo,Pers)
     ).

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
    sw(Verbo-A-D),
      get_lemma_cats_feats(Verbo,D,Ct,Vinf,Feat),
    (var(Modo), 
      recover_cat(A,Ct),
      check_vcat(Ct),
      length(D,L),
      extract_feats_verb(Feat,Mod,Tempo,Pers,Num),
      Modo=Mod
     ;
      nonvar(Modo),
      verifica_modo_tempo(Verbo,A,D,Vinf,Modo,Tempo,Pers),
      extract_feats_verb(Feat,Mod,Tempo,Pers,Num)
     ).

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
      spy_lower(Verbo, LowL, P),
    (P=0,Verb=Verbo;P=1,Verb=LowL),
    (pp_x(Verb,Vinf, Gen, Num)
  ;  pp_y(Verb,Vinf, _, _)
  ;  pp_yy(Verb,Vinf, _, _)),
      Modo=ind,
        (Tempo=pass;Tempo=past),
    check_irregulars(Verb),
      !.

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
      spy_lower(Verbo, LowL, P),
    (P=0,Verb=Verbo;P=1,Verb=LowL),
    nonvar(Modo),
     (Modo=inf;Modo=base),
     (
     v(Verb,Cats)
     ;
     coml(Verb,Cats)
      ;
     vsp(Verb,Cats)
    ;
     PredV=..[pred_vc, Verb,S,A,F],
     call(PredV)
     ;
     PredV=..[pred_vs, Verb,S,A,F,R1,C1,Sec,Pr,R2,C2,T,Pr1,R3,C3],
     call(PredV)
      ),
     Vinf=Verb,
     Tempo=pres,
    !. 

vv(Verbo,Vinf,Modo,Tempo,Pers,Num):-
      spy_lower(Verbo, LowL, P),
    (P=0,Verb=Verbo;P=1,Verb=LowL),
    (nonvar(Modo),
    Modo=ind,
     v(Verb,Cats)
     ;
    pp_word_cat(Verb, Temp, Mo, Vinf),
    Modo=Mo, Tempo=Temp),
    !. 

check_default(Feat):-
     nogen_member(tense=T,Feat), 
     nogen_member(mood=Mod, Feat),
     T\=progr, Mod\=part, Mod\=inf, Mod\=base, Mod\=ger,
     !.

get_pers_num(Feat,Pers,Num):-
      nogen_member(pers=Pers, Feat),
      nogen_member(num=Num, Feat),
      !.
get_pers_num(Feat,Pers,Num):-
      nogen_member(num_pers=NumPers, Feat),
      (NumPers=sing3, Pers=3, Num=sing
       ;
       NumPers=plur3, Pers=3, Num=plur
       ),
      !.
get_pers_num(Feat,3,plur):-
     check_default(Feat),
     !.
get_pers_num(Feat,2,Num):-
     check_default(Feat),
     !.
get_pers_num(Feat,1,Num):-
     check_default(Feat),
     !.
get_pers_num(Feat,Per,Num):-
     nogen_member(tense=T,Feat), 
     nogen_member(mood=Mod, Feat),
     (T=progr; Mod=part; Mod=inf; Mod=base; Mod=ger),
     !.
get_pers_num(Feat,Per,Num):-
     nogen_member(tense=T,Feat), 
     nogen_member(mood=Mod, Feat),
     (T=past;T=pass), Mod=ind,
     !.

recover_cat(A,Ct):-
      nonvar(A),
      nogen_member(Cat,A),
      (atomic(Cat),
       Ct=Cat
      ;
      list(Cat),
       nogen_member(Ct,Cat)).
recover_cat(A,Ct):-
      nonvar(A),
      A=Ct,
      !.
get_lemma_cats_feats(Verbo,D,Cat,Vinf,Feat):-
      D\=[],
      on(Cat-Verb-Vinf-Cat-Feat, D).
get_lemma_cats_feats(Verbo,D,Cat,Vinf,Feat):-
      D\=[],
      appiattisci(D,Bundle),
      on(Cat-Verb-Vinf-Cat-Feat, Bundle).
get_lemma_cats_feats(Verbo,D,Cats,Vinf,Feat):-
      D\=[],
      appiattisci(D,Bundle),
      on(Cats-Vinf-Feat, Bundle),
      checklcf(Cats,Catt), 
      (Catt\=vppt, Lemma=Vinf;
      Catt=vppt, Verbo\=Vinf, Lemma=Vinf;
      Catt=vppt, Verbo=Vinf, 
      check_irregulars(Vinf), Lemma=Vinf).
get_lemma_cats_feats(Verbo,D,Cats,Vinf,Feat):-
      D\=[],
      on(Cats-Vinf-Feat, D),
      checklcf(Cats,Catt).
get_lemma_cats_feats(Verbo,D,Cats,Vinf,Feat):-
      D\=[],
      (on(Cts-Vinf-Feat, D),
       checklcf(Cts,Cats)

       ;
      on(Cat-Verb-Vinf-Cat-Feat, D),
         checklcf(Cat,Cats)
        ).

checklcf(Cats,Catt):-
      (atomic(Cats), 
       check_all_verbs(Cats), Catt=Cats
       ;
       list(Cats),
       on(Cat,Cats),
       check_all_verbs(Cat), Catt=Cat
       ), 
      !.
      
get_irregulars(Vinf, Lemma,Codes,Codess):-
   m_lex(Vinf, Codes, radiciario),
   findall(Reg-Lemma,
          (on(CodeAtm, Codes),
            atom_to_term(CodeAtm, Code, Atm),
            irr_code(Code, Lemma, Reg)),Codess),
   Codess\=[],
   on(Co-Lemma,Codess).

check_irregulars(Vinf):-
   m_lex(Vinf, Codes, radiciario),
   on(CodeAtm, Codes),
%   pname(Code, CodeAtm),
   atom_to_term(CodeAtm, Code, Atm),
   ir_code(Code),!.

check_irregulars(Root):-
%   dvol('Macintosh HD:work:riassuntore:dizionari'),
   nonvar(Root),
   dc(Root, Codes),
   Codes=[],!.

ir_code(v:Reg:_):-
   Reg=r,!.
irr_code(v:Reg:Lemma, Lemm, Reg):-
   Reg\=r,
   (
    (Reg=pt;Reg=pp;Reg=pr;Reg=p-pp;Reg=p), 
     Lemm=Lemma
    ;
     Lemma\=t),
    !.

assert_sentences(Text,InFile):-
   repeat,
   see(InFile),
   read(InFile, T), 
  (T=end_of_file,!
   ;
   T\=end_of_file,
%   T=f(N,Sentence),
   T=f(N,_,Sentence),
   nchecklex(Sentence,LFrase),
%   lowcase_all(Sentence, LowSentence),
   mcon(Text,'_',Txt),
   gen_sym(Txt,E),
   assert(fp(E,LFrase)),
   fail
   ),
   seen.


nchecklex([],[]):-!.
/*
nchecklex([First|Frase],[Sec|LFrase])
    :- 
   spy_lower(First, LowL, 1),
   lfilters(First,Slists,List),
   (s_is_ax(First,Sec),!
     ; Sec=First),
   nchecklex(Frase,LFrase),
    !.
*/
nchecklex([First|Frase],[First|LFrase])
    :- 
   spy_lower(First, LowL, 1),
   nturnup_wn(1, First, Feats),
   on(sur,Feats),
   nchecklex(Frase,LFrase),
   !.

nchecklex([First|Frase],[LowL|LFrase])
   :- 
   spy_lower(First, LowL, 1),
   \+ nt(First),
   \+ r(LowL),
   \+ j(LowL),
   fct(LowL),
   nchecklex(Frase,LFrase),
     !.

/*
nchecklex([First|Frase],[LowL|LFrase])
   :- 
   spy_lower(First, LowL, 1),
   \+ nt(First),
   v(LowL,_),
   nchecklex(Frase,LFrase),
    !.
*/
nchecklex([First|Frase],[LowL|LFrase])
    :- 
   conv_is_ax(First,LowL),
   nchecklex(Frase,LFrase),
   !.

nchecklex([First|Frase],[First|LFrase]):- 
   nchecklex(Frase,LFrase),
    !.

build_filename(NoFr, Input, FileName):-
  fname(Input, Vol, Sym, S),
  (var(S), Symb=Sym;
   nonvar(S),
  concat(Sym, S, Symb)),
  concat(Symb, '_', FN),
  concat(es, NoFr, FilN),
  concat(FN, FilN, FileN),
  concat(FileN, tags, FileNam),
  concat('Macintosh HD:demos:tagging:', Symb, FileName),
   open(FileName,write),
  !.

matchtt(Tagged, Tagged,false):-!.
matchtt(Tagged, NTagged,true):-
        Tagged\=NTagged,!.



prendi_lemmas(Testa, Sub, Lemma, Valenz,AllFeats):-
    vv(Testa,Vinf,Modo,Tempo,Pers,Num),
    (stringof(Prefix, Testa),
     on('_', Prefix),
     vparse(AllFeats, Vinf, ''),      
     AllFeats\=[],
     colllemsfeats(AllFeats,Lemmas,Subs),
     sort(Lemmas, Lems),
     (remove(Testa,Lems,NewL)
      ;
      NewL=Lems),
      nogen_member(Lemma, NewL)
     ;
     nonvar(Vinf),
     Lemma=Vinf),
    (nogen_member(subcat=Sub,Subs)
     ;
     nogen_member(Sub,Subs)
     ;
     true),
    trovasubcat(Testa, Lemma,Sub,Feats, Valenz),
    !.
prendi_lemmas(Testa, Sub, Lemma, Valenz,AllFeats):-
    vparse(AllFeats, Testa, ''),
    AllFeats\=[],
    colllemsfeats(AllFeats,Lemmas,Subs),
    sort(Lemmas, Lems),
    (remove(Testa,Lems,NewL)
     ;
     NewL=Lems),
    (nonvar(Lemma),on(Lemma, NewL)
     ;
     Lemma=Testa),
    trovasubcat(Testa, Lemma,Sub,Feats, Valenz),
    !.

prendi_lemmas(Testa, Sub, Testa, Valenz,AllFeats):-
   lemmatize_dic_v(Testa, Head, S),
    Head\=Testa,
    (v(Testa,K);inf_v(Testa,I)),
    vparse(AllFeats, Head, ''),
    AllFeats\=[],
    colllemsfeats(AllFeats,Lemmas,Subs),
    sort(Lemmas, Lems),
    (remove(Testa,Lems,NewL)
     ;
     NewL=Lems),
    (nonvar(Lemma),
     on(Lemma, NewL)
     ;
     var(Lemma),
     on(Lemma, NewL)
     ;
     Lemma=Testa),
    trovasubcat(Testa, Lemma,Sub,Feats, Valenz),
    !.

prendi_lemma(Testa, Sub, Lemma,AllFeats):-
    vparse(AllFeats, Testa, ''),
    AllFeats\=[],
    colllemsfeats(AllFeats,Lemmas,Subs),
    sort(Lemmas, Lems),
    (remove(Testa,Lems,NewL)
     ;
     NewL=Lems),
    nogen_member(Lemma, NewL),
    (nogen_member(subcat=Sub,Subs)
     ;
     nogen_member(Sub,Subs)
     ;
     true),
    trovasubcat(Testa, Lemma,Sub,Feats, Valenz),
    !.

prendi_lemma(Testa, Sub, Lemma,AllFeats):-
    vv(Testa,Vinf,Modo,Tempo,Pers,Num),
    (stringof(Prefix, Testa),
     on('_', Prefix),
     vparse(AllFeats, Vinf, ''),      
     AllFeats\=[],
     colllemsfeats(AllFeats,Lemmas,Subs),
     sort(Lemmas, Lems),
     (remove(Testa,Lems,NewL)
      ;
      NewL=Lems),
      nogen_member(Lemma, NewL)
     ;
     nonvar(Vinf),
     Lemma=Vinf), 
    (nogen_member(subcat=Sub,Subs)
     ;
     nogen_member(Sub,Subs)
     ;
     true),
    trovasubcat(Testa, Lemma,Sub,Feats, Valenz),
    !.

prendi_lemma(Testa, Sub, Testa, AllFeats):-
   lemmatize_dic_v(Testa, Head, S),
    Head\=Testa,
    (v(Testa,K);inf_v(Testa,I)),
    vparse(AllFeats, Head, ''),
    AllFeats\=[],
    colllemsfeats(AllFeats,Lemmas,Subs),
    sort(Lemmas, Lems),
    (remove(Testa,Lems,NewL)
     ;
     NewL=Lems),
    (nonvar(Lemma),
     on(Lemma, NewL)
     ;
     var(Lemma),
     on(Lemma, NewL)
     ;
     Lemma=Testa),
    trovasubcat(Testa, Lemma,Sub,Feats, Valenz),
    !.

recover_soggcontr(Input,F,Rest):-
    F=[P|F4],
    nonvar(P),
    soggcontr(P, Cat, Pron, Base),
    remove_all(F4, Input, Fra),
    append([Base],F4, Rest),
    append(Fra, Rest, NuovaFrase),
    restoreall_lookahead(P,NuovaFrase),
     !.
recover_soggcontr(Input,F,Rest):-
    F=[P|F4],
    punct(P),
    Rest=F4,
    onelook(F4,Mc,v,nil),
     !.

recover_soggcontr(Input,F,F).

filter_nouns_interj(Cats):-
       on(Cat,Cats),
%     pname(C,Cat),
     atom_to_term(Cat, C, Atm),
     f_n_i(C),
     !.

f_n_i(inter).
f_n_i(inter:_).
f_n_i(s:_).
f_n_i(nadj).
f_n_i(n).

search_categories(W,Cats,All):-
   findall(Ss, 
     (nogen_member(Cat,Cats),
       (proncat(Cat), Ss=r;
                nouncats(Cat), Ss=n;
                 qcats(Cat), Ss=d;
                 anncats(Cat), Ss=a;
                check_vcat(Cat), Ss=v;
                 checkppast(Cat), Ss=q;
                Cat=avv, Ss=av;
                check_congc(Cat), Ss=c;
                check_congs(Cat), Ss=s;
                reverse_tags(W,Cat,Ss))), SS),
    sort(SS, All),
    !.

verbs_of_saying(W):-
    lemmatize_dic_v(W, Lemma, S),
    sy(Lemma),
    !.
evaluate_ambiguities(Tags, Parse, Ambs):-
   eval_ambiguous(Tags, Atags),
   tp_access(ibar, Ibars),
   eval_vambiguous(Atags, Ibars, Vtags),
   estimate_ambiguous(Vtags, Parse, Ambs),
   !.

estimate_ambiguous([], Parse, []):-!.
/*
estimate_ambiguous([Cats-N-Word|Atags], [Word-C-Score|Parse], Ambs):-
    1=Score,
    estimate_ambiguous(Atags, Parse, Ambs),
    !.
*/
estimate_ambiguous([Cats-N-Word|Atags], [Word-C-Score|Parse], [Word-C-Cats-Score|Ambs]):-
    Score=<1000,
    estimate_ambiguous(Atags, Parse, Ambs),
    !.
estimate_ambiguous([Cats-N-Word|Atags], [Word-C-Score|Parse], Ambs):-
    1000<Score,
    estimate_ambiguous(Atags, Parse, Ambs),
    !.
estimate_ambiguous(Atags, [Word-C-Score|Parse], Ambs):-
    estimate_ambiguous(Atags, Parse, Ambs),
    !.

eval_vambiguous([], Ibars, []):-!.
eval_vambiguous([Cats-N-Word|Atags], Ibars, [Cats-N-Word|Vtags]):-
    on(C, Cats),
    on(C, Ibars),
    eval_vambiguous(Atags, Ibars, Vtags),
    !.
eval_vambiguous([Cats-N-Word|Frase], Ibars, Tokens):-
    eval_vambiguous(Frase, Ibars, Tokens),
    !.

eval_ambiguous([], []):-!.
eval_ambiguous([Cats-N-Word|Frase], [Out|Tokens]):-
    nonvar(N),
    1<N,
    Out=Cats-N-Word,    
    eval_ambiguous(Frase, Tokens),
    !.
eval_ambiguous([Cats-N-Word|Frase], [Out|Tokens]):-
    length(Cats, N),
    1<N,
    Out=Cats-N-Word,    
    eval_ambiguous(Frase, Tokens),
    !.
eval_ambiguous([Cats-N-Word|Frase], Tokens):-
    eval_ambiguous(Frase, Tokens),
    !.
verifica_modo_tempo(Verbo,A,D,Vinf,Modo,Tempo,Pers):-
      var(Tempo),var(Modo), 
      on(Cat,A),
      check_vcat(Cat),
      on(Cats-Vinf-Feat, D),
      on(Cat,Cats),
      on(mood=Mod, Feat),
      Modo=Mod,
      on(tense=Tempo, Feat)
     ;
      nonvar(Modo),
      check_modos(Verbo,A,D,Modo,Tempo,Vinf),
      (nonvar(Tempo),
       check_tempos(Verbo,A,D,Tempo,Vinf)
       ;
       var(Tempo)),
       !.

decode_pers(sing3,3).
decode_pers(Per,Pers).

check_modos(Verbo,Catss,Feats,Modo,Tempo,Lemma):-
     check_modo(Catss,Feats,Mods),
%     (
%      on(Cat-Modo,Mods)
%      ;
       get_lemma_cats_feats(Verbo,Feats,Cats,Lemma,Feat),     
       on(tense=Temp, Feat),
       on(Cat-Mod,Mods),
       verifica_modo(Lemma,Mod,Modo,Temp,Tempo,Pers,Num,[Modo]),    
%      ),
     !.

check_modo([],Feats,[]):-!.
check_modo([A|Cats],Feats,[A-Mod|Mods]):-
     check_vcat(A),
     A=v,
     (on(Cats-Lemma-Feat, Feats),
      on(Cat,Cats)
       ;
      on(Cat-Word-Lemma-Cat-Feat, Feats)
       ;
      on([Cat-Word-Lemma-Cat-Feat], Feats)),
     on(mood=Mod, Feat),
     check_modo(Cats,Feats,Mods),
     !.
check_modo([A|Cats],Feats,[A-Mod|Mods]):-
     check_vcat(A),
     cat_mod(A,Mod),
     check_modo(Cats,Feats,Mods),
     !.
check_modo([A|Cats],Feats,Mods):-
     check_modo(Cats,Feats,Mods),
     !.

check_tempos(Verbo,Catss,Feats,Tempo,Lemma):-
     check_tempo(Catss,Mods),
     on(Cat-Modo,Mods),
     get_lemma_cats_feats(Verbo,Feats,Cats,Vinf,Feat),     
%    on(Cats-Lemma-Feat, Feats),
     on(Cat,Catss),
     (Tempo\=pass,
       on(tense=Tempo, Feat)
      ;
       Tempo=pres,
       on(tense=base, Feat)
      ;
      (Tempo=pass;Tempo=past),
      (on(tense=Tempo, Feat)
        ;
       on(tense=past, Feat)
       )       
      ),
     !.

check_tempo([],[]):-!.
check_tempo([A|Cats],[A-Mod|Mods]):-
     check_vcat(A),
     cat_mod(A,Mod),
     check_tempo(Cats,Mods),
     !.
check_tempo([A|Cats],Mods):-
     check_tempo(Cats,Mods),
     !.
verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Mod=ger, 
     var(Tempo),
     Modi=[A],
     A=part,
     Modo=Mod,
     !.

verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Mod=part, 
     Temp=pres,
     on(ger,Modi),
     Modo=ger,
     !.

verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Mod=ind, 
     nonvar(Tempo),
     Tempo=progr,
     Modi=[A],
     A=ger,
     (var(Temp), 
       (var(Pers); nonvar(Pers),Pers\=3);
      nonvar(Temp),Temp=Tempo),!.

verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Modi\=[],
     on(Mod,Modi),
     Modo=Mod,
    (nonvar(Tempo),
       (Modo=ger, Tempo=progr;
          Modo\=ger, Tempo\=progr);
        var(Tempo),
      (var(Temp);Temp\=pass), var(Pers)
      ),
     !.
verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Modi\=[],
      Mod=ind, Tempo=pres,
      on(base,Modi),
      var(Pers), 
      (var(Temp);Temp\=pass),
      Modo=base,      
      !.
verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     check_irregulars(Vinf),
     Modi\=[],
      Mod=ind, 
      (var(Temp), (Tempo=pass;Tempo=past)
      ; nonvar(Temp), (Tempo=pass;Tempo=past), Temp=Tempo),
      on(part,Modi),
      Modo=part,
      !.
verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Modi\=[],
      Mod=ind, Tempo=pres,
      on(inf,Modi),
      var(Pers),
      (var(Temp);Temp\=pass),
      Modo=inf,      
      !.
verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
      Mod=ind, 
      (var(Tempo), \+ nogen_member(ger,Modi), 
              \+ nogen_member(imperat,Modi), Tempo=Temp
              ;
         nonvar(Tempo),Tempo\=pres,Tempo\=progr),
      Modo=Mod,
      !.

verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
      Mod=ind, 
      Modi\=[],
      on(imperat,Modi),
      nonvar(Temp),Temp=pres,
      (nonvar(Pers),(Pers\=3;Pers=3,(nonvar(Num),Num=plur;var(Num)));var(Pers)),
      !.

verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Modi\=[],
      Mod=inf, 
      on(Modo,Modi),
      (Modo=ind, 
       (nonvar(Pers),(Pers\=3;Pers=3,(nonvar(Num),Num=plur;var(Num)));var(Pers))
      ;
       Modo\=ind, Modo\=ger, Modo\=part),
      (nonvar(Tempo),Tempo\=progr;
        Tempo=pres,
           (nonvar(Pers),(Pers\=3;Pers=3,(nonvar(Num),Num=plur;var(Num)));var(Pers))
        ),
      !.
verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Modi\=[],
      Mod=base, 
      on(Modo,Modi),
      (Modo=ind, 
       (nonvar(Pers),(Pers\=3;Pers=3,(nonvar(Num),Num=plur;var(Num)));var(Pers))
      ;
       Modo\=ind, Modo\=ger, Modo\=part),
      (nonvar(Tempo),Tempo\=progr;
        Tempo=pres,
           (nonvar(Pers),(Pers\=3;Pers=3,(nonvar(Num),Num=plur;var(Num)));var(Pers))
       ),
      !.

verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi):-
     Modi\=[],
     (Mod=inf;Mod=base), 
      on(Mod,Modi),
      (Modo=ind, 
       (nonvar(Pers),(Pers\=3;Pers=3,(nonvar(Num),Num=plur;var(Num)));var(Pers))
      ;
       Modo\=ind, Modo\=ger, Modo\=part),
      (nonvar(Tempo),Tempo\=progr;Tempo=pres,
           (nonvar(Pers),(Pers\=3;Pers=3,(nonvar(Num),Num=plur;var(Num)));var(Pers))
       ),
      !.
verifica_modo(Vinf,Mod-Mo,Modo,Temp,Tempo,Pers,Num,Modi):-
    verifica_modo(Vinf,Mod,Modo,Temp,Tempo,Pers,Num,Modi)
      ;
    verifica_modo(Vinf,Mo,Modo,Temp,Tempo,Pers,Num,Modi)
      .

nonfinite_tense([V|F]):-
    v_word_cat(V, Num, Te, Mo, Pers, Lemma),
    (Mo=ger; Mo=part),!.

auxtocomp(Aux):-
   supporto(Aux),!.
auxtocomp(Aux):-
   coplbh(Aux),!.


cat_mod(vppin,part).
cat_mod(vppt,part).
cat_mod(ppas,part).
cat_mod(vgin,ger).
cat_mod(vgt,ger).
%cat_mod(vgs,ger).
cat_mod(vprt,ger).
cat_mod(vprin,ger).
cat_mod(_,ind).
check_participle_verb(F):-
             F=[M|F2],
             \+ integer(M),
             stringof(Gerund,M),
             reverse(Gerund, [d,e|_]),
             !.

extractpart(Det, Part):-
           Det=..[spec,def(Def), part(Part)|_],
           nonvar(Part),!.
extractpart(Det, Part):-
           Det=..[spec,def(Part)|_],
           nonvar(Part),!.

extract_part(['_'|Verbo], Part):-
    stringof(Verbo,Part),
    (prepos(Part);r(Part)),
    !.

extract_part([N|Prefix], Part):-
    extract_part(Prefix, Part),
    !.
extract_verb(['_'|Verbo], Part):-
    reverse(Verbo,RVerbo),
    stringof(RVerbo,Part),
    !.

extract_verb([N|Prefix], Part):-
    extract_verb(Prefix, Part),
    !.

quanthead(Head):-
   pr(pr_quantif, Part, Head, 3, mas, sing, Case),!.



nword_cat(Word, Lemma,Cat):-
   word_cats(0, File, Word, Word, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lem, Feas),
   on(Lemma,Lem),
   check_allnouns(Ct,Cat),
   !.


lfilter(are,Slist,[v-are]).
lfilter(at,Slist,[p-at]).
lfilter(be,Slist,[v-be]).
lfilter('US',Slist,[n-'US']).
lfilter('Japan',Slist,[n-'Japan']).
/*
lfilter(Lex1,List,[n-Lex1]):-
   lc3(Lex1,K).
lfilter(Lex1,List,[n-Lex1]):-
   lc4(Lex1,K).
*/
lfilter(Lex1,List,List).

lfilters(Lex1,List,[n-Lex1]):-
   lc3(Lex1,K).
lfilters(Lex1,List,[n-Lex1]):-
   lc4(Lex1,K).

chigh_rank(to, p).
chigh_rank(in, p).
chigh_rank(is, v).
chigh_rank(was, v).
chigh_rank(it, r).
chigh_rank(the, d).
chigh_rank(a, d).
chigh_rank(an, d).
chigh_rank(and, e).
chigh_rank(of, p).

check_lex(_,[]).
check_lex(Cont, [Lex|RestoFrase]):-
   chigh_rank(Lex, C),
  assertz(termin(Cont-[C-Lex])),
  Cont1 is Cont+1,
  check_lex(Cont1,RestoFrase),
  !.
check_lex(Cont, [Lex|RestoFrase]):-
   grw(Lex),
  assertz(termin(Cont-[x-Lex])),
  Cont1 is Cont+1,
  check_lex(Cont1,RestoFrase),
  !.

/*
check_lex(Cont,[Lex1|RestoFrase]):- 
    \+ grammw(Lex1,_),
  bagof(S-Lex1,new_form(Lex1,S),Lists),
  Cont1 is Cont+1,
  appiattisci(Lists,SList),
  sort(SList,ListAll),
  create_new_list(ListAll,List),
  assertz(termin(Cont-List)),
  check_lex(Cont1,RestoFrase),
  !.
*/

check_lex(Cont, [Lex|RestoFrase]):-
  num_cats(File, Lex, Num, Cat),
  assertz(termin(Cont-[d-Lex])),
  Cont1 is Cont+1,
  check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont,[Lex1|RestoFrase]):- 
   stringof(MWord,Lex1),
   reverse(MWord,['_',s, '-'|Word]),
   reverse(Word,RevWord),
   stringof(RevWord,Lex),
   toupper(Lex, ULex),
   (bagof(S,create_upnm_form(Lex,ULex,S),Lists)
     ;
    bagof(S,create_form_mw(Lex,Lex,S),Lists)),
   Cont1 is Cont+1,
   on(Ct, Lists),
   ((Ct=n;Ct=np),Ctt=ng;Ctt=Ct),
   List=[Ctt-Lex1],
   assertz(termin(Cont-List)),
   check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont,[Lex1|RestoFrase]):- 
   spy_lower(Lex1, LowL, Pol),
  (Pol=1,
   (\+ grammw(LowL,_);grammw(LowL,_), \+ firstword(Lex1);if_first_name(Lex1),\+nt(Lex1)),
   (bagof(S,access_upwsj(Lex1,S,Lex1),Liss),
    appiattisci(Liss,Lists),
    sort(Lists,Slistss),
    erasedoubles(Slistss,Slists)
    ;
    if_first_name(Lex1),\+nt(Lex1),\+ firstword(Lex1),
    Slists=[[nh]-Lex1])
   ;
   (Pol=1, 
    stringof(RevWord,Lex1),
    \+ on('_',RevWord),
    \+ on('-',RevWord),
    \+ on('/',RevWord)
    ;
    Pol=0),
   bagof(S-Lex1,check_forms(Lex1,LowL,S),Lists),
   sort(Lists,Slistss),
   erasedoubles(Slistss,Slists)
   ),
  Cont1 is Cont+1,
  lfilter(Lex1,Slists,Listss),
  create_new_list(Listss,List),
  assertz(termin(Cont-List)),
  check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont,[Lex1|RestoFrase]):- 
   stringof(MWord,Lex1),
   on('_',MWord),
   decompose_underscore(MWord, Word),
   stringof(Word,Lex),
   recover_descs(Lex1,Lexs),
   \+ on(and,Lexs),
   (if_first_name(Lex),
    first_mult(Lex1, MWord, Lists)
    ;
    sec_mult(Lex1, MWord, Lists)
   ),
   Cont1 is Cont+1,
  sort(Lists,Slists),
  create_new_lists(Lex1, Slists,List),
   assertz(termin(Cont-List)),
   check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont,[Lex1|RestoFrase]):- 
   stringof(MWord,Lex1),
   on('-',MWord),
   (first_mult(Lex1, MWord, Lists)
    ;
    decompose_secunderscore(MWord, Word),
    stringof(Word,Lex),
    sec_mults(Lex1,Lex, MWord, Lists)
   ),
   Cont1 is Cont+1,
  sort(Lists,Slists),
  create_new_lists(Lex1, Slists,List),
   assertz(termin(Cont-List)),
   check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont,[Lex1|RestoFrase]):- 
   stringof(MWord,Lex1),
   on('/',MWord),
   (decompose_secunderscore(MWord, Word),
    stringof(Word,Lex),
    sec_mults(Lex1,Lex, MWord, Lists)
    ;
   first_mult(Lex1, MWord, Lists)
   ),
   Cont1 is Cont+1,
  sort(Lists,Slists),
  create_new_lists(Lex1, Slists,List),
   assertz(termin(Cont-List)),
   check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont,[Lex1|RestoFrase]):- 
  spy_lower(Lex1, LowL, 1),
  if_first_name(Lex1), 
  Cont1 is Cont+1,
  List=[nh-Lex1],
  assertz(termin(Cont-List)),
  check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont,[Lex1|RestoFrase]):- 
  bagof(S-Lex1,create_forms(Lex1,S),Lists),  
  Cont1 is Cont+1,
  sort(Lists,Slists),
  lfilter(Lex1,Slists,ListAll),
  create_new_list(ListAll,List),
  assertz(termin(Cont-List)),
  check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont,[Lex1|RestoFrase]):- 
  spy_lower(Lex1, LowL, 1),
   \+ firstword(Lex1),
  findall(Cat,
     morf_cat(LowL, Cat, Lemma), 
   Cats),
   Cats \= [],
    sort(Cats, Catss),
   define_cats(Catss, Ns),
  create_new_list([Ns-Lex1],List),
  assertz(termin(Cont-List)),
  Cont1 is Cont+1,
  check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont, [Lex|RestoFrase]):-
  findall(Cat,
     morf_cat(Lex, Cat, Lemma), 
   Cats),
   Cats \= [],
    sort(Cats, Catss),
   define_cats(Catss, Ns),
  create_new_list([Ns-Lex],List),
  assertz(termin(Cont-List)),
  Cont1 is Cont+1,
  check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont, [Lex|RestoFrase]):-
  assertz(termin(Cont-[n-Lex])),
  Cont1 is Cont+1,
  mcon(Lex,s,Lexx),
  (\+ firstword(Lex),
    asserta(
            new_np(Lex,Lexx,Gen))
   ;
    asserta(
            new_np(Lex,Lex,Gen))
            ),
  asserta(
          new_pred_np(Lex, nil, [istituzione,luogo,umano], [])),
  writenl(_,Lex),
  check_lex(Cont1,RestoFrase),
  !.

check_lex(Cont, [Lex|RestoFrase]):-
  warning(['Non conosco la parola', Lex]),
  !.

erasedoubles(List,[C-Lex]):-
   length(List,L),
   L=2,
   List=[C-Lex,C-Low],
   spy_lower(Lex, LowL, Pol),
   Pol=1, LowL=Low,!.
erasedoubles(List,List):-!.


create_forms(Lex1,S):-
   findall(S1, createforms1(Lex1,S1), Ss1),
   findall(S2, createforms2(Lex1,S2), Ss2),
   append(Ss1,Ss2,S3),
   appiattisci(S3,S4),
   sort(S4,S), S\=[].

createforms1(Lex1,S1):-
    spy_lower(Lex1, LowL, 1),
    create_form(LowL,S1).
    
createforms2(Lex1,S2):-
   create_form(Lex1,S2).

create_new_lists(Lex,ListAll,List):-
    associate_lex_tag(Lex,ListAll,ListAl),
    create_new_list(ListAl,List),
    !.

associate_lex_tag(Lex,[],[]):-!.
associate_lex_tag(L,[Cat|Cats],[Cat-L|ListAl]):-
    associate_lex_tag(L,Cats,ListAl),
    !.

create_new_list(ListAll,List):-
   ListAll=[A-L],
   A=[Cat],
   List=[Cat-L],
   !.
create_new_list(ListAll,List):-
   ListAll=[A-L],
   A\=[Cat],
   build_list(A,L,Lists),
   sort(Lists,List),
   !.
create_new_list([Lis|ListAll],List):-
   ListAll\=[],
   create_new_list([Lis],Lista),
   create_new_list(ListAll,Listb),
   append(Lista,Listb,Lists),
   sort(Lists,List),
   !.

create_new_list(ListAll,ListAll):-
   ListAll=[A-L],!.

build_list([],L,[]):-!.
build_list([Cat|Cats],L,[Cat-L|List]):-
   build_list(Cats,L,List),
   !.


ana_morpho(Morpho, MorphoStr, Rest, TopDown, Morpho, Code, Rest) :-
   look_ahead(TopDown, Rest),
   (adjust(MorphoStr, Rest, _, Code),
    fail
    ;
    true,
    lex_lookup(Morpho, Code),
    check_es(MorphoStr, Rest)).

ana_morpho(_, MorphoStr, Rest, TopDown, NewMorpho, Code, Rest) :-
   look_ahead(TopDown, Rest),
   adjust(NewMorphoStr, Rest, MorphoStr, Code),
   stringof(NewMorphoStr, NewMorpho),
   lex_lookup(NewMorpho, Code).
    
ana_morpho(_, String, RestIn, TopDown, Morpho, Code, RestOut) :-
   nonvar(String),
   append(Prefix,  [Car], String),
   stringof(Prefix, Word),
   mcon(Car, RestIn, RestMid),
   stringof(Pr, RestMid),
   length(Pr, N),
   N < 5,
   ana_morpho(Word, Prefix, RestMid, TopDown, Morpho, Code, RestOut).

check_es(MorphoStr, es):-
   reverse(MorphoStr, [Last,Prel|Rev]),
   es_consonants([Prel,Last]),
   !.

check_es(MorphoStr, Suf):-
   Suf\=es,Suf\=ing,Suf\=ed,!.


lex_lookup(Morpho, Code):-
   is_in_lexicon(Morpho, Code, From).   

choose_more_specific(Codes,Cod):-
   remove(Code, Codes, Rest),
   (Rest=[], 
    atom_to_term(Code, CodeOrr, Atm),
    Cod=CodeOrr
    ;
    Rest\=[],
    check_term(Rest,Code,Cod)).

check_term(Terms,Code,Cod):-
%    pname(CodeOrr, Term),
   on(Term,Terms),
   atom_to_term(Term, Cod, Atm).
/*    (match_cod_fe(CodeOrr,Code),
     Cod=CodeOrr
     ;
     Cod=Code
     ).
*/
check_term(Term,Code,Code).
match_cod_fe(Code:Fea,Code).
match_cod_fe(Code:Fea:R,Code).

is_in_lexicon(Morpho, Code, From) :-
   m_lex(Morpho, Codes, Fr),
   sort(Codes, SortCodes), 
   choose_more_specific(Codes,Code).

lex_users(Root, Code, tpl) :-
   tpl(Root, Codes),
   on(Code, Codes),
   !.
  
lex_users(Root, Code, tpl) :-
   (tpl(Root, Codes)
    ;
    stringof(List,Root),
    on('_',List),
    recover_descs(Root,Words),
    Words=[A,B],
    mcon(A,'-',A1),
    mcon(A1,B,B1),
    tpl(B1, Codes)),
   on(Code, Codes),
   !.
  
lex_users(Root, Code, tpl) :-
   tml(Root, Codes),
   on(Code, Codes),
   !.
lex_users(Root, [verb], tpl) :-
   v(Root,_),
   !.

lex_user(Root, Codes, tpl) :-
   (tpl(Root, Codes)
    ;
    stringof(List,Root),
    on('_',List),
    recover_descs(Root,Words),
    Words=[A,B],
    mcon(A,'-',A1),
    mcon(A1,B,B1),
    tpl(B1, Codes)),
   on(Code, Codes),
   !.
  
lex_user(Root, Codes, tpl) :-
   tml(Root, Codes),
   !.
 
lex_user(Root, Codes, tpl) :-
   dc(Root, Codes),
   !.

lex_user(Root, [n], tpl) :-
   nt(Root),
   !.

lex_user(Root, [adj], tpl) :-
   j(Root),
   !.

lex_user(Root, [adv], tpl) :-
   r(Root),
   !.

lex_user(Root, [adj], adjs) :-
   rj(Root,Ro,Code),
   on(Co,Code).
%   atom_to_term(Coo, Co, Atm),
%   mcon(Coo,':',Co1),
%   mcon(Co1,Ro,Coroo).

getcat(Word, Feats, Category, Feat, Pre) :-
   on(cat=Cat, Feats),
   get_cat(Cat, Word, Feats, Category, Feat, Pred),
   (Pred=_-Pre;Pre=Pred).


lexx(N, Ds, Root, _, Codes, dizionario):-
      m_lex(Root, Codes, dizionario).

/*

lex(Root, Code) :-
   az(Root, Code).


lex(Root, Codes, temp_pro_lex) :-
   temp_pro_lex(Root, Codes),
   !.

lex(Root, Codes, temp_mix_lex) :-
   temp_mix_lex(Root, Codes),
   !.

lex(Root, Codes, pro_lex) :-
   pro_lex(Root, Codes).

lex(Root, Codes, tml) :-
   nonvar(Root),
   tml(Root, Codes),
   !.
m_lex(Root, Codes, temp_pro_lex) :-
   nonvar(Root),
   temp_pro_lex(Root, Codes).

*/

m_lex(Root, Codes, tml) :-
   nonvar(Root),
   (tpl(Root, Codes)
    ;
    stringof(List,Root),
    on('_',List),
    recover_descs(Root,Words),
    Words=[A,B],
    mcon(A,'-',A1),
    mcon(A1,B,B1),
    tpl(B1, Codes)),
   on(Code, Codes).

m_lex(Root, Codes, tml) :-
   nonvar(Root),
   tml(Root, Codes).

m_lex(Root, ['agg:z'], adjs) :-
   j(Root).

m_lex(Root, [adj], adjs) :-
   rj(Root,Ro,Code).

m_lex(Root, [adv], adjs) :-
   r(Root).

m_lex(Root, Codes, radiciario) :-
   nonvar(Root),
   dc(Root, Codes),
   Codes \= [].

m_lex(Root, Cat, dizionario) :-
   nonvar(Root),
   ht(Root, Codes),
   (atomic(Codes),Cc=[Codes];is_list(Codes),Cc=Codes),
   c_translwncats(Cc,Scats,Cat),
   Codes \= [].

m_lex(Root, [n], dizionario) :-
   nwn(Root, Code).

m_lex(Root, Cc, dizionario) :-
   nonvar(Root),
   t_up_wn(Root,Codes),
   (atomic(Codes),Cc=[Codes];is_list(Codes),Cc=Codes),
   Codes \= [].

contrs(Word, [Cat], not-[neg]):-
   contr(Word, Cat, F, Base).

contrs(Word, [Cat], Base-[C]):-
   soggcontr(Word, Cat, F, Base),
   transl_cat_contr(Cat, C).

contrs(Word, [Cat], not-[neg]):-
   atomic(Word),
   tolower(Word, W),
   contr(W, Cat, F, Base).

contrs(Word, [Cat], Base-[C]):-
   atomic(Word),
   tolower(Word, W),
   soggcontr(W, Cat, F, Base),
   transl_cat_contr(Cat, C).


p_lex(Root, Codes, tml) :-
   tml(Root, Codes).

p_lex(Root, [pron], tml) :-
   find_pron(Root, T, Feats).

p_lex(Root, Codes, tml) :-
   lc(Root, Codes).

p_lex(Root, Codes, tpl) :-
   (tpl(Root, Codes)
    ;
    stringof(List,Root),
    on('_',List),
    recover_descs(Root,Words),
    Words=[A,B],
    mcon(A,'-',A1),
    mcon(A1,B,B1),
    tpl(B1, Codes)),
   on(Code, Codes).

/*
p_lex(Root, Codes, tpl) :-
   o(Root, Codes),
   writenl(user,Root).
*/

p_lex(Root, Codes, locs) :-
   lc4(Root, Codes).

p_lex(Root, ['agg:z'], locs) :-
   j(Root).

p_lex(Root, Codes, locs) :-
   lc(Root, Codes).

p_lex(Root, ['num:z'], num) :-
   nm(Root, _, _).


pol_upper(77, Pol1, Pol, Pol).
pol_upper(T, Pol1, Pol, Pol1).

upparse(NFeat, PhraseIn, _) :-
   leaf1(Cat, PhraseIn, ''),
   parse_aff('', Cat, Feats, NFeat),!.

upparse(NFeat, PhraseIn, _) :-
   tolower(PhraseIn, W),
   toupper(W, Word),
   leaf1(Cat, Word, ''),
   parse_aff('', Cat, Feats, NFeat),!.

mparse(NFeat, PhraseIn, _) :-
   leaf1(Cat, PhraseIn, Out),
   parse_aff(Out, Cat, Feats, NFeat).


sufparse(NFeat, PhraseIn, _) :-
   leaf1(Cat, PhraseIn, M),
   parse_aff(M, Cat, Feats, NFeat),
   check_suff_roota(PhraseIn, M, NFeat).

check_suff_roota(Word, S, Feats):-
    (
     S=s,
     on(cat=C, Feats), C=verb,
     (\+ nogen_member(tense=past,Feats);
      \+ nogen_member(mood=part,Feats))
     ),
    !.
check_suff_roota(Word, S, Feats):-
    (
     (S=er;S=ers),
     on(cat=C, Feats), C\=verb
     ;
     S\=er, S\=ers
     , S\=''
   ),
    !.
check_suff_roota(W, S, Feats):-
    (S='', W=be,
      (on(mood=subj, Feats)
       ;
       on(cat=aux, Feats)
        )
    ;
    (S\=er, S\=ers; S='', W\=be)),
    !.

/*
leaf1(Cat, Morpho, '') :-
   p_lex(Morpho, Codes, Dic),
   sort(Codes, SortCodes), 
   on(CodeAtm, SortCodes),
   pname(Code, CodeAtm),
   w(Code, Morpho, Cat).
*/

leaf1(Cat, PhraseIn, PhraseOut) :-
   stringof(String, PhraseIn),
   ana_morpho(PhraseIn, String, '', TopDown, Morpho, Code, PhraseOut),
   w(Code, Morpho, Cat).

leaf(TopDown, Cat, Word, PhraseOut) :-
   v(Word, C),
   lemmatize_dic_v(Word, Lemma, S),
   (S=d, T=pp; S=g, T=g),
   w(v:T:Lemma, Lemma, Cat).

/*
parse_aff('', Cat, Feats, NFeat) :-
   Cat=root(root(R), Decl, C, NFeat, Reg),
   C=verb,
   on(pers=3, NFeat),
*/

parse_aff('', Cat, Feats, NFeat) :-
   Cat=root(root(R), Decl, C, NFeat, Reg),
   C\=noun, C\=agg, C\=auxiliary,!.

parse_aff('', Cat, Feats, NFeat) :-
   Cat=root(root(R), decl, Categ, Feats, irreg),
   Categ=verb,
   Feat=[mood=ind, tense=pres],
   append(Feats, Feat, NFeat),!.

parse_aff(M, Cat, Feats, NFeat) :-
   Cat=root(root(R), indecl, Categ, Feats, reg),
   (M=s, \+ nogen_member(mood=part,Feats)
     ;
    M\=s),
   leaf_pres(R, suffix(_, indecl, Categ, C, reg), Cat1, M, PhraseOut),
   Cat1=(desinence(des(Mi), Feat, Cate, _, Re)),
   append(Feats, Feat, NFeat),!.

parse_aff(M, Cat, Feats, NFeat) :-
   Cat=root(root(R), decl, Categ, Feats, irreg),
   leaf_pres(R, suffix(_, decl, Categ, C, irreg), Cat1, M, PhraseOut),
   Cat1=(desinence(des(Mi), Feat, Cate, _, Re)),
   append(Feats, Feat, NFeat),!.

parse_aff(M, Cat, Feats, NFeat) :-
   Cat=root(root(R), indecl, Categ, Feats, irreg),
   leaf_pres(R, suffix(_, indecl, Categ, C, irreg), Cat1, M, PhraseOut),
   Cat1=(desinence(des(Mi), Feat, Cate, _, Re)),
   append(Feats, Feat, NFeat),!.

parse_aff(M, Cat, Feats, NFeat) :-
   Cat=root(root(R), decl, Categ, Feats, reg),
   leaf_pres(R, suffix(_, decl, Categ, C, reg), Cat1, M, PhraseOut),
   Cat1=(desinence(des(Mi), Feat, Cate, _, Re)),
   append(Feats, Feat, NFeat),!.

parse_aff(M, Cat, Feats, NFeat) :-
   Cat=root(root(R), decl, Categ, Feats, aux),
   Categ\=noun, Categ\=agg,
   leaf_pres(R, suffix(_, decl, verb, C, reg), Cat1, M, PhraseOut),
   Cat1=(desinence(des(Mi), Feat, Cate, _, Re)),
   append(Feats, Feat, NFeat),!.

parse_aff(M, Cat, Feats, NFeat) :-
   Cat=root(root(R), indecl, Categ, Feats, aux),
   (Categ=verb; Categ=aux; Categ=auxiliary), 
   leaf_pres(R, suffix(_, decl, verb, C, reg), Cat1, M, PhraseOut),
   Cat1=(desinence(des(Mi), Feat, Cate, _, Re)),
   (on(mood=Mood, Feats), NFeat=Feats;
   append(Feats, Feat, NFeat)),!.

prefixation(M, Cl, SubCl, FormN,  Word, Coniug):-
   PrevL = 0,
   stringof(Morph, M),
   reverse(Morph,String),
   segm(Cl,SubCl,FormN,Coniug,String,Word,Pref,PrevL,Length).

segm(Cl,SubCl,FormN,Coniug,M,Word,Pref,PrevL,Length):-
   valid(Cl,SubCl,FormN,Coniug,M,Word,Pref,PrevL,Length).

segm(Cl,SubCl,FormN,Coniug,M,Word,Pref,PrevL,Length):-
   extract_prefix(M,NWord,Pref,PrevL,Leng,NewPref),
   stringof(Morph, NWord),
   segm(Cl,SubCl,FormN,Coniug,Morph,Word,NewPref,Leng,Length).

valid(Cl,SubCl,FormN,Coniug,M,NRoot,Pref,Length,Newl):-
   check_prefix(Pref,Length,P),
   check_irr(M, Cl, SubCl, FormN, Coniug, Root),
   legal_prefixation(P,Root),
   (concat(P,Root,NRoot)
    ;
    NRoot=P+Root).

legal_prefixation(P,Root):-
   leg_pr(P,Root).
leg_pr(ri,Root):-!.

plx(1, s, [dn, dv]).
plx(2, es, [dn, dv]).
plx(3, ing, [dv]).

assert_punct(File, Tok, Cat):-
   select_punct(Tok, Cat),
   (Cat=[punto], NTok='''.''', P=2; 
    Cat=[dirs], NTok=''':''', P=2;
    Cat\=[dirs], Cat\=[punto], NTok=Tok, P=1),
   contpun(File, NTok-Cat, P),!.

par_pun(';').
par_pun(':').
par_pun('.').
par_pun(',').
par_pun('-').
par_pun('(').
par_pun(')').
par_pun('"').
par_pun('[').
par_pun(']').
par_pun('{').
par_pun('}').
par_pun('<').
par_pun('>').

par_puna(':').
par_puna(',').
par_puna('-').
par_puna('(').
par_puna('"').
par_puna('[').
par_puna('{').
par_puna('<').

select_dirs('"', [par]).
select_dirs('“', [par]).
select_dirs('”', [par]).


select_punct('“', [par]).
select_punct('”', [par]).
select_punct('·', [sect]).
select_punct('•', [sect]).
select_punct('''', [par]).
select_punct('.', [punto]).
select_punct('.', [punto]).
select_punct('.', [punto]).
select_punct('?', [puntint]).
select_punct('!', [puntint]).
select_punct(',', [punt]).
select_punct(';', [punt]).
select_punct(':', [dirs]).
select_punct('-', [par]).
select_punct('(', [par]).
select_punct(')', [par]).
select_punct('{', [par]).
select_punct('}', [par]).
select_punct('<', [par]).
select_punct('§', [parag]).
select_punct('>', [par]).
select_punct('[', [par]).
select_punct('"', [par]).
select_punct(']', [par]).
select_punct('#', [par]).
select_punct('&', [and]).
select_punct('@', [at]).
%select_punct('$', [doll]).
%select_punct('£', [pound]).
%select_punct('€', [euro]).
select_punct('+', [num]).
select_punct('/', [par]).
select_punct('=', [num]).
select_punct('_', [par]).
select_punct('...', [dots]).
select_punct('%', [num]).

toupper(Atom, Atom) :-
   integer(Atom),!.

toupper(Atom, Atom) :-
   select_punct(Atom, T),!.

toupper(Atom, Atom) :-
   stringof([Car|Rest], Atom),
   name(Car, ASCII),
   car_num(ASCII),!.

toupper(Atom, UpAtom) :-
   !,
   stringof(ListCar, Atom),
   ListCar=[Car|Rest],
   name(Car, ASCII),
   toupper_car(ASCII, UpCar),
   name(Ucar, UpCar),
   stringof([Ucar|Rest], UpAtom),
   !. 

spy_lower(Atom, LowAtom, Pol) :-
   Atom\=[],
   atomic(Atom),
   !,
   name(Atom, ASCII),
   lower_lst(ASCII, LowASCII, [Pol|Pols]),
   name(LowAtom, LowASCII),
   !.

spy_lower(Atom, LowAtom, Pol) :-
   Atom\=[],
   list(Atom),
   !,
   lower_lst(Atom, LowASCII, [Pol|Pols]),
   name(LowAtom, LowASCII),
   !.

spy_tlower(Atom, LowAtom, Pol) :-
   Atom\=[],
   atomic(Atom),
   !,
   name(Atom, ASCII),
   lower_lst(ASCII, LowASCII, [Pol|Pols]),
   name(LowAtom, LowASCII),
   !.

spy_tlower(Atom, LowAtom, Pol) :-
   Atom\=[],
   list(Atom),
   !,
   lower_lst(Atom, LowASCII, [Pol|Pols]),
   name(LowAtom, LowASCII),
   !.

spy_tlower(Atom, LowAtom, Pol) :-!.

lower_lst([], [], []) .
lower_lst([Car | Cars], [LowCar | LowCars], [UPol|Pol]) :-
   lower_car(Car, LowCar, UPol),
   lower_lst(Cars, LowCars, Pol).

lower_car(Car, LowCar, 1) :-
   integer(Car),
   Car >= 65,
   Car =< 90,
   !,
   LowCar is Car + 32.

lower_car(Car, Car, 0).

tolower(Atom, LowAtom) :-
   atomic(Atom),
   !,
   name(Atom, ASCII),
   tolower_lst(ASCII, LowASCII),
   name(LowAtom, LowASCII).
tolower(Atom, Atom) :-!.

tolower_lst([], []) .
tolower_lst([Car | Cars], [LowCar | LowCars]) :-
   tolower_car(Car, LowCar),
   tolower_lst(Cars, LowCars).


tolower_car(Car, LowCar) :-
   Car >= 65,
   Car =< 90,
   !,
   LowCar is Car + 32.

tolower_car(Car, Car).

toupper_car([Car], [UpCar]):-
   lower_car(Car, LowCar, P),
   UpCar is LowCar - 32,!.
toupper_car([Car], [Car]):-!.

checkextract_feats(Cats, W, [A-A], T, D):-
     p_lex(W, Codes, _),
     leaf_fpr(W, Codes, Cat, N),
     parse_aff('', Cat, Feats, NFeat),
     on(type=T, NFeat),
     fd(T, D),
     !.

chkqun([], []):-!.
chkqun([to-Cats|Frase], [Out|Tokens]):-
    Out=[p,pt]-2-to,
    chkqun(Frase, Tokens),
    !.

chkqun([Word-Cats|Frase], [Out|Tokens]):-
    Word\=one,
    nm(Word,_,_),
    Out=[num]-1-Word,
    chkqun(Frase, Tokens),
    !.
/*
chkqun([Word-Cats|Frase], [Out|Tokens]):-
    excep(Word, Cat),
    (atomic(Cat), N=1,
     Out=[Cat]-N-Word
     ;
     list(Cat),
    length(Cat, N),
    Out=Cat-N-Word),
    chkqun(Frase, Tokens),
    !.
*/
chkqun([Word-Cats|Frase], [Out|Tokens]):-
    cexcep(Cats, Word, NCats),
    length(NCats, N),
    Out=NCats-N-Word,
    chkqun(Frase, Tokens),
    !.

chkqun([Word-Cats|Frase], [Out|Tokens]):-
    length(Cats, N),
    N=1,
    Out=Cats-N-Word,
    chkqun(Frase, Tokens),
    !.

/*
chkqun([Word-Cats|Frase], [Out|Tokens]):-
     Cats\=[A], 
     list(Cats),
     \+ fct(Word),
     disaccess_wsj(Word,Best),
     transl_tags(Word,Best,Tags),
     on(Tag,Tags),
     convert_tag_new_forms(Word, Tag, Tt),
     Out=Tt-1-Word,
    chkqun(Frase, Tokens),
    !.
*/
chkqun([Word-Cats|Frase], [Out|Tokens]):-
    length(Cats, N),
    Out=Cats-N-Word,
    chkqun(Frase, Tokens),
    !.

trans_ucats([], []):-!.
trans_ucats([Cat|Cats], [Cn|Catn]):-
   trans_ucat(Cat, Cn),
   trans_ucats(Cats, Catn),!.
trans_ucats(Cat, [Cn]):-
   atomic(Cat),
   trans_ucat(Cat, Cn),
   !.
trans_ucats([Cat|Cats], [Cn|Catn]):-
   list(Cat),
   trans_ucats(Cat, Cn),
   trans_ucats(Cats, Catn),!.

lowcase_all([], []):-!.
lowcase_all([Top|Alltops], [Top|LowTops]):-
   atomic(Top),
   spy_lower(Top,LowTop,P),
   P=0,
   lowcase_all(Alltops, LowTops),!.

lowcase_all([Top|Alltops], [LowTop|LowTops]):-
   atomic(Top),
   spy_lower(Top,LowTop,P),
   P=1,
   lowcase_all(Alltops, LowTops),!.

lowcase_all([Tops|Alltops], [Top|LowTops]):-
   list(Tops),
   remove(Top, Tops, LTops),
   append(LTops, Alltops, NAlltops),
   spy_lower(Top,LowTop,P),
   P=0,
   lowcase_all(NAlltops, LowTops),!.

lowcase_all([Tops|Alltops], [LowTop|LowTops]):-
   list(Tops),
   remove(Top, Tops, LTops),
   append(LTops, Alltops, NAlltops),
   spy_lower(Top,LowTop,P),
   P=1,
   lowcase_all(NAlltops, LowTops),!.
lowcase_all([Tops|Alltops], LowTops):-
    lowcase_all(NAlltops, LowTops),!.

get_nroots(Word, [Lemma-Tratti]) :-
     lemmatize_dic(Word,Lemma,S),
    getnumlex(Word,S,Num),
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num],
   !.

get_nroots(Word, Ruts) :-
   findall(Root-Feats, (myparse(Feats, Word, ''), 
                    on(cat=noun,Feats), 
                    on(pred=Root, Feats)
                     ), Roots),
   sort(Roots, Nroots),
   length(Nroots, L),
   (1<L,
    remove(Word-Feat, Nroots, Ruts)
    ;
    Ruts=Nroots),
   !.

compute_roots(Testa,[Roo-Feats],[Roo-Feats]):-!.

compute_roots(Testa,[Testa-Feats|Nroots],Roots):-
   compute_roots(Testa,Nroots,Roots),!.

compute_roots(Testa,[Roo-Feats|Nroots],[Roo-Feats]):-
     Nroots\=[],
     remove(Testa-Feat, Nroots, Ruts),!.
recoverpers(Feats, P):-
    on(pers=P, Feats), nonvar(P).
recoverpers(Feats, 3).

recovernum(Feats, P):-
    on(num=P, Feats), nonvar(P).
recovernum(Feats, sing).
 
recovergen(Feats, P):-
    on(gen=P, Feats), nonvar(P).
recovergen(Feats, mas).

recovertratti1([P,G,N|_], [P,G,N]):-!.
recovertratti(Feats, [P,G,N]):-
    recoverpers(Feats, P),
    recovernum(Feats, N),
    recovergen(Feats, G),
    !.

get_nfeats(Testa, Testa, Tratti):-
    npro(Testa, nil, Gen),
    Tratti=[3,Gen,Num],
    !.

get_nfeats(Testa, Lemma, Tratti):-
    n(Testa, Testa, Gen),
    Tratti=[3,Gen,plur],Lemma=Testa,
    !.

get_nfeats(Testa, Lemma, Tratti):-
    var(Lemma),
    n(Testa, Plur, Gen),
    Testa\=Plur, Lemma=Testa,
    Tratti=[3,Gen,sing],
    !.

get_nfeats(Testa, Lemma, Tratti):-
    nonvar(Lemma),
    Testa=Lemma,
    n(Testa, Plur, Gen),
    Tratti=[3,Gen,sing],
    !.

get_nfeats(Testa, Lemma, Tratti):-
    nonvar(Lemma),
    n(Lemma, Testa, Gen),
    Tratti=[3,Gen,plur],
    !.
get_nfeats(Testa, Testa, Tratti):-
    prenditesta(Pro,Testa, [W], Feats),
    \+ nogen_member(cat=poss,Feats),
    recoverpers(Feats, P),
    recovernum(Feats, N),
    recovergen(Feats, G),
    Tratti=[P,G,N],
    !.    

get_pronfeats(Testa, Testa, Tratti):-
    prenditesta(Pro,Testa, [W], Feats),
    recoverpers(Feats, P),
    recovernum(Feats, N),
    recovergen(Feats, G),
    Tratti=[P,G,N],
    !.    

checkform1(Lex1,S):- 
     atomic(Lex1),
     contrs(Lex1, T, Base),
     match_contrs_cat(T,S),
     !.
checkform1(Lex1,S):- 
  (aux(Lex1,_,_,_,_,_),S=v;
   cardin(Lex1,_,_),S=d;
   npro(Lex1,_,_),S=n;
   npro(_,Lex1,_),S=n;
   pr(_,_,Lex1,_,_,_,_),S=r;
   compl(Lex1),S=c;
   partic(Lex1),S=p;
   sub_w(Lex1),S=s;
   sub_w_dir(Lex1),S=s;
   sub_w_sn(Lex1,_),S=s;
   sub_w_inf(Lex1),S=p;
   avv(Lex1,_),S=av;
   nega(Lex1),S=g;
   Lex1='"',S=s;
   inten(Lex1),S=d;
   interjc(Lex1),S=i;
   conju(Lex1),S=e;
   prepos(Lex1),S=p;
   ord(Lex1,_,_,_),S=d;
   quant(Lex1,_,_,_,_),S=d;
   integer(Lex1),S=d;
   check_lex_g(english, S, Lex1)).


genera_tratti(Feats, Testa, Tratti, Testa, Cat):-
    once(sw(Testa-T-Lems)),
    T=[avv],
    Tratti=[3,nil,nil],
    !.

genera_tratti([], Testas, Tratti, Lemma, Cat):-
   (atomic(Testas), Testas\=[], Testa=Testas
    ;
    is_list(Testas), Testas\=[], member(Testa,Testas), Testa\=pron), 
    checkncats(Cat),
    get_nfeats(Testa, Lemma, Tratti),
    !.

genera_tratti(Feats, Testa, Tratti, Lem, Cat):-
    atomic(Testa),Testa\=[], 
    get_nfeats(Testa, Lem, Tratti),
    !.
genera_tratti(Feats, Testa, Tratti, Lem, Cat):-
    atomic(Testa),Testa\=[], 
    contrs(Testa,Ct,Base),
    soggcontr(Testa, Cat, Test, B),
    get_nfeats(Test, Lem, Tratti),
    !.

genera_tratti(Feats, Testas, Tratti, Testa, Cat):-
    is_list(Testas),Testas\=[], 
    sw(Testas-Cat-Feats),
    Cat=[ng],
    Feats\=[],
    (on(Testa-Lem-C-Feas, Feats);
     on(Testa-Lem-Feas, Feats)),
    Feas\=[],
    on(Cc-Feat, Feas),
    on(pred=Lemma, Feat),
    !.

genera_tratti(Lems, Testas, Tratti, Testa, Ct):-
   nonvar(Ct), Ct=npro,
    extracttestas(Testas,Testa), 
    sw(Testa-Cat-Lems),
    wn_gend(Testa,Gen),
    Tratti=[3,Gen,Num],
    !.

genera_tratti(Lems, Testas, Tratti, Lem, Ct):-
    nonvar(Ct),
    extracttestas(Testas,Testa), 
    sw(Testa-Cat-Feats),
    appiattisci(Feats,Ffeats),
    Ffeats\=[],
    (on(pred=Lem, Ffeats);
     nogen_member(Cat-Root-Featt, Ffeats),
     on(pred=Lem, Featt)),
     stringof(List,Lem),
    (on('_',List),
     assert_hyphenated(Lem, Ct, Testa, Feat,S),
     nonvar(Feat),Feat\=[],
     numon(Feat, Num)
     ;
     numon(Featt, Num)
     ;
     on(num=Num,Featt)
     ),
     wn_gend(Lem,Gen),
     Tratti=[3,Gen,Num],
    !.

genera_tratti(Lems, Testas, Tratti, Testa, Ct):-
   nonvar(Ct), (Ct=np;Ct=nh),
    extracttestas(Testas,Testa), 
    sw(Testa-Cat-Feats),
    appiattisci(Feats,Ffeats),
    Ffeats\=[],
    (nonvar(Lems),Lems\=[],
      (Lems=Cat-Lemma-Feat; Lems=[pred=Lemma, feat=Feat])
      ;
    (on(pred=Lem, Ffeats);
     nogen_member(Cat-Root-Feat, Ffeats),
     on(pred=Lem, Feat))
      ),
    numon(Feat, Num),
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num],
    !.

genera_tratti(Lems, Testas, Tratti, Test, Ct):-
   nonvar(Ct), Ct=ng,
    extracttestas(Testas,Testa), 
    sw(Testa-Cat-Feats),
    on(Lems, Feats),
    Lems=Test-Lemma-Cats-AllFeat,
    on(CatN-Feat, AllFeat),
    (CatN=n;CatN=np;CatN=nh;CatN=npro),
    numon(Feat, Num),
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num],
    !.

genera_tratti(Lems, Testas, Tratti, Testa, Ct):-
   nonvar(Ct), (Ct=np;Ct=nh;Ct=ng),
    extracttestas(Testas,Testa), 
    sw(Testa-Cat-Feats),
    on(Lems, Feats),
    Lems=Cats-Testa-AllFeat,
    on(Ct, Cats),
    on(pred=Lem, AllFeat),
    numon(AllFeat, Num),
    wn_gend(Testa,Gen),
    Tratti=[3,Gen,Num],
    !.

genera_tratti(Lems, Testas, Tratti, Testa, Ct):-
   nonvar(Ct), (Ct=np;Ct=nh;Ct=ng),
    extracttestas(Testas,Testa), 
    wn_gend(Testa,Gen),
    Tratti=[3,Gen,sing],
    !.

genera_tratti(Feats, Testa, Tratti, Lem, Cat):-
    sw(Testa-T-Lems),
    tolower(Testa, Lw),
    contrs(Lw,Ct,Base), Def=0, I=100,
    on(_-_-T-Feats, Lems),
    on(pred=Lem, Feats),
    on(num=Num, Feats),
    on(pers=Per, Feats),
    on(gen=Gen, Feats),
    Tratti=[Per,Gen,Num],
    !.

genera_tratti([], Testas, Tratti, Testas, Cat):-
    atomic(Testas), Testas\=[], integer(Testas),
    (Cat=num, Tratti=[3,Gen,plur]
     ;
     Cat=fw, Tratti=[3,Gen,plur]
     ;
     Tratti=[3,Gen,plur]),
    !.

genera_tratti(Feats, Testas, Tratti, Root, Cat):-
    is_list(Testas), Testas\=[], 
    reverse([Cat,Testa], Testas),
    proncat(Cat),
    sw(Testa-T-Lems),
    (on(Cat-Root-Feats, Lems);
     on([Cat]-Root-Feats, Lems)),
    recovertratti(Feats, Tratti),
    !.

genera_tratti(Lems, Testas, Tratti, Lemma, Cat):-
    atomic(Testas),  Testas\=[], 
    nonvar(Lemma),
    Lemma=Testas,
    spy_lower(Testas,Low,1),
    wn_gend(Testas,Gen),
    Tratti=[3,Gen,sing],
    !.    

genera_tratti(Lems, Testas, Tratti, Lemma, Cat):-
    atomic(Testas),  Testas\=[], 
    nonvar(Lemma),
    Lemma=Testas,
    Tratti=[3,Gen,sing],
    spy_lower(Lemma, Low, 1),
    up_wn(Lemma,F,C), C\=[],
    !.    

genera_tratti(Lems, Testas, Tratti, Lemma, Cat):-
    extracttestas(Testas,Testa), 
    sw(Testa-T-Lems),
    Lems\=[],
    length(Lems, L),
    (1<L,
    findall(Root-Feats,
                 (on(Cat-Root-Feats, Lems),
                  Feats\=[]
                 ), Roots),
     sort(Roots, Nroots),
     on(Root-Feats,Nroots),
     member(cat=noun,Feats), 
     member(pred=Root, Feats),
    (compute_roots(Testa,Nroots,[Lemma-Feat|_])
     ;
      on(Lemma-Feat, Nroots)
     )
    ;
    nogen_member(Testa-[_|Roots]-Cat-Feats, Lems),
    nogen_member(Root, Roots),
    myparse(Feat, Root, ''),    
    on(cat=noun,Feat), 
    Lemma=Root
    ;
    nogen_member(Cat-Root-Feat, Lems),
    \+ list(Root),
    checkncats(Cat),
    Testa=Root,
    Lemma=Root
    ;
    nogen_member(Cat-Root-Feat, Lems),
    \+ list(Root),
    checkncats(Cat),
    Lemma=Root
    ;
    nogen_member([Cat]-Root-Feat, Lems),
    \+ list(Root),
    checkncats(Cat),
    Lemma=Root
    ;
    nogen_member(Cat-Root-Feat, Lems),
    list(Root),
    checkncats(Cat),
    Lemma=Testa
    ;
     member(cat=noun,Lems), 
     member(pred=Root, Lems), 
     Feat=Lems, 
     Lemma=Root
    ;
     nogen_member(Root-Cat,Lems),
     checkncats(Cat),
     myparse(Feat, Testa, ''), 
    nogen_member(cat=noun,Feat), 
    Lemma=Root   
    ;
     nogen_member(fw,T), Cat=fw,
     Feat=Lems, 
     Lemma=Root
    ;
    Lems=[_|Lemm],
     myparse(Feat, Testa, ''), 
     member(pred=Root, Feat),
     Lemma=Root),
    (member(num=Nu, Feat)
     ;
     list(Root),
     reverse(Root, [Test|_]),
     myparse(Featt, Test, ''), 
      member(num=Nu, Featt)
     ;
     myparse(Featt, Testa, ''), 
      member(num=Nu, Featt)),
    (Nu=s, Num=sing;Num=Nu),    
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num],
    !.

genera_tratti(Lems, Testas, Tratti, Lemma, Cat):-
    extracttestas(Testas,Testa), 
    sw(Testa-[n]-Lems),
    Lems=[Root-Cat],
    Lemma=Root,
    spy_lower(Testa, LowW, Pol),
    (Pol=0,
    get_nroots(Testa, [Lemma-Feats|_])
     ;
     Pol=1,
    get_nroots(LowW, [Lemma-Feats|_])),
    on(num=Nu, Feats),
    (Nu=s, Num=sing;Num=Nu),    
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num],
    !.        

genera_tratti(Lems, Testas, Tratti, Lemma, n):-
    extracttestas(Testas,Testa), 
    spy_lower(Testa, LowW, Pol),
    Pol=0,
     lemmatize_dic(Testa,Lemma,S),
    getnumlex(Testa,S,Num),
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num],
    !.

genera_tratti(Feats, Testas, Tratti, Lemma, n):-
    extracttestas(Testas,Testa), 
    spy_lower(Testa, LowW, Pol),
    Pol=0,
    get_nroots(Testa, [Lemma-Feats|_]),
    on(num=Nu, Feats),
    (Nu=s, Num=sing;Num=Nu),
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num],
    !.

genera_tratti(Feats, Testas, Tratti, Lemma, Cat):-
    extracttestas(Testas,Testa), 
    spy_lower(Testa, LowW, Pol),
    (Pol=0,
    myparse(Feats, Testa, '')
     ;
     Pol=1,
     (myparse(Feats, Testa, '')
      ;
    myparse(Feats, LowW, '')
      )),
    on(pred=Lemma, Feats),
    (on(gen=Gen, Feats);
     true),
    (on(num=Num, Feats);
     lemmatize_dic(Testa,Lemm,S),
    getnumlex(Testa,S,Num)),
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num].

genera_tratti(Lems, Testas, Tratti, Testa, []):-
    extracttestas(Testas,Testa), 
    sw(Testa-Cat-Lems),
     lemmatize_dic(Testa,Lemm,S),
    getnumlex(Testa,S,Num),
    wn_gend(Lemma,Gen),
    Tratti=[3,Gen,Num],
    !.

genera_tratti([],Testa, [3,nil,sing], Testa, n).
genera_tratti(Lems,Testa, [3,nil,sing], Testa, Cat).

extracttestas(Testas,Testa):-
   (atomic(Testas), Testas\=[], Testa=Testas
    ;
    is_list(Testas), Testas\=[], member(Testa,Testas), Testa\=pron), 
    !.
    
checkncats(Cat):-
    list(Cat),
    on(Cn,Cat),
    nouncats(Cn),
    !.
checkncats(Cat):-
    atomic(Cat),
    nouncats(Cat),
    !.
checkncats(Cat):-
    list(Cat),
    on(Cn,Cat),
    proncat(Cn),
    !.
checkncats(Cat):-
    atomic(Cat),
    proncat(Cat),
    !.

numon(Feats, Num):-
    on(num=Nu, Feats),
    (Nu=s, Num=sing;Num=Nu),
    !.
numon(Feats, sing):-!.


trymparse(Testa, LowW, Pol,Feats):-
     Pol=0,
     mparse(Feats, Testa, '')
     ;
     Pol=1,
     (mparse(Feats, Testa, '')
      ;
      mparse(Feats, LowW, '')
      ),!.

myparse(Feats, Testa, ''):-
   spy_lower(Testa, LowW, Pol),
   trymparse(Testa, LowW, Pol,Feats),!.

cerca_lem_string(N, Lemm,Lemma):-
   stringof(Lemm, Lemma),
   nturnup_wn(P,Lemma,_),!.

cerca_lem_string(N, Lemm,Lemma):-
   on('_',Lemm),
   decompose_underscore_all(Lemm, Preds),
   reverse(Preds, [Lems|Predss]),
   nturnup_wn(P,Lems,_),
   stringof(Lemm, Lemma),
   !.

cerca_lem_string(N, Lemm,Lemma):-
   stringof(Lemm, Lemma),
   !,
   cercalemma(N,Lemma),
   !.


ndump_output(Outfile,N, Tags,FunctsOut,Costs):-
    nl,
    writenl(cstructure,'PennTreebank Style Tagging'),
    nl,
    write_tags_dis(Outfile, N,Tags),
    nl,
    writenl(cstructure,'Tagging and Syntactic Constituency'),
    nl,
    writenl('Model', Tags),
    nl,
    writeseqnl('Model', Costs),
    reassigntags(Tags),
    !.

reassigntags(Tags):-
    findall_poss(NuoFrase),
    length(Tags,L),
    length(NuoFrase,L),
    abolish(termin/1),
    inspecttags(Tags,NuoFrase,NuovaFrase),
    assertnew_lookahead(NuovaFrase),
    !.
reassigntags(Tags):-
    !.

checkTverb(T,v):-
    check_vcat(T),!.
%checkTverb(T,T):-!.

inspecttags([],[],[]):-!.
inspecttags([],TList,TList):-!.
inspecttags([W-T|Tags],[Cont-Tlist|NuoFrase],[Cont-Tlist|NuovaFrase]):-
    length(Tlist,L), L=1,
    inspecttags(Tags,NuoFrase,NuovaFrase),
    !.
inspecttags([W-T|Tags],[Cont-Tlist|NuoFrase],[Cont-Tlist1|NuovaFrase]):-
    length(Tlist,L), 1<L,
    checkTverb(T,T1),
    Tlist1=[T1-W],
    inspecttags(Tags,NuoFrase,NuovaFrase),
    !.
inspecttags([W-T|Tags],[Cont-Tlist|NuoFrase],[Cont-Tlist1|NuovaFrase]):-
    length(Tlist,L), 1<L,
    T=n,
    Tlist1=[T-W],
    inspecttags(Tags,NuoFrase,NuovaFrase),
    !.
inspecttags([W-T|Tags],[Cont-Tlist|NuoFrase],[Cont-Tlist|NuovaFrase]):-
    inspecttags(Tags,NuoFrase,NuovaFrase),
    !.
inspecttags([W-T|Tags],NuoFrase,NuovaFrase):-
    inspecttags(Tags,NuoFrase,NuovaFrase),
    !.


write_clause_frase(N,Frase, FunctsOut,Costs):-
%    nl,
    collect_clause_frase(Frase, FunctsOut, Out),
%    writenl(_,Out),
    !.
write_clause_frase(N,Frase, FunctsOut,Costs):-
    !.

collect_clause_frase(Frase, FunctsOut, Outs):-
    make_lists(FunctsOut, Out, Length),
    recover_head_lems(Out,Outs),
    !.

make_lists(FunctsOut, List, L):-
   make_list(FunctsOut, List),
   !.

make_list([], []):-!.
make_list([F-Fir|FunctsOut], Lists):-
   nonvar(Fir),
   (Fir=[subj-pro|Res];F-Fir=subj-pro, Res=[]
      ;F-Fir=fac-[fac-[nil]|Res]
      ;F-Fir=fac-[fac-nil|Res]),
   make_list(FunctsOut, List),
   makelist(Res,Lis),
   append(Lis,List,Lists),
   !.
make_list([dirsp-'"'|FunctsOut], ['"'|Lists]):-
   make_list(FunctsOut, List),
   makelist(Res,Lis),
   append(Lis,List,Lists),
   !.
make_list([F-Fir|FunctsOut], [W|Lists]):-
   nonvar(Fir),
   Fir=[W-_-_|Res],
   make_list(FunctsOut, List),
   makelist(Res,Lis),
   append(Lis,List,Lists),
   !.
make_list([F-Fir|FunctsOut], Listss):-
   nonvar(Fir),
   Fir=[Fu-Sec|Res],
   is_list(Sec),
   append(Sec,Res,Lists),
   makelist(Lists,Lis),
   make_list(FunctsOut, List),
   append(Lis,List,Listss),
   !.
make_list([W-_-_|Res], [W|Lis]):-
   makelist(Res,Lis),
   !.
make_list([F-Fir|FunctsOut], Listss):-
   make_list(FunctsOut, List),
   !.

makelist([],[]):-!.
makelist([W-_-_|Res],[W|Lis]):-
   nonvar(W),
   makelist(Res,Lis),
   !.
makelist([[F-Sec]],Lis):-
   make_list(Sec,Lis),
   !.
makelist([F-Sec|Res],Lis):-
   nonvar(F),
   is_list(Sec),
   append(Sec,Res,Lists),
   make_list(Lists,Lis),
   !.
makelist([F-Sec|Res],Lis):-
   nonvar(F),
   make_list(Res,Lis),
   !.

writefuncscost(N,Frase, FunctsOut,Costs):-
    write_clause_frase(N,Frase, FunctsOut,Costs),
    nl,
    write(N),nl,
%    writeseqnl(Costs),
    nl,nl,
    writenl(cstructure,'Functional and Syntactic Constituency'),
    nl,
    write_functs(cstructure,FunctsOut),
%    pp_list(Costs, cstructure),
    !.

write_functs(Outfile, []):-!.
write_functs(Outfile, [Func|Functs]):-
    write(Func),
    nl,
    write_functs(Outfile, Functs),
    !.

write_tags_dis(Outfile, N,Tags):-
    write(N),
    nl,
    writetags(Tags),
    !.
writetags([]):-!.
writetags([Tag,FTag|Tags]):-
    Tag=W-T,
    nonvar(T),
    (W=most, Tagn=most-jjs
     ; 
     W=more, Tagn=more-jjr
     ; 
     W=to, Tagn=to-to
     ; 
     (W=half;W=many;W=both;W=all),
     FTag=W1-T1-_, T1=art, Tagn=W-pdt
     ; 
     ttws(W,Tt,T),Tagn=W-Tt),
    write(Tagn),
    nl,
    writetags([FTag|Tags]),!.
writetags([Tag|Tags]):-
    write(Tag),
    nl,
    writetags(Tags),!.
writetags([Tag]):-
     write(Tag),
    nl,
    !.   

sec_mults(Lex, Lex1, MWord, Lists):-
   bagof(S,first_mults(Lex1, Lex, S),List),
   appiattisci(List, Lists),
   !.

first_mults(Lex1, MWord, Lists):-
   firstmults(Lex1, MWord, Lists),
   !.
first_mults(Lex1, Lem, Lists):-
    toupper(Lex1, ULex),
   (bagof(S,create_upnm_form(Lem,ULex,S),Lists)
     ;
    bagof(S,create_form_mw(Lem,Lex1,S),Lists)),
    !.

/* qui cerco la parola a destra della hyphenata */
firstmults(Lex1, Lex, a):- 
    jj(Lex1),
    asserta(
            new_pred_a(Lex, [valutativo], [])),
    asserta(
            new_a_engl(Lex)).
 
firstmults(Lex1, Lex, av):- 
   create_avv(Lex1, modal),
    asserta(
            new_avv(Lex,modal)).

create_avv(W, Type):-
   nt(W),
   Type=avv(pred_avv(W), tipo(deictic), duraz(non_punt), config([td=tr])).

create_avv(W, Type):-
   r(W),
   (var(Type),Type=avv(pred_avv(W), tipo(modal))
     ; nonvar(Type)),
   !.

sec_mult(Lex1, MWord, Lists):-
   bagof(S,first_mult(Lex1, MWord, S),List),
   appiattisci(List, Lists).

sec_mult(Lex1, MWord, Lists):-
   decompose_secunderscore(MWord, Word),
   stringof(Word,Lex),
   (
    bagof(S,
            (create_form_mw(Lex1,Lex,S), (S=n;S=a)), 
                 Lists)
    ;
    toupper(Lex1, ULex),
    bagof(S,
            create_up_form(Lex1,ULex,S),
                  Lists)
    ),
    !.

except_dics(Lex1):-
   Lex1\=looking_at,!.

assertnewnouns(Lex,N,Lemma,Cat):-
   (nonvar(N), N=plur,
     asserta(
            new_n(Lemma,Lex,Gen)),
     asserta(
            new_pred_n(Lemma, nil, Cat, []))
    ; 
     N=sing,
     asserta(
            new_n(Lex,Lex,Gen)),
    asserta(
            new_pred_n(Lex, nil, Cat, []))
    ).


first_mult(Lex, MWord, [n]):-
   mult(Lex,Cat),
   decompose_underscore(MWord, Word1),
   stringof(Word1,Lex1),
   decompose_secunderscore(MWord, Word2),
   stringof(Word2,Lex2),
   lemmatize_dic(Lex1, Lemma1, Rest1),
   (Rest1=s,Num1=plur;Num1=sing),
   assert_new_nouns(Lex1,Lex,Num1,Lemma1,Cat),
   lemmatize_dic(Lex2, Lemma2, Rest2),
   (Rest2=s,Num2=plur;Num2=sing),
   assert_new_nouns(Lex2,Lex,Num2,Lemma2,Cat),
   assertnewnouns(Lex,Num2,Lex,Cat),
   !.

first_mult(Lex1, MWord, [v]):-
   v(Lex1, Cat),
   decompose_underscore(MWord, Word),
   stringof(Word,Lex),
   lemmatize_dic_v(Lex, Lemma, Rest),
   (
    (Rest=d, Mo=ind, Te=pass
    ; Rest=g, Mo=ger
    ; Rest=s, Mo=ind, Te=pres),
    nonvar(Mo),
    decompose_secunderscore(MWord, Suff),
    stringof(Suff,Suf),
    mcon(Lemma,'_',NLem),
    mcon(NLem,Suf,NewLex),
    asserta(
            new_v(Lex1, NewLex,Mo, Te, Pers, Num))
    ;    
    Rest\=d, Rest\=g, Rest\=s,    
     asserta(
            new_v(Lex1, Lex1,base, base, Pers, Num)),
     asserta(
            new_v(Lex1, Lex1,ind, pres, Pers, Num))
    ).

first_mult(Lex1, MWord, Lists):-
   findall(List, firstmult(Lex1, MWord, List), Lists),!.


firstmult(Lex, MWord, S):- 
   spy_lower(Lex, LowW, Pol),
   (Pol=1,
     access_upwsj(Lex,Ss, LowW),
     Ss=[S-_]
    ; Pol=0, 
     access_wsj(LowW,S)
     ),!.

firstmult(Lex1, MWord, S):- 
   except_dics(Lex1),
   spy_lower(Lex1, LowW, Pol),
   (Pol=1,
     (m_lex(Lex1, Codes, Fr)
    ; 
      m_lex(LowW, Codes, Fr))
    ; Pol=0, 
      m_lex(Lex1, Codes, Fr)
    ),
   leaf_fpr(Lex1, Codes, Cat, N),
   Cat=root(root(Loc), Type, Ncat, Feat,_),
   append([pred=Loc], Feat, Feats),
   getcat(Loc, Feats, Categ, Fea, Pred),
   Cats=[Loc-OrTk-[Categ]-Fea],
   LCa=[[Categ]-Loc-Feats],
   define_cats([Categ], S),
   assert_multiword(S,Lex1,Feats),
   assertz(sw(Loc-[Categ]-LCa)),!.

firstmult(Lex1, MWord, a):- 
    tolower(Lex1,LowL),
    (Lex1=LowL,Lex=Lex1;Lex=LowL),
    jj(Lex),
    asserta(
            new_pred_a(Lex, [valutativo], [])),
    asserta(
            new_a_engl(Lex)).
 
firstmult(Lex1, MWord, av):- 
    tolower(Lex1,LowL),
    (Lex1=LowL,Lex=Lex1;Lex=LowL),
   create_avv(Lex, modal),
    asserta(
            new_avv(Lex,modal)).

firstmult(Lex1, MWord, Lists):-
   decompose_underscore(MWord, Word),
   stringof(Word,Lex),
   toupper(Lex, ULex),
    tolower(Lex,LowL),
    (Lex=LowL,Lexs=Lex;Lexs=LowL),
    \+ jj(Lexs),
   (bagof(S,create_upnm_form(Lex1,ULex,S),Lists)
     ;
    bagof(S,create_form_mw(Lex1,Lex,S),Lists)),
    !.


assert_multiword(Cat,Lex,Feats):-
      atomic(Cat), Cat\=n;list(Cat),Cat=[A],A\=n,!.

assert_multiword(Nn,Lex,Feats):-
    (Nn=n;Nn=[n]),
    create_tratti(Feats, P,N,Gen),
    on(feat=Feat, Feats),
    (atomic(Feat), Fs=[Feat]; list(Feat), Fs=Feat),
    translate_wn_cats(Fs, CatSem),
    on(pred=Lem, Feats),
    (nonvar(Lem),Lemma=Lem
     ;var(Lem), Lemma=Lex),
    (nonvar(N), N=plur,
     asserta(
            new_n(Lemma,Lex,Gen))
    ; 
     N=sing,
     asserta(
            new_n(Lex,Lex,Gen))),
    asserta(
            new_pred_n(Lex, nil, CatSem, [])).
assert_multiword(Nn,Lex,Feats):-
    (Nn=n;Nn=[n]),
    create_tratti(Feats, P,N,Gen),
    up_wn(Lex, CatSem, Cats),
    on(pred=Lem, Feats),
    (nonvar(Lem),Lemma=Lem
     ;var(Lem), Lemma=Lex),
    (nonvar(N), N=plur,
     asserta(
            new_n(Lemma,Lex,Gen))
    ; 
     N=sing,
     asserta(
            new_n(Lex,Lex,Gen))),
    asserta(
            new_pred_n(Lex, nil, CatSem, [])).

create_form_mw(Lex1, MWord, n):-
    name(MWord,Asci),
    length(Asci,L),
    (L=1; on(Car,Asci),car_num(Car)),
    assert_abbreviation(Lex1),
    !.

create_form_mw(Lex1, MWord, S):-
    p(MWord, Codes),
    search_hyphenated(Lex1, Ct, Lem, S, Feas),
    assert_hyphenated(Lex1,Ct,Lem, Feas,S),
    !.

create_form_mw(Lex1, MWord, S):-
    (checkab(MWord)
     ;
     chabbr(MWord)
     ;
     charl(MWord)),
    search_hyphenated(Lex1, Ct, Lem, S, Feas),
    assert_hyphenated(Lex1,Ct,Lem, Feas,S),
    !.

create_form_mw(Lex1,X,n):-
   nn_word_cat(X, Num, Lemma,Cat),
   assert_new_nouns(Lex1,X,Num,Lemma,Cat),!.

up_wn_nm(1, W, Feat, Cats):-
%   dvol('Macintosh HD:work:riassuntore:dizionari:noun_sem'),
   ht(W, SCats),
   (on(nmf,SCats);on(nmm,SCats)),
   c_translwncats(SCats, Feat, Cats),
   !.

create_upnm_form(Lex1,X,n):-
     up_wn_nm(1, X, Feat, Cats),
     asserta(
            new_npro(Lex1,X,Gen)),
     assert_new_pred_mw(Lex1,X,np),
    !.

create_up_form(Lex1, MWord, n):-
    name(MWord,Asci),
    length(Asci,L),
    (L=1; on(Car,Asci),car_num(Car)),
    assert_abbreviation(Lex1),
    !.

create_up_form(Lex1,X,n):-
    up_word_cat(X, Num, Lemma,Cat),
     asserta(
            new_npro(Lex1,X,Gen)),
     assert_new_pred_mw(Lex1,Lemma,np),
    !.


is_vow(a).
is_vow(i).
is_vow(o).
is_vow(e).
is_vow(u).
is_vow(y).

is_con(r).

checkroot(Root, Der, Strin, NRoot):-
   (Der=er;Der=ers),
   nonvar(Root),
   stringof(String, Root),
   reverse(RevS, String),
   (
    RevS=[i|Rest],
    reverse(NStr, Rest),
    append(NStr, [y], Strin),
    stringof(Strin, NRoot)
   ;
    RevS=[C|Rest],
    \+ is_vow(C),
    reverse(Strin, RevS),
    stringof(Strin, NRoot)
   ;
    append(String, [e], Strin),
    stringof(Strin, NRoot)
   ),!.

checkroot(Root, Der, Strin, NRoot):-
   (Der=ic;Der=ily),
   nonvar(Root),
   stringof(String, Root),
   append(String, [y], Strin),
   stringof(Strin, NRoot),!.

checkroot(Root, Der, Strin, NRoot):-
   (Der=ably;Der=ation),
   nonvar(Root),
   stringof(String, Root),
   append(String, [e], Strin),
   stringof(Strin, NRoot),!.

checkroot(Root, Der, String, NRoot):-
   nonvar(Root),
   Root\=v+R, Root\=verb+R, Root\=nverb+R,
   Root\=f, Root\=d,
   stringof(String, Root),
   length(String, L),
   1 < L.

matchcds(SCod:T:_, SCod):-!.
matchcds(SCod:_, SCod):-!.
matchcds(SCod, SCod).

matchcls(SCod:T:_, SCod):-!.
matchcls(agg:_, a):-!.
matchcls(SCod:_, SCod):-!.
matchcls(SCod, SCod).

matchcodesg(SCode, PhOut, LCode, LCod, G):- 
     on(S:Cod, SCode),
     mtdc(Cod, LCode, LCod).

matchcodesg(SCode, PhOut, LCode, LCod, G):- 
     on(S:Cod, SCode),
     matchcds(Cod, SCod),
     LCode\=SCod,
     LCod=SCod, LCod\=v,
     (LCode=adj, LCod=a; LCode=noun, LCod=n),!.

mtdc(Cod, LCode, LCod):-
     matchcds(Cod, SCod),
     (list(LCode),
      on(SCod:T:R, LCode),       
%       pname(SCod:T:R, LCod)
       atom_to_term(LCod, SCod:T:R, Atm)
       ;
       list(LCode),
       on(SCod:T, LCode),
%       pname(SCod:T, LCod)
       atom_to_term(LCod, SCod:T, Atm)
       ;
       list(LCode),
       on(SCod:T, LCode),
        LCod=SCod
       ;
       list(LCode),
       on(SCod, LCode),
         LCod=SCod
       ;
       LCode=SCod,
        LCod=SCod
      ;
      LCode\=SCod,
      (list(LCode),
        on(LCod, LCode),
       (
        (LCod=adj;LCod=nadj;LCod=agg), 
         SCod=a
       ;
       LCod=SCod)
       ;
        matchcls(LCode, Co),
        Co=SCod,
        LCod=SCod
     )).

buildnewroot(Root, Morpho, Der, NRoot):-
   (Root=Morpho, NRoot=Root
    ;
    Root\=Morpho, NRoot=Morpho), 
	   !.

adjustroot(v:_, PhOut, G, Type):-
    (
     (PhOut=er; PhOut=ers), G=m, Type = 'o:m'
     ;
     (PhOut=ess; PhOut=esses), G=f, Type = 'a:f'
     ;
     PhOut=ty, G=f, Type = 'z:f'
     ), !.

realizeder(PhOut, Der, Cat, SCodes, LCod, NRoot, Feats1, Type):-
   check_derivation(PhOut, Der, LCod, SCodes, Cat, 
                   root(root(NRoot), Decl, Ca, Feat, Reg)), 
   realizesuffder(Der, Ca, SCodes, LCod, NRoot, Feats, Type),
   (Feats\=[],
%    append(Feat, Feats, Feaa),
    append([pred=NRoot], Feats, Feats1)    
    ;
    Feats=[],
    append([pred=NRoot], Feat, Feats1)),!.

realizesuffder(Der, Ca, SCodes, _, NRoot, Feats, Type):-
    (
     on(suff:_:v, SCodes)
     ;
     on(suff:v:C, SCodes)
    ),
    leaf_pres(NRoot, suffix(suffix(Der), _, Ca, _, Reg), 
            desinence(des(Der), Feats, Ca, _, Reg), Der, _),!.
    
realizesuffder(Der, Ca, SCodes, LCod, NRoot, Fea, Type):-
    adjustroot(LCod, Der, G, Type),
    leaf_pres(NRoot, suffix(suffix(Der), _, Ca, _, Reg), 
            desinence(des(Der), Fea, Ca, _, Reg), Der, _),!.

realizesuffder(Der, Ca, SCodes, _, NRoot, Feats, Typ):-
    (
     (on(el2:n:G, SCodes)
     ;
     on(suff:_:n:G, SCodes)), 
     (
      (Der=itor; Der=ator; Der=tor),
       NPh=or
      ;
      (Der=logist; Der=logists; Der=log; Der=logs; Der=logue; Der=logues)
      ;
      (Der=er; Der=ers)
      ;
      (Der=ation; Der=ations)
      ;
      (Der=atress; Der=itress; Der=tresses)
      )
      ;
     (on(el2:_, SCodes)
     ;
      on(suff:_:a, SCodes))),
    leaf_pres(NRoot, suffix(suffix(Der), _, Ca, _, Reg), 
           desinence(des(Der), Feats, Ca, _, Reg), Der, _),!.

suf_leaf(PhraseIn, Feats) :-
   \+ integer(PhraseIn),
   nonvar(PhraseIn),
   suf_vname(PhraseIn, Suffroots),
   nonvar(Suffroots), Suffroots\=[],
%   !,
   find_root_suff(Suffroots, Der, Root, PhOut),
   checkroot(Root, Der, String, Nroo),
   (var(Nroo), Rot=Root;
     nonvar(Nroo), Rot=Nroo),
   (
    lexx(N, Ds, Rot, _, Codes, dizionario), copy_codes(Codes, LCode)
    ;
    ana_morpho(Rot, String, '', TopDown, Morpho, LCode, Out)
    ),
   sfx(Der, SCodes),
   matchcodesg(SCodes, PhOut, LCode, LCods, G),
   buildnewroot(Rot, Morpho, Der, NRoot),
%   pname(LCod, LCods),
       atom_to_term(LCods, LCod, Atm),
   w(LCod, Rot, Cat),
   realizeder(PhOut, Der, Cat, SCodes, LCod, NRoot, Feats, T),!.

copy_codes([], []) :- !.

copy_codes([First | CodesIn], [Code | CodesOut]) :-
      pname(Code, First),
%       atom_to_term(First, Code, Atm),
      copy_codes(CodesIn, CodesOut).

copy_codes(First, [Code | CodesOut]) :-
      pname(Code, First),
%       atom_to_term(First, Code, Atm),
      copy_codes(CodesIn, CodesOut).
 
suf_nums(PhraseIn, Feats1) :-
   \+ integer(PhraseIn),
   nonvar(PhraseIn),
   suf_num(PhraseIn, Form, Numb),
   Form\=[],
   Feats1=[cat=num, pred=Form, type=Numb],!.

find_root_suff(Suffroots, Der, Root, Suf) :-
    remove(verb+NRoot+Suf, Suffroots, Suffr), 
    Suffr\=[],
    remove(verb+NRo+Suff, Suffr, Suffro),
    Suffro\=[],
    on(Root+Der, Suffro),
    Su=Der.

find_root_suff(Suffroots, Der, Root, Inf) :-
    remove(verb+NRoot+Suf, Suffroots, Suffr), 
    Suffr\=[],
    on(v+Roo+Inf, Suffr),
    on(nverb+Root+Der, Suffroots).

find_root_suff(Suffroots, Der, Root, Suf) :-
    remove(verb+NRoot+Suf, Suffroots, Suffr), 
    Suffr\=[],
    find_root_suffv(Suffr, Der, Root).

find_root_suff(Suffroots, Der, Root, Suf) :-
    remove(verb+NRoot+Suf, Suffroots, Suffr), 
    Suffr=[],
    find_root_suffv(NRoot, Der, Root).

find_root_suff(Suffroots, Der, Root, Suf) :-
    remove(verb+NRoot+Suf, Suffroots, Suffr), 
    Suffr\=[],
    find_root_suffn(Suffr, Der, Root).

find_root_suff(Suffroots, Der, Rootl, Suf) :-
    remove(nverb+NRoot+Suf, Suffroots, Suffr), 
    Suffr\=[],
    Suf=ably, 
    find_root_suffn(Suffr, Der, Root),
    mcon(Root,le,Rootl).

find_root_suff(Suffroots, Der, Root, Suf) :-
    remove(nverb+NRoot+Suf, Suffroots, Suffr), 
    Suffr\=[],
    find_root_suffn(Suffr, Der, Root).

find_root_suff(Suffroots, Der, Root, Der) :-
    remove(nverb+Root+Der, Suffroots, Suffr), 
    Suffr=[].

find_root_suff(Suffroots, Der, Root, Der) :-
    remove(v+Root+Der, Suffroots, Suffr), 
    Suffr=[].

find_root_suff(Suffroots, Der, Root, Der) :-
    remove(verb+Root+Der, Suffroots, Suffr), 
    Suffr=[].

find_root_suffvv(NRoot, Der, Root):-
    suf_name(NRoot, [Root+Der]).

find_root_suffvv(NRoot, Der, Root):-
    suf_name(NRoot, Suffroot),
    remove(Root+Der, Suffroot),
    Suffroot\=[].

find_root_suffv(Suffr, Der, Root) :-
    on(v+Root+Der, Suffr).

find_root_suffv([verb+NRoot+Suf], Der, Root) :-
    (Suff=a; Suff=e; Suff=i; Suff=o),
    !.

/*
[verb+complessificazion+e, nverb+complessificazi+(one), nverb+complessificaz+ione, nverb+complessifica+zione, nverb+complessific+azione, nverb+complessi+ficazione, nverb+compless+ificazione]

[verb+certificator+i, nverb+certificat+ori, nverb+certifica+tori, nverb+certific+atori, nverb+certi+ficatori, nverb+cert+ificatori]*/

set_suf(Der-Root, ODer-_, IDer-_, SDer-_, WDer-_, Der, Root).
set_suf(UDer-_, Der-Root, IDer-_, SDer-_, WDer-_, Der, Root).
set_suf(UDer-_, ODer-_, Der-Root, SDer-_, WDer-_, Der, Root).
set_suf(UDer-_, ODer-_, UDer-_, Der-Root, WDer-_, Der, Root).
set_suf(UDer-_, ODer-_, UDer-_, SDer-_, Der-Root, Der, Root).

set_suf1(Der-Root, ODer-_, IDer-_, SDer-_, Der, Root).
set_suf1(UDer-_, Der-Root, IDer-_, SDer-_, Der, Root).
set_suf1(UDer-_, ODer-_, Der-Root, SDer-_, Der, Root).
set_suf1(UDer-_, ODer-_, UDer-_, Der-Root, Der, Root).

find_root_suffn([W1, W2, W3, W4, W5, W6, W7], Der, Root) :-
    W1=nverb+MRoot+MDer,
    W2=nverb+TRoot+TDer,
    W3=nverb+WRoot+WDer,
    W4=nverb+SRoot+SDer,
    W5=nverb+IRoot+IDer,
    W6=nverb+ORoot+ODer,
    W7=nverb+URoot+UDer,
    set_suf(UDer-URoot, ODer-ORoot, IDer-IRoot, SDer-SRoot, WDer-WRoot, Der, Root).

find_root_suffn([W1, W2, W3, W4, W5, W6], Der, Root) :-
    W1=nverb+MRoot+MDer,
    W2=nverb+TRoot+TDer,
    W3=nverb+WRoot+WDer,
    W4=nverb+SRoot+SDer,
    W5=nverb+PRoot+PDer,
    W6=nverb+URoot+UDer,
    set_suf(UDer-URoot, PDer-PRoot, SDer-SRoot, WDer-WRoot, TDer-TRoot, Der, Root).

find_root_suffn([W1, W2, W3, W4, W5], Der, Root) :-
    W1=nverb+MRoot+MDer,
    W2=nverb+TRoot+TDer,
    W3=nverb+WRoot+WDer,
    W4=nverb+SRoot+SDer,
    W5=nverb+URoot+UDer,
    set_suf1(UDer-URoot, SDer-SRoot, WDer-WRoot, TDer-TRoot, Der, Root).

find_root_suffn([W1, W2, W3, W4], Der, Root) :-
    W1=nverb+MRoot+MDer,
    W2=nverb+TRoot+TDer,
    W3=nverb+WRoot+WDer,
    W4=nverb+SRoot+SDer,
    set_suf1(SDer-SRoot, WDer-WRoot, TDer-TRoot, MDer-MRoot, Der, Root).

find_root_suffn([W1, W2, W3], Der, Root) :-
    W1=nverb+MRoot+MDer,
    W2=nverb+TRoot+TDer,
    W3=nverb+Root+Der.

find_root_suffn([W1, W2, W3], Der, Root) :-
    W1=nverb+Root+Der,
    W2=nverb+TRoot+TDer,
    W3=nverb+MRoot+MDer.

find_root_suffn([W1, W2, W3], Der, Root) :-
    W1=nverb+MRoot+MDer,
    W2=nverb+Root+Der,
    W3=nverb+MRoot+MDer.

find_root_suffn([W1, W2], Der, Root) :-
    W1=nverb+MRoot+MDer,
    W2=nverb+Root+Der.

find_root_suffn([W1, W2], Der, Root) :-
    W1=nverb+Root+Der,
    W2=verb+VRoot+VDer.

find_root_suffn([nverb+Root+Der], Der, Root):-!.

feat_s(s, p):-!.
feat_s('', s).

matchcders(SCod:_, SCod):-!.
matchcders(_:SCod, SCod).

matchcdels(_:SCod, SCod):-!.
matchcdels(SCod, SCod).

check_derivation(PhOut, Der, Code, Codes, Cat, Cat1) :-
   on(suff:SCo, Codes), 
   matchcders(SCo, SCod),
   SCod=v,
   Cat=root(root(NRoot), decl, Categ, Feats, reg),
   on(pred=Pred, Feats),
   on(subcat=Sub, Feats),
   feat_s(PhOut, Num),
   Feat=[suff=Der, cat=verb, pred=Pred, subcat=Sub, mood=inf, tense=pres, num=Num],
   Cat1=root(root(NRoot), decl, verb, Feat, reg),!.

check_derivation(Suff, Der, Code, Codes, Cat, Cat1) :-
   Cat=root(root(NRoot), Decl, Categ, Feats, Reg),
   on(el2:SCo, Codes), 
   matchcdels(SCo, Ca),
     (Categ=agg, 
      Ca=a,
      T=att,
      NCateg=Categ  
      ; 
      Categ=agg, 
      Ca=adv,
      T=att,
      NCateg=adverbial  
      ; 
      Categ=num, 
      Ca=n,
      T=com,
      NCateg=agg  
      ; 
      Categ=noun,
      T=com,
      NCateg=Categ  
      ; 
      Categ=adverbial,
      T=loc,
      NCateg=Categ  
      ),  
   build_features(Suff, Feats, Der, NCateg, T, Cat1),!.

check_derivation(Suff, Der, Code, Codes, Cat, Cat1) :-
   Cat=root(root(NRoot), Decl, Categ, Feats, Reg),
   on(suff:v:SCo, Codes), 
   matchcdervs(SCo, SCod),
    Categ=verb, 
    (atomic(SCod),
     NC=a, 
     NCateg=agg, 
     T=att
    ;
     list(SCod), SCod=[NC,G],
     NC=n, 
     NCateg=noun, 
     T=com
    ;
     list(SCod), SCod=[NC,G],
     NC=adv, 
     NCateg=adverbial, 
     T=G
    ),  
   build_features(Suff, Feats, Der, NCateg, T, Cat1),!.

check_derivation(Suff, Der, Code, Codes, Cat, Cat1) :-
   Cat=root(root(NRoot), Decl, Categ, Feats, Reg),
   on(suff:Dc:SCo, Codes), 
   matchcdervs(SCo, SCod),
    (atomic(SCod),
     NC=SCod
     ;
     list(SCod), SCod=[NC,G]),
    (Categ=noun, Dc=n    
     ;
    Categ=agg, Dc=a),    
    (NC=a, 
     NCateg=agg, 
     T=att
    ;
     NC=v, 
     NCateg=agg, 
     T=att
    ;
     NC=n, 
     NCateg=noun, 
     T=com
    ;
     NC=v, 
     NCateg=noun, 
     T=com
    ),  
   build_features(Suff, Feats, Der, NCateg, T, Cat1),!.

check_derivation(Suff, Der, Code, Codes, Cat, Cat1) :-
   Cat=root(root(NRoot), Decl, Categ, Feats, Reg),
   on(el2:SCo, Codes), 
   matchcdervs(SCo, SCod),
    (atomic(SCod),
     NC=SCod
     ;
     list(SCod), SCod=[NC,G]),
     Categ=verb, 
     (NC=a, 
      NCateg=agg, 
      T=att
      ;
      NC=n, 
      NCateg=noun, 
      T=com),  
   build_features(Suff, Feats, Der, NCateg, T, Cat1),!.

check_derivation(Suff, Der, Code, Codes, Cat, Cat1) :-
   Cat=root(root(NRoot), Decl, Categ, Feats, Reg),
   (on(el2:SCo, Codes);
    on(suff:SCo, Codes)), 
    matchcderas(SCo, OC),
        Categ=agg, 
         OC=a, 
         T=att,
        NCateg=Categ,  
   build_features(Suff, Feats, Der, NCateg, T, Cat1),!.
  
check_derivation(Suff, Der, Code, Codes, Cat, Cat1) :-
   Cat=root(root(NRoot), Decl, Categ, Feats, Reg),
   (on(el2:SCo, Codes);
    on(suff:SCo, Codes)), 
    matchcderals(SCo, OC),
         OC=n, 
         Categ=noun, 
         T=com,
        NCateg=Categ,  
   build_features(Suff, Feats, Der, NCateg, T, Cat1),!.

check_derivation(Suff, Der, Code, Codes, Cat, Cat1) :-
   Cat=root(root(NRoot), Decl, Categ, Feats, Reg),
   (on(el2:SCo, Codes);
    on(suff:SCo, Codes)), 
    on(cat=ppas, Feats),
    Categ=adj, 
     (matchcderals(SCo, OC),
      OC=n, 
      T=com,
      NCateg=noun
      ;
      matchcderas(SCo, OC),
      OC=a, 
      NCateg=agg,
      T=att),
   build_features(Suff, Feats, Der, NCateg, T, Cat1),!.

matchcdervs(NC:G, [NC, G]):-!.
matchcdervs(SCod, SCod).

matchcderas(IC:OC, OC):-!.
matchcderas(SCod, SCod).
matchcderals(IC:OC:G, OC):-!.
matchcderals(OC:G, OC).

build_features(s, F, Der, noun, T, Cat1) :-
   append([suff=Der, cat=NCateg, type=T, num=p], F, Feat),
   Cat1=root(root(Root), Decl, NCateg, Feat, Reg),!.

build_features(S, Feats, Der, NCateg, T, Cat1) :-
    Feats\=[],
    remove(cat=OCat, Feats, Feats1),
   (remove(gen=OGen, Feats1, Feat),
    remove(type=Ot, Feat, Fea)
     ;
    remove(type=OGen, Feats1, Fea)
     ;
    on(subcat=Sub, Feats1), Feats1=Fea),
   append([suff=Der, cat=NCateg, type=T], Fea, Feat),
   Cat1=root(root(Root), Decl, NCateg, Feat, Reg),!.

build_features(S, Feats, Der, NCateg, T, Cat1) :-
    Feats\=[],
    remove(cat=ppas, Feats, Fea),
   append([suff=Der, cat=NCateg, type=T], Fea, Feat),
   Cat1=root(root(Root), Decl, NCateg, Feat, Reg),
   !.

build_features(S, F, Der, NCateg, T, Cat1) :-
   append([suff=Der, cat=NCateg, type=T], F, Feat),
   Cat1=root(root(Root), Decl, NCateg, Feat, Reg),!.

suf_num(M, Pred, Type):-
   stringof(Morph, M),
   seg_num(Form,Morph,M,Suf,0,Forms),
   nonvar(Form), Form\=[],
   !,
   (Form=[Num],
    nm(Num,_,Numb),
    Pred=Numb, Type=card
    ;
    count_numb(Form, Pred, Type)
    ).


findnumm(A-Na, B-Nb, C-Nc, D-Nd, E-Ne, F):-
   (
    multip(A, 0),
     multip(B, 1), AA is Na * Nb,
      multip(C, 0),
      multip(D, 0), BB is Nc + Nd,
      (multip(E, 0), F is AA + BB + Ne
       ;
       multip(E, 1), F is (AA + BB) * Ne
       )
      ;
     multip(A, 1),
      multip(B, 0),
       multip(C, 1), AA is Nb * Nc,
        F is AA + Na + Nd + Ne
     ), !.


multip(Num, 1):-
      (Num=milione; Num=mila; Num=mille; Num=cento),!.

multip(Num, 0):-
      (Num\=milione, Num\=mila, Num\=cento),!.

finnumm(A-Na, B-Nb, C-Nc, D-Nd, E):-
   ( multip(A, 0),
     multip(B, 1), AA is Na * Nb,
      multip(C, 0),
       multip(D, 0), E is AA + Nc + Nd
    ;
     multip(A, 1),
      multip(B, 0),
       multip(C, 1), AA is Nb * Nc,
        E is AA + Na + Nd
    ),!.

/*
A==>millenovecentotrenta+due
B==>millenovecento+trenta
C==>millenove+cento
D==>mille+nove

A==>duecentoventotto+mila
B==>duecentovent+otto
C==>duecento+vent
D==>due+cento
*/

count_numb([A, B, C, D], E, ord) :-
    D=Aa+Bb,
    C=_+Cc,
    B=_+Dd,
    A=_+N2,
    nm(N2,_,ord),
    nm(Dd,_,Nd),
    nm(Cc,_,Nc),
    nm(Bb,_,Nb),
    nm(Aa,_,Na),
    finnumm(Aa-Na, Bb-Nb, Cc-Nc, Dd-Nd, E), !.


count_numb([A, B, C, D], F, card) :-
    D=Aa+Bb,
    C=_+Cc,
    B=_+Dd,
    A=_+Ee,
    Ee\=ord,
    nm(Aa,_,Na),
    nm(Bb,_,Nb),
    nm(Cc,_,Nc),
    nm(Dd,_,Nd),
    nm(Ee,_,Ne),
    findnumm(Aa-Na, Bb-Nb, Cc-Nc, Dd-Nd, Ee-Ne, F), !.


count_numb([A, B, C], Numb, ord) :-
    C=Num1+Num2,
    B=Nu1+Nu2,
    A=N1+N2,
    nm(N2,_,ord),
    nm(Nu2,_,Num),
    nm(Num2,_,N),
    nm(Num1,_,Ni),
    Numb is Ni + Num + N,!.

count_numb([A, B, C], Numb, card) :-
    C=Num1+Num2,
    B=Nu1+Nu2,
    A=N1+N2,
    nm(Num2,_,Nu),
    nm(Nu2,_,Num),
    nm(N2,_,N),
    nm(Num1,_,Ni),
    Numb is (Ni + Nu + Num) * N, !.

count_numb([A, B], Numb, ord) :-
    B=Num1+Num2,
    A=Nu1+Nu2,
    nm(Nu2,_,ord),
    nm(Num2,_,Num),
    nm(Num1,_,N),
    Numb is N + Num, !.

count_numb([A, B], Numb, pro:Number) :-
    B=Num1+Num2,
    A=Nu1+Nu2,
    nm(Nu2,_,Number),
    (Number=s; Number=p),
    nm(Num2,_,Num),
    nm(Num1,_,N),
    Numb is N + Num, !.

count_numb([A, B], C, card) :-
    B=Num1+Num2,
    A=Nu1+Nu2,
    nm(Num2,_,Nu),
    nm(Nu2,_,Num),
    nm(Num1,_,N),
    findnum(Nu2, Num, Num2, Nu, N, C), !.
%    Numb is Nu + Num + N, !.
/* tre.cento.quindici - tre.cento.mila - tre.cento.quindici.mila 
  trentotto.mila sessantottomila */


count_numb([A+B], Num, card) :-
    nm(B,_,ord),
    nm(A,_,Num), !.

count_numb([A+B], C, card) :-
    nm(B,_,Nu),
    nm(A,_,Num),
    findnu(Num, B, Nu, C), !.


findnum(Last, A, Sec, C, D, E):-
     (
      (Sec=milione; Sec=mila; Sec=cento),
      F is D * C
      ;
      F is D + C),
     (
      (Last=milione; Last=mila; Last=cento),
      E is A * F
      ;
      E is A + F).

findnu(A, B, C, D):-
    (
     (B=milione; B=mila; B=cento),
     D is A * C
    ;
     D is C + A).

seg_num([],[W], _,Suf,PrevL,[]):- !.

seg_num(Fms,[], '',Suf,PrevL,Fms):- !.

seg_num(Fms,[M],Word,Suf,PrevL,Fms):- 
     \+ atomic(M),
     one_char(M, Leng),!.

seg_num(Fm,[M],Word,Suf,PrevL,Fms):- 
     atomic(M),
     !.

seg_num(Rest,M,Word,Suf,0,Fms):-
   valid_num(Form,M,_,Word,NSuf,PrevL),
   append(Fms, [Form], Rest).

seg_num(Rest,M,Word,Suf,PrevL,Fms):-
   0<PrevL,
   valid_num(Form,M,Word,Suf,NSuf,PrevL),
   append(Fms, [Form], NFms),
   seg_num_suf(Rest,M,NWord,NSuf,0,NFms),!.

seg_num(Form,M,Word,Suf,PrevL,Fms):-
   extract_s(M,NWord,Suf,PrevL,Leng,NewSuf),
   nonvar(NWord),
   stringof(Morph, NWord),
   seg_num(Form,Morph,NWord,NewSuf,Leng,Fms),!.

seg_num_suf(Form,M,Word,Suf,PrevL,Fms):-
   extract_s(M,NWord,Suf,PrevL,Leng,NewSuf),
   nonvar(NWord),
   stringof(Morph, NWord),
   seg_num(Form,Morph,NWord,NewSuf,Leng,Fms),!.

valid_num(Form,M,Word,Suf,NSuf,0):-
    nm(Suf,Length,N),
    Form=Suf,
    NSuf=''.

valid_num(Form,M,Word,Suf,NSuf,Length):-
    nm(Suf,Length,N),
    Form=Word+Suf,
    NSuf=''.

suf_vname(M, Forms):-
   stringof(Morph, M),
   seg_suf(Form,Morph,Word,Suf,0,Forms),!.

seg_suf([],[W], _,Suf,PrevL,[]):- !.

seg_suf(Fms,[], '',Suf,PrevL,Fms):- !.

seg_suf(Fms,[M],Word,Suf,PrevL,Fms):- 
     \+ atomic(M),
     one_char(M, Leng),
     integer(Leng), 
     1<Leng, !.

seg_suf(Fm,[M],Word,Suf,PrevL,Fms):- 
     atomic(M),
     !.

seg_suf(Rest,M,Word,Suf,PrevL,NFms):-
   valid_suf(Form,M,Word,Suf,NSuf,PrevL),
   seg_sec_suf(Rest,M,NWord,NSuf,PrevL,Fms),
   append(Fms, [Form], NFms),
   !.

seg_suf(Form,M,Word,Suf,PrevL,Fms):-
   extract_s(M,NWord,Suf,PrevL,Leng,NewSuf),
   nonvar(NWord),
   stringof(Morph, NWord),
   seg_suf(Form,Morph,NWord,NewSuf,Leng,Fms),!.

seg_sec_suf(Form,M,Word,Suf,PrevL,Fms):-
   extract_s(M,NWord,Suf,PrevL,Leng,NewSuf),
   nonvar(NWord),
   stringof(Morph, NWord),
   seg_suf(Form,Morph,NWord,NewSuf,Leng,Fms),!.

valid_suf(Form,M,Word,Suf,NSuf,Length):-
    0 < Length,
    check_suffix(Word, Length, Suf, Form, NSuf).

check_suffix(Word, Length, Suf, Form, NSuf) :-
    check_s(Length,Suf, Mark),
    Form=Mark+Word+Suf,
    NSuf=Suf.

check_suffix(Word, Length, Suf, Form, NSuf):-
    ch_s(Length,Suf, verb),
    Form=verb+Word+Suf,
    NSuf=Suf.

check_suffix(Word, Length, Suf, Form, NSuf):-
    ch_s(Length,Suf, verb),
    Form=v+Word+Suf,
    Suf\='à',
    NSuf=''.

one_char('', Leng) :- !.
one_char([], Leng) :- !.
one_char(Word, Leng) :-
  stringof(String, Word),
  extract_s(String,Nword,RestIn,0,Leng,Suf),
  sec_char(Nword, Leng).

sec_char('', 1) :- !.

sec_char([], Leng) :- !.

sec_char(Word, PrevL) :-
  stringof(String, Word),
  extract_s(String,Nword,RestIn,PrevL,Leng,Suf),
  1<Leng.

extract_s([],_,RestIn,PrevL,PrevL,Suf):- !.

extract_s(String, Word, RestIn, 0,1,Car):-
   append(Prefix, [Car], String),
   stringof(Prefix, Word).

extract_s(String,Word,RestIn,PrevL,Leng,Suf):-
   Leng is PrevL + 1,
   append(Prefix, [Car], String),
   stringof(Prefix, Word),
   mcon(Car, RestIn, Suf).

check_s(Length, Suff, Mark):-
   nonvar(Suff),
   is_suf(Suff, Code, Mark).   

is_suf(Su, Code, Mark) :-
   sfx(Su, Codes),
   (on(suff:Code, Codes),
    (vcod(Code, Mark)
     ;
     vcod(Code, Mark)) 
    ;
    on(el2:Code, Codes),
        Mark=nverb).

vcod(v:I, v):-
   integer(I),!.
vcod(C1:C2:G, nverb):- !.
vcod(C1:C2, nverb):- 
   \+ integer(C2),!.

ch_s(Length,Suff, Mark):-
   nonvar(Suff),
   is_v(Suff, Mark).

is_v(Su, Mark) :-
   plx(N, Su, Codes),
   on(dn, Codes), on(dv, Codes), Mark=verb.

suf_name(M, Forms):-
   PrevL = 0,
   stringof(Morph, M),
   seg_su(Form,Morph,Word,Suf,PrevL,Forms),!.

seg_su([],[], '',Suf,PrevL,Fms):- !.

seg_su(Fms,[], '',Suf,PrevL,Fms):- !.

seg_su(Rest,M,Word,Suf,PrevL,NFms):-
   valid_su(Form,M,Word,Suf,PrevL),
   seg_sec_suf(Rest,M,NWord,Suf,PrevL,Fms),
   append(Fms, [Form], NFms),
   !.

seg_su(Form,M,Word,Suf,PrevL,Fms):-
   extract_s(M,NWord,Suf,PrevL,Leng,NewSuf),
   nonvar(NWord),
   stringof(Morph, NWord),
   seg_su(Form,Morph,NWord,NewSuf,Leng,Fms),!.

seg_sec_su(Form,M,Word,Suf,PrevL,Fms):-
   extract_s(M,NWord,Suf,PrevL,Leng,NewSuf),
   nonvar(NWord),
   stringof(Morph, NWord),
   seg_su(Form,Morph,NWord,NewSuf,Leng,Fms),!.

valid_su(Form,M,Word,Suf,Length):-
    check_su(Length,Suf),
    Form=Word+Suf.

check_su(Length,Suff):-
   nonvar(Suff),
   is_suff(Suff, Code),   
   (Code=suff:C1:C2:G;
    Code=suff:C1:C2; 
    Code=el2:C:G; 
    Code=el2:C).

is_suff(Su, Code) :-
   sfx(Su, Codes),
   on(Code, Codes).


pref_name(M, Form):-
   PrevL = 0,
   stringof(Morph, M),
   reverse(Morph,String),
   seg_name(Form,String,Word,Pref,PrevL).

seg_name(Form,M,Word,Pref,PrevL):-
   valid_name(Form,M,Word,Pref,PrevL).

seg_name(Form,M,Word,Pref,PrevL):-
   extract_p(M,NWord,Pref,PrevL,Leng,NewPref),
   stringof(Morph, NWord),
   seg_name(Form,Morph,NWord,NewPref,Leng).

valid_name(Form,M,Word,Pref,Length):-
   check_p(Pref,Length,Pre),
   check_r(M, Root),
   Form=Pre+Root.

extract_p(String,Word,RestIn,0,1,Car):-
   append(Prefix,  [Car], String),
   stringof(Prefix, Word).

extract_p(String,Word,RestIn,PrevL,Leng,Pref):-
   Leng is PrevL + 1,
   append(Prefix,  [Car], String),
   stringof(Prefix, Word),
   mcon(Car, RestIn, Pref).

check_r(Word, Root):-
   reverse(Word,P),
   stringof(P, Root).

check_p(Pref,Length,Pre):-
   nonvar(Pref),
   stringof(Morph, Pref),
   reverse(Morph,P),
   stringof(P, Pre),
   (2 < Length
    ;
    Length = 1,
     nonvar(Pre),
     (Pre=a;Pre=s)
    ;
    Length = 2,
    choose_p(Pre)
    ),
   is_pref(Pre, Code),   
   !.

is_pref(Pre, Code) :-
   p(Pre, Codes),
   sort(Codes, SortCodes), 
   on(CodeAtm, SortCodes),
%   pname(Code, CodeAtm),
       atom_to_term(CodeAtm, Code, Atm),
   is_pr(Pre, Code).

is_pr(Pre, pre).
is_pr(Pre, pref).
is_pr(Pre, pren).
is_pr(Pre, prev).
is_pr(Pre, el1).
is_pr(Pre, el1el2).

choose_p(am).
choose_p(an).
choose_p(bi).
choose_p(co).
choose_p(di).
choose_p(de).
choose_p(es).
choose_p(eu).
choose_p(in).
choose_p(ra).
choose_p(re).
choose_p(ri).
choose_p(un).
associate_tags([], [], []):-!.
associate_tags([W|Words], [_-Tt|Forms], [W-T|Tagged]):-
   select_punct(W, T),  
   associate_tags(Words, Forms, Tagged),!.

associate_tags([to, W|Words], [_-_,_-Tt|Forms], [to-[p,pt], W-[v]|Tagged]):-
      Tt\=[A], 
      is_list(Tt),
      on(n-D,Tt),   
      on(v-D,Tt),
      \+fct(W),
      associate_tags(Words, Forms, Tagged),!.

associate_tags([to|Words], [_-Tt|Forms], [to-[p,pt]|Tagged]):-
   associate_tags(Words, Forms, Tagged),!.

associate_tags([there|Words], [_-Tt|Forms], [there-[expl,avv]|Tagged]):-
   associate_tags(Words, Forms, Tagged),!.

associate_tags([may|Words], [_-[v-may]|Forms], [may-[vsup]|Tagged]):-
   associate_tags(Words, Forms, Tagged),!.

associate_tags([W|Words], [N-Tt|Forms], [W-T|Tagged]):-
   contrs(W, T, Base),
   associate_tags(Words, Forms, Tagged),!.

associate_tags([W|Words], [_-Tt|Forms], [W-Tnew|Tagged]):-
    excep(W, Cat),
    (atomic(Cat),
     Tnew=[Cat]
     ;
      wwor(W), Tt\=[A], Tnew=Cat
      ;
      W='There', Tnew=[expl]
      ;
     (wwor(W);spy_lower(W,Low,1),wwor(Low)), 
     Tnew=Cat
     ;
     is_list(Cat),
     (Tt=[A],
      evaluate_tags(Cat,Tt,Tnew)
      ;
      Tt\=[A], 
     Tnew=Cat)
     ),
     associate_tags(Words, Forms, Tagged),!.

/*
associate_tags([W|Words], [_-Tt|Forms], [W-Tnew|Tagged]):-
      Tt\=[A], 
     list(Tt),
      \+fct(W),
     disaccess_wsj(W,Best),
     rev_transl_tags(W,Best,Tags),
     findall(Tnews,(on(Tag,Tags), on(Tag-W,Tt),
                     convert_tag_new_forms(W, Tag, Tnews)),
                     Tns),
     appiattisci(Tns,Tens),
     sort(Tens,Tnew),
     Tnew\=[],
     associate_tags(Words, Forms, Tagged),
     !.
associate_tags([W|Words], [_-Tt|Forms], [W-Tnew|Tagged]):-
   findall(Cat,sw(W-Cat-LNum),Catss),
   appiattisci(Catss,Cats),
   Cats\=[], Cats\=[fw],
   \+ grammw(W,_),
   sort(Cats, T),
   Tt\=[A],
   evaluate_tags(T,Tt,Tnew),
   associate_tags(Words, Forms, Tagged),!.
*/
associate_tags([W|Words], [_-Tt|Forms], [W-Tnew|Tagged]):-
   spy_lower(W,LW,Pol),
   Pol=1,
   findall(Cat,sw(LW-Cat-LNum),Cats),
   W\=LW,
   appiattisci(Cats, NCats),
   Cats\=[], Cats\=[fw],
   \+ grammw(W,_),
   sort(NCats, T),
   Tt\=[A],
   evaluate_tags(T,Tt,Tnew),
   associate_tags(Words, Forms, Tagged),!.

associate_tags([W|Words], [_-[T-_]|NWords], [W-Tt|Tagged]):-
   convert_tag_new_forms(W, T, Tt),
   associate_tags(Words, NWords, Tagged),!.

associate_tags([W|Words], [_-Tags|NWords], [W-Tt|Tagged]):-
   convertalltags(W, Tags, Tts),
   Tts\=[],
   appiattisci(Tts, Tt),
   associate_tags(Words, NWords, Tagged),!.

associate_tags([W|Words], [_-Tt|Forms], [W-Tnew|Tagged]):-
   spy_lower(W, LWord, Pol),
   word_cats(0, File, W, LWord, NCats, SAllCats, Type),
   (sw(LWord-Cats-LNum)
     ;
     sw(W-Cats-LNum)),
   Cats\=[], Cats\=[fw],
   sort(Cats, T),
   evaluate_tags(T,Tt,Tnew),
   associate_tags(Words, Forms, Tagged),!.

associate_tags([W|Words], [_-[T-W]|NWords], [W-Tt|Tagged]):-
   guess_cat(W,T,Tt),
   associate_tags(Words, NWords, Tagged),!.

associate_tags([W|Words], [_-T|NWords], [W-[n]|Tagged]):-
   associate_tags(Words, NWords, Tagged),!.

    
rev_transl_tags(W,Best,Tags):-
    findall(Tag, 
             (ttws(W,Best,Tag), \+check_auxcat(Tag)),
                Tags),!.

strictgramm1(Det):-
   excep(Det,art)
   ;
   Det=of
   ;
   excep(Det,poss),
   !.
strictgramm2(Aux):-
   coplbh(Aux)
   ;
   support(Aux)
   ;
   excep(Aux,pers)
   ;
   Aux=there
   ;
   wwor(Aux),
   !.
   

select_bestgg(Head,Best):-
   selectbestgg1(Head,Cat1,N1),
   sommatoria(N1, Sum1, _),
   selectbestgg2(Head,Cat2,N2),
   sommatoria(N2, Sum2, _),
   (Sum2\=0;Sum1\=0),
   (Sum1 < Sum2, Best=Cat2;Best=Cat1),
   !.
   
selectbestgg1(Head,nn,Ns):-
    findall(N,(
               (ggt(Det,Head,_,N)
                ;
               ggt(_,Det,Head,N)
                ;
                ggt(Det,_,Head,N)), strictgramm1(Det)), Ns),
    !.
selectbestgg2(Head,vb,Ns):-
    findall(N,(
               (ggt(Det,Head,_,N)
                ;
               ggt(_,Det,Head,N)
                ;
                ggt(Det,_,Head,N)), strictgramm2(Det)), Ns),
    !.

disaccess_wsj(Head,Best):-
   wsj(Head,Cats,N),
   select_best(N,Cats,Best),
   !.
disaccess_wsj(Head,Best):-
   select_bestgg(Head,Best),
   !.

mostfreq_wsj(Head1,Head,Best):-
   atomic(Head1),
   atomic(Head),
   wsj(Head1,Cats1,N1),
   wsj(Head,Cats,N),
   (N < N1, Best=Head1;Best=Head),
   !.
mostfreq_wsj(Head1,Head,Best):-
   atomic(Head1),
   atomic(Head),
   (wsj(Head1,Cats1,N1),
   up_wn(Head, _, Cats), Cats\=[], Best=Head1
   ;
   wsj(Head,Cats,N),
   up_wn(Head1, _, Cats), Cats\=[], Best=Head),
   !.

select_best(1,Best,Best):-!.
select_best(N,Cats,Best):-
   N\=1,
   length(Cats,L), 
   L=1,
   member(Cat-N,Cats),
   Cat=[Best],
   !.
select_best(N,Cats,Best):-
   N\=1,
   length(Cats,L), 
   1<L,
   compute_best(N,Cats,Bests),
   sort(Bests,Sorted),
   reverse(Sorted,[First-Fbest,Sec-Sbest|_]),
   Dif is (First - Sec) * 100,
   (30 < Dif, Best=Fbest
     ;
    stringof([F|_],Fbest),
    stringof([F|_],Sbest), Best=Fbest
     ;
    mcon(Fbest,'_',F1),
    mcon(F1,Sbest,Conc),
     Best=Conc),
   !.

compute_best(Tot,[],[]):-!.
compute_best(Tot,[Cat-N|Cats],[Stat-Best|Bests]):-
   Cat=[Best],
   Stat is N / Tot,
   compute_best(Tot,Cats,Bests),
   !.

detss1(ag).
detss1(art).
detss1(avv).
detss1(neg).
detss1(in).
detss1(grad).
detss1(poss).
detss1(num).
detss1(q).
detss1(qc).
detss1(qd).
detss1(qp).
detss1(dim).
detss1(deit).

detss(art).
detss(ag).
detss(neg).
detss(in).
detss(grad).
detss(poss).
detss(num).
detss(ng).
detss(agn).
detss(q).

dets(neg).
dets(art).
dets(ag).
dets(in).
dets(avv).
dets(grad).
dets(abbr).
dets(qc).
dets(q).
dets(qd).
dets(qp).
dets(poss).
dets(num).
dets(dim).
dets(deit).
dets(ng).
dets(agn).

headn(q).
headn(pers).
headn(pron).
headn(dim).
headn(poss).
headn(deit).
headn(prone).
headn(pronm).
headn(prona).
headn(pronl).
headn(n).
headn(nc).
headn(nh).
headn(np).
headn(npro).
headn(nf).
headn(ng).
headn(nt).
headn(num).
headn(abbr).

choose_tensed([], []):-
     !.
choose_tensed([W-Old-Ca-Score|Ambs], [W-C|Tensed]):-
     on(C, Ca),
     check_tensed(C),
     choose_tensed(Ambs, Tensed),
     !.
choose_tensed([W-Old-Ca-Score|Ambs], Tensed):-
     choose_tensed(Ambs, Tensed),
     !.

extract_ibars(SArgs, Head):-
    findall(K-ibar-All, (funcs(ibar, K, Head, ibar-All),list(All)), 
                    Args),
    findall(Head, funcs(ibar, K, Head, ibar-All), 
                    Heads),
    sort(Args,SArgs),
    sort(Heads,Head),
      !.

checkuniq([[Cat]-1-Word|Rest], [Word-NBnets-ONet-Cat|List], [W1-Labb-ACs|Parse]):-   
    unique(Word-Cat, Rest, [W1, Cat1, W2, Cat2]),
    findall(Net, 
            try_cats(Net, 1, Ope, [Cat1], Lab, NoTo, Net), BNets),
    disnets(W,Oldnets,ANets,ANet,A,B,N),
    togli_doppi(BNets, NBnets),
    defaultcont(Nf, W, Word, ANets, NBnets, A, [Cat1], Labs, ONet, ACs),
    (Labs=L-La, Labb=La; Labb=Labs),
    disassertnets(Word,ANets,BNets,Net,[Cat1],Labb, ACs),
   (
    Rest=[], List=[], Parse=[],
    !
    ;
    checkuniq([[Cat2]-1-W2|Rest], List, Parse)),
    !.

checkuniq([[Cat]-1-Word|Rest], [Word-NBnets-ONet-Cat|List], [Word-Cat-ACs|Parse]):-   
    Cat=ng,
    Rest=[Cs-N0-W1|Resto],
    verifyabbrecontr(W1,Cs,Resto,Aux),
    Aux\=[],
%   on(V,Cs), check_vcat(V),
    findall(Net, 
            try_cats(Net, 1, Ope, [Cat], Lab, NoTo, Net), BNets),
    disnets(W,Oldnets,ANets,ANet,A,B,N),
    togli_doppi(BNets, NBnets),
    defaultcont(Nf, W, Word, ANets, NBnets, A, [Cat1], Labs, ONet, ACs),
    (Labs=L-La, Labb=La; Labb=Labs),
    disassertnets(Word,ANets,BNets,Net,[Cat1],Labb, ACs),
   (
    Rest=[], List=[], Parse=[],
    !
    ;
    checkuniq([Aux|Rest], List, Parse)),
    !.

checkuniq([Cat-1-Word|Rest], [Word-NBnets-ONet-Cat|List], [Word-Labb-ACs|Parse]):-   
    findall(Net, 
            try_cats(Net, 1, Ope, Cat, Lab, NoTo, Net), BNets),
    disnets(W,Oldnets,ANets,ANet,A,B,N),
    togli_doppi(BNets, NBnets),
    defaultcont(Nf, W, Word, ANets, NBnets, A, Cat, Labs, ONet, ACs),
    (Labs=L-La, Labb=La; Labb=Labs),
    disassertnets(Word,ANets,BNets,Net,Cat,Labb, ACs),
   (
    Rest=[], List=[], Parse=[],
    !
    ;
    checkuniq( Rest, List, Parse)),
    !.

checkuniq([Cats-Nn-Word|Rest], [Word-NBnets-ONet-Cats, W-NBnets-CNet-Cs|List], [Word-C1-11, W-C3-11|Parse]):-   
     Rest=[Cs-N0-W|Resto],
     tramb(Cs),
     on(AC, Cs),
     filterB(AC),
     \+ filtv(Cs),
     Resto=[Css-N1-Wr|Res],
     findall(Net, (on(Cat, Cats), 
            try_cats(Net, 1, Ope, [Cat], Lab, NoTo, Net)), BNets),
     disnets(PW,Oldnets,ANets,ANet,A,B,N),
     togli_doppi(BNets, NBnets),
     tripless(A, Css-Wr, Word, Cats, W, AC, C1, C3, ONet),
     try_cats(AnyNet, 1, Op, [C3], Lb, NTo, CNet),
   (
    Res=[], List=[], Parse=[],
    !
    ;
    checkuniq(Res, List, Parse)),
     !.

checkuniq([Cats-Nn-Word|Rest], [Word-NBnets-ONet-Cats, W-NBnets-CNet-Cs|List], [Word-C1-11, W-C3-11|Parse]):-   
     Rest=[Cs-N0-W|Resto],
     tramb(Cats),
     on(AC, Cats),
     filterB(AC),
     \+ filtv(Cats),
     Resto=[Css-N1-Wr|Res],
     findall(Net, (on(Cat, Cats), 
            try_cats(Net, 1, Ope, [Cat], Lab, NoTo, Net)), BNets),
     disnets(PW,Oldnets,ANets,ANet,A,B,N),
     togli_doppi(BNets, NBnets),
     tripless(A, Css-Wr, Word, Cats, W, Cs, C1, C3, ONet),
     try_cats(AnyNet, 1, Op, [C3], Lb, NTo, CNet),
   (
    Res=[], List=[], Parse=[],
    !
    ;
    checkuniq(Res, List, Parse)),
     !.

checkuniq([Cats-N0-Word|Rest], [Word-NBnets-ONet-Cats, Wr-NBnets-CNet-Cs|List], [Word-Out1-11, Wr-Out2-11|Parse]):-   
    findall(Net, (on(Cat, Cats), 
            try_cats(Net, 1, Ope, [Cat], Lab, NoTo, Net)), BNets),
    disnets(W,Oldnets,ANets,ANet,A,B,N),
    togli_doppi(BNets, NBnets),
    Rest=[Cs-N1-Wr|Res],
    findall(As,soggcontr(Wr,As,_,_),H),H=[],
    biasess(A, Word, Cats, Cs, Out1, Out2, CNet, ONet),
    disassertnets(Word,ANets,BNets,ONet,Out2,Cs, 11),
   (
    Res=[], List=[], Parse=[],
    !
    ;
    checkuniq(Res, List, Parse)),
    !.

checkuniq([Cats-N0-Word|Rest], [Word-NBnets-ONet-Cats, Wr-NBnets-CNet-Cs|List], [Word-Out1-11, Wr-Out2-11|Parse]):-   
    findall(Net, (on(Cat, Cats), 
            try_cats(Net, 1, Ope, [Cat], Lab, NoTo, Net)), BNets),
    disnets(W,Oldnets,ANets,ANet,A,B,N),
    togli_doppi(BNets, NBnets),
    Rest=[Cs-N1-Wr|Res],
    Res=[Cs1-1-Wr1|Re],
    findall(As,soggcontr(Wr,As,_,_),H),H=[],
    fin_st_au(A, B, Cats, Cs, Cs1, Out1, Out2, CNet, ONet),
    disassertnets(Word,ANets,BNets,ONet,Out2,Cs, 11),
   (
    Res=[], List=[], Parse=[],
    !
    ;
    checkuniq(Res, List, Parse)),
    !.

checkuniq([Cats-N0-Word|Rest], [Word-NBnets-ONet-Cats|List], [Word-Labb-ACs|Parse]):-
    disnets(W,Oldnets,ANets,ANet,A,B,N),
    W=nil, 
    findall(Net, (on(Cat, Cats), 
            try_cats(Net, 1, Ope, [Cat], Lab, NoTo, Net)), BNets),
    togli_doppi(BNets, NBnets),
    defaultcont(Nf, W, Word, ANets, NBnets, A, Cats, Labs, ONet, ACs),
    (Labs=L-La, Labb=La; Labb=Labs),
    disassertnets(Word,ANets,BNets,ONet,Cats,Labb, ACs),
   (
    Rest=[], List=[], Parse=[],
    !
    ;
    checkuniq(Rest, List, Parse)),
    !.

checkuniq([Cats-N0-Word|Rest], [Word-NBnets-ONet-Cats|List], [Word-Labb-ACs|Parse]):-   
    findall(Net, (on(Cat, Cats), 
            try_cats(Net, 1, Ope, [Cat], Lab, NoTo, Net)), BNets),
    disnets(W,Oldnets,ANets,ANet,A,B,N),
    togli_doppi(BNets, NBnets),
    defaultcont(Nf, W, Word, ANets, NBnets, A, Cats, Labs, ONet, ACs),
    (Labs=L-La, Labb=La; Labb=Labs),
    disassertnets(Word,ANets,BNets,ONet,Cats,Labb, ACs),
   (
    Rest=[], List=[], Parse=[],
    !
    ;
    checkuniq(Rest, List, Parse)),
    !.

verifyabbrecontr(W1,Cs,Resto,Aux):-
    on(V,Cs), check_vcat(V),
    Resto=[Cs1-N0-W1|Resto],
    on(D,Cs1), dets(D),
    stringof(Verb,W1),
    (reverse(Verb,[g,n,i|_]),
     Aux=[ause]-1-is
    ;
     Aux=[ausa]-1-has
     ),    
    !.
verifyabbrecontr(W1,Cs,Resto,[]):-
    !.

disassertnets(W,Anet,Bnet,Net,A,B,N):-
    disnets(_,_,_,_,_,Ba,N0),
    abolish(disnets/7),
    (atomic(B),list(Ba),append(Ba,[B],Bb)
     ;
     atomic(B),atomic(Ba),append([Ba],[B],Bb)
     ;
     atomic(Ba),Bb=[Ba-B]
     ;
     atomic(B),Bb=[Ba-B]
     ;
     Bb=B),
    N1 is N + N0,
    assert(disnets(W,Anet,Bnet,Net,A,Bb,N1)),!.

fin_st_au([avv], B, [v, vppt, vt], Cs, Cs1, vppt, Lab, [spda], [sv3]):-
     reverse(B, [avv, punt|_]),
     (on(p,Cs), Lab=p;on(pda,Cs), Lab=pda),
      !.

defaultcont(Nfrase, W, end_of_file, PNets, end_of_file, A, C, Lab, ONet, 0):-
   on(PNet, PNets),
   on(Lab, C),
   legal_push(Lab, PNet),
   !.

defaultcont(Nfrase, nil, W, nil, PNets, nil, C, int, fint, 0):-
   wwor(W),
   !.
defaultcont(Nfrase, nil, W, nil, PNets, nil, C, Lab, PNet, 0):-
   on(PNet, PNets),
   on(Lab, C),
   legal_push(Lab, PNet),
   !.

defaultcont(Nfrase, W1, W2, [], [], A, C, Lab, PNet, 1):-
   try_cats(Net, NoTo, Ope, C, Lab, NTo, PNet),
   !.

defaultcont(Nfrase, '?', W2, [cp], PNets, A, C, int, fint, 1):-
   wwor(W2),
   !.

defaultcont(Nfrase, W1, W2, Cs, PNets, A, C, L-Lab, Net, 1):-
   biases(W2, A, C, L, Lab, Net),
   !.

defaultcont(Nfrase, W1, W2, Cs, PNets, A, C, L-Lab, Net, 1):-
   on(Net, Cs),
   on(Net, PNets),
   (list(A), nogen_member(Aa, A); Aa\=[_|_], Aa=[A]),
   try_cats(Net, 1, Ope, Aa, L, NoTo, Net),
   on(B, C),
   try_cats(Net, NoTo, Ope, [B], Lab, NTo, Net),
   !.

defaultcont(Nfrase, W1, W2, Cs, PNets, A, C, Lab, NNet, N):-
   dependent(C, Lab, NNet, PNets,N),
     !.

defaultcont(Nfrase, W1, W2, Cs, PNet, A, C, Lab, ONet, 1):-
    sequents(SNet, NoFro, C, Lab, NoTo, ONet, ACs),
    !.

legalp(PCats, RecNet,10):-
   (RecNet=sn, RN=sn1;
    RecNet=sa, RN=sa1;
    RecNet=sa, RN=saa;
    RecNet=sp, RN=sp1;
    RecNet=spd, RN=spd1),
/*   !, */
   (on(Net-_, PCats),
    trycost(Net, NoTo, push, PCs),
    on(RN-_, PCs)
    ;
   on(Net-_, PCats),
   trycost(Net, NoTo, push, PCs),
   on(NNet-_, PCs),
   trycost(NNet, NoTo, push, PhCs),
   on(RN-_, PhCs)
   ).
   

legalp(PCats, RecNet,100):-
   on(Net-_, PCats),
   trycost(Net, NoTo, push, PCs),
   on(RecNet-_, PCs).

legalp(PCats, RecNet,1000):-
   on(Net-_, PCats),
   trycost(Net, NoTo, push, PCs),
   on(NNet-_, PCs),
   trycost(NNet, NoTo, push, PhCs),
   on(RecNet-_, PhCs).

legaldp(Net, RNet, DNet, Node):-
   trycos(push, PCs, DNet),
   on(RNet-_, PCs),
   on(Net-Node, PCs).

trycost(Net, NodeFrom, cat, Cats):-
   findall(Label-NodeTo, arc(Net, NodeFrom, cat, Label, NodeTo), Cats).

trycost(Net, NodeFrom, push, Cats):-
   findall(Label-NodeTo, arc(Net, NodeFrom, push, Label, NodeTo), Cats).

trycost(Net, NodeFrom, push, Cats, Lab, NTo, Net):-
   findall(Label-NodeTo, comp_arc(Net, NodeFrom, push, Label, NodeTo), Pushes),
   on(Lab-NTo, Pushes).

trycos(push, Cats, Net):-
   tp_access(Net, Pts),
   findall(Label-NodeFrom, arc(Net, NodeFrom, push, Label, NodeTo), Cats).

xbar(Label, [C], Net, Net):-
    comp_arc(Net, NodeFrom, Op, Label, NodeTo),
    comp_arc(Net, HNode, Op, C, NodeFrom),
    !.

xbar(Label, [C], RecNet, Net):-
    comp_arc(Net, NodeFrom, Op, Label, NodeTo),
    !.

/*
xbar(Label, C, RecNet, Net):-
    Net\=RecNet,
    !.
*/

dependent(Css, Cs, RecNet, PNets,N):-
   PNets\=[],
   on(Net, PNets),
   on(Label, Css),
   legpu(Css, Ca, RecNet),
   on(Cs, Css),
   xbar(Label, [Cs], RecNet, Net),
   (
    legalp([Net-_], RecNet,N)
    ;
    legaldp(Net, RecNet, DNet, Node),
   heads(Net, Node, Label), N=1
   ),
   !.

dependent(Css, Cs, RecNet, PNets,N):-
   PNets\=[],
   on(Net, PNets),
   on(Label, Css),
   legpu(Css, Ca, RecNet),
   (
    legalp([Net-_], RecNet,N)
    ;
    legaldp(Net, RecNet, DNet, Node),
   heads(Net, Node, Label), N=1
   ),
   !.

union_dependent(Css, Label, RecNet, Net):-
   on(Label, Css),
   legpu(Css, Ca, RecNet),
   on(Cs, Css),
   xbar(Label, [Cs], RecNet, Net),
   legalp([Net-_], RecNet),
   !.

union_dependent(Css, Label, RecNet, Net):-
   on(Label, Css),
   legpu(Css, Ca, RecNet),
   on(Cs, Css),
   xbar(Label, [Cs], RecNet, Net),
   legaldp(Net, RecNet, DNet, Node),
   heads(Net, Node, Label),
   !.



hoist_cat(Cats, Label):-
   remove(virt, Cats, Ncats),
   (Ncats\=[],
    remove(virin, Ncats, NCats),
    (NCats\=[],
     on(Label, NCats)
     ;
     on(Label, Ncats))
    ;
    on(Label, Cats)),
   !.

sequents(WNet, NodeFrom, Cats, Label, NodeTo, NNet, ACats):-
     try_cats(WNet, NodeFrom, Op, Cats, Label, NodeTo, NNet),
     trycost(NNet, NodeTo, cat, ACats),
     !.

/* Cats contiene le cat di Tag1 e NNet la rete assegnata 
 viene calcolata Net sulla base di C e di NNet*/

/*
[ag, vcl]
[ag, n, vcl, vppt, agn]
[ag, n, vcl]
[n, vc, vcl, vppin]
[n, vcl]
[n, vcl, vppt, agn]
[n, vcl, vppin, vppt]
[vcl, vppt]
[vcl, vppt, agn]
[ag, intj, n, vbt]
*/


tramb([ausa, vc]).
tramb([ause, vc]).
tramb([ag, vppt, vt]).
tramb([vin, vppin, vppt, vt]).
tramb([vin, vppin, vppt, vq, vt]).
tramb([ag, pk, rel, pron]).
tramb([pk, rel]).
tramb([pk, avv, cong, deit, dim, rel]).
tramb([avv, cong, deit, dim, rel]).
/*[n, vt], C, FC*/

namb([ag, n]).

vamb([ag, pron]).
vamb([ausd, v]).
vamb([avv, in]).
vamb([ccom, cong]).
vamb([ccom, p]).
vamb([cosu, p]).
vamb([expl, avv]).
vamb([avv, nt]).
vamb([ausd, v]).
vamb([ausei, vci]).
vamb([ag, pk, rel, pron]).
vamb([pk, rel]).
vamb([in, q]).
vamb([int, rel]).
vamb([int, rel, relin]).
vamb([inta, intj, intn, q]).
vamb([n, vc]).
vamb([n, vt]).
vamb([n, vin]).
vamb([n, vbt, vt]).
vamb([n, vin, vbin]).
vamb([vbin, vbt, vin, vt]).
vamb([vbin, vin]).
vamb([n, vt, vbt]).
vamb([vbt, vt]).
vamb([vppt, vt]).
vamb([vppt, vq, vt]).
vamb([v, vppt, vt]).
vamb([v, vppin, vin]).
vamb([vppin, vin]).
vamb([vppin, vppt]).
vamb([virt, vppt]).
vamb([virin, virt, vt]).
vamb([vin, vt]).
vamb([avv, p]).
vamb([vin, vsup]).
vamb([vin, vprog]).
vamb([vin, vprog, vt]).
vamb([v, vgin, vgt, vprt]).
vamb([vgin, vgt, vprt]).
vamb([v, vprt]).
vamb([v, vgt, vprt]).
vamb([vbt, vppt, vt]).
vamb([vbt, vbin]).
vamb([n, vc, vin, vt]).
vamb([np, vin, vt]).
vamb([n, vbin, vbt]).
vamb([n, vbt]).
vamb([n, vgt, vprt]).
vamb([ag, avv, n, p, vbt]).
vamb([avv, cong, deit, dim, rel]).
vamb([p, pt]).
vamb([ag, n]).
vamb([ag, n, p, vgt]).
vamb([ag, n, vbt]).
vamb([n, vgc, vgin, vgt]).
vamb([n, vgs, vsup]).
vamb([n, vppt, agn]).
vamb([n, vppin, agn]).
vamb([n, vin, vt]).
vamb([n, vbin]).
vamb([ag, avv, p]).
vamb([vin, vppin, vppt, vt]).
vamb([vin, vppin, vppt, vq, vt]).
vamb([n, vin, vppin, vppt, vt]).
vamb([n, vppt, vt]).
vamb([in, poss, pron]).
vamb([n, vsup]).
vamb([ag, vppt, vt]).
vamb([pron, qp]).
vamb([avv, qc]).
vamb([avv, n, pron]).
vamb([p, in]).
vamb([avv, p]).
vamb([avv, p, grad]).
vamb([avv, ccom, int]).
vamb([avv, int, intj, rel]).
vamb([ausei, n, vc]).
vamb([ause, vc]).
vamb([ause, vc, vci]).
vamb([ause, vc, vppt]).
vamb([ause, vc, vin, vt]).
vamb([ausa, vc]).
vamb([ausa, vc, vci]).
vamb([nf, vgs, vsup]).
vamb([art, clitac]).
vamb([agn, vppin, vppt]).
vamb([ag, n|_]).
vamb([ag, avv, cong, n, p, vbt]).
vamb([ag, avv, p, phl, vbin, vbt]).
vamb([ag, vin, vppin, vppt, vt]).
vamb([ag, avv, n, vbin, vbt]).
vamb([ag, n, vbin, vbt]).
vamb([ag, n, vbt, vt]).
vamb([ag, vgin, vgt, vprt]).
vamb([n, vbin, vbt, vppin, vppt|_]).
vamb([n, vbt, vin, vppin, vppt, vt]).
vamb([vbin, vbt, vin, vppc, vppin, vppt, vt]).
vamb([vbin, vin, vppin, vppt]).
vamb([vbin, vbt, vin, vppin, vppt, vt]).
vamb([v, vin, vppt, vt]).
vamb([n, vgin, vgt, vprt]).
vamb([n, vbt, vppt]).
vamb([n, vbt, vppt, vt]).
vamb([vppt,vt]).
vamb([vin, vppc, vppin, vppt, vt]).
vamb([avv, cong, ext, intj]).

asff(Label, W, Cs, C1):-
    member(C1, Cs),
    asf3(Label, C1),!.

asf1(_, spesso, avv).
asf1(cong, chi, relin).
asf1(pd, chi, relin).
asf1(pda, chi, relin).
asf1(p, chi, relin).
asf1(pd, cui, relob).
asf1(pda, cui, relob).
asf1(p, cui, relob).
asf1(n, di,pd).
asf1(n, dei,partd).
asf1(n, dagli,partda).
asf1(n, e,cong).
asf1(art, di,pd).
asf1(art, dei,partd).
asf1(num, di,pd).
asf1(num, dei,partd).
asf1(punt, dei,partd).
asf1(punt, dai,partda).
asf1(ag, di,pd).
asf1(p, la,art).
asf1(pd, tipo,n).
asf1(cong, di,pd).
asf1(cong, dei,partd).
asf1(_, e, cong).
asf1(_, i, art).
asf1(_, un, art).
asf1(n, la,clit).
asf1(n, lo,clit).
asf1(n, le,clit).
asf1(part, quale,rel).
asf1(partd, quale,rel).
asf1(n, sia, cong).
asf1(n, che, rel).

asf2(relob,art).
asf2(relob,n).
asf2(relin,vt).
asf2(ag,n).
asf2(ausa, vppt).
asf2(ausei, vppt).
asf2(ause, vppt).
asf2(ause, vppin).
asf2(n,ag).
asf2(n,punt).
asf2(php,partd).
asf2(partd,n).
asf2(partda,n).
asf2(qd,n).
asf2(ccom,art).
asf2(cosu,art).
asf2(cosu,clitac).
asf2(dim,ag).
asf2(dim,n).
asf2(vt, art).
asf2(vit, art).
asf2(vt, vit).
asf2(vc, art).
asf2(vc, ag).
asf2(vc, in).
asf2(n, rel).
asf2(n, vppt).
asf2(vppin,part).
asf2(vppin,p).
asf2(vppt,partda).
asf2(vppt,p).
asf2(vppt,n).
asf2(vppt,art).
asf2(vppt,agn).
asf2(nt, avvl).
asf2(vsup, vbt).
asf2(vsup, vbin).
asf2(pt, vbt).
asf2(pt, vbin).
asf2(pt, vc).
asf2(p, vit).
asf2(p, viin).

asf3(art, n).
asf3(p,n).
asf3(p, art).

pmf(ibar).

biases(Word, A, C1, art, C, sn):-
      nonvar(C1),
      on(C, C1),
      (C=n;C=nf;C=nt;C=np;C=nh;C=npro),
      A=[art, clitac],!.

biases(Word, A, B, A1, C1, NNet):-
    nonvar(A), nonvar(B),
    (
     nogen_member(A1, A),
     asf1(A1,Word,C1),
     nogen_member(C1, B),
     ( 
      try_cats(WNet, 1, Op, [A1], Lab, NoTo, NNet),
      sequents(NNet, Node, [C1], Label, NodeTo, NNet, ACats)
      ;
      sequents(WNet, Node, [C1], Label, NodeTo, NNet, ACats))
     ;
     nogen_member(A1, A),
     nogen_member(C1, B),
     asf2(A1,C1),
     try_cats(WNet, 1, Op, [C1], Label, NodeTo, NNet)
     ;
     atomic(A), A1=A,
     nogen_member(C1, B),
     asf2(A1,C1),
     try_cats(WNet, 1, Op, [C1], Label, NodeTo, NNet)
     ), !.

/* where A contains TagLeft, C contains TagRight and B current Tag
   B1 is the chosen tag for B and SCats-->C1 is the chosen tag for C*/

filterB(in).
filterB(avv).
filterB(cong).
filterB(congf).

collnets([], [], []):-!.
collnets([Cat|Cats], [Rnet|RecNets], [Label-NodeTo|Bs]):-
     try_cats(Net, NodeFrom, Op, [Cat], Label, NodeTo, Net),
     Op1=cat,
     trycost(Net, NodeTo, Op1, Catss),
     Op2=push,
     trycost(Net, NodeTo, Op2, Pushs),
     append([Label-cat-Catss], [Label-push-Pushs], Rnet),
     collnets(Cats, RecNets, Bs),!.
  
checknets(Bs, [Cnets|Nets], RecNet, Cats, A, B):-
     Cnets\=[],
     on(A-NodeTo, Bs),
     on(B, Cats),
     on(A-cat-Nts, Cnets),
     on(B-Node, Nts),
     \+ filterB(B),
     collnets([B], RecNets, Bss),
     RecNets=[PNets],
     PNets\=[],
     on(B-push-Net, PNets),
     on(RecNet-Nod, Net),
     !.
   
checknets(Bs, [Cnets|Nets], RecNet, Cats, A, B):-
     Cnets\=[],
     on(A-NodeTo, Bs),
     on(B, Cats),
     on(A-cat-Nts, Cnets),
     on(B-Node, Nts),
     \+ filterB(B),
     Nets=[PNets],
     PNets\=[],
     on(B-push-Net, PNets),
     on(RecNet-Nod, Net),
     !.
     
checknets(Bs, [_|Pnets], RecNet, Cats, A, B):-
     Pnets=[PNets],
     PNets\=[],
     on(A-NodeTo, Bs),
     on(A-push-Nets, PNets),
     legpu(Cats, B, RecNet),
     on(RecNet-Node, Nets),
     !.

prf([vppin, vppt|_], [vppt]).
prf([virin, virt, vt], [vt]).
prf([viin, vit|_], [vit]).
prf([vin, vt|_], [vt]).
prf(Cats, [C]):-
   on(vppt, Cats), C=vppt; on(vt, Cats), C=vt; on(v, Cats), C=vt;on(vit, Cats), C=vit.
prf(C, C).

filtv(Cs):-
    on(vit, Cs);on(vt, Cs);on(vppt, Cs);on(v, Cs);
    on(viin, Cs);on(vin, Cs);on(vppin, Cs),!.

select_that(A, W2, C2, Out, Out2):-
   findall_poss(Si),
   on(I-[C-that|X], Si),
   Is is I + 1,
   on(Is-Z, Si),
   on(_-W2,Z),
   (C=c, Out=pk; C=r, Out=rel; Out=dim),
    !.

select_that([punto], W2, C2, Out1, Out2):-
    (on(vt, C2), Out2=vt;
     on(vin, C2), Out2=vin;
     on(vc,C2), Out2=vc),
    stringof(Word, W2),
    (reverse(Word, [s|RW]),
     Out1=deit;
     Out1=dim),
    !.

select_that(A, W2, C2, rel, Out2):-
    A\=[],
    on(n, A),
    (on(v, C2), Out2=vt;
     on(vt, C2), Out2=vt;
     on(vin, C2), Out2=vin;
     on(vc,C2), Out2=vc),
    stringof(Word, W2),
    reverse(Word, [s|RW]),
    !.

select_that(A, W2, C2, pk, Out2):-
    A\=[],
    on(v, A),
    checkncats(C2),
    on(Out2,C2),
    !.

select_that(A, W2, C2, dim, Out2):-
    (on(n, C2), Out2=n;
     on(nt, C2), Out2=nt;
     on(np, C2), Out2=nt;
     on(ng,C2), Out2=ng),
    stringof(Word, W2),
    reverse(Word, [S|RW]),
    S\=s,
    !.

tripless(A, C3-W3, W1, C1, W2, C2, Out1, Out2, RecNet):- 
    C1=[avv, cong, deit, dim, rel],
    select_that(A, W2, C2, Out1, Out2),
    try_cats(WNet, N, Op, [Out1], Label, NodTo, RecNet),
    !.

tripless(A, C3-W3, W1, C1, W2, C2, Out1, Out3, RecNet):- 
    biasesss(W3, C1, C3, Out1, Out3, RecNet, RecNet),
    !.

biasesss(Word, B, Cats, B1, C1, RecNet, RecNet):-
    tramb(B),
    collnets(B, RecNets, Bs),
    prf(Cats, C),
    checknets(Bs, RecNets, RecNet, C, B1, C1),
    !.

biasess(A, Word, B, C, B1, C1, CNet, NNet):-
    excep(Word, Cn),
    vamb(B),
    (
     (list(A), Aa=A; atomic(A), Aa=[A]),
     vinc(Word, B, Aa, C, B1, SCats),
     (
     try_cats(WNet, N, Op, [B1], Label, NodTo, NNet),
     (list(SCats), on(C1, SCats),
      QNet=NNet, NodeTo=NodTo
      ;
      atomic(SCats), C1=SCats,
      (QNet=NNet, NodeTo=NodTo; true)),
      ( 
       try_cats(QNet, NodeTo, Opc, [C1], CLabel, NoTo, CNet)
        ;
       try_cats(Net, NodeT, Opc, [C1], CLabel, NoTo, CNet))
       ;
      (atomic(SCats), Cc=[SCats]
       ;
       list(SCats), Cc=SCats),
      try_cats(ONet, NoFro, Op, Cc, C1, NodTo, CNet),
      dependent([B1], Lab, NNet, CNet, 1)
      )
      ),
     !.

biasess(A, Word, B, C, B1, C1, CNet, NNet):-
     C\=[p,pt],
     C\=[avv, cong, deit, dim, rel],
     vamb(B),
     vamb(C),
     (list(A), Aa=A; atomic(A), Aa=[A]),
     vinc(Word, B, Aa, C, B1, SCats),
     try_cats(WNet, N, Op, [B1], Label, NodTo, NNet),
     (atomic(SCats), C1=SCats,
      QNet=NNet, NodeTo=NodTo,
      (try_cats(QNet, NodeTo, Opc, [C1], CLabel, NoTo, CNet)
        ;
        dependent([C1], Lab, QNet, [CNet], 1)
        )
      ;
      vinc(Word, C, [B1], [], Cc, []),
      (atomic(Cc), C2=[Cc]
       ;
       list(Cc), C2=Cc),
      try_cats(ONet, NoFro, Opp, C2, C1, NodT, CNet),
      legalp([NNet-_], CNet, Nval)
      ),
     !.

biasess(A, Word, B, C, B1, C1, CNet, NNet):-
    vamb(B),
    (
     (list(A), Aa=A; atomic(A), Aa=[A]),
     vinc(Word, B, Aa, C, B1, SCats),
     (
     try_cats(WNet, N, Op, [B1], Label, NodTo, NNet),
     (list(SCats), on(C1, SCats),
      QNet=NNet, NodeTo=NodTo
      ;
      atomic(SCats), C1=SCats,
      (QNet=NNet, NodeTo=NodTo; true)),
      try_cats(QNet, NodeTo, Opc, [C1], CLabel, NoTo, CNet)
       ;
      (atomic(SCats), Cc=[SCats]
       ;
       list(SCats), Cc=SCats),
      try_cats(ONet, NoFro, Op, Cc, C1, NodTo, CNet),
      dependent([B1], Lab, NNet, [CNet], 1)
       ;
      (atomic(SCats), Cc=[SCats]
       ;
       list(SCats), Cc=SCats),
      try_cats(WNet, N, Op, [B1], Label, NodTo, NNet),
      try_cats(ONet, NoFro, Opp, Cc, C1, NodT, CNet),
      legalp([NNet-_], CNet, Nval)
      )
      ),
     !.

triples(NFile, File, Word, B, W, A, LW, C1, RecNet):- 
    read(NFile, Strn),
    (Strn=end_of_file,
     !
     ;
     Strn=tl(LW,Cats,NLems),
    biases2(NFile, Word, B, Cats, B1, C1, RecNet, RecNet),
    writelemcats(File, B1-RecNet-Word, Lems),
    writelemcats(File, A-RecNet-W, Lems)),
    !.
 
biases2(NFile, Word, B, Cats, B1, C1, RecNet, RecNet):-
    tramb(B),
    collnets(B, RecNets, Bs),
    prf(Cats, C),
    checknets(Bs, RecNets, RecNet, C, B1, C1),
    !.

biases2(NFile, Word, B, Cats, B1, C1, RecNet, RecNet):-
    tramb(B),
    collnets(B, RecNets, Bs),
    prf(Cats, C),
    checknets(Bs, RecNets, RecNet, C, B1, C1),
    !.

biases2(NFile, Word, B, C, B1, C1, CNet, NNet):-
    vamb(B),
    (
     vinc(Word, B, A, C, B1, SCats),
     (
      (D=[]; D=nil; on(B1-N, D)),
     (N=1;true),
     try_cats(WNet, N, Op, [B1], Label, NodTo, NNet),
     (list(SCats), on(C1, SCats);atomic(SCats), C1=SCats),
      (QNet=NNet, NodeTo=NodTo; true),
      try_cats(QNet, NodeTo, Opc, [C1], CLabel, NoTo, CNet)
       ;
      (atomic(SCats), Cc=[SCats];list(SCats), Cc=SCats),
      try_cats(ONet, NoFro, Op, Cc, C1, NodTo, CNet),
      dependent([B1], Lab, NNet, CNet)
      )
      ),
     !.
try_cats(Net, NodeFrom, Op, [punto], punto, NodeTo, cp):-!.

try_cats(Net, NodeFrom, Op, [punt], punt, NodeTo, fp):-!.

try_cats(Net, NodeFrom, Op, [tit], N, NodeTo, sn):-!.

try_cats(Net, NodeFrom, Op, [per_cento], N, NodeTo, sn):-!.

try_cats(Net, NodeFrom, Op, [da_riempire], N, NodeTo, sn):-!.

try_cats(Net, NodeFrom, Op, [doll], N, NodeTo, sn):-!.
try_cats(Net, NodeFrom, Op, [euro], N, NodeTo, sn):-!.
try_cats(Net, NodeFrom, Op, [pound], N, NodeTo, sn):-!.

try_cats(Net, NodeFrom, Op, [equal], N, NodeTo, sn):-!.

try_cats(Net, NodeFrom, Op, [date], N, NodeTo, sn):-!.

try_cats(Net, NodeFrom, Op, [slash], par, NodeTo, fp):-!.

try_cats(Net, NodeFrom, Op, [sect], par, NodeTo, fp):-!.

try_cats(Net, NodeFrom, Op, [star], par, NodeTo, fp):-!.

try_cats(Net, NodeFrom, Op, [par], par, NodeTo, fp):-!.

try_cats(Net, NodeFrom, Op, [dirs], dirs, NodeTo, fp):-!.

try_cats(Net, NodeFrom, Op, [segm], segm, NodeTo, cp):-!.

try_cats(Net, NodeFrom, Op, [puntint], puntint, NodeTo, cp):-!.

try_cats(Net, NodeFrom, Op, [turn], turn, NodeTo, cp):-!.

try_cats(Net, NodeFrom, Op, Cats, Label, NodeTo, Net):-
   on(Label, Cats),
   comp_arc(Net, NodeFrom, Op, Label, NodeTo).
try_cats(nil, NodeFrom, Op, [], [], NodeTo, cp):-!.
comp_arc(Net, From, Op, Sym, To) :-
		   arc(Net, From, Op, Sym, To),
     !.
heads(Net, Node, Cat) :-
       active_node_set(Cat, Net, Node, AllAn),
     sort(AllAn,AllAnSort),
		   search_active_node(Net, Node, AllAnSort, Op-To).
                 
active_node_set(Cat, Net, Node, AllAn):-
       activeOn(Net, Node, _),
       head_set(Net, Node, AllAn).

search_active_node(OldNet, Node, AllAns, Op-To):-
      on(Net-Op-To, AllAns),
      (Op=pop;OldNet=sp,Op=push), (Node=To;To=[]),
      !.

search_active_node(OldNet, Node, AllAns, Op-To):-
      on(Net-Op-To, AllAns),
      Op\=pop, Op\=push, Op=jmp, 
      heads(Net, To, Cat),
      !.

/*
search_active_node(Net, Node, AllAns, Op-To):-
      on(Net-Op-To, AllAns),
      Op=cat,
      narc(Net, Yo, Opp,Lab,Too), Opp=pop.

search_active_node(Net, Node, AllAns, Op-To):-
      Op=cat, heads(Net, To, Cat),!.
*/

activeN(Net, From, Op, To):-
       arc(Net, From, Op, Label, To) .

activeOn(Net, Node, Cat):-
       arc(Net, Node, Op, Cat, To) .

head_set(Net, From, AllAn) :-
		   findall(Net-Op-To, activeN(Net, From, Op, To), AllAn).

pre_terminal(PT) :-
		    arc(_, _, cat, PT, _).

connect_pret([Labs], Net, From, Op, To):-
       on(Label,Labs),
		   arc(Net, From, Op, Label, To).

connect_pret(Label, Net, From, Op, To):-
		   arc(Net, From, Op, Label, To).

pre_terminal_set(PTset) :-
		   findall(PT, pre_terminal(PT), AllPT),
		   sort(AllPT, PTset).

nprendi_testa(Func, Parses, Test):-
   (remove(W-par-C, Parses, Parse)
     ;
     Parse=Parses),
   prendi_testa(Func, Parse, Test),
   !.
prendi_testa(Func, Parses, Test):-
   remove(mod-Mods, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Q-q-Co|RevParse],
   reverse(Mods, RevM),
   RevM=[Testa-Cat-Cost|Rev],
   check_prons(Rev, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(mod-Mods, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Qs-n-Co|RevParse],
   lemmatize_dic(Qs, Q, S),
   qm(Q),
   reverse(Mods, RevM),
   RevM=[Testa-Cat-Cost|Rev],
   check_prons(Rev, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(mod-Mods, Parses, Parse),
   remove(W-par-C, Parse, Pars),
   reverse(Pars, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   (Cat\=par, 
    CCat=Cat, TTesta=Testa
    ;
    Cat=par,
    RevParse=[TTesta-CCat-Cost|RevPar]),    
   check_prons(RevP, CCat, TTesta, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(mod-Mods, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(obl-Mods, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(appos-Mods, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(f2-Mods, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(F-Mods, Parses, Parse),
   list(Mods),
   reverse(Parse, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(and-Cong-C, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(W-ccom-C, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   remove(W-par-C, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Testa-Cat-Cost|RevParse],
   (Cat\=par, 
    CCat=Cat, TTesta=Testa
    ;
    Cat=par,
    RevParse=[TTesta-CCat-Cost|RevPar]),    
   check_prons(RevP, CCat, TTesta, Test),
   !.

prendi_testa(Func, Parses, Test):-
    reverse(Parses, RevP),
    RevP=[Testa-Cat-Cost|RevParse],
    check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testa(Func, Parses, Test):-
   is_list(Parses),
   length(Parses,L),
   2<L,
   remove(F-Mods, Parses, Parse),
   prendi_testa(Func, Parse, Test),
   !.

prendi_testa(Func, Parses, Test):-
   is_list(Parses),
   length(Parses,L),
   L=<2,
   on(A-B-C,Parses),
   make_list(Parses,List),
   reverse(List,[Test|_]),
   !.
   
check_prons(Parse, pers, Testa, [pers,Testa]):-!.
check_prons(Parse, pron, Testa, [pron,Testa]):-
    Testa\=s_,!.

check_prons(Parse, Cat, Testa, Testa):-
   (on(Pron-poss-Cost, Parse)
    ;
   on(Pron-dim-Cost, Parse)
    ;
   on(Pron-deit-Cost, Parse)),
   !.
check_prons(Parse, Cat, Testa, Test):-
   qm(Testa),
   on(Test-C-Cost, Parse),
   nouncats(C),
   Test\=Testa,
   !.
check_prons(Parse, Cat, Testa, Testa):-!.
 
wwor(how).
wwor(how_many).
wwor(who).
wwor(what).
wwor(which).
wwor(when).
wwor(why).
wwor(where).
wwor(whom).
wwor(whose).
wwor(whatsoever).



/*
 vinc(A, B, C, Cs, C1, Cc)
 A = current word, 
 B = its categories,
 C = categories previous word, 
 Cs = categories following word
 C1 = imposed choice for current word, 
 Cc = imposed category for following 
 word

i(','-[punt]-punt-fp).
i(which-[int, rel]-int-fint).

[n, vbt, vppt, vt]
[pk, exc, int, q, rel]
[ag, vppt, vt]
[n, vgc, vgin, vgt]
[nf, vgs, vsup]
[vin, vprog]
[vin, vprog, vt]
[vin, vppin, vppt, vt]
*/

vinc(A, B, C, Cs, C1, Cc):-
   vinc1(A, B, C, Cs, C1, Cc),!.
vinc(A, B, C, Cs, C1, Cc):-
   vinc2(A, B, C, Cs, C1, Cc),!.


vinc1(_,[p, in], PC, Cats, in, Cats):-
     on(num,Cats),
     !.
vinc1(_,[inta, intj, intn, q], _, Cats, q, Cats):-
    on(N,Cats), (nouncats(N);proncat(N)),
     !.
vinc1(_,[ccom, p], PC, Cats, ccom, Cats):-
    (on(N,Cats), check_vcat(N);
      on(N,PC), check_vcat(N)),
         !.
vinc1(_,[ccom, p], PC, Cats, p, Cats).

vinc1(_,[cosu, p], PC, Cats, ccom, Cats):-
    (on(N,Cats), check_vcat(N);
      on(N,PC), check_vcat(N)),
         !.
vinc1(_,[cosu, p], PC, Cats, p, Cats).

vinc1(_,[ccom, cong], PC, Cats, cong, Cats):-
    (on(N,Cats), check_vcat(N);
      on(N,PC), check_vcat(N)),
         !.
vinc1(_,[ausd, v], PC, Cats, v, Cats):-
     on(neg,PC), 
     !.
vinc1(_,[av, in], PC, Cats, av, Cats):-
     on(x,Cats), 
     !.
vinc1(_,[pk, rel], PC, Cats, rel, Cats):-
    on(N,PC), (nouncats(N);proncat(N)).
vinc1(_,[ag, pk, rel, pron], PC, Cats, rel, Cats):-
    on(N,PC), (nouncats(N);proncat(N)).
vinc1(_,[ag, pk, rel, pron], PC, Cats, pk, Cats):-
    on(N,Cats), proncat(N).
vinc1(_,[ag, pk, rel], PC, Cats, pk, Cats):-
    on(N,Cats), proncat(N).
vinc1(_,[int, rel], [n], Cats, rel, Cats).
vinc1(_,[int, rel], [nh], Cats, rel, Cats).
vinc1(_,[int, rel, relin], [n], Cats, rel, Cats).
vinc1(_,[int, rel, relin], [nh], Cats, rel, Cats).
vinc1(_,[int, rel], [q], Cats, rel, Cats).
vinc1(_,[int, rel, relin], [q], Cats, rel, Cats).
vinc1(_,[int, rel], [punt], Cats, rel, Cats).
vinc1(Q,[int, rel, relin], [punt], Cats, rel, Cats):-
   Q\=why.
vinc1(_,[int, rel], PC, Cats, rel, Cats):-
    on(N,PC), nouncats(N),
     !.
vinc1(_,[int, rel, relin], PC, Cats, rel, Cats):-
    on(N,PC), nouncats(N),
     !.
vinc1(_,[ag, pron], PC, Cats, pron, Cats):-
    on(N,Cats), (N=rel;check_vcat(N)),
     !.

vinc1(_,[avv, nt], [ag], Cats, nt, Cats).

vinc1(_,[in, q], PC, Cats, in, Cats):-
    on(N,Cats), (nouncats(N);proncat(N)),
     !.
vinc1(_,[in, q], PC, Cats, in, Cats):-
    on(N,Cats), N=avv,
     !.
vinc1(_,[in, q], PC, Cats, q, Cats).
vinc1(_,[pk, rel], PC, Cats, pk, Cats).

vinc1(_,[vppin, vin], PC, Cats, vin, Cats):-
    on(N,PC), (on(art, PC);on(ag, PC);nouncats(N);proncat(N)),
     !.
vinc1(_,[vppin, vin], ausei, Cats, vppin, Cats):-
    on(avv, Cats);on(Cat,Cats),
     !.
vinc1(_,[vppin, vin], PC, Cats, ppas, Cats):-
    on(art, PC);on(ag, PC),
     !.
vinc1(_,[vppin, vin], PC, Cats, vin, Cats):-
    on(N,PC), (nouncats(N);proncat(N)),
     !.
vinc1(_,[vppin, vin], PC, Cats, vppin, Cats):-
    on(N,Cats), (on(art, Cats);on(ag, Cats);nouncats(N);proncat(N)),
     !.
vinc1(_,[vppt, vt], PC, Cats, ppas, Cats):-
    on(art, PC);on(ag, PC),
     !.
vinc1(_,[vppt, vt], PC, Cats, vt, Cats):-
    on(N,PC), (nouncats(N);proncat(N))
     ;on(punto,Cats),
     !.
vinc1(_,[vppt, vt], ausei, Cats, vppt, Cat):-
    on(avv, Cats);on(Cat,Cats),
     !.
vinc1(_,[vppt, vt], ausai, Cats, vppt, Cat):-
    on(avv, Cats),Cat=avv;on(Cat,Cats),
     !.
vinc1(_,[vppt, vt], PC, Cats, vppt, Cats):-
    on(N,Cats), (on(art, Cats);on(ag, Cats);nouncats(N);proncat(N)),
     !.
vinc1(_,[vppt,vq, vt], PC, Cats, ppas, Cats):-
    on(art, PC);on(ag, PC),
     !.
vinc1(_,[vppt,vq, vt], PC, Cats, vt, Cats):-
    on(N,PC), (nouncats(N);proncat(N))
     ;on(punto,Cats),
     !.
vinc1(_,[vppt,vq, vt], ausei, Cats, vppt, Cat):-
    on(avv, Cats);on(Cat,Cats),
     !.
vinc1(_,[vppt,vq, vt], ausai, Cats, vppt, Cat):-
    on(avv, Cats),Cat=avv;on(Cat,Cats),
     !.
vinc1(_,[vppt,vq, vt], PC, Cats, vppt, Cats):-
    on(N,Cats), (on(art, Cats);on(ag, Cats);nouncats(N);proncat(N)),
     !.
vinc1(_,[v, vppt, vt], PC, Cats, v, Cats):-
    on(N,Cats), (on(art, Cats);on(ag, Cats);on(pk, Cats);nouncats(N);proncat(N)),
     !.
vinc1(_,[v, vppt, vt], PC, Cats, vt, Cats):-
    on(N,PC), (nouncats(N);proncat(N))
     ;on(punto,Cats),
     !.
vinc1(_,[v, vppin, vin], PC, Cats, vin, Cats):-
    on(N,PC), (nouncats(N);proncat(N)),
     !.
vinc1(_,[v, vppin, vin], PC, Cats, vppin, Cats):-
    on(N,Cats), (on(art, Cats);on(ag, Cats);nouncats(N);proncat(N)),
     !.

vinc1(_,[vbt, vt], PC, Cats, vt, Cats):-
     on(pers, PC);on(punto,Cats),
     !.
vinc1(_,[vbt, vt], PC, Cats, vt, Cats):-
     on(pron, Cats);on(punto,Cats),
     !.
vinc1(_,[vbt, vt], PC, Cats, vbt, Cats):-
    (on(art, PC);on(n,PC);on(np,PC)),
     !.

vinc1(_,[vbt, vt], ausei, Cats, vbt, Cat):-
    on(avv, Cats);on(Cat,Cats),
     !.
vinc1(_,[vbt, vt], ausai, Cats, vbt, Cat):-
    on(avv, Cats),Cat=avv;on(Cat,Cats),
     !.

vinc1(_,[ag, vppt, vt], PC, Cats, vppt, Cats):-
     on(V, PC),
     check_vcat(V),
     !.

vinc1(_,[ag, vppt, vt], PC, Cats, vt, Cats):-
    on(N,Cats), (on(art, Cats);on(ag, Cats);nouncats(N);proncat(N)),
     !.

vinc1(_, [vcl, vppt], PC, art, vcl, art).

vinc1(W, [n, vt], PC, FC, vt, FC):-
     on(punto,FC), 
     verbs_of_saying(W),
     PC\=num,PC\=art,PC\=ag,
     !.

vinc1(W, [n, vt], PC, FC, n, FC):-
     on(punto,FC), 
     !.

vinc1(W, [n, vt], PC, FC, n, FC):-
     on(V, PC),
     check_vcat(V),
     !.

vinc1(W, [n, vt], PC, FC, n, FC):-
     on(V, FC),
     check_vcat(V),
     !.

vinc1(W, [n, vt], PC, FC, n, FC):-
    (on(art, PC);on(poss, PC);on(ag, PC);on(q, PC);on(dim, PC)),
     !.

vinc1(W, [n, vt], PC, FC, vt, FC):-
    on(N,PC),(nouncats(N);proncat(N)),
     !.

vinc1(_, [n, vc], PC, FC, n, FC):-
    on(art, PC);on(poss, PC);on(ag, PC);on(q, PC),
    !.

vinc1(_, [n, vc], PC, FC, vc, FC):-
     on(punto,FC), 
     PC\=num,PC\=art,PC\=ag,!.

vinc1(_, [n, vc], PC, FC, vc, FC):-
    on(N,PC), (nouncats(N);proncat(N)),
    !.

vinc1(_, [vppt, vt], PC, FC, vt, FC):-
     on(punto,FC),!.

vinc1(_, [vin, vppin, vppt|_], PC, FC, vppt, FC):-
    on(ause,PC),!.

vinc1(_, [vin, vppin, vppt|_], PC, FC, vppt, FC):-
    on(ausa,PC),!.

vinc1(_, [vin, vppin, vppt|_], PC, FC, ag, FC):-
      on(N,PC),detss(N),
    on(N1,FC), (nouncats(N1);proncat(N1)),
    !.
vinc1(W, [vin, vppin, vppt|_], PC, FC, ag, FC):-
     on(p, PC),
     on(N,FC),(nouncats(N);proncat(N);N=ag),
     \+ v(W,_),
    !.

vinc1(_, [vin, vppin, vppt|_], PC, FC, vt, FC):-
    on(N,PC), (nouncats(N);proncat(N)),
    on(N1,FC), (nouncats(N1);proncat(N1)),
    !.

vinc1(_, [vin, vppin, vppt|_], PC, [pk,rel], vt, pk):-
    !.

vinc1(_, [vin, vppin, vppt|_], PC, [p,pt], vt, [p,pt]):-
    !.

vinc1(_, [n, vin, vppin, vppt|_], PC, FC, vt, FC):-
    on(N,PC), (nouncats(N);proncat(N)),
    on(N1,FC), (nouncats(N1);proncat(N1)),
    !.

vinc1(_, [vin, vppin, vppt|_], PC, FC, vt, FC):-
    on(n,PC),(on(punto,FC);on(punt,FC);on(avv,FC)),!.

vinc1(_, [n, vc, vin, vt], [avv], [p], vin, p):-!.

vinc1(_, [n, vc, vin, vt], avv, [p], vin, p):-!.

vinc1(_, [n, vc, vin, vt], PC, [dirs], vin, dirs):-!.

vinc1(_, [n, vc, vin, vt], PC, FC, vt, FC):-
      on(N,PC), (nouncats(N);proncat(N)),       
     !.

vinc1(_, [n, vc, vin, vt], PC, FC, vt, FC):-
           on(N,FC), nouncats(N),!.

vinc1(_, [np, vin, vt], [avv], [p], vin, p):-!.

vinc1(_, [np, vin, vt], avv, [p], vin, p):-!.

vinc1(_, [np, vin, vt], PC, [dirs], vin, dirs):-!.

vinc1(_, [np, vin, vt], PC, FC, vt, FC):-
      on(N,PC), (nouncats(N);proncat(N)),       !.

vinc1(_, [np, vin, vt], PC, FC, vt, FC):-
           on(N,FC), nouncats(N),!.

vinc1(_, [n, vin, vbin], [vsup], Cats, vbin, Cats):-!.

vinc1(_, [n, vin, vbin], [n], [n, vin, vbin], vin, n):-!.

vinc1(_, [n, vt, vbt], [vsup], Cats, vbt, Cats):-!.

vinc1(_, [n, vt, vbt], [n], [n, vt, vbt], vt, n):-!.

vinc1(_, [n, vt, vbt], PC, Cats, n, Cats):-
    on(N,PC), (on(art, PC);on(ag, PC);nouncats(N);proncat(N)),
    !.

vinc1(_, [n, vt, vbt], PC, Cats, vt, Cats):-
    on(N,Cats), (on(art, Cats);on(pt, Cats);on(ag, Cats);nouncats(N);proncat(N)),
    !.

vinc1(_, [n, vbt, vt], [vsup], Cats, vbt, Cats):-!.

vinc1(_, [n, vbt, vt], [n], [n, vt, vbt], vt, n):-!.

vinc1(_, [n, vbt, vt], PC, Cats, n, Cats):-
    on(N,PC), (on(art, PC);on(ag, PC);on(q, PC);nouncats(N);proncat(N)),
    !.

vinc1(_, [n, vbt, vt], PC, Cats, vt, Cats):-
    on(N,Cats), (on(art, Cats);on(pt, Cats);on(ag, Cats);on(q, PC);nouncats(N);proncat(N)),
    !.

vinc1(_, [vbin, vbt, vin, vt], [vsup], Cats, vbt, Cats):-!.

vinc1(_, [vbin, vbt, vin, vt], [n], [n, vt, vbt], vt, n):-!.

vinc1(_, [vbin, vbt, vin, vt], PC, Cats, vt, Cats):-
    on(N,Cats), (on(art, Cats);on(pt, Cats);on(ag, Cats);on(q, PC);nouncats(N);proncat(N)),
    !.

vinc1(_, [vbin, vin], PC, Cats, vt, Cats):-
    on(N,Cats), (on(art, Cats);on(pt, Cats);on(ag, Cats);on(q, PC);nouncats(N);proncat(N)),
    !.

vinc1(_, [vin, vprog], PC, FC, vprog, pd):-
   on(pd, FC),!.

vinc1(_, [vin, vprog, vt], PC, FC, vprog, pd):-
   on(pd, FC),!.

vinc1(_, Cs, PC, [vbt, vbin], pt, [vbt, vbin]):-
   on(pt, Cs),!.

vinc1(_, Cs, PC, Cats, pt, C):-
   (on(vbin, Cats), C=vbin;on(vbt, Cats), C=vbt;on(ausei,Cats), C=ausei;on(ausai,Cats), C=ausai),
   on(pt, Cs),!.

vinc1(_, [ag, n, vbt], PC, C, n, C):-
    on(vgin, PC), \+ nogen_member(n, C),!.

vinc1(W, [ag, n], PC, Cats, ag, N):-
    on(N, Cats), nouncats(N),!.

vinc1(_, [ag, n], art, Cats, ag, Cats):-!.
vinc1(_, [ag, n], avv, FC, ag, FC):-!.

vinc1(_, [n, vsup], PC, FC, vsup, FC):-
    on(int,PC).

vinc1(_, [n, vsup], PC, FC, vsup, FC):-
    on(pers,PC);on(pron,PC).

vinc1(_, [n, vsup], PC, FC, vsup, FC):-
     on(V, [vt, vbt, ausei, vci, vbin]),
     on(V, FC),!.

vinc1(_, [n, vsup], PC, FC, agn, FC):-
  on(n, FC), 
  \+ nogen_member(vt, FC),!.

vinc1(_, [nf, vgs, vsup], PC, FC, vsup, FC):-
    on(int,PC).

vinc1(_, [nf, vgs, vsup], PC, FC, vsup, FC):-
     on(V, [vt, vbt, ausei, vci, vbin, neg, avv]),
     on(V, FC),!.

vinc1(_, [n, vgs, vsup], PC, FC, vsup, FC):-
    on(int,PC).

vinc1(_, [n, vgs, vsup], PC, FC, vsup, FC):-
     on(V, [vt, vbt, ausei, vci, vbin, neg, avv]),
     on(V, FC),!.


vinc1(_, [pron, qp], PC, FC, qp, n):-
  on(n, FC), !.

vinc1(_, [n, vin, vt], avv, FC, vin, FC).

vinc1(_, [n, vin, vt], p, FC, n, FC).

vinc1(_, [n, vin, vt], n, FC, vt, FC).

vinc1(_, [n, vin, vt], nf, FC, vt, FC).

vinc1(_, [n, vin, vt], PC, FC, vt, FC):-
   on(art,FC); checkncats(FC).

vinc1(_, [n, vin, vt], PC, FC, vt, FC):-
   checkncats(PC).

vinc1(_, [n, vin, vt], PC, [avv, cong, deit, dim, rel], vt, pk).

vinc1(_, [vgin, vgt, vprt], PC, [avv, cong, deit, dim, rel], vgt, pk).

vinc1(_, [v, vgin, vgt, vprt], PC, Cats, vgt, Cats).

vinc1(_, [v, vgt, vprt], PC, [pk, rel], vgt, pk).

vinc1(_, [v, vgt, vprt], PC, Cats, vgt, Cats).

vinc1(_, [v, vprt], PC, Cats, vprt, Cats).

vinc1(_,[vbt, vppt, vt], rel,Cats, vt, Cats).

vinc1(_,[vbt, vppt, vt], PC,Cats, vppt, Cats):-
   on(ausa, PC),!.

vinc1(as, [avv, cong], punto, C, ccong, C):-!.
vinc1('As', [avv, cong], punto, C, ccong, C):-!.
vinc1(as, [avv, cong], n, Cats, cong, ag):-
    on(ag, Cats),!.
vinc1(than, [avv, cong], n, Cats, cong, ag):-
    on(ag, Cats),!.
vinc1(and, [cong, congf], PC, Cats, cong, Cats).
vinc1(like, [ag, avv, cong, n, p, vbt], PC, FC, ccom, C):-
    (on(n, FC), C=n;on(art,FC), C=art),
    !.
vinc1(as, [avv, ccom, int], PC, [cosu], congf, cosu):-
    (PC=punt; PC=punto; PC=dirs; PC=puntint),!.

vinc1(_, [in, poss, pron], PC, FC, poss, n):-
    on(n, FC),!.



vinc1(W, [vin, vt], PC, FC, ag, FC):-
      on(N1,PC), detss(N1),
      on(N,FC),(nouncats(N);proncat(N)),
     \+ v(W,_),
    !.

vinc1(_, [vin, vt], PC, FC, vt, C):-
    on(pk, FC), C=pk; on(art, FC), C=art; on(q, FC), C=q;
    on(ag, FC), C=ag,
    !.


vinc1(_, [ag, avv, n, vbin, vbt], PC, FC, ag, FC):-
    on(pt,FC),!.

vinc1(_, [ag, avv, n, vbin, vbt], PC, FC, Cat, FC):-
    on(art,FC),
    (PC=neg, Cat=vbt;PC=ausa, Cat=vbt; PC=ause, Cat=vbn),!.

vinc1(_, [ag, vin, vppin, vppt, vt], PC, FC, Cat, FC):-
    PC=neg, Cat=vppt;PC=ausa, Cat=vppt; PC=ause, Cat=vppt,!.

vinc1(_, [ag, vin, vppin, vppt, vt], PC, FC, Cat, FC):-
    on(ausa,PC), Cat=vppt; on(ause,PC), Cat=vppt,!.

vinc1(_, [n, vin, vppin, vppt, vt], PC, FC, Cat, FC):-
    on(ausa,PC), Cat=vppt; on(ause,PC), Cat=vppt,!.

vinc1(_, [ag, vin, vppin, vppt, vt], PC, FC, vt, C):-
    on(pt, FC), C=pt; on(pk, FC), C=pk;
    on(art, FC), C=art; on(ag, FC), C=ag;
    on(avv, FC), C=avv; on(q, FC), C=q;
    checkncats(FC), C=FC,!.

vinc1(_, [n, vin, vppin, vppt, vt], PC, FC, vt, C):-
    on(pt, FC), C=pt; on(pk, FC), C=pk;
    on(art, FC), C=art; on(ag, FC), C=ag; 
    on(avv, FC), C=avv; on(q, FC), C=q;
    checkncats(FC), C=FC,!.

vinc1(_, [n, vbt], PC, FC, n, FC):-
   on(vgin, PC);on(vprt, PC),!.

vinc1(_, [n, vbt], PC, FC, n, FC):-
   on(art, PC);on(ag, PC),!.

vinc1(_, [n, vbt], PC, FC, vt, C):-
    PC\=art,
    (on(pk, FC), C=pk; on(art, FC), C=art; on(ag, FC), C=ag;
    on(n, FC), C=n),!.

vinc1(_, [n, vbt], PC, FC, vt, FC):-
    PC\=art,!.

vinc1(_, [n, vbt], PC, FC, vbin, FC):-
   on(p, FC),!.

vinc2(_, [n, vbin, vbt], PC, FC, n, FC):-
   on(art, PC);on(ag, PC),!.

vinc2(_, [n, vbin, vbt], PC, FC, n, FC):-
   on(vgin, PC);on(vprt, PC),!.

vinc2(_, [n, vbin, vbt], PC, FC, vbin, FC):-
   on(p, FC),!.

vinc2(_, [n, vbin, vbt], PC, FC, vbin, FC):-
   on(neg, PC),!.

vinc2(_, [n, vbin, vbt], PC, FC, vt, C):-
    PC\=art,
    (on(pk, FC), C=pk; on(art, FC), C=art; 
     on(ag, FC), C=ag; on(q, FC), C=q;
     on(n, FC), C=n),!.

vinc2(_, [ag, n, vbin, vbt], PC, FC, n, FC):-
   on(art, PC);on(ag, PC);on(q, PC),!.

vinc2(_, [ag, n, vbin, vbt], PC, FC, n, FC):-
   on(vgin, PC);on(vprt, PC),!.

vinc2(_, [ag, n, vbin, vbt], PC, FC, vbin, FC):-
   on(pt, PC),!.

vinc2(_, [ag, n, vbin, vbt], PC, FC, vbin, FC):-
   on(p, FC),!.

vinc2(_, [ag, n, vbin, vbt], PC, FC, vt, C):-
    PC\=art,
    (on(pk, FC), C=pk; on(art, FC), C=art; on(ag, FC), C=ag;
    on(n, FC), C=n),!.

vinc2(_, [ag, n, vbt, vt], PC, FC, vbt, FC):-
   on(pt, PC),!.

vinc2(_, [ag, n, vbt, vt], PC, FC, n, FC):-
   on(art, PC);on(ag, PC);on(q, PC),!.

vinc2(_, [ag, n, vbt, vt], PC, FC, n, FC):-
   on(vgin, PC);on(vprt, PC),!.

vinc2(_, [ag, n, vbt, vt], PC, FC, vbt, FC):-
   on(p, FC),!.

vinc2(_, [ag, n, vbt, vt], PC, FC, vt, C):-
    PC\=art,
    (on(pk, FC), C=pk; on(art, FC), C=art; on(ag, FC), C=ag;
    on(n, FC), C=n),!.

vinc2(_, [n, vbin, vbt, vppin, vppt|_], pt, FC, vbt, FC):-!.

vinc2(_, [n, vbin, vbt, vppin, vppt|_], PC, FC, vt, FC):-
    (on(n, FC);on(art,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [n, vbt, vin, vppin, vppt|_], pt, FC, vbt, FC):-!.

vinc2(_, [n, vbt, vin, vppin, vppt|_], PC, FC, vt, FC):-
    (on(pk, FC), C=pk; on(art, FC), C=art; on(ag, FC), C=ag;
    on(n, FC), C=n),!.

vinc2(_, [n, vbt, vin, vppin, vppt|_], PC, FC, vt, FC):-
    (on(n, FC);on(art,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.
vinc2(_, [vbin, vin, vppin, vppt], pt, FC, vbin, FC):-!.

vinc2(_, [vbin, vin, vppin, vppt], PC, FC, vin, FC):-
    (on(pk, FC), C=pk; on(art, FC), C=art; on(ag, FC), C=ag;
    on(n, FC), C=n),!.

vinc2(_, [vbin, vin, vppin, vppt], PC, FC, vin, FC):-
    (on(n, FC);on(art,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.
vinc2(_, [vbin, vbt, vin, vppin, vppt, vt], pt, FC, vbt, FC):-!.

vinc2(_, [vbin, vbt, vin, vppin, vppt, vt], PC, FC, vt, FC):-
    (on(pk, FC), C=pk; on(art, FC), C=art; on(ag, FC), C=ag;
    on(n, FC), C=n),!.

vinc2(_, [vbin, vbt, vin, vppin, vppt, vt], PC, FC, vt, FC):-
    (on(n, FC);on(art,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.


vinc2(_, [vin, vppin, vppt, vt], pt, FC, vt, FC):-!.

vinc2(_, [vin, vppin, vppt, vt], PC, FC, ag, FC):-
      on(N,PC),(nouncats(N);proncat(N)),
      on(N,FC),(nouncats(N);proncat(N)),
    !.
/*
vinc2(_, [vin, vppin, vppt, vt], PC, FC, ag, FC):-
     on(p, PC),
     on(N,FC),(nouncats(N);proncat(N)),
    !.
*/

vinc2(_, [vin, vppin, vppt, vt], PC, FC, vt, FC):-
    (on(pk, FC), C=pk; on(art, FC), C=art; on(ag, FC), C=ag;
    on(n, FC), C=n),!.

vinc2(_, [vin, vppin, vppt, vt], PC, FC, vt, FC):-
    (on(n, FC);on(art,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.


vinc2(_, [n, vbt, vppt], pt, FC, vbt, FC):-!.

vinc2(_, [n, vbt, vppt], PC, FC, vt, FC):-
    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [n, vbt, vppt, vt], pt, FC, vbt, FC):-!.

vinc2(_, [n, vbt, vppt, vt], PC, FC, vt, FC):-
    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [n, vppt, vt], PC, FC, vppt, FC):-
     on(V, PC),
     check_auxcat(V),
    !.

vinc2(_, [n, vppt, vt], PC, FC, vt, FC):-
    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [vppt, vt], PC, FC, vppt, FC):-
     on(V, PC),
     check_auxcat(V),
    !.

vinc2(_, [vppt, vt], PC, FC, vt, FC):-
    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [vin, vppc, vppin, vppt, vt], PC, FC, vppt, FC):-
     on(V, PC),
     check_auxcat(V),
    !.

vinc2(_, [vin, vppc, vppin, vppt, vt], PC, FC, vt, FC):-
    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [vbin, vbt, vin, vppc, vppin, vppt, vt], PC, FC, vppt, FC):-
     on(V, PC),
     check_auxcat(V),
    !.

vinc2(_, [vbin, vbt, vin, vppc, vppin, vppt, vt], PC, FC, vt, FC):-
    (on(art,PC);on(ag,PC);
     on(N,PC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [v, vin, vppt, vt], PC, FC, vin, FC):-
   on(punt,FC).
vinc2(_, [v, vin, vppt, vt], PC, FC, vt, FC):-
    (on(n, FC);on(art,FC);
     on(N,FC),(nouncats(N);proncat(N))),
     !.
vinc2(_, [v, vin, vppt, vt], PC, FC, vt, FC):-
    (on(pk, FC), C=pk; on(art, FC), C=art; on(ag, FC), C=ag;
    on(n, FC), C=n),!.


vinc2(_, [p, pt], PC, FC, pt, FC):-
    (on(vbin,FC);on(vbt,FC);on(ausd,FC)),
    !.

vinc2(_, [p, pt], PC, FC, p, FC):-
    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [avv, p], PC, FC, avv, FC):-
    on(p,PC),
    !.
vinc2(_, [avv, p], PC, FC, p, FC):-
    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.
vinc2(_, [avv, p, grad], PC, FC, grad, FC):-
    on(p,PC), 
    (    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N)))
    ),
    !.

vinc2(_, [avv, p, grad], PC, FC, avv, FC):-
    on(p,PC),
    !.

vinc2(_, [avv, p, grad], PC, FC, p, FC):-
    on(art,FC)
    ;
    on(ag,FC)
    ;
     on(N,FC),
      (nouncats(N);proncat(N)),
    !.

vinc2(_, [avv, p, in], PC, FC, in, FC):-
    on(p,PC), 
    (
    on(art,FC)
    ;
    on(ag,FC)
    ;
     on(N,FC),
      (nouncats(N);proncat(N))
     ),
    !.

vinc2(_, [avv, p, in], PC, FC, avv, FC):-
    on(p,PC),
    !.

vinc2(_, [avv, p, in], PC, FC, p, FC):-
    (on(art,FC);on(ag,FC);
     on(N,FC),(nouncats(N);proncat(N))),
    !.

vinc2(_, [avv, n, pron], PC, FC, pron, FC):-
     on(V, FC),
     check_vcat(V),
/* on(V, [vc, viin, vin, vppin, vppt,vt, vit]),
*/
      !.

vinc2(_, [ag, vgin, vgt, vprt], PC, FC, ag, FC):-
    on(n, FC),
    !.

vinc2(_, [ag, vgin, vgt, vprt], PC, FC, vgt, FC):-
    on(art,FC),
    !.

vinc2(_, [ag, vgin, vgt, vprt], PC, FC, vgin, FC):-
    on(p,FC),
    !.

vinc2(all, [avv, qc], PC, FC, qc, art):-
    on(art,FC),!.

vinc2(_, [n, vgs, vsup], PC, FC, vsup, FC):-
     on(V, [vt, vbt, ausei, vci, vbin]),
     on(V, FC),!.

vinc2(_, [nf, vgs, vsup], PC, FC, vsup, FC):-
     on(V, [vt, vbt, ausei, vci, vbin]),
     on(V, FC),!.

vinc2(_, [intj, n, vbt], PC, FC, vbt, FC):-
    (on(n, FC);on(art,FC)),
    !.

vinc2(_, [ag, avv, p], PC, FC, p, FC):-
    (on(n, FC);on(art,FC)),
    !.

vinc2(_, [avv, p], PC, FC, p, FC):-
    (on(n, FC);on(art,FC)),
    !.

vinc2(_, [avv, cong, deit, dim, rel], PC, FC, deit, FC):-
    atomic(PC), PC=qc;list(PC),on(qc,PC),!.

vinc2(_, [avv, cong, deit, dim, rel], ag, [ag,n], cong, ag).

vinc2(_, [avv, cong, deit, dim, rel], PC, FC, dim, FC):-
    (on(n, FC);on(art,FC);on(ag,FC)),
    !.

vinc2(_, [avv, cong, deit, dim, rel], PC, Cats, pk, Cats):-
    on(V, PC),
     check_vcat(V),
%    on(V, [vc, viin, vin, vppin, vppt,vt, vit]),
    !.

vinc2(_, [ag, avv, p, phl, vbin, vbt], V, Cats, avv, Cats):-
    (on(p, Cats); on(pda,Cats)),
    !.

vinc2(_, [ag, avv, p, phl, vbin, vbt], PC, Cats, p, Cats):-
    on(V, PC),
     check_vcat(V),
%    on(V, [vc, viin, vin, vppin, vppt,vt, vit]),
    !.

vinc2(_, [avv, cong, deit, dim, rel], ag, C, pk, C).

vinc2(_, [avv, cong, deit, dim, rel], PC, C, rel, C):-
    on(V, C),
     check_vcat(V),
%    on(V, [vc, viin, vin, vppin, vppt,vt, vit]),
    !.

vinc2(_, [avv, cong, ext, intj], PC, C, ext, C):-
     on(V, C),
     check_vcat(V),
     !.

vinc2(_, [n, vgc, vgin, vgt], PC, C, vgin, C):-
   on(p, C),!.

vinc2(_, [avv, int, intj, rel], PC, C, rel, C):-
   on(p, PC);
   on(pd, PC),!.

vinc2('What', [avv, int, intj, rel], PC, C, relin, C):-
    on(V, C),
     check_vcat(V),
%    on(V, [vc, viin, vin, vppin, vppt,vt, vit]),
    !.

vinc2(_, [avv, int, intj, rel], PC, C, rel, C):-
    on(V, PC),
     check_vcat(V),
%    on(V, [vc, viin, vin, vppin, vppt,vt, vit]),
    !.

vinc2(_, [ag, n, p, vgt], PC, FC, vgt, FC):-
    (on(n, FC);on(art,FC);on(ag,FC)),
    !.

vinc2(_, [n, vgin, vgt, vprt], PC, FC, vgt, FC):-
    on(punto, FC);on(par,FC).

vinc2(_, [n, vgt, vprt], PC, FC, vgt, FC):-
    on(punto, FC);on(par,FC).

vinc2(_, [ag, avv, n, p, vbt], PC, Cats, C, Cats):-
   (
   on(vppt, PC), C=avv
   ; 
   on(vt, PC), C=avv 
    ;
   on(ng, Cats), C=p 
    ;
   on(n, Cats), C=p).


vinc2(_,[ausd, v], PC, Cats, v, Cats):-
   on(vsup, PC), !.

vinc2(_,[ausd, v], PC, FC, v, FC):-
    on(art,FC);on(ag,FC);
    on(N,FC),(nouncats(N);proncat(N)),
    !.

vinc2(_,[ausa, vc], PC, Cats, Label, C):-
     try_cats(WNet, NodeFrom, Op, [ausa, vc], Label, NodeTo, NNet),
     try_cats(NNet, NodeTo, Op, Cats, C, NodeTo, Net),
     !.

vinc2(_,[ause, vc], [expl, avv], Cats, vc, Cats):-!.
vinc2(_,[ausa, vc, vppt], PC, Cats, vc, Cats):-
      on(p,Cats);on(pd,Cats);on(pda,Cats),!.
vinc2(_,[ause, vc, vppt], PC, Cats, vc, Cats):-
      on(p,Cats);on(pd,Cats);on(pda,Cats),!.
vinc2(_,[expl, avv], [ausei], Cats, avv, Cats):-!.
vinc2(_,[expl, avv], [n], Cats, avv, Cats):-!.
vinc2(_,[expl, avv], PC, [cong], avv, [cong]):-!.
vinc2(_,[expl, avv], PC, Cats, avv, Cats):-
     on(v,PC),!.

vinc2(_,[ausei, vci], PC, Cats, v, Cats):-
      on(N,PC),(nouncats(N);proncat(N)),
      on(vppt,Cats),
     !.

vinc2(_,[ause, vc], PC, Cats, Label, C):-
     try_cats(WNet, NodeFrom, Op, [ause, vc], Label, NodeTo, NNet),
     try_cats(NNet, NodeTo, Op, Cats, C, NoTo, Net),
     !.

vinc2(_,[ausa, vc, vppt], PC, Cats, Label, C):-
     try_cats(WNet, NodeFrom, Op, [ausa, vc, vppt], Label, NodeTo, NNet),
     try_cats(NNet, NodeTo, Op, Cats, C, NodeTo, Net),
     !.

vinc2(_,[ause, vc, vppt], PC, Cats, Label, C):-
     try_cats(WNet, NodeFrom, Op, [ause, vc, vppt], Label, NodeTo, NNet),
     try_cats(NNet, NodeTo, Op, Cats, C, NoTo, Net),
     !.

vinc2(_,[ause, vc], PC, Cats, Label, Cats):-
     try_cats(WNet, NodeFrom, Op, [ause, vc], Label, NodeTo, NNet),
     dependent(Cats, Label, NNet, [NNet],N),
     heads(NNet, NodeFrom, Label),
     !.

vinc2(_,[ausa, vc], PC, Cats, Label, Cats):-
     try_cats(WNet, NodeFrom, Op, [ausa, vc], Label, NodeTo, NNet),
     dependent(Cats, Label, NNet, [NNet],N),
     heads(NNet, NodeFrom, Label),
     !.

vinc2(_,[ause, vc, vppt], PC, Cats, Label, Cats):-
     try_cats(WNet, NodeFrom, Op, [ause, vc, vppt], Label, NodeTo, NNet),
     dependent(Cats, Label, NNet, [NNet],N),
     heads(NNet, NodeFrom, Label),
     !.

vinc2(_,[ausa, vc, vppt], PC, Cats, Label, Cats):-
     try_cats(WNet, NodeFrom, Op, [ausa, vc, vppt], Label, NodeTo, NNet),
     dependent(Cats, Label, NNet, [NNet],N),
     heads(NNet, NodeFrom, Label),
     !.

prendi_mod(Parses, Testa, Resto, Mod, Cat):-
   (remove(W-par-C, Parses, Parse)
     ;
     appiattisci(Parses,Parse)
     ;
     Parse=Parses),
    prendi_testas(Func, Parse, Testa, Mod, Resto, Cat),
    !.

prendi_testas(Func, [], [], [], [], []):-!.

prendi_testas(Func, Parses, Test, [], Dets, Cat):-
   remove(mod-Mods, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Q-QC-Co|RevParse],
   (QC=q;QC=num;QC=qc;QC=qd),
   (Mods=mod-[of-P-_|_];Mods=obl-[of-P-_|_]),
   reverse(Mods, RevM),
   RevM=[Testa-Cat-Cost|Rev],
   reverse(Rev, [Of-P-Cos|RevOf]),
   append([Q-QC-Co], RevOf, Dets),
   check_prons(Rev, Cat, Testa, Test),
   !.

prendi_testas(Func, Parses, Test, [], Parse, Cat):-
   remove(mod-Mods, Parses, Parse),
   reverse(Parse, RevP),
   RevP=[Qs-n-Co|RevParse],
   lemmatize_dic(Qs, Q, S),
   qm(Q),
   (Mods=mod-[of-P-_|_];Mods=obl-[of-P-_|_]),
   reverse(Mods, RevM),
   RevM=[Testa-Cat-Cost|Rev],
   estrai_testa_quant(Rev, Cat, Testa, TTesta, CCat),
   check_prons(Rev, CCat, TTesta, Test),
   !.

prendi_testas(Func, Parses, Test, [], RevParse, CCat):-
   remove(mod-Mods, Parses, Parse),
   remove(W-par-C, Parse, Pars),
   reverse(Pars, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, CCat, TTesta, Test),
   !.

prendi_testas(Func, Parses, Test, [mod-Mod|Mods], Pars, Cat):-
   remove(mod-Mod, Parses, Parse),
   reverse(Parse, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, Cat, Testa, Test),
   prendi_testas(Func, Parse, Test, Mods, Pars, Cat),
   !.

prendi_testas(Func, Parses, Test, [mod-Mod|Mods], Pars, Cat):-
   remove(mod-Mod, Parses, Parse),
   Parse\=[],
   prendi_testas(Func, Parse, Test, Mods, Pars, Cat),
   !.

prendi_testas(Func, Parses, Test, [f2-Mods], Parse, Cat):-
   remove(rel-Mods, Parses, Parse),
   reverse(Parse, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testas(Func, Parses, Test, [f2-Mods], Parse, Cat):-
   remove(f2-Mods, Parses, Parse),
   reverse(Parse, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, Cat, Testa, Test),
   !.
prendi_testas(Func, Parses, Test, Mods, Parse, Cat):-
   remove(sq-Mods, Parses, Parse),
   reverse(Parse, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testas(Func, Parses, Test, Modss, Parsee, Cat):-
   remove(obl-Mods, Parses, Pars),
   (Fun=mod;Fun=obl),
   remove(Fun-Parse, Pars, Parsee),
   Parse\=[], Parse\=A-B,
   reverse(Parsee, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, Cat, Testa, Test),
   append([obl-Mods],[Fun-Parse],Modss),
   !.
prendi_testas(Func, Parses, Test, [obl-Mods], Parse, Cat):-
   remove(obl-Mods, Parses, Parse),
   reverse(Parse, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, Cat, Testa, Test),
   !.
prendi_testas(Func, Parses, Test, [], ParseAnd, Cat):-
   remove(and-Cong-C, Parses, Parse),
   reverse(Parse, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   append(RevParse, [and-Cong-C], ParseAnd),
   check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testas(Func, Parses, Test, [], Parse, Cat):-
   remove(W-ccom-C, Parses, Parse),
   reverse(Parse, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   Testa\=par,
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, CCat, TTesta, Test),
   !.

prendi_testas(Func, Parses, Test, [], RevParse, CCat):-
   remove(W-par-C, Parses, Parse),
   reverse(Parse, RevP),
   extract_testa(RevP, RevParse, Testa-Cat-Cost),
   estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat),
   check_prons(RevP, CCat, TTesta, Test),
   !.

prendi_testas(Func, Parses, Test, Mod, RevParse, Cat):-
    reverse(Parses, RevP),
    remove(Poss-Pron-Cost,RevP,RevParse),
    (Pron=poss;Pron=deit;Pron=dim),
%    Pron=art;
    RevParse\=[], Mod=[Poss-Pron-Cost],
    on(Testa-Cat-Cos, RevParse),
    check_prons(RevParse, Cat, Testa, Test),
   !.

prendi_testas(Func, Parses, Test, [], Parses, Cat):-
    reverse(Parses, RevP),
    RevP=[Testa-Cat-Cost|RevParse],
    check_prons(RevP, Cat, Testa, Test),
   !.

prendi_testas(Func, Parses, Test, [], Parses, Cat):-
    reverse(Parses, RevP),
    RevP\=[],
    on(Testa-Cat-Cost, RevP),
    check_prons(RevP, Cat, Testa, Test),
   !.

extract_testa(RevP, RevParse, Testa-Cat-Cos):-
   RevP=[Testa-Cat-Cost|RevParse],
   (nouncats(Cat);proncat(Cat)),
   !.

extract_testa(RevP, RevParse, Testa-Cat-Cost):-
    remove(Testa-Cat-Cost, RevP, RevParse),
   (nouncats(Cat);proncat(Cat)),
   !.

buildcats(H,[],[]):-!.
buildcats(H,[Cat|Cats],[Cat-H|Ambs]):-
    buildcats(H,Cats,Ambs).

legal_push(Cat, RecNet) :-
   tp_access(RecNet, Pts),
   on(Cat, Pts).

legpu(Cats, Category, RecNet):-
     (Cats=[NCat],
      Category=NCat
      ;
     on(Category, Cats)
     ),
   legal_push(Category, RecNet),!.

tp_access(cp, [adv, avv, avvl, ccom, congf, ccong, conjl, cosu, fine, intj, puntint, punto]).
tp_access(dirsp, [dirs]).
tp_access(f2, [rel, relin, relq, relob]).
tp_access(fac, [pk, intj]).
tp_access(fc, [congf, ccong, cong]).
tp_access(fint, [int, intj, intjl]).
tp_access(fp, [par, punt, dots]).
tp_access(fs, [conjl, cosu]).
tp_access(ibar, [ausa3, ause3, ausa, ausd3, ause3n, ausdn, ausd3n, ausen, ausan, ausa3n, ause, ausd, ext, neg, v, vb, vc, vbin, vbt, vin, vprog, vsup, vsupn, vt]).
tp_access(sn, [abbr, ag, agn, art, ccom, date, deit, dim, doll, euro, expl, fw, grad, i, in, ind, inta, intal, intn, intnl, n, nc, noun, neg, nf, ng, nh, np, npro, nt, num, pers, poss, pound, pron, pronm, prone, pronl, prona, q, qc, qd, qp, qo, vppt, vppin]).
tp_access(sa, [ag, agn, avv, ccom, grad, in, ind, neg]).
tp_access(savv, [adv, avv, avvl, in, neg]).
tp_access(sp, [in, p, part, php, phl]).
tp_access(spd, [in, partd, partda, pd, pda]).
tp_access(sq, [ccom, in, ind, q, qc, qd, qo, qp]).
tp_access(sv2, [ausai, ausei, p, pt, vbin, vbt, viin, vit]).
tp_access(sv3, [ppas, ppre, vppin, vppt, vprin, vprt, avv]).
tp_access(sv5, [auag, aueg, vgin, vgs, vgt, vsfa]).
tp_access(svc, [adv, ag, agn, art, avv, ccom, date, deit, dim, in, ind, n, noun, neg, nf, nh, np, num, p, part, pers, php, poss, pron, qc, vppt]).
tp_access(svin, [adv, ag, ausai, ausei, avv, avvl, ccom, congf, in, ind, int, intj, neg, p, part, php, pk, pt, viin, vit]).
tp_access(svt, [adv, ag, agn, art, ausai, ausei, avv, avvl, date, deit, dim, dirs, in, ind, int, intj, n, noun, neg, nf, nh, np, num, p, par, part, partd, partda, pd, pda, pers, php, pk, poss, pron, pt, punt, q, qc, qd, qo, qp, relin, viin, vit, vppt]).
tp_access(f, [ag, agn, art, ausa, ausair, ause, auseir, date, deit, dim, expl, in, ind, n, noun, neg, nf, nh, np, num, p, par, pers, pk, poss, pron, puntint, punto, q, qc, qd, qo, qp, relin, vc, vcir, vin, virin, virt, vppt, vprog, vprogir, vsupir, vsup, vt]).
tp_access(compin, [ag, ausai, ausei, avv, avvl, clit, clitabl, clitdat, in, ind, neg, p, part, php, pk, ppre, ppas, pt, vci, viin, vit, vsf]).
tp_access(compt, [ag, agn, art, ausai, ausei, avv, avvl, clit, clitabl, clitac, clitdat, deit, dim, in, ind, int, n, neg, nf, nh, np, npro, num, p, part, partd, partda, pd, pda, pers, php, pk, poss, pron, pt, q, qc, qd, vci, viin, vit, vppt, vsf]).
tp_access(comppas, [ag, ausai, ausei, avv, avvl, clit, clitabl, clitdat, in, ind, neg, p, pd, pda, part, partda, partdi, php, pk, pt, viin, vit, vsf]).
tp_access(compc, [ag, agn, art, ausai, ausei, avv, avvl, clit, clitabl, clitac, clitdat, deit, dim, in, ind, n, neg, nf, nh, np, npro, num, p, part, partd, partda, pd, pda, pers, php, pk, poss, ppre, ppas, pron, pt, q, vci, viin, vit, vppt, vsf, vsup]).

memtoks([]):-!.
memtoks([K|NewParse]):-
  assert_numtoks(K),
   memtoks(NewParse),
   !.

memtok(Tokens):-
  repeat,
  see(Tokens),
  read(Tokens,K),
  (K=end_of_file,!
  ;
  K\=end_of_file,
  assert_numtoks(K),
  fail),
   seeing(DefaultInFile).

assert_numtoks(K):-
  K=t(_,P, 5), nonvar(P),
  numtoks(N,FN,PN),
  ((P=punto;P=puntint),
    FNu is FN + 1, PNu=PN
    ;
     P=parag,
    PNu is PN + 1, FNu=FN),
  Num is N + 1,
  abolish(numtoks/3),
  assert(numtoks(Num,FNu,PNu)),
  !.
assert_numtoks(K):-
  K=t(W,P, T), nonvar(P),
  T\=44, T\=5, T\=6, T\=76, T\=80,
  assert_typtoks(W,P,T),
  numtoks(N,FN,PN),
  Num is N + 1,
  abolish(numtoks/3),
  assert(numtoks(Num,FN,PN)),
  !.

recover_genitive(Ws,W):-
   stringof(SWord,Ws),
   decompose_underscore_all(SWord, [W]),
   !.

assert_typtoks(Ws-_,1,75):-
  recover_genitive(Ws,W),
  typtoks(Rank, W, L, Frase),
  retract(typtoks(Rank, W, L, Frase)),
  numtoks(N,FN,PN),
  (atomic(Frase),
   NFra=[FN,Frase];
   list(Frase),
   append([FN],Frase,NFra)),
   Rank1 is Rank + 1,
   assert(typtoks(Rank1, W, L, NFra)),
   !.
assert_typtoks(Ws,0,75):-
  typtoks(Rank, W, L, Frase),
  retract(typtoks(Rank, W, L, Frase)),
  numtoks(N,FN,PN),
  (atomic(Frase),
   NFra=[FN,Frase];
   list(Frase),
   append([FN],Frase,NFra)),
   Rank1 is Rank + 1,
   assert(typtoks(Rank1, W, L, NFra)),
   !.

assert_typtoks(W-_,1,T):-
  typtoks(Rank, W, L, Frase),
  retract(typtoks(Rank, W, L, Frase)),
  numtoks(N,FN,PN),
  (atomic(Frase),
   NFra=[FN,Frase];
   list(Frase),
   append([FN],Frase,NFra)),
   Rank1 is Rank + 1,
   assert(typtoks(Rank1, W, L, NFra)),
   !.
assert_typtoks(W,P,T):-
  list(P),
  typtoks(Rank, W, L, Frase),
  retract(typtoks(Rank, W, L, Frase)),
  numtoks(N,FN,PN),
  (atomic(Frase),
   NFra=[FN,Frase];
   list(Frase),
   append([FN],Frase,NFra)),
   Rank1 is Rank + 1,
   assert(typtoks(Rank1, W, L, NFra)),
   !.
assert_typtoks(W,P,T):-
  typtoks(Rank, W, L, Frase),
  retract(typtoks(Rank, W, L, Frase)),
  numtoks(N,FN,PN),
  (atomic(Frase),
   NFra=[FN,Frase];
   list(Frase),
   append([FN],Frase,NFra)),
   Rank1 is Rank + 1,
   assert(typtoks(Rank1, W, L, NFra)),
   !.
assert_typtoks(W,P,T):-
   list(P),
   numtoks(N,FN,PN),
   assert(typtoks(1, W, L, FN)),
   assert_typ_list(P),
   !.
assert_typtoks(Ws-_,1,75):-
  recover_genitive(Ws,W),
   numtoks(N,FN,PN),
   assert(typtoks(1, W, L, FN)),
   !.

assert_typtoks(W-_,1,T):-
   numtoks(N,FN,PN),
   assert(typtoks(1, W, L, FN)),
   !.

assert_typtoks(Ws,0,75):-
  recover_genitive(Ws,W),
   numtoks(N,FN,PN),
   assert(typtoks(1, W, L, FN)),
   !.

assert_typtoks(W,P,T):-
   numtoks(N,FN,PN),
   noverb_assert(W,FN),
   !.

noverb_assert(W,FN):-
   v(W,Vinf,Mod,Temp,Pers,Num),!.
noverb_assert(W,FN):-
   participio(W,Verbo,Gen,Num),!.
noverb_assert(W,FN):-
   v(W,_),!.

noverb_assert(W,FN):-
   assert(typtoks(1, W, L, FN)),
   !.

assert_typ_list([]):-!.
assert_typ_list([W-_|P]):-
   assert_typtoks(W,1,4),
   assert_typ_list(P),
   !.
assert_typ_list([W|P]):-
   assert_typtoks(W,0,4),
   assert_typ_list(P),
   !.
decompose_cl([], [], [], []):-!.

decompose_cl([Cates-Lem|Rest], [Cs|ACs], [Pred-Cs|Lemmas], [W|Ws]):-
     spelllemm(Lem, Pred, _, _, W),
     Cates=[Cs|Ccs], 
     decompose_cl(Rest, AllCs, Lemmas, Ws),
     append(Ccs, AllCs, ACs).

decompose_cl([Cs-Lem|Rest], [Cs|AllCs], [Pred-Cs|Lemmas], [W|Ws]):-
     spelllemm(Lem, Pred, _, _, W),
     decompose_cl(Rest, AllCs, Lemmas, Ws).

promote_cat([Cat|Cats], NCats) :-
   var(Cat),
   promote_cat(Cats, NCats).

promote_cat(Cats, CatP) :-
  (on(pk, Cats), PC=pk,
   delete_el(PC, Cats, NCat),
   append([PC], NCat, CatP)
   ;
   on(p, Cats), PC=p,
   delete_el(PC, Cats, NCat),
   append([PC], NCat, CatP)
  ;
  on(num, Cats), PC=num,
   delete_el(PC, Cats, NCat),
   append([PC], NCat, CatP) 
  ;
  Cats=[C],
  C=[CC|_],
  CatP=C
  ;
  CatP=Cats).

countlems(File, Word, Feat, Cat, Lem, Pred):-
     var(Lem),
     get_lem(File, Word, Feat, Cat, Lem),
     Lem=W-Pred-C-F,
     !.

continue_lemmtz(Word,Lemma):-
   stringof(Prefix, Word),
   reverse(Prefix, [S|Rest]),
   try_lemmas(1, S, Rest, Lemma, S1),
     !.

getlemmult(Word,Lem):-
    recover_descs(Word,Lems),
    (atomic(Lems),
    Lem=Lems
    ;
    is_list(Lems),
    length(Lems,L),
    1<L,
    reverse(Lems,[Root|Rev]),
    (Root='s_',Lems=[Lem|_],
     \+ j(Lem)
      ;
      Root\='s_',Lem=Root,
     \+ j(Lem)
     ;
     Lems=[Wor|_],
      (dc(Wor,Cat),on(npl,Cat),
      continue_lemmtz(Wor,Lem)
        ;
        Lem=Word))
     ), !.

lemmatize_dic(Word, Word, S):-
   integer(Word),!.

lemmatize_dic(Word, Word, S):-
   stringof([Num|_],Word),
   integer(Num),!.

lemmatize_dic(Word, Word, k):-
    k(Word),!.

lemmatize_dic(Word, Word, k):-
    lc4(Word, Codes),!.

lemmatize_dic(Word, Lem, k):-
    dc(Word, Codes),
    on(Code,Codes),
    concat_atom(List,:,Code),
    remove(npl,List,Rest),
    on(Lem,Rest),
    !.

lemmatize_dic(Word, Word, k):-
     atomic(Word), Word\=[],
     spy_lower(Word, LowW, 1),
    nturn_up_wn(LowW, Cats),
    !.

lemmatize_dic(Word, Lem, S1):-
   var(Lemma),
   atomic(Word), Word\=[],
   stringof(Prefix, Word),
   on('-', Prefix),
   \+ on('_',Prefix),
   getlemmult(Word,Lem),
   !.

lemmatize_dic(Word, Lemma, S1):-
   var(Lemma),
   atomic(Word), Word\=[],
   stringof(Prefix, Word),
   reverse(Prefix, [S|NRoo]),
   (on('_', Prefix),
    spy_lower(Word, LowW, Pol), Pol=0,
    (
     extract_root([S|NRoo], NRoot, Rest, S),
     S=s,
     reverse(NRoot,Lem),
     stringof(Lem, Lemma)
     ;
     reverse(Prefix, [S|Rest]),
     S\=s)
     ;
     Rest=NRoo),
   try_lemmas(1, S, Rest, Lemma, S1),
   !.

des(s, [s]).
des(s_, [s_]).
des(ss_, [ss_]).
des(s, [plur]).
des(es, [s]).
des(es, [plur]).
des(ing, [ing]). 
des(d, [past]).
des(ed, [past_part]).
des(er, [more]).
des(r, [more]).
des(st, [most]).
des(est, [most]).

ddes(ly, [advdes], N).
ddes(wide, [advdes], N).
ddes(ably, [advdes], N).
ddes(ic, [adj], N).
ddes(able, [adj], N).
ddes(al, [adj], N).
ddes(ality, [feat=abst], s).
ddes(alities, [feat=abst], p).
ddes(ation, [feat=abst], s).
ddes(ations, [feat=abst], p).
ddes(ial, [adj], N).
ddes(wide, [feat=loc], N).
ddes(book, [feat=concr], s).
ddes(books, [feat=concr], p).
ddes(land, [feat=concr], s).
ddes(lands, [feat=concr], p).
ddes(holder, [feat=concr], s).
ddes(ise, [feat=concr], s).
ddes(ised, [feat=concr], s).
ddes(ize, [feat=concr], s).
ddes(ized, [feat=concr], s).
ddes(ization, [feat=concr], s).
ddes(izations, [feat=concr], p).
ddes(isation, [feat=concr], s).
ddes(isations, [feat=concr], p).
ddes(holders, [feat=concr], p).
ddes(ship, [feat=abst], s).
ddes(ment, [feat=abst], s).
ddes(ments, [feat=abst], p).
ddes(men, [feat=hum], p).
ddes(ships, [feat=abst], p).
ddes(ness, [feat=abst], s).
ddes(nesses, [feat=abst], p).
% ddes(ing, [feat=abst], s).
ddes(ings, [feat=abst], p).
ddes(ity, [feat=abst], s).
ddes(ities, [feat=abst], p).
ddes(ism, [feat=abst], s).
ddes(isms, [feat=abst], p).
ddes(ie, [feat=hum], s).
ddes(ies, [feat=hum], p).
ddes(ion, [feat=abst], s).
ddes(ions, [feat=abst], p).
ddes(ist, [feat=hum], s).
ddes(ists, [feat=hum], p).
ddes(itor, [feat=hum], s).
ddes(itors, [feat=hum], p).
ddes(itory, [feat=hum], s).
ddes(itories, [feat=hum], p).
ddes(itress, [feat=hum], s).
ddes(itresses, [feat=hum], p).
ddes(itude, [feat=hum], s).
ddes(itudes, [feat=hum], p).
ddes(ition, [feat=abst], s).
ddes(itions, [feat=abst], p).
ddes(ivity, [feat=abst], s).
ddes(ivities, [feat=abst], p).
ddes(log, [feat=abst], s).
ddes(logs, [feat=abst], p).
ddes(logue, [feat=abst], s).
ddes(logues, [feat=abst], p).
ddes(logist, [feat=hum], s).
ddes(logists, [feat=hum], p).
ddes(ors, [feat=hum], p).
ddes(or, [feat=hum], s).
ddes(ours, [feat=hum], p).
ddes(our, [feat=hum], s).
ddes(ty, [feat=abst], s).
ddes(ties, [feat=abst], p).
ddes(ry, [feat=prop], s).
ddes(ries, [feat=prop], p).
ddes(less, [feat=abst], s).
ddes(lesses, [feat=abst], p).
ddes(man, [feat=hum], s).
ddes(ers, [feat=hum], p).
ddes(er, [feat=hum], s).

temp_pro_lex(s, [s, plur]).
temp_pro_lex(es, [s, plur]).
temp_pro_lex(ing, [ing]). 
temp_pro_lex(d, [past, past_part]).
temp_pro_lex(er, [more]).
temp_pro_lex(est, [most]).
temp_pro_lex(ally, [advdes]).
temp_pro_lex(ily, [advdes]).
temp_pro_lex(ly, [advdes]).
temp_pro_lex('(', [par]).
temp_pro_lex(')', [par]).
temp_pro_lex('=', [punt]).
temp_pro_lex('.', [punto]).
temp_pro_lex(',', [punt]).
temp_pro_lex('"', [punt]).
temp_pro_lex(';', [punto]).
temp_pro_lex(':', [punt]).
temp_pro_lex('?', [puntint, punt]).
temp_pro_lex('!', [puntint, punt]).


define_cats([], []):-!.
define_cats(Cat, [Ct]):-
   atomic(Cat),
   (
   nouncats(Cat), Ct=n
   ;
   Cat=agg, Ct=a
   ;
   Cat=conj, Ct=c
   ;
   check_all_verbs(Cat), Ct=v
   ),
   !.

define_cats([Cat|Cats], [n|Ns]):-
   nouncats(Cat),
   define_cats(Cats, Ns),
   !.

define_cats([Cat|Cats], [av|Ns]):-
   on(avv,Cat),
   define_cats(Cats, Ns),
   !.

define_cats([Cat|Cats], [a|Ns]):-
   on(agg,Cat),
   define_cats(Cats, Ns),
   !.

define_cats([Cat|Cats], [a|Ns]):-
   on(ag,Cat),
   define_cats(Cats, Ns),
   !.

define_cats([[Cat]|Cats], Ns):-
   define_cats([Cat|Cats], Ns),
   !.
define_cats([Cat|[]], Ns):-
   list(Cat),
   define_cats(Cat, Nns),
   sort(Nns, Ns),
   !.

define_cats([Cat|[]], Ns):-
   atomic(Cat),
   (Cat=ag,Ns=a
    ;
    Cat=agg,Ns=a
    ;
    Cat=avv,Ns=av),
   !.

define_cats([Cat|Cats], Ns):-
   list(Cat),
   define_cats(Cat, Nns),
   define_cats(Cats, Nnss),
   append(Nns,Nnss, Nss),
   sort(Nss, Ns),
   !.

define_cats([Cat|Cats], [v|Ns]):-
   check_all_verbs(Cat),
   define_cats(Cats, Ns),
   !.

define_cats([Cat|Cats], [Cat|Ns]):-
   define_cats(Cats, Ns),
   !.

retag_verb([], Tagged, Tagged):-!.
retag_verb(Tensed, Tagged, NewTagged):-
   findall(Cat, (on(W-Cat, Tagged),check_vcat(Cat)), Cats), 
   length(Cats,L), 
%   L=1,
   search_tagged(Tensed, Tagged, Word-Cat),
   nth(Tagged, Num, Word-_),
   substitute1(Tagged, Num, Word-Cat, NewTagged),
   !.
retag_verb(Tensed, Tagged, Tagged):-!.

search_tagged(Tensed, [], []):-!.
search_tagged(Tensed, [W-Cat|Tagged], W-Cat1):-
   \+ check_tensed(Cat),
   on(W-Cat1,Tensed), Cat1\=Cat,
   !.
search_tagged(Tensed, [W-Cat|Tagged], W1-Cat1):-
   check_tensed(Cat),
   search_tagged(Tensed, Tagged, W1-Cat1),
   !.

search_tagged(Tensed, [W-Cat|Tagged], W1-Cat1):-
   \+ check_tensed(Cat),
   search_tagged(Tensed, Tagged, W1-Cat1),
   !.
substitute1([W-T|Tags], 1, Word-Cat, [Word-Cat|Tags]):-!.
substitute1([W-T|Tags], Num, Word-Cat, [W-T|NTags]):-
     N is Num - 1,
     substitute1(Tags, N, Word-Cat, NTags),
     !.


check_all_verbs(Cat):-
   check_auxcat(Cat),!.
check_all_verbs(Cat):-
   check_vcat(Cat),!.

check_auxcat(Cat):-
    on(Cat, [ause,ausen,ause3,ause3n,ausae3,ausae3n,ausa,ausan,ausa3,ausa3n,ausd,ausdn,ausd3,ausd3n, ausei,ausai,ausep,aueg]),!.

check_auxbe(Cat):-
    on(Cat, [ause,ausen,ause3,ause3n,ausae3,ausae3n,ausei,ausep,aueg]),!.

checkppast(Cat):-
      on(Cat, [ppas, vppin, vppt]),!.

check_ppast(Testa,Cat):-
      on(Cat, [ppas, vppin, vppt]),!.

check_ppast(W,Cat):-
    sw(W-Ca-LNum),
    on(C, [ppas, vppin, vppt]),
    on(C,Ca),!.

check_tensed(Cat):-
    on(Cat, [ause,ausen,ause3,ause3n,ausae3,ausae3n,ausa,ausan,ausa3,ausa3n,ausd,ausdn,ausd3,ausd3n, vc, viin, vin, vt, vit, vsup, verb, v]),!.

check_vcat(Cat):-
    on(Cat, [ause,ausen,ause3,ause3n,ausae3,ausae3n,ausa,ausan,ausa3,ausa3n,ausd,ausdn,ausd3,ausd3n, ppas, vgin, vgt, vprt,vprin,vc, viin, vin, vppin, vppt,vt, vit,vbin, vbt,vgs, vsup,ausei,ausai, vci, vprog, v]),!.

check_all_nouns(Cat):-
   nouncats(Cat),!.
check_all_nouns(Cat):-
   on(Ct, Cat),
   nouncats(Ct),!.

announcats(C):-
   nouncats(C);
    anncats(C).


proncat(q).
proncat(r).
proncat(pers).
proncat(pron).
proncat(dim).
proncat(poss).
proncat(deit).
proncat(ext).
proncat(prone).
proncat(pronm).
proncat(prona).
proncat(pronl).
nouncats(npl).
nouncats(n).
nouncats(nc).
nouncats(nh).
nouncats(np).
nouncats(npro).
nouncats(nf).
nouncats(ng).
nouncats(nt).
nouncats(num).
nouncats(abbr).
nouncats(doll).
nouncats(euro).
nouncats(pound).
nouncats(fw).
qcats(neg).
qcats(in).
qcats(grad).
qcats(q).
qcats(qd).
qcats(qc).
nncats(n).
nncats(nh).
nncats(np).
nncats(npro).
nncats(ng).
nncats(nt).
nncats(fw).
nncats(ppas).
anncats(num).
anncats(abbr).
anncats(ag).
auxcats(aueir, be).
auxcats(aueg, be).
auxcats(ausep, be).
auxcats(ausei, be).
auxcats(ause, be).
auxcats(auair, have).
auxcats(auag, have).
auxcats(ausai, have).
auxcats(ausa, have).
auxcats(vsup, support).

morf_cat(W, Ct, L):-
   leaf(cw(_, Feats), Cat, W, M),
   parse_aff(M, Cat, Feats, NFeat),
   on(cat=Ct,NFeat),
   countlems(File, W, NFeat, Cat, Lemma, L),
   !.

morf_cat(W, Ct, Lemma):-
   findall(Feats, pre_parse(cw(_, Feats), W, ''), FF),
   build_pre_catlems(W, FF, CatLems, AllCs, Lemmas),
   AllCs \= [],
   sort(Lemmas, Lems),
   sort(AllCs, Cats),
   on(Ct,Cats),
   on(Lemma,Lems),
   confirm_form(W,Lemma,Num,Ct),
   !.

morf_cat(W, Ct, Lemma):-
   (Type=10;Type=30;Type=3),
   suf_parse(cw(_, Feats), W, ''),
   countlems(File, W, Feats, Cat, Lemma, L),
   nonvar(Cat),
   (list(Cat),on(Ct,Cat);atomic(Cat),Ct=Cat),
   (list(Lemma),on(Lem-Feats,Lemma);atomic(Lemma),Lemma=Lem;Lemma=W-Lem-Ct-Fea),
   confirm_form(W,Lem,Num,Ct),
   !.

analyzeroot(Root, String, Der, SCodes, PhOut, Feats, Pred, Type):-
    (lexx(N, Ds, Root, _, Codes, dizionario), copy_codes(Codes, LCode)
    ;
    ana_morpho(Root, String, '', TopDown, Morpho, LCode, FOut)
    ),
    matchcodesg(SCodes, PhOut, LCode, LCod, G),
    buildnewroot(Root, Morpho, Der, NRoot),
    w(LCod, Root, Cat),
    realizeder(PhOut, Der, Cat, SCodes, LCod, NRoot, Feats, Type),
    Cat=root(root(R), Decl, Categ, Feat, Reg),
    composepred(Feats, Pred),
    on(cat=C, Feats),
    Nc=fr(C, Categ, R),
    !.

composepredp(Pre, Feats, Predd):-
   on(pred=P+Root+Des, Feats),
   mcon(Pre, P, Pred1),
   mcon(Pred1, Root, Pred2),
   mcon(Pred2, Des, Pred), Predd=Pred2-Pred,!.

composepredp(Pre, Feats, Predd):-
   on(pred=Root+Des, Feats),
   mcon(Pre, Root, Pred1),
   mcon(Pred1, Des, Pred), Predd=Pred1-Pred,!.

composepred(Feats, Predd):-
   (on(pred=Pr+Root+Suff+Des, Feats),
   mcon(Pr, Root, Pred1),
   mcon(Pred1, Suff, Pred2),
   mcon(Pred2, Des, Pred), Predd=Pred2-Pred
    ;
   on(pred=Pr+Root+Des, Feats),
   mcon(Pr, Root, Pred1),
   (on(nsuf=D, Feats), De=D; De=Des),
   mcon(Pred1, De, Pred), Predd=Pred1-Pred
    ;
   on(pred=Root+Des, Feats),
   (on(nsuf=D, Feats), De=D; De=Des),
   mcon(Root, De, Pred), Predd=Root-Pred
   ;
   on(pred=Pred, Feats), Predd=Pred-Pred
   ),!.

lemmatize_dic_v(Word, Lemma, S1):-
   stringof([Num|_],Word),
   \+ integer(Num),
   \+ integer(Word),
   \+ grammw(Word,_),
   atomic(Word), Word\=[],
   stringof(Prefix, Word),
   (
    on('_', Prefix),
    reverse(Prefix, Root),
    extract_root(Root, NRoot, Rest, S)
    ;
    on('-', Prefix),
    reverse(Prefix, [S|Rest])
    ;
     \+ nogen_member('_', Prefix),
     \+ nogen_member('-', Prefix),
     reverse(Prefix, [S|Rest])),
   try_lemmas(2, S, Rest, Lemma, S1),
   !.


estrai_testa_quant(RevParse, Cat, Testa, TTesta, CCat):-
   (Cat\=par, Cat\=cong,
    CCat=Cat, TTesta=Testa
    ;
    (Cat=par;Cat=cong),
    RevParse=[TTesta-CCat-Cost|RevPar]),
    !.

decompose_underscore_all(MWord, [s_]):-
   reverse(MWord, RWord),
   RWord=['_',s],
   !.
decompose_underscore_all(MWord, [Lex2,s_]):-
   reverse(MWord, RWord),
   RWord=['_',s,'-'|Wor],
   reverse(Wor, Word),
   stringof(Word,Lex2),
   !.
decompose_underscore_all(MWord, [Lex1,Lex2]):-
   on('_',MWord),on('-',MWord),
   decompose_secunderscore(MWord, Word),
   stringof(Word,Lex1),
   decompose_underscore(MWord, Wor),
   stringof(Wor,Lex2),
   !.

decompose_underscore_all(MWord, [Lex1,Lex2]):-
   on(s,MWord),on('-',MWord),
   decompose_secunderscore(MWord, Word),
   stringof(Word,Lex1),
   decompose_underscore(MWord, Wor),
   stringof(Wor,Lex2),
   !.

decompose_underscore_all(MWord, Lexxs):-
   decompose_underscore(MWord, Word),
   stringof(Word,Lex1),
   reverse(MWord, RWord),
   (Word=[A],
    RWord=['_'|RWor],
    decompose_underscore(RWor, Wor),
    Wor\=[],
    Wor\=[B],
    reverse(Wor, Worr),
    stringof(Worr,Lex2), Lexxs=[Lex1,Lex2]
         ;
    Word=[A],
    RWord=['_'|RWor],
    decompose_underscore(RWor, Wor),
    Wor\=[],
    Wor\=[B],
    reverse(Wor, Worr),
    stringof(Worr,Lex2), Lexxs=[Lex1,Lex2]
         ;
    (decompose_underscore(RWord, Wor),
     Wor\=[]
     ;
     RWord=['_'|Wor],Wor\=[]),
    reverse(Wor, Worr),
    stringof(Worr,Lex2),
    findall('_',(on('_',RWord);on('/',RWord)),Lis), length(Lis,L),
    (L=0, Lexxs=[Lex1];
     L=1, Lexxs=[Lex1,Lex2];
     1<L,
     recompose_rest(RWord, Wor,Rest),
     (Rest\=RWord,Rest1=Rest
      ;
      Rest=RWord,Rest1=Wor
      ),
     decompose_underscore(Rest1, Worres),
     Worres\=[],
     reverse(Worres, Worrs),
     stringof(Worrs,Lex3), Lexxs=[Lex1,Lex3,Lex2])
     ),
   !.

decompose_underscore_all(Word, Lex1):-
   stringof(Word,Lex1),
   !.

recompose_rest(['/'|Rest], [],Rest):-!.
recompose_rest(['_'|Rest], [],Rest):-!.
recompose_rest([W|RWord], [W|Wor],Rest):-
     recompose_rest(RWord, Wor,Rest),
     !.
recompose_rest(Rest, Wor,Rest):-!.

fai_words([],[]):-!.
fai_words([W|Testa],[LowW|Words]):-
    spy_lower(W, LowW, Pol),
    fai_words(Testa,Words),
    !.

concatena_multiword(1,Word,Word):-!.
concatena_multiword(2,Words,Word):-
    Words=[W1,W2],
    concat(W1,'_',Wor),
    concat(Wor,W2,Word),
    !.

concatena_multiword(2,Words,Word):-
    Words=[W1,W2],
    concat(W1,'-',Wor),
    concat(Wor,W2,Word),
    !.

concatena_multiword(3,Words,Word):-
    Words=[W1,W2,W3],
    concat(W1,'_',Wor),
    concat(Wor,W2,Wor1),
    concat(Wor1,'_',Wor2),
    concat(Wor2,W3,Word),
    !.

concatena_multiword(3,Words,Word):-
    Words=[W1,W2,W3],
    concat(W1,'-',Wor),
    concat(Wor,W2,Wor1),
    concat(Wor1,'_',Wor2),
    concat(Wor2,W3,Word),
    !.

concatena_multiword(3,Words,Word):-
    Words=[W1,W2,W3],
    concat(W1,'_',Wor),
    concat(Wor,W2,Wor1),
    concat(Wor1,'-',Wor2),
    concat(Wor2,W3,Word),
    !.

concatena_multiword(3,Words,Word):-
    Words=[W1,W2,W3],
    concat(W1,'-',Wor),
    concat(Wor,W2,Wor1),
    concat(Wor1,'-',Wor2),
    concat(Wor2,W3,Word),
    !.

recover_descs(Sec, PredS):-
   atomic(Sec),Sec\=[],
   stringof(MWord,Sec),
   reverse(MWord,[A,B|_]),
   A\=s, B\='-',
   on('-',MWord),
   decomp_unders_hyph(MWord, Word, Rest),
   stringof(Word,W1),
   decompose_underscore_all(Rest, Ws),
   (atomic(Ws),Wss=[Ws];list(Ws),Wss=Ws),
   append([W1],Wss,PredS),!.

recover_descs(Sec, PredS):-
   atomic(Sec),Sec\=[],
   stringof([U,Und,S,Un|MWord],Sec),
   U=u,Un='_',S=s,
   MWord\=[],
   decompose_underscore_all(MWord, Pred),
   append([u_s_],Pred,PredS),
    !.

recover_descs(Sec, PredS):-
   atomic(Sec),Sec\=[],
   stringof(MWord,Sec),
   on('_',MWord),
   decompose_underscore_all(MWord, PredS),
    !.
recover_descs(Sec, PredS):-
   atomic(Sec),Sec\=[],
   stringof(MWord,Sec),
   on('-',MWord),
   decompose_underscore_all(MWord, PredS),
    !.
recover_descs(Sec, PredS):-
   atomic(Sec),Sec\=[],
   stringof(MWord,Sec),
   on('/',MWord),
   decompose_underscore_all(MWord, PredS),
    !.
recover_descs(Testa, Testa):-
    atomic(Testa),
    !.
recover_descs(Sec, Sec):-
   integer(Sec),
   !.
recover_descs(First, PredS):-
   s_is_ax(First,PredS),!.



recover_description(Testa, Pred):-
    is_list(Testa),
    length(Testa,L1),
    1<L1,
    fai_words(Testa,Words),
    length(Words,L),
    concatena_multiword(L,Words,Pred),
    spy_lower(Pred,Low,Pol),
%   convalidate_mult_member(Pol,Pred, PredS,ValidM),
   !.

recover_description(Testa, Pred):-
    is_list(Testa),
    length(Testa,L),
    L=1,
    remove(Test,Testa,[]),
    atomic(Test),
    recover_descriptions(Test, Preds),
    (list(Preds),
      remove(Pred,Preds,[]);atomic(Preds),Pred=Preds),
    !.

recover_description(Testa, Pred):-
    atomic(Testa),
    recover_descriptions(Testa, Preds),
    (list(Preds),
      remove(Pred,Preds,[]);atomic(Preds),Pred=Preds),
    !.

recover_description(Testa, Testa):-
    atomic(Testa),
    !.

recover_descriptions(Sec, Sec):-
   nonvar(Sec),
   integer(Sec),
   !.

recover_descriptions(First, PredS):-
   nonvar(First),
   s_is_ax(First,PredS),!.

recover_descriptions(Sec, PredS):-
   atomic(Sec),
   stringof(MWord,Sec),
   reverse(MWord,[A,B|_]),
   A\=s, B\='-',
   on('-',MWord),
   decomp_unders_hyph(MWord, Word, Rest),
   stringof(Word,W1),
   decompose_underscore_all(Rest, Ws),
   (atomic(Ws),Wss=[Ws];list(Ws),Wss=Ws),
   append([W1],Wss,PredS).

recover_descriptions(Sec, PredS):-
   atomic(Sec),
   stringof([U,Und,S,Un|MWord],Sec),
   U=u,Un='_',S=s,
   MWord\=[],
   decompose_underscore_all(MWord, Pred),
   append([u_s_],Pred,PredS),
    !.

recover_descriptions(Sec, PredS):-
   atomic(Sec),
   stringof(MWord,Sec),
   on('_',MWord),
   decompose_underscore_all(MWord, PredS),
   spy_lower(Sec,Low,Pol),
%   convalidate_mult_member(Pol,Sec, PredS,ValidM),
   !.

recover_descriptions(Testa, Testa):-
    atomic(Testa),!.

recover_descriptions(Preds, Top):-
    list(Preds),
    on(Top, Preds),
    !.

recover_descriptions(and(Preds), Top):-
    list(Preds),
    Preds=[A,A],
    recover_descriptions(A, Top),
    !.

recover_descriptions(and(Preds), and(Preds)):-
    list(Preds),
    Preds=[A,B],
    B\=A,
    !.
recover_descriptions(or(Preds), Top):-
    list(Preds),
    Preds=[A,A],
    recover_descriptions(A, Top),
    !.

recover_descriptions(or(Preds), or(Preds)):-
    list(Preds),
    Preds=[A,B],
    B\=A,
    !.

convalidate_mult_member(Pol,Sec, [],[]):-!.
convalidate_mult_member(1,Sec, PredS,[Sec]):-
    !,
    (new_wn_up(Sec,C);search_wn_cats(Sec,K), K\=[]),
    !.

convalidate_mult_member(0,Sec, PredS,[Sec]):-
    !,
    (new_wn(Sec,C);search_wn_cats(Sec,K), K\=[]),
    !.

convalidate_mult_member(1,Sec, [First|PredS],[First|ValidM]):-
    (tolower(First,LowF),j(LowF);new_wn_up(First,C)),
    convalidate_mult_member(1, Sec, PredS,ValidM),
    !.

convalidate_mult_member(1,Sec, [First|PredS],ValidM):-
    (new_wn_up(First,C);search_wn_cats(First,K), K\=[]),
    convalidate_mult_member(1, Sec, PredS,ValidM),
    !.
convalidate_mult_member(1,Sec, [First|PredS],[First|PredS]):-
    (new_wn_up(First,C);search_wn_cats(First,K), K\=[]),
    !.

convalidate_mult_member(0,Sec, [First|PredS],[First|ValidM]):-
    (new_wn(First,C);search_wn_cats(First,K), K\=[]),
    convalidate_mult_member(0, Sec, PredS,ValidM),
    !.
convalidate_mult_member(0,Sec, [First|PredS],ValidM):-
    (new_wn(First,C);search_wn_cats(First,K), K\=[]),
    convalidate_mult_member(0, Sec, PredS,ValidM),
    !.
reconstruct_secondary_main(Fun, Body, FunctsO, FunctsOut):-
    nth(Body, N, ibar-_),
    nth(Body, N1, subj-_),
    N < N1,
    separate(N1,Body,Newbody,Rest),
    append(Rest, FunctsO, FunctsOu),
    append([Fun-Newbody],FunctsOu,FunctsOut),
     !.

separate(1,Body,[],Body):-!.
separate(N1,[C|Body],[C|Newbody],Rest):-
    N is N1 - 1,
    separate(N,Body,Newbody,Rest),
     !.

separate_coord([W-T|Sec], 1, Word-Cat, [], Sec):-!.
separate_coord([W-T|Tags], Num, Word-Cat, [W-T|NTags], Sec):-
     N is Num - 1,
     nonvar(T),
     separate_coord(Tags, N, Word-Cat, NTags, Sec),
     !.
separate_coords([W-T|Sec], 1, Word-Cat, [], Sec):-!.
separate_coords([f3-T|Tags], Num, Word-Cat, NTags, Sec):-
     N is Num - 1,
     separate_coords(Tags, N, Word-Cat, NTags, Sec),
     !.
separate_coords([W-T|Tags], Num, Word-Cat, [T|NTags], Sec):-
     N is Num - 1,
     nonvar(T),
     separate_coords(Tags, N, Word-Cat, NTags, Sec),
     !.
separate_coords([W-T|Tags], Num, Word-Cat, NTags, Sec):-
     N is Num - 1,
     separate_coords(Tags, N, Word-Cat, NTags, Sec),
     !.



divideup_coord(First,Fir,Sec):-
     nth(First,N,And-cong-_),
     separate_coord(First, N, And-cong-_, Fir, Sec),
     !.
divideup_coord(First,Fir,Sec):-
     nth(First,N,fc-[And-cong-_]),
     separate_coords(First, N, And-cong-_, Fir, Sec),
     !.
divideup_coord(First,Fir,Sec):-
     nth(First,N,f3-Punt),
     separate_coord(First, N, f3-Punt, Fir, Sec),
     !.

grammw(W,S):-
   atomic(W),
   spy_lower(W,LoW,Po),
   (Po=0,W1=W;Po=1,W1=LoW),
   grammw1(W, W1, S),!.

grammw1(W,W1,S):-
   checkform1(W1,S),
   S\=n, S\=v, 
   (S=a, grammadjs(W1);
     S\=a, \+ grammexc(W1)).
grammw1(W,W1,av):-
   r(W1),
   \+ wsu(W, _, N),
   \+ nb(W),
   \+ wsd(W, _, N),
   \+ wsl(W-_),
   \+ n_wn(W,_),
   \+ v(W,_),
   !.
grammexc(concerning).

/* Tandem uppercase is a name : if present in names database
 it will not produce the av tag; obviously the lowercase
 will only produce the av tag */


grammadjs(Lex1):-
   ad_engl(Lex1,_);
   ad_engl(_,Lex1);
   ap_engl(Lex1,_,_),
   !.
grammadjs(Lex1):-
   fct(Lex1),!.
getnamesgen(A,[Cat]):-
  (  lc3(A, Codes)
  ;  lc4(A, Codes)
    ),
  (on('s:h:m',Codes), Cat=nmm
    ;
  on('s:h:m',Codes), Cat=nmf)
   .
getnamesgen(A,Cats):-
  name_new_hm(A, Cats).

getnamesgen(A,Cats):-
  arb(A, Cat, Com),
  (Cat='Male', Cats=[nmm]
   ;
   Cat='Female', Cats=[nmf]).

gendnoun(W,fem):-
  W=female;W=females;W=woman;W=girl;W=girls;W=women;
  W=mother;W=sister;W=daughter;W=mothers;W=sisters;W=daughters;
  W=grandmother;W=sister_in_law;W=niece;W=aunt;
  stringof(List,W), reverse(List,[n,A,m,o,w|_]),
  (A=a;A=e),!.
gendnoun(W,mas):-
  W=male;W=males;W=man;W=boy;W=boys;W=men;
  W=father;W=brother;W=son;W=fathers;W=brothers;W=sons;
  W=grandfather;W=brother_in_law;W=cousin;W=uncle;
  stringof(List,W), reverse(List,[n,A,m|_]),
  (A=a;A=e).

gendnoun(W,fem):-
   ess(W),!.
   
wn_gend(W,Gen):-
  gendnoun(W,Gen),
  !.
  
wn_gend(W,Gen):-
     (jj(W);fct(W);r(W);grammw(W,S)),
     Gen=mas,
     !.

wn_gend(Testa,Gen):-
   stringof(MWord,Testa),
   on('_',MWord),
   recover_descriptions(Testa,[Lemma|Rest]),
   getnamesgen(Lemma,Cats),
    det_gend(Cats,Gen),
    !.
wn_gend(Testa,Gen):-
    turn_up_wn(Testa, Cats), 
    Cats\=[],
    det_gend(Cats,Gen),!.
   
wn_gend(Testa,Gen):-
    n_wn(Testa,Cats),
    on(18,Cats),
    Gen=any,
    !.

wn_gend(W,neu):-!.

det_gend(Cats,mas):-
    on(nmm,Cats),on(nmf,Cats),
    !.    
det_gend(Cats,mas):-
    on(nmm,Cats),
    !.    
det_gend(Cats,fem):-
    on(nmf,Cats),
    !.    
det_gend(Cats,mas):-
    on(sur,Cats),
    !.    
det_gend(nmm,mas):-
    !.    
det_gend(nmf,fem):-
    !.    
det_gend(sur,mas):-
    !.    
det_gend(Cats,neu):-
     !.    
   
lemmatize_dicf(Word, Word, m):-
   integer(Word),!.

lemmatize_dicf(Word, Word, k):-
    k(Word),!.

lemmatize_dicf(Word, Word, k):-
    lc4(Word, Codes),!.

lemmatize_dicf(Word, Word, k):-
     atomic(Word), Word\=[],
     spy_lower(Word, LowW, 1),
    nturn_up_wn(Word, Cats),
    !.

/*
lemmatize_dicf(Word, Word, S1):-
   var(Lemma),
   atomic(Word), Word\=[],
   stringof(Prefix, Word),
   on('-', Prefix),
   !.
*/
lemmatize_dicf(Word, Lemma, S1):-
   var(Lemma),
   atomic(Word), Word\=[],
   stringof(Prefix, Word),
   reverse(Prefix, [S|NRoo]),
   (on('_', Prefix),
    spy_lower(Word, LowW, Pol), Pol=0,
    (
     extract_root([S|NRoo], NRoot, Rest, S),
     S=s,
     reverse(NRoot,Lem),
     stringof(Lem, Lemma)
     ;
     reverse(Prefix, [S|Rest]),
     S\=s)
     ;
     Rest=NRoo),
   try_lemmasf(1, S, Rest, Lemma, S1),
   !.

try_lemmasf(N, s, Rest, Lemma, ss):-
   Rest=[s|R],
   append([s],Rest,Resto),
   reverse(Resto, Lemm), 
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmasf(N, s, Rest, Lemma, s):-
   Rest=[e,i|R],
   Resto=[y|R],
   reverse(Resto, Lemm), 
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmasf(N, s, Rest, Best, S):-
   Rest=[e|Resto],
   Resto=[S|R],
   sibil(S),
   reverse(Resto, Lemm), 
   reverse(Rest, Lemm1), 
   (cerca_lem_string(N, Lemm,Lemma), Best=Lemma
    ;
   cerca_lem_string(N, Lemm1,Lemma1), Best=Lemma1),
   !.

try_lemmasf(N, s, Rest, Lemma, S1):-
   Rest=[e|Resto],
   Resto=[S|R],
   sibil(S),
   reverse(Resto, Lemm), S1=s,
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmasf(N, s, Rest, Lemma, s):-
   reverse(Rest, Lemm), 
   Rest=[S|_], S\=s,
   \+ is_vow(S),
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmasf(N, s, Rest, Lemma, s):-
   reverse(Rest, Lemm), 
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmasf(N, d, Rest, Lemma, d):-
    Rest=[e,i,C|R],
   consonant(C),
   reverse(R, Le), 
   stringof(Le, Lem),
   mcon(Lem, C, Lemm),
   mcon(Lemm, y, Lemma),
   cercalemma(N,Lemma),
   !.

try_lemmasf(N, d, Rest, Lemma, d):-
   (Rest=[i|R],
    Resto=[y|R]
    ;
    Rest=[e|R],
    (Resto=Rest
      ;
     R=[C,C|R1],
     \+ is_vow(C),
     R2=[C|R1],
     Resto=R2
      ;
     Resto=R
      )),
   reverse(Resto, Lemm), 
   stringof(Lemm, Lemma),
   cercalemma(N,Lemma),
   !.

try_lemmasf(N, d, Rest, Lemma, d):-
    Rest\=[i|R],
    Rest\=[e|R],
    Resto=Rest,
   reverse(Resto, Lemm), 
   stringof(Lemm, Lemmas),
   cercalemmav(Lemmas,Lemma,S),
   !.

try_lemmasf(N, g, Rest, Lemma, g):-
   Rest=[n,i,C,C|R],
   reverse(R, Lemm), 
   append(Lemm,[C],Lemms),
   stringof(Lemms, Lemmas),
   cercalemmav(Lemmas,Lemma,S),
   !.

try_lemmasf(N, g, Rest, Lemma, g):-
   Rest=[n,i|R],
   append([e],R,Restt),
    (Resto=Restt
      ;
     Resto=R),
   reverse(Resto, Lemm), 
   stringof(Lemm, Lemmas),
   cercalemmav(Lemmas,Lemma,S),
   !.

try_lemmasf(N, S, Resto, Lemma, v):-
   append([S],Resto,Rest),
   reverse(Rest, Lemm), 
   stringof(Lemm, Lemmas),
   cercalemmav(Lemmas,Lemma,S1),
   !.
try_lemmasf(N, S, Resto, Word, S):-
   nonvar(S),
   append([S],Resto,Rest),
   reverse(Rest, Lemm), 
   stringof(Lemm, Word),
   (once(inf_v(Word,I))
     ;
     n_wn(Word,C)
     ;
     ht(Word,C)
     ;
     nwn(Word,C)
     ;
     wsu(Word,C,_)
     ;
     locwn(Word)
     ;
     up_wn(Word, Feat, Cats)
     ),
    !.

try_lemmasf(N, S, Resto, Word, S):-
   nonvar(S),
   append([S],Resto,Rest),
   reverse(Rest, Lemm), 
   stringof(Lemm, Word1),
   downcase_atom(Word1,Loww),
   (Word1\=Loww,
    stringof(Nrest, Loww),
    reverse(Nrest,[S|Nresto]),
    try_lemmasf(N, S, Nresto, Word, S)
    ;
    Word1=Loww,
    Word=Word1),
    !.
    
pp_word_cat(Word, Te, Mo, NewLex):-
   v(Word, Cat),
   lemmatize_dic_v(Word, Lemma, Rest),
   build_mult_lemm(Word,Lemma, Rest,NewLex,NWord),
   decide_mood_tense(NWord,Rest,Mo,Te),
   AllCats=[v-Word-NewLex-v-[pred=NewLex, subcat=Cat, mood=Mo, tense=Te]].

pp_word_cat(Word, Te, Mo, NewLex):-
   lemmatize_dic_v(Word, Lemma, Rest),
   build_mult_lemm(Word,Lemma, Rest,NewLex,NWord),
   decide_mood_tense(NWord,Rest,Mo,Te),
   AllCats=[v-Word-NewLex-v-[pred=NewLex, subcat=Cat, mood=Mo, tense=Te]].

pp_word_cat(Word, Te, Mo, NewLex):-
   spy_lower(Word,Low,Pol),
   Pol=1,
   pp_word_cat(Low, Te, Mo, NewLex),!.
   
build_mult_lemm(Lex,Lex1,Rest,NewLex,Pre):-
    stringof(Word,Lex),
    on('_',Word),
    nonvar(Rest),
    (Rest=d, Mo=ind, Te=pass
    ; Rest=g, Mo=ger
    ; Rest=s, Mo=ind, Te=pres),
    decompose_secunderscore(Word, Suff),
    decompose_underscore(Word, Pref),
    stringof(Suff,Suf),
    stringof(Pref,Pre),
    mcon(Lex1,'_',NLem),
    mcon(NLem,Suf,NewLex),
    !.
build_mult_lemm(Lex,Lex1,Rest,Lex,Rest):-
    stringof(Word,Lex),
    on('_',Word),
    var(Rest),
    !.
build_mult_lemm(Word,Lex1,Rest,Lex1,Word):-!.

decide_mood_tense(Word,Rest,Mo,Te):-
    nonvar(Rest), Rest=g,   
   (nonvar(Mo),
    Mo=ger
    ;
    var(Mo), Mo=ger),
    !.

decide_mood_tense(Word,C,Mo,Te):-
    aux(Word, Lem, Mo, Te, Pe, Nu),!.
decide_mood_tense(Word,C,Mo,Te):-
    modal(Word, Lem, Mo, Te, Pe, Nu),!.
decide_mood_tense(Word,C,Mo,Te):-
    v(Word, Lem, Mo, Te, Pe, Nu),!.

decide_mood_tense(Word,C,Mo,Te):-
   stringof(Pr, Word),
   reverse(Pr,[d,e|_]),
   (nonvar(Mo),
    (Mo=ind; 
      nonvar(C), C=d, Mo=part)
    ;
   var(Mo), Mo=ind),
   Te=pass.
decide_mood_tense(Word,C,Mo,Te):-
   stringof(Pr, Word),
   on('_',Pr),
   (nonvar(Mo),
    (Mo=ind; 
       nonvar(C), C=d, Mo=part)
    ;
   var(Mo), Mo=ind),
    Te=pass.
decide_mood_tense(Word,C,Mo,Te):-
   (var(C);C=s), 
    v(Word,S),
   Te=pres, Mo=ind,!.

decide_mood_tense(Word,C,Mo,Te):-
   m_lex(Word, Codes, Fr),
   sort(Codes, SortCodes), 
   on(CodeAtm, SortCodes),
   atom_to_term(CodeAtm,Code,L),
   concat_atom(Val,:,CodeAtm),
%   stringof(Val, CodeAtm), 
   (
%   length(Val,L), L=3, 
      (on('3',Val), T=p, P=r
       ;
        on(g,Val), T=g
       ;
        on(p,Val), T=p, P=p
       )
     ;
    Val=[v,P|_]),
   (P\=r,P\=im,P\=s,
   (P=r, Te=pres, Mo=ind
     ;
    (P=pt, Mo=ind, C=n; 
     P=pt, Mo=ind, C=d; 
     P=pp, Mo=part, C=d; 
     P=p-pp, Mo=part, C=d; 
     P=pp, Mo=part, C=n; 
     P=p-pp, Mo=part, C=n; 
     P=r, Mo=ind, C=s; 
     P=d, (Mo=ind, C=n; Mo=ind, C=d; Mo=part, C=d)
       ),
    Te=pass)
    ;
    P=d, nonvar(C),
     (C=d,(Mo=ind;Mo=part);
      C=g, Mo=ger)
    ;
    P=g, Mo=ger
    ),
   !.

/*
v:3
v:b
v:d:(i,ti,t,refl) root doubles
v:g
v:g:(verb)
v:i:(types)
v:id:(types) - identical
v:im:x - irregular modals
v:p-pp:(verb)
v:p:(verb)
v:pp
v:pp:(verb)
v:pt:(verb)
v:r:(types)
v:s:(support verb) 
v:pr:be - present
*/
decide_mood_tense(Word,Rest,Mo,Te):-
   m_lex(Word, Codes, Fr),
   sort(Codes, SortCodes), 
   on(CodeAtm, SortCodes),
   term_to_atom(CodeAtm,Code),
   concat_atom(Val,:,Code),
   (on('3',Val)
     ;
     on(g,Val)
     ;
     on(p,Val)
     ;
     Val=[v,P|_],
     P=r),
    Mo=ind,
   (Rest=d, Te=pass; Te=pres),   
   !.


new_form(nil,nil):-!.
/*
new_form(Lex,S):-
    one sw(Lex-Cat-Feat),
    nonvar(Cat),
    search_categories(Cat,S), S\=[].
new_form(Lex,[n|Cs]):-
	new_n(Lex,L,N),
   findall(C,(on(C,[v,a,q]),create_form(Lex,C)), Cs),
   !.
new_form(Lex,[n|Cs]):-
	new_np(Lex,L,N),
   findall(C,(on(C,[v,a,q]),create_form(Lex,C)), Cs),!.
new_form(Lex,[n|Cs]):-
	new_npro(Lex,L,N),
   findall(C,(on(C,[v,a,q]),create_form(Lex,C)), Cs),!.
new_form(Lex,av):-
	new_avv(Lex,N).
new_form(Lex,[n]):-
	new_n(L,Lex,N),
%   findall(C,(on(C,[v,a,q]),create_form(Lex,C)), Cs),
   !.
new_form(Lex,[n]):-
	new_np(L,Lex,N),
%   findall(C,(on(C,[v,a,q]),create_form(Lex,C)), Cs),
   !.
new_form(Lex,[n]):-
	new_npro(L,Lex,N),
%   findall(C,(on(C,[v,a,q]),create_form(Lex,C)), Cs),
   !.
new_form(Lex,[q,v]):-
	new_pp_ger(Lex,V).
new_form(Lex,v):-
	new_v(Lex,Lem,M,T,P,N).
new_form(Lex,a):-
	new_a_engl(Lex),!.
new_form(Lex,n):-
    sw(Lex-[A]-[[A]-Lemma-Feats]),
    create_tratti(Feats, P,N,Gen),
    appiattisci(Feats,Ff),
    on(feat=Feat, Ff),
    (atomic(Feat), Fs=[Feat]; list(Feat), Fs=Feat),
    translate_wn_cats(Fs, CatSem),
    on(pred=Lem, Feats),
    (N=plur,
     asserta(
            new_n(Lem,Lex,Gen))
    ; 
     N=sing,
     asserta(
            new_n(Lex,Lex,Gen))
     ;
     asserta(
            new_n(Lem,Lex,Gen))
     ),
    asserta(
            new_pred_n(Lex, nil, CatSem, [])).
new_form(Lex,av):-
    one sw(Lex-[A]-[[A]-Lemma-Feats]),
    (A=avv;A=avvl).
new_form(Lex,p):-
    one sw(Lex-[A]-[[A]-Lemma-Feats]),
    (A=php;A=phl).
*/

filter_new(a,ag).
filter_new(av,avv).
filter_new(C,C).

explore_lems([], [], Testa, [], []):-!.
explore_lems([Lems|[]], [Ct], Testa, [Lem], [Feas]):-
    (Lems=[pred=Lem, feat=Fea], Ct=n, Testa=Lem, Feas=[pers=3,gen=G,num=N,feat=Fea]
      ;
     Lems=Ct-Testa-Lem-Ct-Feas
      ;
     Lems=Ct-[Testa-Lem-Cts-Feas]
      ;
     Lems=Cts-[Ct-Testa-Lem-Ct-Feas]
      ;
     Lems=Ct-(Testa-Lem-Ct-Feas)
      ;
     Lems=Ct-Lem-Feas, Testa=Lem
      ;
     Lems=Lem-Testa-Ct-Feas
      ;
     Lems=[Ct]-Lem-Feas, Testa=Lem
      ;
     Lems=Testa-Lem-Ct-Feas
      ),
      !.
explore_lems([Lems|Lemm], [Ct|Cat], Testa, [Lem|Le], [Feas|Feats]):-
    (Lems=[pred=Lem, feat=Fea], Ct=n, Testa=Lem, Feas=[pers=3,gen=G,num=N,feat=Fea]
      ;
     Lems=Ct-Testa-Lem-Ct-Feas
      ;
     Lems=Ct-[Testa-Lem-Cts-Feas]
      ;
     Lems=Cts-[Ct-Testa-Lem-Ct-Feas]
      ;
     Lems=Ct-(Lemma-Lem-Ct-Feas)
      ;
     Lems=Ct-Lem-Feas
      ;
     Lems=Lem-Testa-Ct-Feas
      ;
     Lems=[Ct]-Lem-Feas
      ;
     Lems=Testa-Lem-Ct-Feas
      ),
     explore_lems(Lemm, Cat, Testa, Le, Feats),
      !.
explore_lems(Lems, Ct, Testa, Lem, Feas):-
     Lems=[pred=Lem, feat=Fea], Ct=n, Testa=Lem, Feas=[pers=3,gen=G,num=N,feat=Fea]
      ;
     Lems=Ct-Testa-Lem-Ct-Feas
      ;
     Lems=Ct-(Lemma-Lemma-Ct-Feats)
      ;
     Lems=Ct-Lem-Feas
      ;
     Lems=Lem-Testa-Ct-Feas
      ;
     Lems=[Ct]-Lem-Feas
      ;
     Lems=Testa-Lem-Ct-Feas,
      !.
explore_lems([Lems|Lemm], Ct, Testa, Lem, Feas):-
     explore_lems(Lemm, Ct, Testa, Lem, Feas),
      !.


decompose_underscore([], []):-!.
decompose_underscore(['_',s,'-'|MWord], []):-
%    decompose_underscore(MWord, Word),
    !.
decompose_underscore(['-'|MWord], []):-!.
decompose_underscore(['_'|MWord], []):-!.
decompose_underscore(['/'|MWord], []):-!.
decompose_underscore([W|MWord], [W|Word]):-
    decompose_underscore(MWord, Word),!.

decompose_secunderscore(MWord, Word):-
   reverse(MWord, RWord),
   (RWord=[A,B|Rest], 
     \+ select_punct(A,_),
     \+ select_punct(B,_), 
      NWord=RWord
     ;
     (RWord=[A|Rest], 
      \+ select_punct(A,_),
       NWord=RWord
      ;
      RWord=[A|Rest],
      select_punct(A,_),
      NWord=Rest
      )),
    decompose_underscore(NWord, Wor),
   reverse(Wor, Word),
   !.

decomp_unders_hyph([], [], []):-!.
decomp_unders_hyph(['_',s,'-'|MWord], [], MWord):-!.
decomp_unders_hyph(['-'|MWord], [], MWord):-!.
decomp_unders_hyph(['/'|MWord], [], MWord):-!.
decomp_unders_hyph(['_'|MWord], [], MWord):-!.
decomp_unders_hyph([W|MWord], [W|Word], Rest):-
    decomp_unders_hyph(MWord, Word, Rest),!.

gend('Miss',f).
gend('Mr',m).
gend('Mrs',f).
gend('Ms',f).
gend(miss,f).
gend(mr,m).
gend(mrs,f).
gend(ms,f).

define_number(Fea,Word,Lemma,Num):-
     Fea\=[],
     on(num=N,Fea),
     (N=s, Num=sing;Num=plur),
     !.
define_number(Fea,Word,Lemma,Num):-
    lemmatize_dic(Word, Lemma, S),
    (Fea\=[],
     on(num=N,Fea),
     (N=s, Num=sing;Num=plur)
     ;
     getnumlex(Word,S,Num)
    ),!.

assert_new(Lex,Lemma,Num,Ns):-
    on(Cat,Ns),
    (Cat=np;Cat=nh),
    (Num=plur,
      asserta(
            new_npro(Lemma,Lex,Gen))
     ;
     Num=sing,
     mcon(Lex,s,Lexx),
     asserta(
            new_npro(Lex,Lexx,Gen))),
     assert_new_pred(Lex,np).

assert_new(Lex,Lemma,Num,Ns):-
    on(n,Ns),
    (Num=plur,
     asserta(
            new_n(Lemma,Lex,Gen))
    ; 
     Num=sing,
     mcon(Lex,s,Lexx),
     asserta(
            new_n(Lex,Lexx,Gen)), Lemma=Lex),
     assert_new_pred(Lemma,n).

assert_new(Lex,Lemma,Num,Ns):-
    on(num,Ns),
    asserta(
            new_n(Lex,Lex,Gen)),
    asserta(
            new_pred_n(Lex, nil, [data, tempo], [])).

assert_new(Lex, Lemma, Num, Ns) :-
    (Num=plur,
     asserta(
            new_n(Lemma,Lex,Gen))
    ; 
     Num=sing,
     mcon(Lex,s,Lexx),
     asserta(
            new_n(Lex,Lexx,Gen)), Lemma=Lex),
     assert_new_pred(Lemma,n).

create_form(Lex,n):-
    sw(Lex-[A]-[[A]-Lemma-Feats]),
    assert_multiword(n,Lex,Feats).

create_form(Lex,S):-
    sw(Lex-Cat-Feat),
    nonvar(Cat),
    search_categories(Lex,Cat,S).

create_form(X,n):-
   nt(X),
    asserta(
            new_n(X,X,Gen)),
    asserta(
            new_pred_n(X, nil, [data, tempo], [])).

create_form(X,a):-
    jj(X),
    asserta(
            new_pred_a(X, [valutativo], [])),
    asserta(
            new_a_engl(X)).
            
create_form(X,n):-
   nn_word_cat(X, Num, Lemma,Cat),
   assert_new_nouns(X,Lemma,Num,Lemma,Cat).

create_form(X, q):-
    pp_word_cat(X, Te, part, Lemma),
    asserta(
            new_pp_ger(X,Lemma)).

create_form(X,av):-
   create_avv(X, modal),
    asserta(
            new_avv(X,modal)).

create_form(Word,S):-
    atomic(Word),
    (spy_lower(Word, LowW, 1),Wrd=LowW
      ; Wrd=Word),
    sw(Wrd-Cat-Feat),
    nonvar(Cat),
    search_categories(Word,Cat,S),
    check_allverbs(Cat),
    !.


create_form(X,v):-
   v_word_cat(X, Num, Te, Mo, Pers, Lemma),
   (nonvar(Mo),
    asserta(
            new_v(X, Lemma,Mo, Te, Pers, Num))
    ;true).


create_form(Lex,S):-
    sw(Lex-Cat-Feat),
    nonvar(Cat),
    search_categories(Lex,Cat,S),
    !.

assert_abbreviation(Lex):-
      asserta(
            new_npro(Lex,Lex,Gen)),
       (assert_new_pred_mw(Lex,Lex,np)
         ;
         asserta(
            new_pred_np(Lex, nil, [astratto,nquant], []))),
     !.

confirm_form(X,X,_,ag):-
    asserta(
            new_pred_a(X, [valutativo], [])),
    asserta(
            new_a_engl(X)).

confirm_form(X,Lemma,Num,n):-
   assert_new_nouns(X,X,Num,Lemma,n).

confirm_form(X,Lemma,Num,avv):-
    asserta(
            new_avv(X,modal)).

guess_cat(W,T,[num]):-
   cardinale(W,Card, Gen, Num),!.
guess_cat(W,T,[num]):-
   ordinale(W,Card, Gen, Num),!.


assert_new_pred_mw(Lex,Lemma,np):-
     new_pred_np(Lex, nil, CatSem, []),!.

assert_new_pred_mw(Lex,Lemma,np):-
     new_pred_np(Lemma, nil, CatSem, []),!.

assert_new_pred_mw(Lex,Lemma,n):-
     new_pred_np(Lex, nil, CatSem, []),!.

assert_new_pred_mw(Lex,Lemma,n):-
     new_pred_np(Lemma, nil, CatSem, []),!.

assert_new_pred_mw(Lex,Lemma,np):-
    (Lemma\=[],Lem=Lemma;Lemma=[],Lem=Lex),
    trova_CatSem_mw(np, Lem, CatSem),
    asserta(
            new_pred_np(Lex, nil, CatSem, [])).

assert_new_pred_mw(Lex,Lemma,n):-
    (Lemma\=[],Lem=Lemma;Lemma=[],Lem=Lex),
    trova_CatSem(n, Lem, CatSem),
    asserta(
            new_pred_n(Lex, nil, CatSem, [])).

assert_new_pred(Lex,Lemma,np):-
     new_pred_np(Lex, nil, CatSem, []),!.

assert_new_pred(Lex,Lemma,np):-
     new_pred_np(Lemma, nil, CatSem, []),!.

assert_new_pred(Lex,Lemma,n):-
     new_pred_np(Lex, nil, CatSem, []),!.

assert_new_pred(Lex,Lemma,n):-
     new_pred_np(Lemma, nil, CatSem, []),!.

assert_new_pred(Lemma,np):-
    Lemma\=[],
    trova_CatSem(n, Lemma, CatSem),
    asserta(
            new_pred_np(Lemma, nil, CatSem, [])).

assert_new_pred(Lemma,n):-
    Lemma\=[],
    trova_CatSem(n, Lemma, CatSem),
    asserta(
            new_pred_n(Lemma, nil, CatSem, [])).

assert_new_pred(Lemma,num):-
    asserta(
            new_pred_np(Lemma, nil, [data, year, durata, tempo], [])).

a_word_cat(Word, Num, Lem, a):-
   atomic(Word),
   spy_lower(Word, LowW, 1),
   word_cats(0, File, Word, LowW, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lem, Feas),
   appiattisci(Ct,C),
   on(ag,C),
   !.

a_word_cat(Word, Num, Lem, a):-
   atomic(Word),
   word_cats(0, File, Word, Word, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lem, Feas),
   appiattisci(Ct,C),
   on(ag,C),
   !.

write_new_forms:-
   findall(NewF, collect_all_nf(NewF), NewForms),
   write_dic(user,NewForms),
   !.

write_dic(File,[]):-!.
write_dic(File,[N|NewForms]):-
   writenl(_,N),
   write_dic(File,NewForms),!.

collect_all_nf(NewForms):-
   collect_avvs, NewForms=avv.

collect_all_nf(NewForms):-
   collect_nouns, NewForms=nouns.

collect_all_nf(NewForms):-
   collect_pps, NewForms=pger.

collect_all_nf(NewForms):-
   collect_vs, NewForms=verb.

collect_all_nf(NewForms):-
   collect_as, NewForms=agg.

collect_all_nf(NewForms):-
   collect_prednps, NewForms=prednp.

collect_all_nf(NewForms):-
   collect_prednouns, NewForms=predn.

collect_all_nf(NewForms):-
   collect_predaggs, NewForms=preda.


collect_avvs:-
   new_avv(X,Type),
   write(dictionary, avv(X,Type)),
   fail;true,
   !.

collect_nouns:-
   new_n(Y,X,Gen),
   write(dictionary, n(Y,X,Gen)),
   fail;true,
   !.

collect_pps:-
   new_pp_ger(X,Lemma),
   write(dictionary, pp_ger(X,Lemma)),
   fail;true,
   !.

collect_vs:-
   new_v(Verbo, Lemma, Mo, Te, Pers, Num),
   write(dictionary, v(Verbo, Lemma, Mo, Te, Pers, Num)),
   fail;true,
   !.

collect_as:-
   new_a_engl(X),
   write(dictionary, a_engl(X)),
   fail;true,
   !.

collect_prednps:-
   new_pred_np(Lemma, nil, CatSem, []),
   write(dictionary, pred_np(Lemma, nil, CatSem, [])),
   fail;true,
   !.

collect_prednouns:-
   new_pred_n(Lemma, nil, CatSem, []),
   write(dictionary, pred_n(Lemma, nil, CatSem, [])),
   fail;true,
   !.

collect_predaggs:-
   new_pred_a(X, CatSem, []),
   write(dictionary, pred_a(X, CatSem, [])),
   fail;true,
   !.

notmainverb :-
   findall_poss(Si),
   Si\=[],
   findall(Cat,(on(I-W, Si),
              nogen_member(Cat-X,W),
              (coplbh(X);supporto(X))
              ),Cats),
   Cats\=[],!.


/*
avv(W,Type):-

v(wants, want, ind, pres, 3, sing).
nome_x(X,Lemma,Gen,Num) :-
nopro_x(X,Lemma,Gen,Num) :-
   nn_word_cat(X, Num, Lemma),
   !.

nopro_x(X,X,Gen,Num) :-
   findall_poss(Si),
   Si\=[],
   on(I-W, Si),
   nogen_member(Cat-X,W),
   check_allnouns(Cat),!.

pp_ger(Word, Lemma):-
    vmf(Word,Lemma,vbg),
   !.
v(W, Lemma, Mo, Te, 3, Num):-
  v_word_cat(W, Num, Te, Mo, Pers, Lemma),!.

n(N, M, __):-
   nonvar(N),
   nn_word_cat(N, Num, M),
   M=N, Num=sing,
   !.
n(M, N, __):-
   nonvar(N),
   nn_word_cat(N, Num, M),
   !.
*/

/*
LISTA DELLE TERMINAZIONI:  ndes, vdes, adjdes , advdes (verificare)
*/

adj(-1, vt).
adj(-1, vi).
adj(-1, vti).
adj(-1, n).
adj(-1, a).
adj(-1, adj).
adj(-1, adv).

adj(vdes, -1).
adj(ndes, -1).
adj(adjdes, -1).
adj(adv, -1).
adj(vt, -1).
adj(vi, -1).
adj(vti, -1).

adj(vt, vdes).
adj(vi, vdes).
adj(vti, vdes).
adj(n, ndes).
adj(a, adjdes).
adj(adj, adjdes).

is_alias.

adjust(Morpho, Ending, NewMorpho, MorphoCode) :-
   is_list(NewMorpho),
   reverse(NewMorpho, [Last, PreLast | Rest]),
   adj_rl(Ending, Last, PreLast, Rest, RevMorpho, MorphoCode),
%   !,
   reverse(RevMorpho, Morpho).

adjust(Morpho, Ending, NewMorpho, MorphoCode) :-
   is_list(Morpho),
   reverse(Morpho, RevMorpho),
   adj_rl(Ending, Last, PreLast, Rest, RevMorpho, MorphoCode),
   !,
   reverse([Last, PreLast | Rest], NewMorpho).

adjust_rule(
   _,
   Root + [Last3 , Last2]    +  s,
   Root + [Last3,  Last2, e],
   es_consonants([Last3, Last2])
   ).

   
adjust_rule(
   _,
   Root + [Last]       + ing,
   Root + [Last, Last],
   monosyllable(Root + [Last])
   ).
   
adjust_rule(
   _,
   Root + [Last1]           +  d,
   Root + [Last1, Last1, e],
   monosyllable(Root+[Last1])
   ).

adjust_rule(
   v:r:_,
   Root + [Last3, Last2]    + d,
   Root + [Last3, Last2, e],
   ed_without_doubling([Last2, Last3 | Root])
   ).
    
adjust_rule(
   v:d:_,
   Root + [Voc, Cons]    + ing,
   Root + [Voc, Cons, Cons],
   doubling_ending([Voc, Cons])
   ).
    
adjust_rule(
   v:d:_,
   Root + [Voc, Cons]    + d,
   Root + [Voc, Cons, Cons, e],
   doubling_ending([Voc, Cons])
   ).

adjust_rule(
   v:id:_,
   Root + [Voc, Cons]    + ing,
   Root + [Voc, Cons, Cons],
   doubling_ending([Voc, Cons])
   ).
    
   adjust_rule(
   _,
   Root + [Car, y]    +  d,
   Root + [Car, y, e],
   vocal(Car)
   ).
     
adjust_rule(
   _,
   Root + [Last1, e] +  ing,
   Root + [Last1],
   consonant(Last1)
   ).

adjust_rule(
   _,
   Root + [c] +  ing,
   Root + [c, k],
   true
   ).

adjust_rule(
   _,
   Root + [c] +  d,
   Root + [c, k, e],
   true
   ).

adjust_rule(
   _,
   Root + [Last1, e] + er,
   Root + [Last1],
   consonant(Last1)
   ).
   
adjust_rule(
   _,
   Root + [Last1, e] + est,
   Root + [Last1],
   consonant(Last1)
   ).
   
adjust_rule(
   _,
   Root + [Last2, y] + ly,
   Root + [Last2, i],
   consonant(Last2)
   ).
   
adjust_rule(
   _,
   Root + [Cons, y] + er,
   Root + [Cons, i],
   consonant(Cons)
   ).

adjust_rule(
   _,
   Root + [Cons, y] + est,
   Root + [Cons, i],
   consonant(Cons)
   ).

adjust_rule(
   _,
   Root + [Last3, y] + s,
   Root + [Last3, i, e],
   consonant(Last3)
   ).
   
adjust_rule(
   _,
   Root + [Last3, y] + d,
   Root + [Last3, i, e],
   consonant(Last3)
   ).
   
adjust_rule(
   _,
   [] + [Root, i, e] + ing,
   [] + [Root, y],
   ying_root(Root)
   ).
   

/* L'ordine dei caratteri è inverso */
monosyllable([C2, V, C1]) :-
   vocal(V),
   consonant(C1),
   consonant(C2).

monosyllable([V, C2, C1]) :-
   vocal(V),
   consonant(C1),
   consonant(C2).

monosyllable([V, C2, V1]) :-
   vocal(V),
   consonant(C2),
   vocal(V1).

monosyllable([C3, V, C2, C1]) :-
   vocal(V),
   consonant(C1),
   consonant(C2),
   consonant(C3).

monosyllable([C4, V, C3, C2, C1]) :-
   vocal(V),
   consonant(C1),
   consonant(C2),
   consonant(C3),
   consonant(C4).

consonant(C) :-
   \+ vocal(C).

vocal(a).
vocal(e).
vocal(i).
vocal(u).
vocal(o).
vocal(y).



es_consonants([_,x]).
es_consonants([_,s]).
es_consonants([_,z]).
es_consonants([_,o]).
es_consonants([s,h]).
es_consonants([c,h]).

ying_root(l).
ying_root(d).

ed_without_doubling([Last | Rest]) :-
   consonant(Last),
   \+ monosyllable([Last | Rest]).

doubling_ending([Voc, Cons]) :-
   vocal(Voc),
   consonant(Cons).

/********
:- last_cars([a,b,c,d], Car1, Car2, K)
********/
last_cars([Car1, Car2], Car1, Car2, [Car1]) :-
   !.
last_cars([Car | Cars], PreLast, Last, [Car | RestCars]) :-
   last_cars(Cars, PreLast, Last, RestCars).


compile_adjust_rules :-
   kill(adj_rl),
   adjust_rule(
      RootCode, Root + PreEnd+ Ending, AdjRoot+ AdjPreEnd,  Condition),
   compile_adjust_rule(
      RootCode, Root, PreEnd, Ending, AdjRoot, AdjPreEnd, Condition),
   fail ; true.


compile_adjust_rule(
   RootCode, Root, PreEnd, Ending, AdjRoot, AdjPreEnd, Condition)
   :-
   normalize_pre_ends(
      PreEnd, AdjPreEnd,  
      NormPreEnd, NormAdjPreEnd),
   reverse(NormAdjPreEnd, [C1, C2 | RestAdjPreEnd]),
   reverse(NormPreEnd, RevNormPreEnd),
   create_list(Root, RevNormPreEnd, RootList),
   create_list(AdjRoot, RestAdjPreEnd, AdjRootList),
   compile_condition(Condition, CompCondition),
   nl,
   write(adj_rl(Ending, C1, C2, AdjRootList, RootList, RootCode)),
   writenl(_,' :-'),
   tab(3), 
   write(CompCondition),
   write('.'),
   assert(
      (adj_rl(Ending, C1, C2, AdjRootList, RootList, RootCode) :- 
          CompCondition)),
   !.

compile_adjust_rule(Root, PreEnd, Ending, AdjRoot, AdjPreEnd, Condition) :-
   beep(1),
   writeseqnl([failure, compiling,
      adjust_rule(Root + PreEnd + Ending, AdjRoot+ AdjPreEnd, Condition)]). 


/************
************/
normalize_pre_ends(
   PreEnd,        [C2], 
   [C1 | PreEnd], [C1, C2])
   :-
   var(C2),
   !.
normalize_pre_ends(
   PreEnd,    [], 
   NewPreEnd, [C1, C2]) 
   :-
   !,
   append([C1, C2], PreEnd, NewPreEnd).
normalize_pre_ends(
   PreEnd,        [C2], 
   [C1 | PreEnd], [C1, C2])
   :-
   atomic(C2).
normalize_pre_ends(
   PreEnd, [A , B | AdjPreEnd], 
   PreEnd, [A , B | AdjPreEnd]).
   

/************
?- append_plus(Root+b+c, x, P)
************/
append_plus(P1, P2, P1+P2) :-
   var(P2),
   !.
append_plus(P1, P2, P1+P2) :-
   P2 \= A+B,
   !.
append_plus(P1, A+B, P3) :-
   append_plus(P1+A, B, P3). 

/**************
?- create_list(List, [k, El] , NewList).
***************/
create_list(List1, List2, NewList) :-
   append(List2, List1, NewList).
   
   
/********
:- compile_condition(monosyllable(Root+Last), C)
*********/

compile_condition(Condition, CompCondition) :-
   Condition=..[Pred | Args],
   compile_args(Args, CompArgs),
   CompCondition=..[Pred | CompArgs].

compile_args([], []) .

compile_args([Arg | Args], [CompArg | CompArgs])  :-
   compile_arg(Arg, CompArg),
   compile_args(Args, CompArgs).

compile_arg(Arg, Arg) :-
   var(Arg),
   !.

compile_arg(A+B, CompArg) :-
   !,
   create_list(A, B, CompArg).

compile_arg(Arg, CompArg) :-
   compound(Arg),
   !,
   compile_condition(Arg, CompArg).

compile_arg(Arg, Arg).

rebuild_root(Pred, NewR, R, R, Cat, Cat):-
    var(NewR), !.

rebuild_root(Pred, NewR-P, R, Nr, Cat, Nc):-
     nonvar(NewR),
     NewR=Root+Flex, 
     mcon(Root, Flex, Nr), 
     (P=0, Nc=fr(Cat, Cat, Pred)
      ; 
      P=1, Nc=fr(adv, Cat, Pred)), !.

constr(File, W-Pred, Root, Morph, Code, Reg, NewR):-
  !,
 (sellexcl(Code, Class),
  (Class=v,
   ccsv(Root, Morph, Code, Reg)
   ;
   on(a, Class),
   ccsa(Root, Morph, Code)
   ;
   on(n, Class),
   ccsn(Root, Morph, Code, Mode),
   (Mode=1-Suff, NewR=Root+Suff-0
    ;
    Mode=0
    ;
    Mode=0-_)
   ;
   (on(n, Class)
    ;
    on(a, Class)),
    selmorf(Morph),
     (ccav(Root, Morph, Code), NewR=Root+Morph-1
     ;
      ccsan(Root, Morph, Code), NewR=Root+Morph-1
     ))
   ;
%   Reg=irreg(Cl, SubCl, Fn),
   Morph=I+Cli,
   on(v:C, Code),
   ccsv(Root, Morph, v:C, Reg)
   ;
   selmorfz(Morph, Code, Ncode, Nmorf),
   ccaz(Root, Nmorf, Ncode)
/*   ;
   on(v:C, Code),
   ccsv(Root, Morph, v:C, Reg)*/
   ),
   assertdic(File, W-Pred, Root, Code),!.

constr_cl(W-Pred, Root, Morph, Code):-
   (sellexcl(Code, Class),
    Class=v,
    ccsv(Root, Morph, Code, Reg)
   ;
    Morph=I+Cli,
    on(v:C, Code),
    ccsv(Root, Morph, v:C, Reg)),
    !.

sellexcl(v:i-v:C:_, v).
sellexcl(v:Coniug-Cl-SubCl-Form-_:_, v).
sellexcl(v:C:_, v).
sellexcl(s:Code, [n]).
sellexcl(sp:Code, [n]).
sellexcl(sv:Code, [n]).
sellexcl(st:Code, [n]).
sellexcl(sa:Code, [a, n]).
sellexcl(as:Code, [a, n]).
sellexcl(sapr:Code, [a, n]).
sellexcl(agg:Code, [a]).
sellexcl(aggpp:Code, [a]).
sellexcl(aggpr:Code, [a]).


selmorf(mente).
selmorf(amente).
selmorf(emente).
selmorf(issima+mente).

selmorfz('', Code, Code, '').
selmorfz(ecco+_, Code, inter, '').

ccsn(Root, Morph, s:Code, Mode-Suff):-
   (Code=Class:Features),
   nom_des(Root, Class, Features, Morph, Feats),
   (on(mode=_, Feats), Mode=1, 
    on(suff=Suff, Feats)
    ;
    Mode=0), 
   !.

ccsn(Root, Morph, s:Code, 0):-
   (Code=ore:Feats),
   nom_des(Root, ore, _, Morph, _), 
   !.

ccsn(Root, Morph, sa:Code, 0):-
   (Code=ore;Code=io;Code=ico),
   nom_des(Root, Code, _, Morph, _), 
   !.

ccsn(Root, Morph, sa:Code, 0):-
   (Code=ore:Feats),
   nom_des(Root, ore, Feats, Morph, _), 
   !.

ccsn(Root, Morph, sa:Code, Mode-Suff):-
   (Code=Class:Features),
   nom_des(Root, Class, Features, Morph, Feats), 
   (on(mode=_, Feats), Mode=1, 
    on(suff=Suff, Feats)
    ;
    Mode=0), 
   !.

ccsn(Root, Morph, st:Code, 0):-
   (Code=Class:Features),
   nom_des(Root, Class, Features, Morph, _), 
   !.
ccsn(Root, Morph, sp:Code, 0):-
   (Code=Class:Features),
   nom_des(Root, Class, Features, Morph, _), 
   !.

ccav(_,amente, agg:Code):- !.
ccav(_,emente, agg:Code):- !.
ccav(_,emente, aggpr:Code):- !.
ccav(_,amente, aggpp:Code):- !.
ccav(_,mente, as:o):- !.
ccav(_,mente, as:e):- !.
ccav(_,mente, as:e:_):- !.
ccav(_,emente, as:e):- !.
ccav(_,amente, as:o):- !.
ccav(_,amente, as:e):- !.
ccav(_,amente, sa:a:_):- !.
ccav(_,amente, sa:o:_):- !.
ccav(_,amente, sa:ico:_):- !.
ccav(_,amente, sa:ico):- !.
ccav(_,amente, sa:io:_):- !.
ccav(_,mente, agg:e):- !.
ccav(_,mente, agg:e:_):- !.
ccav(_,mente, agg:o):- !.
ccav(_,amente, sa:go:_):- !.
ccav(_,amente, sa:co:_):- !.
ccav(_,amente, sa:ca:_):- !.
ccav(_,mente, sa:e:_):- !.
ccav(_,mente, sa:e):- !.
ccav(_,emente, sa:e:_):- !.
ccav(_,emente, sa:e):- !.
ccav(_,emente, s:e:_):- !.
ccav(_,emente, sapr:e:_):- !.
ccav(_,mente, s:e:_):- !.
ccav(_,amente, s:a:_):- !.
ccav(_,issimo, s:e:_):- !.
ccav(_,issimo, agg:Code):- !.
ccav(_,issima+mente, agg:Code):- !.
ccav(_,issima+mente, sa:Code):- !.

/* categorie invariabili */
ccaz(_,'', prep):- !.
ccaz(_,'', prep:art):- !.
ccaz(_,'', loc:prep):- !.
ccaz(_,'', loc:avv):- !.
ccaz(_,'', punt):- !.
ccaz(_,'', dirs):- !.
ccaz(_,'', par):- !.
ccaz(_,'', puntint):- !.
ccaz(_,'', punto):- !.
ccaz(_,'', cosu:_):- !.
ccaz(_,'', cong:_):- !.
ccaz(_,'', congf:_):- !.
ccaz(_,'', avv):- !.
ccaz(_,'', adv:_):- !.
ccaz(_,'', adv:C):- !.
ccaz(_,'', inter):- !.
ccaz(_,'', num:_):- !.
ccaz(_,'', pron:C):- !.
ccaz(_,'', clit:_):- !.
ccaz(_,'', art:_):- !.



ccaz(_,'', s:z:_):- !.
ccaz(_,'-', s:z:_):- !.
ccaz(_,'', s:p:_):- !.
ccaz(_,'', s:c:_):- !.
ccaz(_,'', s:geo:_):- !.
ccaz(_,'', s:tg:_):- !.
ccaz(_,'', s:tm:_):- !.
ccaz(_,'', s:t:_):- !.
ccaz(_,'', s:ts:_):- !.
ccaz(_,'', s:io:_):- !.
ccaz(_,'', s:ie:_):- !.
ccaz(_,'', s:ab:_):- !.
ccaz(_,'', s:ab:_:_):- !.
ccaz(_,'', sa:z:_):- !.
ccaz(_,'', sv:z:_):- !.
ccaz(_,'', agg:z):-!.
ccaz(_,'', agg:ind):-!.
ccaz(_,'', agg:z:_):-!.
ccaz(_,'', agg:io):-!.
ccaz(_,'', agg:num:_):-!.
ccaz(_,'', vc:loc:_):-!.
ccaz(_,'', as:z):-!.
ccaz(_,'', as:z:num:car):-!.
ccaz(_,'', as:num:car):-!.

nm(hundred,7,100).
nm(hundreds,7,100).
nm(eighteen,8,18).
nm(eighty,6,80).
nm(eight,5,8).
nm(ten,3,10).
nm(tens,3,10).
nm(teen,4,10).
nm(twelve,6,12).
nm(two,3,2).
nm(dozen,5,12).
nm(thousand,8,1000).
nm(thousands,8,1000).
nm(hundred_thousands,8,100000).
nm(hundred_millions,8,100000000).
nm(hundred_thousand,8,100000).
nm(hundred_million,8,100000000).
nm(billions,8,1000000000).
nm(billion,7,1000000000).
nm(millions,8,1000000).
nm(million,7,1000000).
nm(ninety,7,90).
nm(nine,4,9).
nm(nineteen,8,19).
nm(fourty,6,40).
nm(fourteen,8,14).
nm(four,4,4).
nm(five,4,5).
nm(fifty,5,50).
nm(fifteen,7,15).
nm(sixteen,7,16).
nm(six,3,6).
nm(sixty,5,60).
nm(seven,5,7).
nm(seventy,7,70).
nm(seventeen,9,17).
nm(three,5,3).
nm(thirteen,8,13).
nm(thir,4,13).
nm(thirty,6,30).
nm(one,3,1).
nm(zero,4,0).
nm(eleven,6,11).
nm(twenty,6,20).

describe_n(2, [Dec, Un], Pred):-
   pname(T, Dec),
   mcon(T, 0, N),
   pname(NU, N),
   nm(Num, _, NU),
   pname(U, Un),
   nm(Nu, _, U),
   mcon(Num, Nu, Pred).

describe_n(3, [Hun, Dec, Un], Pred):-
   pname(H, Hun),
   mcon(H, 0, Nh),
   pname(T, Dec),
   mcon(T, 0, De),
   pname(Des, De),
   nm(Ds, _, Des),
   mcon(Nh, 0, N),
   pname(NU, N),
   nm(Num, _, NU),
   pname(U, Un),
   nm(Nu, _, U),
   mcon(Num, '_', Pre1),
   mcon(Pre1, Ds, Pre2),
   mcon(Pre2, '_', Pre0),
   mcon(Pre0, Nu, Pred).

num_cats(File, [Word], [num], Cat) :-
    money_simb(Word),Cat=[num-money],!.
num_cats(File, Word, [num], Cat) :-
    money_simb(Word),Cat=[num-money],!.
num_cats(File, Word, [num], Cat) :-
      stringof(String, Word),
      on(W,String),
    money_simb(W),Cat=[num-money],!.
num_cats(File, Word-Sign, [num], Cat) :-
      integer(Word), Cat=[num-Sign],
      !.

num_cats(File, Word, Feats, [L]) :-
      integer(Word),
      (nm(L,_,Word)
       ;
       pname(Word, Numm),
       stringof(J, Numm),
       length(J, N),
       describe_n(N, J, L)
      ),
       Feats=[cat=num, type=card],
      !.

/* 7 */
num_cats(File, Word, Feats, [Lemma]) :-
       nonvar(Word),Word\=_-_,
   spot_date(Word, Feats-Lemma),
   nonvar(Lemma),
   !.

num_cats(File, Word, Cat, [NW]) :-
      (integer(Word),
       pname(Word,Wor);
       nonvar(Word),Word\=_-_,atomic(Word),
       name(Word,[A|Nword]),
       (numb_char(A);
        Nword=[B|_],
       numb_char(B)),
       Wor=Word),
      stringof(String, Wor),
      reverse(String, Morph),
      append(Prefix,  [Car], Morph),
      pname(C, Car),
      (integer(C),
       (on(Per, Morph),
        Per='%',
        remove('%', String, Num),
        stringof(Num, NWo),    
        concat(NWo, '_', NWoo),
        concat(NWoo, per_cent, NW),
        Cat=[cat=num, type=per_cent]
       ;
        spot_abbr(Prefix, C, 1, Cat, NW)
       ;
        (\+ on('/',Prefix);on('/',Prefix), length(Prefix,L),L<7),
       Cat=[cat=num], NW=Word)
      ;
      (C='£', T=pound;
       C='€', T=euro;
        C='$', T=doll),
      remove(C, String, Num),
%      remove('/', Nu, Num),
      stringof(Num, NW),    
/*     pname(NW, NWo), */
     Cat=[cat=num, type=T]
     ),
    !.

num_cats(File, Word, [cat=num], [Word]) :-
      integer(Word),
      !.


spot_date(Word, Cat):-
      (integer(Word),
       pname(Word,Wor);
       nonvar(Word), Word\=_-_, atomic(Word),
       name(Word,[A|Nword]),
       (numb_char(A);
        Nword=[B|_],
       numb_char(B)),
       Wor=Word),
      stringof(String, Wor),
      reverse(String, Morph),
      length(String,L),
      append(Prefix,  [Car], Morph),
      pname(C, Car),
      integer(C),
      Ind = 0,
      spot_period(L,Prefix, C, Ind, Cat).

spot_period(L,Morph, Ca, Ind, Cat-Pred):-!.
spot_period(2,[], Ca, 1, Cat-C):-
      pname(C, Ca),
      integer(C),
      Cat=[cat=num, type=teen],
      !.      
spot_period(1,[], Ca, 0, Cat-Ca):-
      integer(Ca),
      Cat=[cat=num, type=teen],
      !.      

spot_period(L,Morph, Ca, Ind, Cat-Pred):-
      0 < Ind,
      append(Prefix,  [Car], Morph),
/*
      Car='/',
      append(Npre,  [NC], Prefix),
      pname(C, NC),
      integer(C),
      append(Pre,  [CarN], Npre),
*/      (
       Car='/',
       pname(Cas, Ca),
       identify_month(Cas, Mont),
/*       Prey=Pre
       ;
       append(Prey,  [Cp], Pre),
       pname(Cn, CarN),
       integer(Cn),
       mcon(C, Cn, Cmo),
       pname(Cmn, Cmo),
       identify_month(Cmn, Mont)
       ),
*/      append(Npre,  [NC], Prefix),
      pname(C, NC),
      integer(C),
      append(Pre,  [CarN], Npre),
      (
       CarN='/', Prey=Pre, Cmn=C
       ;
       CarN\='/',
       pname(Cn, CarN),
       integer(Cn),
       mcon(C, Cn, Cmo),
       pname(Cmn, Cmo),
       append(Prey,  [Cp], Pre)
       ),
       Cp='/',
       pname(Cas, Ca),
       reverse(Prey, Py),
       stringof(Py, Yea),
       pname(Year, Yea),
       Pred=Mont-Cmn-Year,
       Cat=[cat=num, type=date]
       ;
       reverse(Prefix, Py),
       (remove('/', Py, Nu),
        remove('/', Nu, [U|Nuu]),
       integer(U),
       Cat=[cat=num, type=million],
       Num=million
       ; 
       remove('/', Py, [U|Nu]),
       integer(U),
       length_number(L,Type),
       Cat=[cat=num, type=Type],
       Num=Type
       ; 
       length(Morph, 2),
       pname(Cas, Ca),
       identify_year(Cas, Year),
       Cat=[cat=date, type=year],
       reverse(Morph, Pyd),
       stringof(Pyd, Yea),
       Num=Yea
       ; 
       length(Py, 3),
       length_number(L,Type),
       Cat=[cat=num, type=Type],
       stringof(Py, Yea),
       Num=Yea
       ; 
       length(Morph, 1),
       length_number(L,Type),
       Cat=[cat=num, type=Type],
       Num=Car
       ;
       Py=[U|_],
       integer(U),
       stringof(Py, Ye),
       Py\=[],
       mcon('.', Ye, Nn),     
       Cat=[cat=num, type=hundred],
       Num=Nn
       ),
       mcon(Ca, Num, Pred)
       ),
       !.
spot_period(L,Morph, Ca, Ind, Feat):-
      NInd is Ind + 1,
      NInd < 3,
      append(Prefix,  [Car], Morph),
      pname(C, Car),
      integer(C),
      mcon(Ca, C, Cat),
      spot_period(L,Prefix, Cat, NInd, Feat).


length_number(2,teen).
length_number(3,hundred).
length_number(4,thousand).
length_number(5,thousand).
length_number(6,ten_thousand).
length_number(7,hundred_thousand).
length_number(9,million).
length_number(N,billion).

identify_month(Int, Mont):-
      (Int=01, Mont=jan
      ;Int=02, Mont=febr
      ;Int=03, Mont=mar
      ;Int=04, Mont=apr
      ;Int=05, Mont=may
      ;Int=06, Mont=jun
      ;Int=07, Mont=jul
      ;Int=08, Mont=aug
      ;Int=09, Mont=sept
      ;Int=1, Mont=jan
      ;Int=2, Mont=febr
      ;Int=3, Mont=mar
      ;Int=4, Mont=apr
      ;Int=5, Mont=may
      ;Int=6, Mont=jun
      ;Int=7, Mont=jul
      ;Int=8, Mont=aug
      ;Int=9, Mont=sept
      ;Int=10, Mont=oct
      ;Int=11, Mont=nov
      ;Int=12, Mont=dec).

identify_year(21, 2100).
identify_year(20, 2000).
identify_year(19, 1900).
identify_year(18, 1800).
identify_year(17, 1700).
identify_year(16, 1600).

transl_abbr(st, ord).
transl_abbr(rd, ord).
transl_abbr(th, ord).
transl_abbr(year, year).
transl_abbr(hour, hour).
transl_abbr(day, day).
transl_abbr(month, month).
transl_abbr(week, week).
transl_abbr(cm, cm).
transl_abbr(kg, kg).
transl_abbr(ton, ton).


spot_abbr(Morph, Ca, Ind, [cat=num, type=Cat], Pred):-
      append(Prefix,  [Car], Morph),
      Car='/',
      \+ on('/',Prefix),
      append(Npre,  [NC], Prefix),
      pname(Pred, Ca),
      (NC=s, Cat=year
      ;
      append(Pre,  [CarN], Npre),
%      pname(Cn, CarN),
      mcon(NC, CarN, Cmo),
      (Pre=[],
       transl_abbr(Cmo, Cat)
       ;
       append(Prey,  [CarP], Pre),
%       pname(Cp, CarP),
       mcon(Cmo, CarP, Cmpo),
       (Pre=[],
       transl_abbr(Cmo, Cat)
       ;
        Pre\=[],
        append(Pr,  [CrP], Prey),
        mcon(Cmpo, CrP, Cpo),
        Cat=Cpo)
        )
      ),!.

spot_abbr(Morph, Ca, Ind, Cats, Feat):-
      NInd is Ind + 1,
%      NInd < 2,
      append(Prefix,  [Car], Morph),
      \+ punct(Car),
      pname(C, Car),
      integer(C),
      mcon(Ca, C, Cat),
      spot_abbr(Prefix, Cat, NInd, Cats, Feat).

analisi_morfologica(Fw, Lemm, Cat1, Fea):-
       atomic(Fw),
       findall(Cat-Feats-Lem, (mparse(Feats, Fw, ''),
       countlems(File, Fw, Feats, Cat, Lem, Pred)), AllFs),
       (AllFs\=[],
        decomp_cfl(AllFs, Cat1, Fea, Lems),
        on(Lemm, Lems)
        ;
        AllFs=[],
        (P=1,Cat1=[npro], Lem=Fw, Fea=[]
         ; Cat1=[nw], Lem=Fw, Fea=[])),
        !.

analisi_morfologica(Fws, Lemm, Cat1, Fea):-
       list(Fws), on(Fw,Fws),
       findall(Cat-Feats-Lem, (mparse(Feats, Fw, ''),
       countlems(File, Fw, Feats, Cat, Lem, Pred)), AllFs),
       (AllFs\=[],
        decomp_cfl(AllFs, Cat1, Fea, Lems),
        on(Lemm, Lems)
        ;
        AllFs=[],
        (P=1,Cat1=[npro], Lem=Fw, Fea=[]
         ; Cat1=[nw], Lem=Fw, Fea=[])),
        !.


place('Ariz').
place('Ark').
place('Calif').
place('Col').
place('Colo').
place('Conn').
place('Del').
place('Dept').
place('Fla').
place('Ia').
place('Ida').
place('Ill').
place('Ind').
place('Kans').
place('Ken').
place('Mass').
place('Md').
place('Me').
place('Mich').
place('Minn').
place('Mont').
place('Nebr').
place('Nev').
place('Ont').
place('Ore').
place('Penn').
place('Que').
place('R-Wis').
place('Rd').
place('St').
place('Tenn').
place('Tex').
place('Univ').
place('Va').
place('Wash').
place('Wis').
place('WWW').
place('Wyo').
place(dept).
place(s).
place(st).
temp('Apr').
temp('Aug').
temp('Dec').
temp('Feb').
temp('Fri').
temp('Gen').
temp('Jan').
temp('Jul').
temp('Jun').
temp('Mon').
temp('No').
temp('Nov').
temp('Oct').
temp('Sep').
temp('Sept').
temp('Sun').
temp('Thu').
temp('Tue').
temp('Wed').
title('Adm').
title('Assn').
title('Atty').
title('Capt').
title('Cmdr').
title('Dr').
title('Drs').
title('Miss').
title('Mr').
title('Mrs').
title('Ms').
title('Prof').
title('Rep').
title('REP').
title('Reps').
title('Rev').
title('Sen').
title('Sgt').
title('Sr').
title(dr).
title(mr).
title(mrs).
title(ms).
title(prof).
title(sen).
title(sig).

choose_category(title,['s:h:m:s']):-!.
choose_category(place,['s:geo:m:s']):-!.
choose_category(temp,['s:tim:m:s']):-!.
choose_category(_,['s:p:m:s']):-!.

punct('.').
punct(!).
punct(?).
punct(':').
punct(';').
punct(P):-
   select_punct(P, Cat).

/*  PREDICATI VARI
v=verbo-ausiliare-modale-clitico-vclit, n=nome, c=complementatore, s=subordinatore, e=congiunzione, p=preposizione, a=aggettivo, q=participio/gerundio, x=punteggiatura, i=interiezione, g=negazione d=determinante r=pronomi, av=avverbio, vcl=vc w=pronomi interrogativi e relativi*/

nchecklexs(NoFr,Cont,Frase1,[],[]):-!.
nchecklexs(NoFr,Cont,Frase1,[First,First|Frase],[First|LFrase]):-
   punct(First),
   nchecklexs(NoFr,Cont,Frase1,Frase,LFrase),!.
nchecklexs(NoFr,Cont,Frase1,[First|Frase],[First|LFrase]):-
   punct(First),
   nchecklexs(NoFr,Cont,Frase1,Frase,LFrase),!.
/*
nchecklexs(NoFr,Cont,[First|Frase],[Sec|LFrase]):- 
   spy_lower(First, LowL, 1),
   lfilters(First,Slists,List),
   (s_is_ax(First,Sec),!
     ; Sec=First),
   nchecklexs(NoFr,Cont,Frase,LFrase),!.
*/

nchecklexs(NoFr,Cont,Frase1,[First|Frase],[LowL|LFrase]):- 
   conv_is_ax(First,LowL),
   nchecklexs(NoFr,Cont,Frase1,Frase,LFrase),!.
nchecklexs(NoFr,Cont,Frase1,[First|Frase],[First|LFrase]):- 
   spy_lower(First, LowL, 1),
   if_first_name(First),
   nchecklexs(NoFr,Cont,Frase1,Frase,LFrase),!.
nchecklexs(NoFr,Cont,Frase1,[First|Frase],[LowL|LFrase]):- 
   spy_lower(First, LowL, 1),
   \+ nt(First),
   \+ r(LowL),
   \+ j(LowL),
   fct(LowL),
   Frase1=[First|Frase],
   nchecklexs(NoFr,Cont,Frase1,Frase,LFrase),!.
nchecklexs(NoFr,Cont,Frase1,[First|Frase],[LowL|LFrase]):- 
   spy_lower(First, LowL, 1),
   checkform1(LowL,S1),
   nchecklexs(NoFr,Cont,Frase1,Frase,LFrase),!.
nchecklexs(NoFr,Cont,Frase1,[First|Frase],[LowL|LFrase]):- 
   spy_lower(First, LowL, 1),
   \+ nt(First),
   v(LowL,_),
   nchecklexs(NoFr,Cont,Frase1,Frase,LFrase),!.
nchecklexs(NoFr,Cont,Frase1,[First|Frase],[First|LFrase]):- 
   nchecklexs(NoFr,Cont,Frase1,Frase,LFrase),!.
   
ncheck_lexs(NoFr,Cont,Frase,NFrase,Tags):-
   abolish(firstword/1),
   nchecklexs(NoFr,Cont,Frase,Frase,LFrase),
   LFrase=[First|_],
   checkfirstword(First,Firs,LFrase,LFras),
   assert(firstword(Firs)),
   check_lexs(NoFr,Cont,LFras,NFrase,Tags),
   !.

checkfirstword(First,Firs,[First|LFrase],[Firs|LFrase]):-
   spy_lower(First, LowL, 1),
   stringof(List,LowL),
   (\+ on('_',List);
     reverse(List,['_',s,'-'|_])),
   \+  s_is_ax(First,Sec),
   toupper(LowL,Firs),
   !.
checkfirstword(First,First,LFrase,LFrase):-
   !.

check_lexs(NoFr,Cont,Frase,NFrase,Tags):- 
  check_lex(Cont,Frase),
  disambiguate_all(Frase,NoFr,AmbLev, NFrase,Tags),
  !.

assertnew_lookahead([]):-!.
assertnew_lookahead([Cont-Slist|NuovaFrase]):-
   assertz(termin(Cont-Slist)),
   assertnew_lookahead(NuovaFrase),
   !.
disambiguate_all(Frase,NoFr,[Amb1,Amb2], NFrase,NuoFrase):-
    findall_poss(NuoFrase),
    compute_ambiguity_class(NoFr,NuoFrase,Amb1),
    disambiguate(NuoFrase,NuovaFrase),
    (NuoFrase=NuovaFrase, NFrase=Frase, !
      ;
     NuoFrase\=NuovaFrase,
     abolish(termin/1),
     assertnew_lookahead(NuovaFrase),
     reass_frase(NuoFrase,NuovaFrase,Frase,NFrase),
     recompute_ambiguity_class(NoFr,NuovaFrase,Amb2)),
    !.
reass_frase(NuoFrase,NuovaFrase,Frase,NFrase):-
   length(NuoFrase,L1),
   length(NuovaFrase,L2),
   L1=L2,NFrase=Frase,!.
reass_frase(NuoFrase,NuovaFrase,Frase,NFrase):-
   length(NuoFrase,L1),
   length(NuovaFrase,L2),
   L1\=L2,
   collect_frase(NuovaFrase,NFrase),!.

change_numbs([],[]):-!.
change_numbs([N-A|NuoFrase],[N1-A|NuFrase]):-
    N1 is N + 1,
    change_numbs(NuoFrase,NuFrase),
    !.

collect_frase([],[]):-!.
collect_frase([N-A|NuovaFrase],[W|NFrase]):-
  (A=[_-W];A=[_-W|_]),
   collect_frase(NuovaFrase,NFrase),!.
match_contrs_cat([pronm],r).
match_contrs_cat([prone],r).
match_contrs_cat([prona],r).
match_contrs_cat([pronl],r).
match_contrs_cat(T,v).

check_form(Lex1,S):- 
     contrs(Lex1, T, Base),
     match_contrs_cat(T,S),
     !.

check_form(Lex1,S):- 
  (aux(Lex1,_,_,_,_,_),S=v;
   cardin(Lex1,_,_),S=d;
   npro(Lex1,_,_),S=n;
   npro(_,Lex1,_),S=n;
   pr(_,_,Lex1,_,_,_,_),S=r;
   compl(Lex1),S=c;
   partic(Lex1),S=p;
   sub_w(Lex1),S=s;
   sub_w_dir(Lex1),S=s;
   sub_w_sn(Lex1,_),S=s;
   sub_w_inf(Lex1),S=p;
   avv(Lex1,_),S=av;
   nega(Lex1),S=g;
   Lex1='"',S=s;
   inten(Lex1),S=d;
   interjc(Lex1),S=i;
   conju(Lex1),S=e;
   prepos(Lex1),S=p;
   intn(Lex1),S=in;
   ord(Lex1,_,_,_),S=d;
   quant(Lex1,_,_,_,_),S=d;
   integer(Lex1),S=d;
   check_lex_g(english, S, Lex1)).


check_form(Lex1,S):- 
   lex_user(Lex1, Codes, Type),
   asserts_function_word(Lex1,Codes, Cats),
   appiattisci(Cats,Catts),
   sort(Catts,SCats),
   converti_tags_new_forms(Lex1, S1, SCats),
   (S1=[S];S=S1),
   !.

converti_tags_new_forms(Lex1, [], []):-!.
converti_tags_new_forms(Lex1, [S|Ss], [Cat|SCats]):-
   converti_tag_new_forms(Lex1, S, Cat),
   converti_tags_new_forms(Lex1, Ss, SCats),
   !.
converti_tags_new_forms(Lex1, [S|Ss], [Cat|SCats]):-
   converti_tag_new_forms(Lex1, S, [Cat]),
   converti_tags_new_forms(Lex1, Ss, SCats),
   !.

asserts_function_word(Loc,[], []):-!.
asserts_function_word(Loc,[Code|Codes], [Cat|Cats]):-
   assert_function_word(Loc,[Code], Cat),
   asserts_function_word(Loc,Codes, Cats),
   !.

assert_function_word(Loc,Codes, Categ):-
   leaf_fpr(Loc, Codes, Cat, N),
   parse_aff('', Cat, Feats, NFeat),
   Cat=root(root(Root), Type, Ncat, Feat,_),
   getcat(Loc, Feat, Categ, Fea, Pred),
   append([pred=Pred], Fea, NFea),
   LCa=[[Categ]-Root-NFea],
   assertz(sw(Loc-[Categ]-LCa)),
   !.

/**
 gr(+grammarType) **/

converti_tag_new_forms(W, C, Tnew):-
   spy_lower(W, LWord, 1),
   converti_tag_new_form(LWord, C, Tnew).

converti_tag_new_forms(W, C, Tnew):-
   converti_tag_new_form(W, C, Tnew).

converti_tag_new_form(W, i, inta).
converti_tag_new_form(W, i, intn).
converti_tag_new_form(W, i, [intj]).
converti_tag_new_form(W, a, [ag]).
converti_tag_new_form(than, e, [ccom]).
converti_tag_new_form(there, v, [expl]).
converti_tag_new_form(W, r, [pron]).
converti_tag_new_form(W, e, [cong]).
converti_tag_new_form(W, s, [cosu]).
converti_tag_new_form(W, c, [pk, rel]).
converti_tag_new_form(W, av, [avv]).
converti_tag_new_form(W, p, [p]).
converti_tag_new_form(W, q, [vppt,vppin]).
converti_tag_new_form(W, pers, [r]).
converti_tag_new_form(W, d, Cat):-
   extract_determiners(W, Cat).
converti_tag_new_form(W, Cat, Cat):-
    Cat=nt;Cat=nh;Cat=np;Cat=npro;Cat=n,!.
converti_tag_new_form(W, v, Cat):-
    stringof([V|_],Cat),V=v,!.
converti_tag_new_form(W, C, Cat):-
    atomic(Cat),
   converti_tag_new_form(W, C, [Cat]).
   
gr(Gr):-
  active_grammar(Gr),!.

gr(SuperGr):-
  active_grammar(Gr),
  gram_isa(Gr,SuperGr),!.

gram_isa(Gr,SuperGr):-
  gr_isa(Gr,SuperGr), !.

gram_isa(Gr,SuperGr):-
  gr_isa(Gr, MidGr),
  gram_isa(MidGr, SuperGr),!.

gr_isa(english,germanic).
gr_isa(deutsch,germanic).
gr_isa('français',romance).
gr_isa(italiano,romance).
gr_isa(romance,universal).
gr_isa(germanic,universal).

/*
active_grammar(english).
*/
         
check_lex_g(romance,S,Lex1):-
  (n(Lex1,_,_),S=n;
   n(_,Lex1,_),S=n;
   mod_ex(Lex1,_,_),S=d;
   relp(Lex1,_),S=w;
   a_rom(Lex1,_,_,_),S=a;
   a_rom(_,Lex1,_,_),S=a;
   a_rom(_,_,Lex1,_),S=a;
   a_rom(_,_,_,Lex1),S=a;
   ap_rom(Lex1,_,_,_),S=a;
   ap_rom(_,Lex1,_,_),S=a;
   ap_rom(_,_,Lex1,_),S=a;
   ap_rom(_,_,_,Lex1),S=a;
   pp_rom(Lex1,_,_,_,_),S=q;
   pp_rom(_,Lex1,_,_,_),S=q;
   pp_rom(_,_,Lex1,_,_),S=q;
   pp_rom(_,_,_,Lex1,_),S=q;
   quant_int(Lex1,_,_,_,_),S=w;
   art_det_rom(Lex1,_,_),S=d;
   cl(_,_,Lex1,_,_,_,_),S=v;
   art_ndet_rom(Lex1,_,_),S=d).

check_lex_g(english,S,Lex1):-
  (modal(Lex1,_,_,_,_,_),S=v;
   relp(Lex1,_),S=w;
   mod_ex(Lex1,_,_),S=d;
   a_engl(Lex1),S=a;
   ad_engl(Lex1,_),S=a;
   ad_engl(_,Lex1),S=a;
   ap_engl(Lex1,_,_),S=a;
   cconju(Lex1),S=e;
   cl(_,_,Lex1,_,_,_,_),S=v;
   art_det_engl(Lex1),S=d;
   art_ndet_engl(Lex1),S=d).

check_lex_g(deutsch,S,Lex1):-
  (alterato(Lex1,_,_,_,_),S=n;
   a_ger(Lex1),S=q;
   prepart(_,Lex1,_),S=p;
   modal(Lex1,_,_,_,_,_),S=v;
   relp_d(Lex1,_),S=w;
   ap_ger(Lex1,_,_),S=a;
   art_det(Lex1,_,_,_),S=d;
   nd(Lex1,_,_,_,_),S=n;
   quant_int(Lex1,_,_,_,_),S=w;
   cl(_,_,Lex1,_,_,_,_),S=v;
   art_ndet(Lex1),S=n).

check_lex_g(germanic,S,Lex1):-
  (pp_ger(Lex1,_),S=q;
   tren(Lex1),S=p).

grw(',').
grw('.').
grw('"').
grw(':').
grw(';').
grw('!').
grw(?).
grw(P):-
   select_punct(P, Cat).

supporto(Sup):-
    contr(Sup, _).
supporto(Sup):-
    support(Sup).
support(may).
support(might).
support(must).
support(should).
support(shouldda).
support(shall).
support(ought).
support(could).
support(would).
support(can).
support(cannot).
support(do).
support(does).
support(did).
support(will).
support(has_to).
support(have_to).
support(had_to).
support(having_to).
support(going_to).
support(set_to).

copl(appear).
copl(seem).
copl(look).
copl(smell).
copl(taste).
copl(feel).
copl(sound).
copl(cannot).
copl(become).
copl(do).
copl(be).
copl(there_be).
copl(have).
copl(was).
copl(were).
copl(is).
copl(are).
copl(am).
copl(had).
copl(has).
copl(being).
copl(been).
copl(having).
copl(remain).
copl(Sup):-
   coplbh(Sup),!.

coplbh(Sup):-
    contr(Sup, _).
coplbh(Sup):-
    cplbh(Sup).
cplbh(be).
cplbh(there_be).
cplbh(being).
cplbh(been).
cplbh(having).
cplbh(have).
cplbh(was).
cplbh(were).
cplbh(is).
cplbh(are).
cplbh(am).
cplbh(had).
cplbh(has).
cplbh(do).
cplbh(does).
cplbh(did).


transl_cat_contr(prona, ausa).
transl_cat_contr(prone, ause).
transl_cat_contr(pronl, ause).
transl_cat_contr(pronm, vsup).


pp_y(X,V,_,_) :- onegr(pp_y,germanic),pp_ger(X,V).
pp_yy(X,V,_,_) :- onegr(pp_y,germanic),new_pp_ger(X,V).

pp_x(X,V,G,N):- onegr(pp_x,romance),p_x(X,V,G,N).

p_x(X,V,mas,sing) :- pp_rom(X,_,_,_,V).
p_x(X,V,mas,plur) :- pp_rom(_,X,_,_,V).
p_x(X,V,fem,sing) :- pp_rom(_,_,X,_,V).
p_x(X,V,fem,plur) :- pp_rom(_,_,_,X,V).

intens([X|F], int(I)/F):-
      onelook([X|F],intens,d,p),
      inten(X),I=X,retraction(inten,_).
intens(X, []/X):-!.

trenn([X|F], F, part(T)):- tren(X),T=X,retraction(tren,_).
trenn(F, F, []):-!.

negaz([X|Rest], neg(N)/Resto):- 
     (var(N), nega(X), N=X,retraction(nega,g), Resto=Rest
                  ;
                  nonvar(N), Resto=[X|Rest]).
negaz([X|Rest], neg(not)/Resto):- 
      contr(X, Base),
      append([Base],Rest,Resto).

negaz(X, Neg/X).

negaz1([X|Rest], neg(N)/Resto):- 
     (var(N), nega(X), N=X,retraction(nega,g), Resto=Rest
                  ;
                  nonvar(N), Resto=[X|Rest]).
% negaz1([], neg(N)/[]).
negaz1(X, Neg/X).

chiama_conj(X,Cong):- (X=or; X=and; X=but), Cong=disj(X),!.

cong([X|F], con(C)/F):- conju(X),C=X,retraction(conju,e).
cong(F, []/F):-!.

congg(X):-
   (X=',' ; X=e; X=ed; X=and),!.

allconjs(Punc):-
      (Punc=but;Punc=',';Punc=and;Punc=rather_than;Punc=or),!.

compp([X|F], com(C)/F):- compl(X),C=X,retraction(compl,c).
compp(F, []/F):-!.

inter([X|F], interj(I)/F):- interjc(X),I=X,retraction(interjc,i).
inter([X|F], interj(I)/F):- 
          tml(X,Code),
          Code\=[],
          (on(inter,Code);
            on(Cod,Code),
            pname(Co,Cod),
            gti(Co,Type)),
          I=X,retraction(interjc,i).
inter(F, interj([])/F):-!.

gti(inter:Type,Type):-!.

prorel(X,P,G,N,C):- relp(X,C),P=X,retraction(relp,r).

/* nel caso dell'alterato come per la preposizione articolata, viene costruito un nuovo simbolo in ingresso che è il nome di base che viene passato alla fase successiva di analisi */ 
mod_alterato(W,Nome,Agg,Gen,Num) :-
   (onegr(mod_alt,italiano) ; onegr(mod_alt,deutsch)), 
   alterato(W,Nome,Agg,Gen,Num).

check_subord(should,X):-
    onelook(X,Mc,[a,d,r,n,ng],nil),
    !.

check_subord(S,X):-
    S\=should,!.

subordinatore(F,F1,X):- 
        F=[F1|X],
        spy_lower(F1,Low,Pol),
         sub_w(Low),
        check_subord(F1,X),
        retraction(sub_w,s).

qsubordinatore(X,S):- 
     qsubw(X),S=X,retraction(sub_w,s).

qsubordinatore(X,S):- 
     spy_lower(X, LowL, 1),
     qsubw(LowL),S=LowL,retraction(sub_w,s).

qsubw(when).
%qsubw(while).
qsubw(why).
qsubw(how).
qsubw(where).
qsubw(whether).
qsubw(if).
qsubw(what).
qsubw(how_much).

subord_inf(X,S):-sub_w_inf(X),S=X,retraction(sub_w,s).

subordin_dir(X,dir_speech(S)):- sub_w_dir(X),S=X,retraction(sub_w,s).
subordin_dir(X,dir_speech(S)):- X='"',retraction(sub_w,s).
subordin_dir(X,dir_speech(S)):- 
     spy_lower(X, LowL, 1),
     sub_w_dir(LowL),S=LowL,retraction(sub_w,s).

subordinatore_sn([X|F],S,compar/F):- 
     sub_w_sn(X,_),S=X,retraction(sub_w,s).

subordinatore_sn([X|F],S,compar/F):- 
     spy_lower(X, LowL, 1),
     sub_w_sn(LowL,_),S=LowL,retraction(sub_w,s).


prep(X,P):- prepos(X), P=X, retraction(p,p).

prep(X,[P,Art]):- (onegr(prep,romance) ; onegr(prep,deutsch)),
              prep_articolata(X,[P,Art]).

prep(X,P):- 
     spy_lower(X, LowL, 1),
     prepos(LowL), P=LowL, retraction(p,p).

/* non si fa alcun retract perché non viene eliminato nessun simbolo in ingresso: viene tolta la preposizione articolata e viene aggiunto un articolo */
prep_articolata(PrepArt,[Prep,Art]) :-
   prepart(Prep, PrepArt, Art),
   retraction(prepart,p).


partv([X|R],P/R):- partic(X),
              extract_head(Y-X,Z,I),
              nonvar(Z), 
              P=Z, retraction(partic,p).
/*
              ;
              swap_slot_pds(X),
              P=X).
*/

partv(R,P/R):-!.

swap_slot_pds(D):-
              extract_sec_head(Y-D,X,I),
                    Swap=..[swap_slot_pds-X-K,Q-W],
              asserta(termin(I-[Q-W])).

/* anche in questo caso non viene sottratto un simbolo in ingresso ma viene generato un nuovo simbolo, il clitico */
vrb_cl(VerboCl,Verbo,Cl) :-
   onegr(vrb_cl,romance), 
   vcl(VerboCl,Verbo,Cl).


lookart(italiano,Art,'+',Gen,Num,_) :-
     art_det_rom(Art,Gen,Num),retraction(art,d).

lookart(deutsch,Art,'+',Gen,Num,Caso) :-
    art_det(Art,Gen,Num,Caso),retraction(art,d).
 
/* articolo  */
art(X,art(det),'+',Gen,Num):- onegr(art,english), 
                  art_det_engl(X), 
                  retraction(art,d).
        
/* art. determinativo */
art(X,art(indef),'-',Gen,Num):- onegr(art,english), 
                  art_ndet_engl(X),
                  retraction(art,d).   
  
/* art. indet. */
art(X,art(det),'+',Gen,Num):- onegr(art,romance), 
                  art_det_rom(X,Gen,Num),
                  retraction(art,d).        

art(X,art(indef),'-',Gen,Num):- onegr(art,romance),
                  art_ndet_rom(X,Gen,Num),
                  retraction(art,d).     

art(X,art(det),'+',Gen,Num,Caso):- onegr(art,deutsch),
                  art_det(X,Gen,Num,Caso),
                  retraction(art,d).        

art(X,art(indef),'-',Gen,Num,Caso):- onegr(art,deutsch),
                  art_ndet(X,Gen,Num,Caso),
                  retraction(art,d).     

cardinale(X,Card, Gen, Num):- cardin(X,Card,Num),
                  retraction(cardin,d).

cardinale(X,Card, Gen, plur):- integer(X), nm(Card,_,X),
                  retraction(cardin,d).

cardinale(X,X, Gen, plur):- nm(X,_,_),
                  retraction(cardin,d).

cardinale(X,Card, Gen, plur):- num_cats(File, X, Feats, [Card]),
                  nonvar(Card),
                  retraction(cardin,d).
           

expl_exc(X,A,G,N):- onegr(mod_exc,romance),
                 mod_ex(X,G,N),
                 A=X, retraction(mod_ex,d).

/* ordinale */

ordinale(X,Ord,Gen,Num):- ord(X,Ord,Gen,Num).
%                          retraction(ord,d).
ordinale(X,Ord,Gen,Num):-
%    pname(X,Ord),
     stringof(Num,Ord),
     reverse(Num,[h,t,C|_]),
     retraction(ord,d),
     except_quants(X),
     qm(X),!.

except_quants(O):-
  spy_lower(O,Low,Pol),
  (Pol=1,
   \+ exq(Low),!
   ;
   Pol=0,
  \+ exq(O)),!.

exq(bandwidth).
exq(bath).
exq(birth).
exq(body_length).
exq(cable_length).
exq(compass_north).
exq(crith).
exq(due_north).
exq(due_south).
exq(east_by_north).
exq(east_by_south).
exq(fingerbreadth).
exq(ha_p_orth).
exq(hairbreadth).
exq(handbreath).
exq(handsbreadth).
exq(magnetic_north).
exq(north).
exq(northeast_by_north).
exq(northwest_by_north).
exq(penn_orth).
exq(pennyworth).
exq(south).
exq(southeast_by_south).
exq(southwest_by_south).
exq(swath).
exq(west_by_north).
exq(west_by_south).
exq(worth).

/* nomi comuni */

nome(X,Nome,Gen,Num):- 
     nome_x(X,Nome,Gen,Num).

nome_d(X,X,Gen,sing,Caso) :- 
              nd(X,_,_,_,Gen),retraction(nd,n).
nome_d(X,Y,Gen,plur,Caso) :- 
              nd(X,_,_,_,Gen),retraction(nd,n).

nome_x(X,X,Gen,_) :- n(X,X,Gen).
nome_x(X,X,Gen,sing) :- n(X,_,Gen).
nome_x(X,Y,Gen,plur) :- n(Y,X,Gen).
nome_x(X,X,Gen,sing) :- nt(X),!.
nome_x(X,X,Gen,sing) :- new_n(X,_,Gen).
nome_x(X,Y,Gen,plur) :- new_n(Y,X,Gen).
nome_x(X,Y,Gen,sing) :- new_n(X,Y,Gen).

nome_x(X,Y,Gen,plur) :- 
      spy_lower(X, LowL, 1),
      new_n(Y,LowL,Gen).
nome_x(X,Y,Gen,sing) :- 
      spy_lower(X, LowL, 1),
      new_n(LowL,Y,Gen).

nome_x(X,X,Gen,_) :- n(X,X,Gen).

nome_x(X,X,Gen,_) :- interjc(X).

/*
nome_x(X,X,Gen,_) :- 
       tml(X, Cats), 
       filter_nouns_interj(Cats),
       !.
        
nome_x(X,X,Gen,_) :- 
       tpl(X, Cats),
       filter_nouns_interj(Cats),
       !.

nome_x(X,X,Gen,_) :- 
      sw(X-Cat-Feats),
      !.
*/

nome_x(Lex1,Lex1,Gen,_) :- 
    stringof(MWord,Lex1),
    on('-',MWord),
   (decompose_secunderscore(MWord, Word),
    stringof(Word,Lex),
    sec_mults(Lex1,Lex, MWord, Lists)
    ;
   first_mult(Lex1, MWord, Lists)
   ),!.
    
/* nomi propri */

nopro(X,Nopro,Gen,Num):- nopro_x(X,Nopro,Gen,Num).

nopro_x(X,X,Gen,sing) :- npro(X,_,Gen), nonvar(X).
nopro_x(X,Y,Gen,plur) :- npro(nn,X,Gen), nonvar(X).
nopro_x(X,Y,Gen,plur) :- npro(Y,X,Gen), nonvar(Y).
nopro_x(X,X,Gen,sing) :- new_npro(X,_,Gen), nonvar(X).


nopro_x(X,Y,Gen,plur) :- new_npro(Y,X,Gen), nonvar(Y).

nopro_x(X,X,Gen,sing) :- new_np(X,_,Gen), nonvar(X).
nopro_x(X,Y,Gen,plur) :- new_np(Y,X,Gen), nonvar(Y).

checkcatsemnil(C,Head, Cat, Cat):-
    Cat\=nil,!.
checkcatsemnil(C,Head, nil, Cat):-
    trova_CatSem(C1,Head,Cat),
    !.
super_pred_n(Lemma, Stem, CatSem, Sub):-
   spy_lower(Lemma, LowL, 1),
   pred_n(LowL, Stem, CatSemm, Sub),
   checkcatsemnil(n,LowL, CatSemm, CatSem),
   !.

super_pred_n(Lemma, Stem, CatSem, Sub):-
   pred_n(Lemma, Stem, CatSemm, Sub),
   checkcatsemnil(n,Lemma, CatSemm, CatSem),
   !.

super_pred_n(Lemma, Stem, CatSem, []):-
   new_pred_n(Lemma, Stem, CatSemm, []),
   checkcatsemnil(n,Lemma, CatSemm, CatSem),
   !.

super_pred_n(X, nil, CatSem, []):-
    new_n(X,X,Gen),
    lemmatize_dic(X,Lemma,Rest),
    assert_new_pred(Lemma,Cat),
    new_pred_n(Lemma, nil, CatSemm, []),
    checkcatsemnil(n,Lemma, CatSemm, CatSem),
    !.

super_pred_n(X, nil, CatSem, []):-
    lemmatize_dic(X,Lemma,Rest),
    assert_new_pred(Lemma,Cat),
    new_pred_n(Lemma, nil, CatSemm, []),
    checkcatsemnil(n,Lemma, CatSemm, CatSem),
    !.

super_pred_n(X, nil, CatSem, []):-
   spy_lower(X, LowL, P),
   (P=1,
    Cat=[istituzione,oggetto]
    ;
    P=0,
    Cat=[oggetto]
    ),!.

super_pred_np(Lemma, Stem, CatSem, []):-
   pred_np(Lemma, Stem, CatSemm, Sub),
   checkcatsemnil(npro,Lemma, CatSemm, CatSem),
   !.

super_pred_np(Lemma, Stem, CatSem, []):-
   spy_lower(Lemma, LowL, 1),
   pred_np(LowL, Stem, CatSemm, Sub),
   checkcatsemnil(npro,LowL, CatSemm, CatSem),
   !.

super_pred_np(Lemma, Stem, CatSem, []):-
   new_pred_np(Lemma, Stem, CatSemm, []),
   checkcatsemnil(npro,Lemma, CatSemm, CatSem),
   !.

super_pred_np(Lemma, Stem, CatSem, []):-
    assert_new_pred(Lemma,np),
    new_pred_np(Lemma, nil, CatSemm, []),
   checkcatsemnil(npro,Lemma, CatSemm, CatSem),
    !.

super_pred_np(X, nil, CatSem, []):-
   spy_lower(X, LowL, P),
   (P=1,
    Cat=[istituzione,oggetto]
    ;
    P=0,
    Cat=[oggetto]
    ),!.

/* pronominali  */

pro(X,pr(TipoPron,Part,Pro,Pers,Gen,Num,Caso)):-
                 pr(TipoPron,Part,X,Pers,Gen,Num,Caso),Pro=X.

pro(X,cl(TipoPron,Part,Pro,Pers,Gen,Num,Caso)) :-
                cl(TipoPron,Part,X,Pers,Gen,Num,Caso),Pro=X.

/* aggettivo */

agg(pre,X,Agg,Gen,Num):- 
    (onegr(agg,romance),
     agg_x(X,Agg,Gen,Num),
     ambigu_tok(X,agg,a,[p,c]),
     retraction(agg_x,a)
     ;
     onegr(agg,english), 
     (agg_y(X,Agg); agg_y(X,Agg,Num)),
                  retraction(a_rom,a)
     ;
     onegr(agg,deutsch), agg_z(X,Agg),
        retraction(a_engl,a)).

agg(post,X,Agg,Gen,Num):- 
    (onegr(agg,romance),
     agg_x(X,Agg,Gen,Num),
     retraction(agg_x,a)
     ;
     onegr(agg,english), 
     (agg_y(X,Agg); agg_y(X,Agg,Num)),
                  retraction(a_rom,a)
     ;
     onegr(agg,deutsch), agg_z(X,Agg),
        retraction(a_engl,a)).

agg(X,Agg,Gen,Num):- 
    (onegr(agg,romance),
     agg_x(X,Agg,Gen,Num),
     ambigu_tok(X,agg,a,[p,c]),
     retraction(agg_x,a)
     ;
     onegr(agg,english), 
     (agg_y(X,Agg); agg_y(X,Agg,Num)),
                  retraction(a_rom,a)
     ;
     onegr(agg,deutsch), agg_z(X,Agg),
        retraction(a_engl,a)).

agg_x(X,X,mas,sing) :- a_rom(X,_,_,_).
agg_x(X,Y,mas,plur) :- a_rom(Y,X,_,_).
agg_x(X,Y,fem,sing) :- a_rom(Y,_,X,_).
agg_x(X,Y,fem,plur) :- a_rom(Y,_,_,X).

agg_y(X,X,sing) :- a_engl(X).
agg_y(X,Y,plur) :- agg_y(Y,X).

agg_y(X,X) :- 
   findall_poss(Si),
   Si\=[],
   on(I-W, Si),
   nogen_member(Cat-X,W),
   Cat=a,
   spy_lower(X, LowL, Pol),
   (Pol=0,
    \+ ap_engl(X, Gen, Num), \+ nm(X,_,K)
    ;
    Pol=1, 
    \+ ap_engl(Lowl, Gen, Num)), 
   !.
agg_y(X,X) :- jj(X).
agg_y(X,X) :- spy_lower(X, LowL, 1),
              jj(LowL).
agg_y(X,X) :- a_engl(X).
agg_y(X,X) :- new_a_engl(X).

agg_y(X,X) :- 
       spy_lower(X, LowL, 1),
       new_a_engl(LowL).

agg_y(X,X) :- new_v(X,Lem,ger,T,P,N).
agg_y(X,X) :- new_v(X,Lem,part,T,P,N).
agg_y(X,X) :- a_word_cat(X, Num, Lemma, Cat),
           \+ nm(X,_,K),
            Lemma\=[],
            on(Lem,Lemma),
            super_pred_a(Lem,CatSA,ListA),
            asserta(new_pred_a(X,CatSA,ListA)).
agg_z(X,X) :- a_ger(X).


jj(X):- atomic(X),
       filter_poss(X),
       \+ quantifier(X),
       j(X),
       (
         disaccess_wsj(X,Best),
         Best\=nn
         ;
         \+ disaccess_wsj(X,Best)),
       !.

/*
jj(X):-
       filter_poss(X),
       \+ quantifier(X),
        up_wn_old(X, Feat, Cats), 
        \+ on(pron, Cats), 
        \+ on(rel, Cats), 
        on(adj, Cats).
*/

jj(X):- wsd(X, Cat, _), Cat=jj.

filter_poss(X):-
     spy_lower(X, LowL, Pol),
     findall(A, ap_engl(A, Gen, Num), As),
     nonvar(X),
     \+ nogen_member(X,As),
     (Pol=0
     ;
     Pol=1,
     \+ nogen_member(LowL,As)),
     !.

super_pred_a(A,CatSA,ListA):-
     pred_a(A,CatSA,ListA),!. 

super_pred_a(A,CatSA,ListA):-
     new_pred_a(A,CatSA,ListA),!. 

super_pred_a(A,CatSA,[]):-
     new_v(A,Lem,ger,T,P,N),CatSA=[valutativo,soggettivo]. 

super_pred_a(A,[valutativo,soggettivo],[]):-!.

/* aggettivo possessivo */

possessivo(X,[possessivo(Agg,Gen,Num)],Gen,Num):- 
         var(Agg),
         agg_poss(X,Agg,Gen,Num).
possessivo(X,Poss,Gen,Num):- !.


agg_poss(X,Agg,Gen,Num):-
   onegr(agg_poss,english),
     spy_lower(X, LowL, Pol),
   (Pol=0,
    ap_engl(X, Gen, Num), X1=X
    ;
    Pol=1,
    ap_engl(LowL, Gen, Num), X1=LowL
    ), 
   Agg=X, retraction(ap_engl,a).

agg_poss(X,Agg,Gen,Num):-
     onegr(agg_poss,romance),
   (agg_poss_x(X,Agg,Gen,Num),X\=loro
     ;
    X=loro, agg_poss_y(loro,Agg,Gen,Num),
    retraction(agg_poss_x,a)).

agg_poss_x(X,X,mas,sing) :- ap_rom(X,_,_,_).
agg_poss_x(X,Y,mas,plur) :- ap_rom(Y,X,_,_).
agg_poss_x(X,Y,fem,sing) :- ap_rom(Y,_,X,_).
agg_poss_x(X,Y,fem,plur) :- ap_rom(Y,_,_,X).
agg_poss_y(X,X,Gen,Num) :- ap_rom(X,_,_,_).

/* avverbio */

avverbio(W,Type):-
   nonvar(Type),
   avv(W,Type).

avverbio(W,Type):-
   avv(W,avv(Pred,tipo(Type))).

avverbio(W,Type):-
   avv(W,avv(Pred,tipo(Type), S)).

avverbio(W,avv(Pred,tipo(Type),Dur,Conf)):-
   avv(W,avv(Pred,tipo(Type),Dur,Conf)).

avverbio(W,Type):-
   var(Type),
   new_avv(W,Type).

avverbio(W,Type):-
   var(Type),
   spy_lower(W, LowL, 1),
   new_avv(LowL,Type).

avverbio(W,Type):-
   sw(W-Cat-Feats),
   on(avv,Cat),
   Type=avv(W,avv(W,tipo(modal))),
   !.
avverbio(W,Type):-
   r(W), Type=modal,!.

avverbio(W,Type):-
   spy_lower(W, LowL, 1),
   avverbio(LowL,Type),
   !.
   
/* quantificatore */

quantif_double([X|F],Quant,Part,Gen,Num,F):- 
             spy_lower(X, LowL, 1),
             quant(LowL,Quant,Part,Gen,Num),
             retraction(quant,_).
quantif_double([X|F],Quant,Part,Gen,Num,F):- 
             quant(X,Quant,Part,Gen,Num),
             retraction(quant,_).
quantif_double(F,Q1,Part,Gen,Num,F):- !.

quantificatore([X|F],Quant,Part,Gen,Num,F):-
             spy_lower(X, LowL, 1),
             quant(LowL,Quant,Part,Gen,Num),
             retraction(quant,_).

quantificatore([X|F],Quant,Part,Gen,Num,F):-
             quant(X,Quant,Part,Gen,Num),
             retraction(quant,_).

quantificatore([A,B|F],Quant,Part,Gen,Num,F):- 
             mcon(A,'_',Aa),
             mcon(Aa,B,X),
             quant(X,Quant,Part,Gen,Num),retraction(quant,_).

quantificatore([A,B,C|F],Quant,Part,Gen,Num,F):- 
             mcon(A,'_',Aa),
             mcon(Aa,B,Bb),
             mcon(Bb,'_',Cc),
             mcon(Cc,C,X),
             quant(X,Quant,Part,Gen,Num),retraction(quant,_).

quantificatore([',',A,','|F],Quant,Part,Gen,Num,F):- 
             quant(A,Quant,Part,Gen,Num),retraction(quant,_).

quantificatore([',',A,B,C,','|F],Quant,Part,Gen,Num,F):- 
             mcon(A,'_',Aa),
             mcon(Aa,B,Bb),
             mcon(Bb,'_',Cc),
             mcon(Cc,C,X),
             quant(X,Quant,Part,Gen,Num),retraction(quant,_).

quantificatore(F,Quant,Part,Gen,Num,F):-!. 

quantif_int(X,Quant,Part,Gen,Num):-
    ((onegr(q_int,romance) ; onegr(q_int,deutsch)),
     quant_int(X,Quant,Part,Gen,Num)
     ;
     onegr(q_int,english), relp(X,_), Quant=X),
      retraction(relp,r).

/* ausiliare */

ausil_comp([Aux|F],aux(Vinf,Modo,pass/pross/Vinf,Pers,Num1,Gen),Neg,X):-
       aux(Aux,Ainf,Modo,_,Pers,Num1), 
       negaz(F,Neg/Rest),
       Rest=[Part|X],
       Part=been,
       retraction(pp_y, _),retraction(ausil_comp, _).

ausil_comp([Aux|F],aux(Vinf,Modo,pass/progr/Vinf,Pers,Num1,Gen),Neg,X):-
       aux(Aux,Ainf,Modo,_,Pers,Num1), 
       Ainf=be,
       (contr(Aux,_,_,_), Neg=neg(not);
        negaz(F,Neg/Rest)),
       Rest=[Part|X],
       Part=being,
       Vinf=be,
       retraction(pp_y, _),retraction(ausil_comp, _).

ausil_comp([Aux|F],aux(Ainf,Modo,Tempo/Ainf1/Ainf,Pers,Num,Gen),Neg,X):-
       (
       genre(legal), 
        Ainf1=shall, Tempo=pres, Modo=ind,
        modal(Aux,Ainf1,Modo,Tempo,Pers,Num),
        (Head=have;Head=be;Head=been),
        extract_sec_head(v-Aux1, Head, I),
        retraction(modal, v)
        ;
        \+ genre(legal), 
        modal(Aux,Ainf1,Modo,Tempo,Pers,Num),
        (Head=have;Head=be;Head=been),
        extract_sec_head(v-Aux1, Head, I),
        retraction(modal, v)),
       (contr(Aux,_,_,_), Neg=neg(not);
        negaz(F,Neg/Rest)),
       Rest=[Part|X],
       aux(Part,Ainf,inf,_,Pers,Num).


ausiliare(X,aux(Ainf,Modo,Tempo,Pers,Num),Neg):-
       aux(X,Ainf,Modo,Tempo,Pers,Num),
       (contr(X,_,_,_), Neg=neg(not);true).

ausiliare(X,modal(shall,ind,Tempo,Pers,Num),Neg):-
        modal(X,shall,ind,Tempo,Pers,Num),
        (contr(X,_,_,_), Neg=neg(not);true),
        !.
/*19 dicembre*/
ausiliare(X,modal(Ainf,Modo,Tempo,Pers,Num),Neg):-
        gr(germanic), 
        modal(X,Ainf,Modo,Tempo,Pers,Num),
        (contr(X,_,_,_), Neg=neg(not);true).

/* Numero era dummificato ?! */

ausil_comp_supp(Aux,aux(Ainf,ind,pass/pross/Ainf,Pers,Num,Gen), Supporto, Neg) 
   :-
    aux(Aux,Ainf,_,_,_,_), 
    Ainf\=have,
         (contr(Aux,_,_,_), Neg=neg(not);true).

/* participio */

participio(X,Verbo,Gen,Num):-
    vmf(X,Verbo,vbn),
    !.
    
participio(X,Verbo,Gen,Num):-
   (pp_x(X,Verbo,Gen,Num)
    ;
    pp_y(X,Verbo,_,_)
    ;
    pp_yy(X,Verbo,_,_)
    ).

participio(X,Verbo,Gen,Num):-
      spy_lower(X, LowL, 1),
   (pp_x(LowL,Verbo,Gen,Num)
    ;
    pp_y(LowL,Verbo,_,_)
    ;
    pp_yy(X,Verbo,_,_)
    ).


participio(X,Partvinf,Gen,Num):-
    stringof(Prefix, X),
    on('_', Prefix),
    vv(X,Verbo,Modo,Tempo,Pers,Num),
    get_irregulars(Verbo, Lemma, Codes, _),
    on(Code,Codes),
    w(Code, Verbo, Cat),
    Cat=root(_, _, verb, Feats, Reg),
    (nogen_member(mood=part,Feats)
     ;nogen_member(mood=ind,Feats)),
    nogen_member(tense=past,Feats),
     extract_part(Prefix, Part),
     mcon(Lemma,'_',Partvi),
     mcon(Partvi,Part,Partvinf),
    !.

participio(X,Partvinf,Gen,Num):-
    stringof(Prefix, X),
    on('_', Prefix),
    reverse(Prefix,Verb),
    extract_verb(Verb, Verbb),
    vv(Verbb,Verbo,Modo,Tempo,Pers,Num),
    Modo=ind, Tempo=pass,
     extract_part(Prefix, Part),
     mcon(Verbo,'_',Partvi),
     mcon(Partvi,Part,Partvinf),
    !.

participio(X,Verbo,Gen,Num):-
    vv(X,Verbo,part,Tempo,Pers,Num),
    ((Tempo=pass;Tempo=past)
      ;
     Tempo\=pass,Tempo\=past,
   lemmatize_dic_v(X, Lemma, Rest),
   decide_mood_tense(X,Rest,Mo,Te),
   Mo=part,(Te=pass;Te=past)
   ).

participio_p(X,Lemma,Gen,Num):-
    vmf(X,Lemma,vbn),
    !.

participio_p(X,Lemma,Gen,Num):-
   lemmatize_dic_v(X, Lemma, Rest),
   decide_mood_tense(X,Rest,Mo,Te),
   (Mo=part;Mo=ind),(Te=pass;Te=past).


participio_p(X,Verbo,Gen,Num):-
   (pp_x(X,Verbo,Gen,Num)
    ;
    pp_y(X,Verbo,_,_)
    ;
    pp_yy(X,Verbo,_,_),
   lemmatize_dic_v(X, Lemma, Rest),
   decide_mood_tense(X,Rest,Mo,Te),
   (Mo=part;Mo=ind),(Te=pass;Te=past)
   ).

participio_p(X,Verbo,Gen,Num):-
      spy_lower(X, LowL, 1),
   (pp_x(LowL,Verbo,Gen,Num)
    ;
    pp_y(LowL,Verbo,_,_)
    ;
    pp_yy(X,Verbo,_,_),
   lemmatize_dic_v(X, Lemma, Rest),
   decide_mood_tense(X,Rest,Mo,Te),
   (Mo=part;Mo=ind),(Te=pass;Te=past)
    ).

participio_p(X,Verbo,Gen,Num):-
    vv(X,Verb,part,pass,Pers,Num),
    check_lemma_part_pass(X,Verb,Verbo).

participio_p(X,Partvinf,Gen,Num):-
    stringof(Prefix, X),
    on('_', Prefix),
    vv(X,Verbo,Modo,Tempo,Pers,Num),
    get_irregulars(Verbo, Lemma, Codes,_),
    on(Code,Codes),
    w(Code, Verbo, Cat),
    Cat=root(_, _, verb, Feats, Reg),
    (nogen_member(mood=part,Feats)
     ;nogen_member(mood=ind,Feats)),
    nogen_member(tense=past,Feats),
     extract_part(Prefix, Part),
     mcon(Lemma,'_',Partvi),
     mcon(Partvi,Part,Partvinf),
    !.
participio_p(X,Partvinf,Gen,Num):-
    stringof(Prefix, X),
    on('_', Prefix),
    vv(X,Verbo,Modo,Tempo,Pers,Num),
    Modo=ind, Tempo=pass,
     extract_part(Prefix, Part),
     mcon(Verbo,'_',Partvi),
     mcon(Partvi,Part,Partvinf),
    !.

check_lemma_part_pass(X,Verb,Verb):-
    Verb\=X,Verb\=v,!.
check_lemma_part_pass(X,X,Verb):-
    lemmatize_dic_v(X, Verb, Rest),
    check_irregulars(Verb),!.
check_lemma_part_pass(X,X,Verb):-
    get_irregulars(X, Verb,Code,_),!.

rtn(NFile, InFile,  Parse):-
%   see(NFile),
%   repeat,
   read_nfrasee(NFile, InFile),
   !.
%   seen.

read_nfrasee([], OutFile):-!.
read_nfrasee(File, OutFile):-
   read_nfrase(File, Frase, Fra, Rest),
   (Frase\=[],
     assertsents(OutFile,Frase),
%     super_reorgs(OutFile, Frase),
     (Rest=[end_of_file],!
     ;
     read_nfrasee(Rest, OutFile)
    )
     ;
    Frase=[],Rest=[]
    ;
    Rest\=[],
    read_nfrasee(Rest, OutFile)
    ),
   !.

read_nfrase([],[], [], []):-!.
read_nfrase([Out|Rest], [Out],Frase, Rest):-
     nonvar(Out),
     (Out=P-punto-5;Out=P-puntint-5),
     !.
read_nfrase([Out|File], Frase, Frase, File):-
     nonvar(Out),
     Out=P-parag-_,
     !.
read_nfrase([Out|File], [], [end_of_file], Rest):-
     nonvar(Out),
     Out=end_of_file,
     !.
read_nfrase([Out|File], [Out|Frase], T, Rest):-
     Out\=end_of_file, 
     read_nfrase(File, Frase, T, Rest),
     !.
read_nfrase([Out|File], Frase, T, Rest):-
     Out=end_of_file, 
     read_nfrase(File, Frase, T, Rest),
     !.
/*
read_nfrase(File, NFrase, T):-
    readnfile(File, Out),
    (Out\=end_of_file,
     adjoin_token(Out, Ot, T),
     (
     Out\=t-[_,punto,5],Out\=t-[_,parag,5],Out\=t-[_,puntint,5],
     read_nfrase(File, Frase, T),
     append([Ot], Frase, NFrase),!
     ;
     (Out=t-[_,punto,5];Out=t-[_,puntint,5]),
      NFrase=[]
     ;
      Out=t-[_,parag,5], 
      append(['§'], Frase, NFrase))
     ;
     Out=end_of_file, NFrase=[end_of_file]),!.
*/
consult_func(-1, P):-!.
consult_func(OrTk, 1):-
    OrTk=UTok-_,
    fct(UTok),
    !.
consult_func(OrTk, 1):-
    OrTk=_-UTok,
    fct(UTok),
    !.
consult_func(OrTk, P):-
    fct(OrTk),
    !.

adjoin_token(Out, Ot, T):-
    Out=t-[_,punto,5], T=1,!.
/*
adjoin_token(Out, Ot, T):-
    Out=t-[_,dirs,5], T=1,!.
*/
adjoin_token(Out, Ot, T):-
    Out=t-[_,parag,5], T=1,!.
adjoin_token(Out, Ot, T):-
     Out=t-[Punt,puntint,5], 
     (Punt='?', T=2; Punt='!', T=3),!.
adjoin_token(Out, Out, T):-!.

/*
    (Out=end_of_file,Frase=[],!
    ;
    Out=t-[_,punto,5],Frase=[], T=1,!
    ;
    Out=t-[_,parag,5],Frase=[], T=1,!
    ;
     Out=t-[_,puntint,5],Frase=[], T=2,!
    ;
     Ot=Out,
     read_nfrase(File, Frase, T)).
*/

readnfile(File, Out):-
   read(Strn),
   (Strn=end_of_file, Out=end_of_file,!
    ;
    Strn=t(Word,Pol, Type), Word= -1, Out=end_of_file,!
    ;
    Strn=t(Word,Pol, Type),
    Out=t-[Word,Pol,Type]),!.

/*
t('Crawford'-crawford, 1, 4).
t(§, parag, 5).
t(and, 0, 44).
t(150, 0, 6).
t('pre-campaign', 0, 7).
t(as_well, [as, well], 80).
t(looking_at, [looking, at], 78).
t(general_election, [general, election], 77).
75
76
90
*/

new_writesentence(File, N1, Frase):-
   length(Frase, N),
   Toks is N - 1,
   write('f('),
   write(N1),
   write(','),
   write(Toks),
   write(','),
   writeq(Frase),
   write(')'),
   writenl(_, '.'),
   !.

tfrase([], []):-!.
tfrase([W-P-C|Frase], [t-[W,P,C]|OutF]):-
   tfrase(Frase, OutF),
   !.

newsuper_reorgs(Frase, NFrase):-
   tfrase(Frase, OutF),
   superreorgs(File,  OutF, NFrase),
   !.

superreorgs(File,  Frase, NuovaFrase):-
   super_reorg(Frase, NewFrase, Parse),
   mults(NewFrase,NuovaFrase,Mults),
   !.
   
super_reorgs(File,  [t-[Word,P,5]], []):-!.
super_reorgs(File,  ['§', t-[Word,P,5]], []):-!.
super_reorgs(File, [], []):-!.

super_reorgs(File,  Frase, NuovaFrase):-
   super_reorg(Frase, NewFrase, Parse),
   curr_frase(N),
   N1 is N + 1,
   mults(NewFrase,NuovaFrase,Mults),
   new_writesentence(File,  N1, NuovaFrase),
   append(Mults,Parse,MParse),
   appiattisci(MParse,NewParse),
   abolish(curr_frase/1),
   assert(curr_frase(N1)),
   numtoks(A,B,C),
   retract(numtoks(A,B,C)),   
   assert(numtoks(A,N1,C)),
   memtoks(NewParse),
   !.
 
super_reorg([], [], []):-!.
super_reorg([end_of_file, t-[Word,P,5]|[]], [Pun], []):-
   ((P=punto;P=parag), Pun='.';P=puntint, Pun='?'),
   !.
super_reorg(['§', t-[Word,P,5]|[]], [Pun], []):-
   ((P=punto;P=parag), Pun='.';P=puntint, Pun='?'),
   !.
super_reorg([t-[Word,P,5]|[]], [Pun], []):-
   ((P=punto;P=parag), Pun='.';P=puntint, Pun='?'),
   !.
super_reorg([t-[Word,Po,5],t-[Word1-L1,Pol,T1],t-[Word2-L2,Pol,T2],t-[Word3-L3,Pol,T3],t-[Word4-L4,Pol,T4],t-[Word,Po,5]|Frase], [E|NewFrase], [t(E, [L1,L2,L3,L4], 4)|Parse]):-
   mcon(Word1,'_',B1),
   mcon(B1,Word2,C1),
   mcon(C1,'_',C2),
   mcon(C2,Word3,D1),
   mcon(D1,'_',D2),
   mcon(D2,Word4,E),
   super_reorg(Frase, NewFrase, Parse),
   !.
super_reorg([t-[Word0-no,1,44],t-[sooner,Pol,T1],t-[said,Pol,T2],t-[than,Pol,T3],t-[done,Pol,T4],t-[Word,Po,5]|Frase], [accomplished, immediately, Word|NewFrase], [t(accomplished, 0, 4), t(immediately,0, 44), t(Word,Po, 5)|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
   !.
super_reorg([t-[Word0-you,1,44],t-[guys,Pol,T1]|Frase], [you_guys|NewFrase], [t(you_guys, 0, 44)|Parse]):-
   genre(dialogue),
   super_reorg(Frase, NewFrase, Parse),
   !.
super_reorg([t-[you,0,44],t-[can,0,44],t-[tell,Pol,T1]|Frase], [you_can_tell|NewFrase], [t(you_can_tell, 0, 44)|Parse]):-
   genre(dialogue),
   super_reorg(Frase, NewFrase, Parse),
   !.
super_reorg([t-[Word,Po,5],t-[Word1-L1,Pol,T1],t-[Word2-L2,Pol,T2],t-[Word3-L3,Pol,T3],t-[Word,Po,5]|Frase], [C|NewFrase], [t(C, [L1,L2,L3], 4)|Parse]):-
   concatena_mults(Word1,Word2-L2,Cat2,Word3-L3,Cat3,C),
   super_reorg(Frase, NewFrase, Parse),
   !.

super_reorg([t-[Word,Po,5],t-[Word1-L1,Pol,T1],t-[Word2-L2,Pol,T2],t-[Word,Po,5]|Frase], [C|NewFrase], [t(C, [L1,L2], 4)|Parse]):-
   mcon(Word1,'_',Bb),
   mcon(Bb,Word2,C),
   super_reorg(Frase, NewFrase, Parse),
   !.

super_reorg([t-[Word,Pol,5]|Frase], [Word|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.
super_reorg([t-[Word,Pol,6]|Frase], [Word|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase,Parse),
    !.
super_reorg([t-[Up-Word,Pol,76]|Frase], [Up|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.
super_reorg([t-[Up-Word,Pol,78]|Frase], [Up|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.
super_reorg([t-[Up-Word,Pol,77]|Frase], [Up|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.
super_reorg([t-[Word,Pol,76]|Frase], [Word|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.
super_reorg([t-[Word,Pol,77]|Frase], [Word|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.
super_reorg([t-[Word,Pol,78]|Frase], [Word|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.

super_reorg([t-[Word-LWord,Pol,44]|Frase], [LWord|NewFrase], [[]|Parse]):-
   high_rank(Word),
   super_reorg(Frase, NewFrase, Parse),
    !.

super_reorg([t-[Word,Pol,44]|Frase], [Word|NewFrase], [[]|Parse]):-
   high_rank(Word),
   super_reorg(Frase, NewFrase, Parse),
    !.

super_reorg([t-[Word-LWord,Pol,4]|Frase], [LWord|NewFrase], [[]|Parse]):-
   domain_lex(LWord),
   super_reorg(Frase, NewFrase, Parse),
    !.
super_reorg([t-[Word-LWord,1,3]|Frase], [Word|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.
super_reorg([t-[Word,0,3]|Frase], [Word|NewFrase], [[]|Parse]):-
   super_reorg(Frase, NewFrase, Parse),
    !.

super_reorg([t-[Word,Pol,44]|Frase], NewFrase, Parse):-
   func_new_mults([Word|Frase], NewFrase, Parse),!.

super_reorg([t-[Word,Pol,80]|Frase], NewFrase, Parse):-
   Frase=[Lex2|Resto],
   Lex2=t-[L2,Cat2,44], 
   func_new_mults([Word|Frase], NewFrase, Parse),!.

super_reorg([t-[Word,Pol,4]|Frase], NewFrase, Parse):-
   new_mults([Word|Frase], NewFrase, Parse),!.

super_reorg([t-[Word,Pol,7]|Frase], NewFrase, Parse):-
   new_mults([Word|Frase], NewFrase, Parse),!.

super_reorg([t-[Word,Pol,75]|Frase], NewFrase, Parse):-
   new_mults([Word|Frase], NewFrase, Parse),!.

super_reorg([t-[Word,Pol,77]|Frase], NewFrase, Parse):-
   new_mults([Word|Frase], NewFrase, Parse),!.

super_reorg([t-[Word,Pol,80]|Frase], NewFrase, Parse):-
   new_mults([Word|Frase], NewFrase, Parse),!.

super_reorg([t-[Word,Pol,8]|Frase], NewFrase, Parse):-
   new_mults([Word|Frase], NewFrase, Parse),!.

new_mults([],[],[]):-!.

new_mults([Lu1-Ll1,Lex2|RestoFrase],[Lu1,Pun|NuovaFrase],Parse):-
   Lex2=t-[Lu2,P,_],
   (P=punt, Pun=Lu2;P=par, Pun=Lu2;P=dirs, Pun=Lu2),
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

new_mults([Lex1,Lex2|RestoFrase],[Lex1,Pun|NuovaFrase],Parse):-
   Lex2=t-[Lu2,P,_],
   (P=punt, Pun=Lu2;P=par, Pun=Lu2;P=dirs, Pun=Lu2),
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

new_mults([Lu1-Ll1,Lex2|RestoFrase],[Lu1,Pun],[]):-
   Lex2=t-[Lu2,P,5],
   (P=punto, Pun=Lu2;P=puntint, Pun=Lu2;P=parag, Pun='.'),
   !.

new_mults([Lex1,Lex2|RestoFrase],[Lex1,Pun],[]):-
   Lex2=t-[Lu2,P,5],
   (P=punto, Pun=Lu2;P=puntint, Pun=Lu2;P=parag, Pun='.'),
   !.

new_mults([Up-Lex1,Lex2|RestoFrase],[Up,U|NuovaFrase], Parse):-
   Lex2=t-[U-L2,1,76],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
new_mults([Up-Lex1,Lex2|RestoFrase],[Up,U|NuovaFrase], Parse):-
   Lex2=t-[U-L2,1,78],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
new_mults([Lex1,Lex2|RestoFrase],[Lex1,U|NuovaFrase], Parse):-
   Lex2=t-[U-L2,1,76],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
new_mults([Lex1,Lex2|RestoFrase],[Lex1,U|NuovaFrase], Parse):-
   Lex2=t-[U-L2,1,78],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
new_mults([Up-Lex1,Lex2|RestoFrase],[Up,L2|NuovaFrase], Parse):-
   Lex2=t-[L2,0,76],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
new_mults([Up-Lex1,Lex2|RestoFrase],[Up,L2|NuovaFrase], Parse):-
   Lex2=t-[L2,0,78],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
new_mults([Lex1,Lex2|RestoFrase],[Lex1,L2|NuovaFrase], Parse):-
   Lex2=t-[L2,0,76],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
new_mults([Lex1,Lex2|RestoFrase],[Lex1,L2|NuovaFrase], Parse):-
   Lex2=t-[L2,0,78],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
new_mults([L1-Ll1,Lex2|RestoFrase],[Ll1|NuovaFrase], Parse):-
    Lex2=t-[A-B,Cat2,Type2],
    v(Ll1,_),
    \+ upper_wsj(L1,_),
    \+ if_first_name(L1),
   super_reorg([Lex2|RestoFrase],NuovaFrase,Parse),
   !.
new_mults([L1-Ll1,Lex2,Lex3|RestoFrase],[C|NuovaFrase], [t(C, [L1,L2,L3], 4)|Parse]):-
   match_int(L1,nil),
   Lex2=t-[L2,Cat2,8],
   Lex3=t-[L3,Cat3,8],
   concatena_mults(L1,L2,Cat2,L3,Cat3,C),
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lu1-Ll1,Lex2,Lex3|RestoFrase],[C|NuovaFrase], [t(C, [Lu1,L2,L3], 4)|Parse]):-
   Lex2=t-[L2,Cat2,Type2],
   L2\=A-B,
   Type2\=5,
   admissible(L2),
   Lex3=t-[L3,Cat3,Type3],
   Type3\=44,Type3\=80, Type3\=5, 
   L3=H-J, Ll=H,
   match_intermediate(Lu1,L2,D),
   n_prnouns(1,[D,Ll],C),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lu1-Ll1,Lex2,Lex3|RestoFrase],[C|NuovaFrase],[t(C, [Lu1,A,H], 4)|Parse]):-
   Lex2=t-[A-B,Cat2,Type2],
   Type2\=5,
   admissible(B),
   Lex3=t-[L3,Cat3,Type3],
   Type3\=44,Type3\=80, Type3\=5, 
   L3=H-J, Ll=H,
   match_intermediate(Lu1,A,D),
   n_prnouns(1,[D,Ll],C),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lex1,Lex2,Lex3|RestoFrase],[C|NuovaFrase],[t(C, [Lex1,A,H], 4)|Parse]):-
   Lex1\=A-B,
   checkab(Lex1),
   Lex2=t-[A-B,Cat2,Type2],
   Type2\=5,
   admissible(B),
   Lex3=t-[L3,Cat3,Type3],
   Type3\=44,Type3\=80, Type3\=5, 
   L3=H-J,
   match_intermediate(Lex1,A,D),
   n_prnouns(1,[D,H],C),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lex1,Lex2,Lex3|RestoFrase],[C|NuovaFrase],[t(C, [Lex1,L2,H], 4)|Parse]):-
   Lex1\=A-B,
   Lex2=t-[L2,Cat2,Type2],
   Type2\=5,
   L2\=A-B,
   admissible(L2),
   Lex3=t-[L3,Cat3,Type3],
   Type3\=44,Type3\=80, Type3\=5, 
   L3\=H-J, Ll=L3,
   match_intermediate(Lex1,L2,D),
   checkrestxml(RestoFrase),
   n_prnouns(0,[D,Ll],C),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.

new_mults([Lu1-Ll1, Lex2, Lex3, Lex4|RestoFrase],[C|NuovaFrase],[t(C, [Lu1,and,Lu3,Lu4], 4)|Parse]):-
   Lex2=t-[and,0,Type],
   Lex3=t-[Lu3-Ll3,1,Typ],
   Lex4=t-[Lu4-Ll4,1,Typ],
   check_underscore(Lu4,New),
   mcon(Lu1,'_',Bb),
   mcon(Bb,and,D1),
   mcon(D1,'_',D11),
   mcon(D11,Lu3,D),
   (checkab(New),
    mcon(D,'_',Dd),
    mcon(Dd,Lu4,C)
    ;
   n_prnouns(1,[D,Lu4],C)),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lu1-Ll1, Lex2, Lex3|RestoFrase],[C|NuovaFrase],[t(C, [Lu1,and,Lu3], 4)|Parse]):-
   Lex2=t-[and,0,Type],
   Lex3=t-[Lu3-Ll3,1,Typ],
   check_underscore(Lu3,New),
   mcon(Lu1,'_',Bb),
   mcon(Bb,and,D),
   (checkab(New),
    mcon(D,'_',Dd),
    mcon(Dd,Lu3,C)
    ;
   n_prnouns(1,[D,Lu3],C)),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lu1-Ll1, Lex2, Lex3|RestoFrase],[C|NuovaFrase],[t(C, [Lu1,L,Lu3], 4)|Parse]):-
   Lex2=t-[L,0,Type],
   checkab(L),
   Lex3=t-[Lu3-Ll3,1,Typ],
   check_underscore(Lu3,New),
   mcon(Lu1,'_',Bb),
   mcon(Bb,L,D),
   (checkab(New),
    mcon(D,'_',Dd),
    mcon(Dd,Lu3,C)
    ;
   n_prnouns(1,[D,Lu3],C)),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lu1-Ll1,Lex2|RestoFrase],[C2|NuovaFrase],[t(C2, [Lu1,Lu2], 4)|Parse]):-
   Lex2=t-[Lu2-Ll2,1,Type],
   Type=75,
   recover_descriptions(Lu2,[Lexs|Rest]),
   n_prnouns(1,[Lu1,Lexs],C),
   C\=[],
   mcon(C,'-',C1),
   mcon(C1,s_,C2),
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lu1-Ll1,Lex2|RestoFrase],[C|NuovaFrase],[t(C, [Lu1,Lu2], 4)|Parse]):-
   Lex2=t-[Lu2-Ll2,1,Type],
   Type\=44,Type\=6,
   n_prnouns(1,[Lu1,Lu2],C),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lu1-Ll1,Lex2|RestoFrase],[C|NuovaFrase],[t(C, [Lu1,Lu2], 4)|Parse]):-
   Lex2=t-[Lu2-Ll2,1,Type],
   Type\=44,Type\=6,
   checkrestxml(RestoFrase),
   n_prnouns(1,[Ll1,Ll2],C),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lu1-Ll1,Lex2|RestoFrase],[C|NuovaFrase],[t(C, [Lu1,Ll2], 4)|Parse]):-
   Lex2=t-[Ll2,0,Type],
   Type\=44,Type\=6,
   checkrestxml(RestoFrase),
   n_prnouns(1,[Ll1,Ll2],C),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lex1,Lex2|RestoFrase],[C|NuovaFrase],[t(C, [Lex1,A], 4)|Parse]):-
   Lex1\=A-B,
   checkab(Lex1),
   Lex2=t-[A-B,Cat2,Type2],
   Type2\=5,
   admissible(B),
   match_intermediate(Lex1,A,C),
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lex1,Lex2|RestoFrase],[C|NuovaFrase],[t(C, [Lex1,L2], 4)|Parse]):-
   Lex1\=A-B,
   Lex2=t-[L2,0,Type],
   Type\=44,Type\=6,
   checkrestxml(RestoFrase),
   n_prnouns(0,[Lex1,L2],C),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([t-Lex|RestoFrase],[L|NuovaFrase],[[]|Parse]):-
   list(Lex),
   Lex=[L,Cat,Type],
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Lex|RestoFrase],[Lex|NuovaFrase],[[]|Parse]):-
   atomic(Lex),
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([Up-Lex|RestoFrase],[Up|NuovaFrase],[[]|Parse]):-
   atomic(Lex),
   super_reorg(RestoFrase,NuovaFrase,Parse),
   !.
new_mults([t-[Word,P,5]|[]],[Pun|[]],[]):-
   (P=puntint, Pun=Word;P=parag, Pun='.';P=punto, Pun='.'),
   !.
new_mults([Lex|[]],[Lex|[]],[]):-
   !.

checkrestxml(RestoFrase):-
   RestoFrase=[_-X|_],
   X=[A|_],
   stringof(Lis,A),
   length(Lis,L),
   (1<L, \+ on('_',Lis);
    on('_',Lis), 3<L),
    !.

admissible(B):-
  B\=by, 
  \+ high_rank(B).

match_intermediate(L1,L2,D):-
   match_int(L1,L2),
   check_underscore(L1,New),
   mcon(New,'_',Bb),
   mcon(Bb,L2,D),
   !.


match_int(L1,L2):-
   checkab(L1),
   !.
match_int(L1,L2):-
   chabbr(L1),
   !.
match_int(L1,L2):-
   chabbr(L2),
   !.
match_int(L1,L2):-
   check_underscore(L1,New),
   chabbr(New),
   !.
match_int(L1,L2):-
   check_underscore(L1,New),
   checkab(New),
   !.
match_int(L1,L2):-
   check_underscore(L2,New),
   chabbr(New),
   !.
match_int(L1,L2):-
   L2\=nil,
   if_first_name(L1),
   if_first_name(L2),
   !.
match_int(L1,L2):-
   L2\=nil,
   name_new_hm(L1, Cats1),
   name_new_hm(L2, Cats2),
   !.

concatena_mults(L1,L2,1,L3,1,C):-
   L2=A-B,
   L3=H-J,   
   mcon(L1,'_',B1),
   mcon(B1,A,C1),
   mcon(C1,'_',C2),
   mcon(C2,H,C),
   !.

upper_wsj(Lex,Cats):-
    wsu(Lex, Cats, N)
     ;
    wsd(Lex, Cats, N)
     ;
    wsl(Lex-Cats),
    !.
    
func_new_mults([Lu1-Ll1,Lex2,Lex3,Lex4,Lex5,Lex6|RestoFrase],[E|NuovaFrase], Parse):-
   Lex2=t-[L2,Cat2,Type2],
   L2\=_-_,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,
   Lex4=t-[L4,Cat4,Type4],
   L4\=_-_,
   Lex5=t-[L5,Cat5,Type5],
   L5\=_-_,
   Lex6=t-[L6,Cat6,Type6],
   L6\=_-_,
   mults6(Ll1,L2,L3,L4,L5,L6,E,T),
   E\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lex1,Lex2,Lex3,Lex4,Lex5,Lex6|RestoFrase],[E|NuovaFrase], Parse):-
   Lex1\=A-B,
   Lex2=t-[L2,Cat2,Type2],
   L2\=_-_,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,
   Lex4=t-[L4,Cat4,Type4],
   L4\=_-_,
   Lex5=t-[L5,Cat5,Type5],
   L5\=_-_,
   Lex6=t-[L6,Cat6,Type6],
   L6\=_-_,
   mults6(Lex1,L2,L3,L4,L5,L6,E,T),
   E\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lu1-Ll1,Lex2,Lex3,Lex4,Lex5|RestoFrase],[E|NuovaFrase], Parse):-
   Lex2=t-[L2,Cat2,Type2],
   L2\=_-_,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,
   Lex4=t-[L4,Cat4,Type4],
   L4\=_-_,
   Lex5=t-[L5,Cat5,Type5],
   L5\=_-_,
   mults5(Ll1,L2,L3,L4,L5,E,T),
   E\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lex1,Lex2,Lex3,Lex4,Lex5|RestoFrase],[E|NuovaFrase], Parse):-
   Lex1\=A-B,
   Lex2=t-[L2,Cat2,Type2],
   L2\=_-_,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,
   Lex4=t-[L4,Cat4,Type4],
   L4\=_-_,
   Lex5=t-[L5,Cat5,Type5],
   L5\=_-_,
   mults5(Lex1,L2,L3,L4,L5,E,T),
   E\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lu1-Ll1,Lex2,Lex3,Lex4|RestoFrase],[E|NuovaFrase], Parse):-
   Lex2=t-[L2,Cat2,Type2],
   L2\=_-_,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,
   Lex4=t-[L4,Cat4,Type4],
   L4\=_-_,
   mults4(Ll1,L2,L3,L4,E,T),
   E\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lex1,Lex2,Lex3,Lex4|RestoFrase],[E|NuovaFrase], Parse):-
   Lex1\=A-B,
   Lex2=t-[L2,Cat2,Type2],
   L2\=_-_,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,
   Lex4=t-[L4,Cat4,Type4],
   L4\=_-_,
   mults4(Lex1,L2,L3,L4,E,T),
   E\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
func_new_mults([Lu1-Ll1,Lex2,Lex3,Lex4|RestoFrase],[E|NuovaFrase], Parse):-
   Lex2=t-[L2,Cat2,Type2],
   L2=Ll2-_,Type2=44,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,Type3=44,
   Lex4=t-[L4,Cat4,Type4],
   L4=Ll4-_,
   mults4(Lu1,Ll2,L3,Ll4,E,T),
   E\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lu1-Ll1,Lex2,Lex3|RestoFrase],[D|NuovaFrase], Parse):-
   Lex2=t-[L2,Cat2,Type2],
   L2\=E-F,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,
   mults3(Ll1,L2,L3,D,T),
   D\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lex1,Lex2,Lex3|RestoFrase],[D|NuovaFrase], Parse):-
   Lex1\=A-B,
   Lex2=t-[L2,Cat2,Type2],
   L2\=E-F,
   Lex3=t-[L3,Cat3,Type3],
   L3\=_-_,
   mults3(Lex1,L2,L3,D,T),
   D\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.
func_new_mults([Lu1-Ll1,Lex2|RestoFrase],[C|NuovaFrase], Parse):-
   Lex2=t-[L2,Cat2,Type],
   L2\=E-D,
   (Type=44;Type=80;Type=4),
   mults2(Ll1,L2,C,T),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lex1,Lex2|RestoFrase],[C|NuovaFrase], Parse):-
   Lex1\=A-B,
   Lex2=t-[L2,Cat2,Type],
   (Type=44;Type=80;Type=4),
   L2\=E-D,
   mults2(Lex1,L2,C,T),
   C\=[],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Up-Lex|Frase],NewFrase, Parse):-
   check_underscore(Up,New),
   checkab(New),
   new_mults([Up-Lex|Frase], NewFrase, Parse),!.

func_new_mults([Word|Frase],NewFrase, Parse):-
   Word\=A-B,
   check_underscore(Word,New),
   checkab(New),
   new_mults([Word|Frase], NewFrase, Parse),!.

func_new_mults([t-Lex|RestoFrase],[L|NuovaFrase], Parse):-
   list(Lex),
   Lex=[L,Cat,Type],
%   RestoFrase=[Lex2|Resto],
%   Lex2=t-[L2,Cat2,Type2],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Lex|RestoFrase],[Lex|NuovaFrase], Parse):-
   atomic(Lex),
%   RestoFrase=[Lex2|Resto],
%   Lex2=t-[L2,Cat2,Type2],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([Up-Lex|RestoFrase],[Up|NuovaFrase], Parse):-
   atomic(Lex),
%   RestoFrase=[Lex2|Resto],
%   Lex2=t-[L2,Cat2,Type2],
   super_reorg(RestoFrase,NuovaFrase, Parse),
   !.

func_new_mults([t-[Word,P,5]|[]],[Pun|[]],[]):-
   (P=puntint, Pun=Word;P=parag, Pun='.';P=punto, Pun='.'),
   !.

check_underscore(Up,New):-
    \+ integer(Up),
    stringof(Lista,Up),
    reverse(Lista, ['_'|Rest]),
    reverse(Rest,RevRest),
    stringof(RevRest, New),
    !.
check_underscore(Up,Up).

discover_names(Name):-
    upper_wsj(Name,Cats),!.
discover_names(Name):-
    evaluatename(Name),!.
discover_names(Name):-
    nb(Name),!.
discover_names(Name):-
    recover_descriptions(Name, Sec),
    list(Sec),
    evaluatename(Sec),!.

evaluatename([Abr|Sec]):-
   checkab(Abr),!.

evaluatename(Sec):-
   on(Name,Sec),
  (
   lc3(Name, Codes)
   ;
   lc4(Name, Codes)
   ;
    name_new_hm(Name, Cats1)
   ),!.

match_type_lex(A,B,['n:t:m']):-
    nt(A),nt(B),
   !.
match_type_lex(A,B,Codes):-
    tpl(A,Codes),tpl(B,Code),
    on(CdA,Codes), on(CdB,Code),
    pname(CA,CdA),pname(CB,CdB),
    match_codes_tpl(CA,CB),
   !.
match_type_lex(A,B,['s:h:mf']):-
    lc4(A,Codes),lc4(B,Code),
   !.
match_type_lex(A,B,['s:h:mf']):-
    lc3(A,Codes),lc3(B,Code),
    on(CdA,Codes), on(CdB,Code),
    pname(CA,CdA),pname(CB,CdB),
    match_codes_tpl(CA,CB),
   !.
match_codes_tpl((C:Codes),(C:Code)):-
   !.
n_prnouns(Pol,[A,B],C):-
    stringof(First,A),
    decompose_underscore(First,Fir),
    stringof(Fir,A1),
   match_type_lex(A1,B,Codes),
   mcon(A,'_',Bb),
   mcon(Bb,B,C),
   new_assign_cat(Pol, C, [], Codes),
   sw(C-Ct-Feats),
   on(Ct-C-Feas,Feats),
   on(feat=Cats,Feas),
   asserta(mult(C,Cats)),
   !.

n_prnouns(Pol,[A,B],C):-
   (checkab(A);
    spy_lower(A, LowW, 1),
    checkab(LowW)),
    spy_lower(B, Low, 1),
   choose_category(A,Categ),
   new_assign_cat(Pol, C, [], Categ),
   !.

n_prnouns(Pol,[A,B],C):-
   check_underscore(B,New),
   checkab(New),
   check_underscore(A,Ne),
   mcon(Ne,'_',Bb),
   mcon(Bb,B,C),
   \+title(New),\+temp(New),\+place(New),
   new_assign_cat(Pol, C, [], ['s:p:m:s']),
   !.
n_prnouns(Pol,[A,B],C1):-
    stringof(Fir,B),
    reverse(Fir,[s|Sing]),
    reverse(Sing,Bb1),
    stringof(Bb1,B11),
   mcon(A,'_',Bb),
   mcon(Bb,B11,C),
   mcon(Bb,B,C1),
   (new_wnm(C, Cats),
    asserta(
            new_pred_n(C, nil, Cats, [])),
       asserta(
            new_n(C,C1,Gen))
     ;
    new_hm(C, Cats),
   couple_cats_codes(Cats,Codes),
   new_assign_cat(Pol, C1, Cats, Codes)),
%   asserta(mult(C,Cats)),
   !.
n_prnouns(Pol,[A,B],C):-
    check_underscore(A,New),
    mcon(New,'_',Bb),
    mcon(Bb,B,C),
    !,
    n_prnoun(Pol,[New,B],C),!.

n_prnouns(Pol,[A,B],C):-
    mcon(A,'_',Bb),
    mcon(Bb,B,C),
    n_prnoun(Pol,[A,B],C),!.


n_prnoun(Pol,[A,B],C):-
   title(A),
   gend(A,G),
   mcon('s:h:',G,Cat),
   new_assign_cat(Pol, C, [], [Cat]),
   !.
n_prnoun(Pol,[A,B],C):-
   lc3(A, Codes),
   name_new_hm(B, BCats),
   new_assign_cat(Pol, C, [], Codes),
   !.
n_prnoun(Pol,[A,B],C):-
   lc4(A, Codes),
   new_assign_cat(Pol, C, [], Codes),
   !.
n_prnoun(Pol,[A,B],C):-
   lc(C, Codes),
   new_assign_cat(Pol, C, [], Codes),
   !.
n_prnoun(Pol,[A,B],C):-
   spy_lower(C,Low,P),
   new_mults_wn(Pol,Low,C, Codes),
   (Pol=1,
     new_assign_cat(Pol, C, [], ['s:p:m:s'])
    ;
    Pol=0,
    lemmatize_dic(C, Lemma, S),
    (S=s,
     new_assign_cat(Pol, C, [], ['s:z:m:s'])
     ; S\=s,
      new_assign_cat(Pol, C, [], ['s:z:m:s']))
   ),
   !.
n_prnoun(Pol,[A,B],C):-
   lex_user(C, Codes, Type),
   new_assign_cat(Pol, C, [], Codes),
   !.
n_prnoun(1,[A,B],C):-
   name_new_hm(A, Cats),
   name_new_hm(B, Cats1),
   (\+ on(loc,Cats);
    on(loc,Cats),on(loc,Cats1)),
   couple_cats_codes(Cats,Codes),
   new_assign_cat(1, C, Cats, Codes),
   asserta(mult(C,Cats)),
   !.

/*
n_prnoun(1,[A,B],C):-
   mcon(A,'_',Bb),
   mcon(Bb,B,C),
   name_new_hm(B, Cats1),
   couple_cats_codes(Cats,Codes),
   new_assign_cat(1, C, Cats, Codes),
   asserta(mult(C,Cats)),
   !.
*/

n_prnoun(1,[A,B],C):-
   prnoun([A,B],C),
   asserta(mult(C,[hum])),
   !.
n_prnoun(Pol,[A,B],C):-
   new_hm(C, Cats),
   couple_cats_codes(Cats,Codes),
   new_assign_cat(Pol, C, Cats, Codes),
%   asserta(mult(C,Cats)),
   !.
n_prnoun(1,[A,B],C):-
   name_new_hm(A, Cats),
   (is_list(Cats),
     (on(nhm,Cats);on(nhf,Cats);on(nmm,Cats);on(nmf,Cats))
     ;
     atomic(Cats),
     (Cats=nhm;Cats=nhf;Cats=nmf;Cats=nmm)),
   spy_lower(B,Low,P), P=1,
   new_assign_cat(1, C, [], ['s:h:mf']),
   !.

getnumlem(K,plur):-
   on(Lem,K),
   pname(L,Lem),
   L=Nu:Le,
   Nu=npl,!.
   
asseriscinomicheckforms(Upper,Lex,Cats):-
   appiattisci(Cats,Cas),
   on(n,Cas),
   lemmatize_dic(Lex, Lemma, Res),
   getnumlex(Lex,Res,Num),
   (trova_CatSem(n,Upper,Cat),
    Cat\=nil
%    search_wn_cats(Lex,Cat)
    ;
    trova_CatSem(n,Lex,Cat),
    Cat\=nil
%    search_wn_cats(Upper,Cat)
    ;
    search_wn_cats(Lemma,Cat)
    ;
    sk(Lemma,K), stringof(Lis,K), Lis=[1|_], Cat=[astratto,legale]
    ;
    dc(Lemma,K),(on(n,K);on(npl,K)), Cat=[astratto,legale]
    ;
    dc(Lex,K),(on(n,K);on(npl,K)), Cat=[astratto,legale]
    ),
   assertnewnouns(Lex,Num,Lemma,Cat),
   !.
asseriscinomicheckforms(Upper,Lex,Cats):-!.

check_forms(Up,W,[nh]):-
    firstword(Up),
    if_first_name(Up).
check_forms(Up,W,S):-
    grammw(Up,S),
    S\=a.

check_forms(Up,W,S):-
    (Up\=W,
    firstword(Up)
    ;
    Up=W),
    grammw(W,S),
    S\=a.

check_forms(Upper,Lex1,S):-
   findall(S1, (    
                (Upper\=Lex1,
                     firstword(Upper);
                      Upper=Lex1),
                check_form1(Lex1,S1)), Ss1),
   findall(S2, check_form2(Lex1,S2), Ss2),
   (Ss2=[],
    \+ grammw(Lex1,_),
    findall(S3, check_form3(Lex1,S3), Ss3)
      ;
    (Ss2=[],
      grammw(Lex1,_)
      ;
      Ss2\=[], 
      appiattisci(Ss2,Ss22),
      (on(n,Ss22),
       asseriscinomicheckforms(Upper,Lex1,Ss22)
       ;
       \+ on(n,Ss22))), 
   Ss3=Ss2),
   append(Ss1,Ss3,S3),
   appiattisci(S3,S4),
   sort(S4,S), S\=[],!.

check_form1(Lex,S):-
   check_form(Lex,S).
check_form1(Lex1,S):-
   v(Lex1,_,_,_,_,_),S=v;
   n(Lex1,_,_),S=n;
   n(_,Lex1,_),S=n;
   lc(Lex1,B),
   new_assign_cat_lex(Lex1, SCats, B),
   converti_tags_new_forms(Lex1, S1, SCats),
   (S1=[S];S=S1),
   !.

check_form2(Lex1,S):-
   v(Lex1,_),S=v.
check_form2(Lex1,S):-
   once(inf_v(Lex1,_)),S=v.
/*
check_form2(Lex1,[]):-
    spy_lower(Lex1, LowL, Pol),
    (sw(LowL-A-D)
    ;
    sw(Lex1-A-D)
    ).
*/    
check_form2(Lex1,S):-
    \+ grammw(Lex1,_),
   access_wsj(Lex1,S).
check_form2(Lex1,n):-
   nwn(Lex1,S).
check_form2(Lex1,n):-
   n_wn(Lex1,S),!.
check_form2(Lex1,S):-
   listirr(Lex1),S=n,!.
check_form2(Lex1,S):-
   wsd(Lex1,Cats, N),
   transl_tags(Lex1,Cats,S),
   !.
check_form2(Lex1,[v,a]):-
   verbgerund(Lex1),!.
check_form2(Lex,Cat):-
    \+ firstword(Lex),
    \+ fct(Lex),
    \+ grammw(Lex,_),
    \+ jj(Lex),
    \+ rj(Lex,_,_),
    lemmatize_dicf(Lex,Lem,S),
    (S=m, 
      Cat=d;
       nonvar(S), 
       (S=s,
         (jj(Lem),Cat=[a]
         ;
         once(inf_v(Lem,K)),
         Cat=[n,v]
         ;
         Cat=[n])
       ;
       stringof(List,Lex),
       reverse(List,RevL),
       RevL=[d,e|_], Cat=v
       ;
       (S=n;S=t), Cat=v,
       get_irregulars(Lex,Lem,Codes,Code)
%       ;
%       S\=s, S\=d, S\=m, S\=v,
%       Cat=n
        )
       ),
    !.
    
notfirstword(Lex):-
        spy_lower(Lex,Low,Pol),
        (Pol=1,
         findall_poss(NuoFrase),
         NuoFrase=[I-First|_],
         \+ on(_-Lex,First)
         ;
         Pol=0),
        !.

check_form3(Lex,S):-
     contrs(Lex, T, Base),
     match_contrs_cat(T,S),
     !.

/*
check_form3(Lex,Cat):-
    notfirstword(Lex),
    lemmatize_dicf(Lex, Word, S),
        (S=m, 
      Cat=d;
       nonvar(S), 
       (S=s,Cat=[n,v]
       ;
        S=v,Cat=v
       ;
       S=d, Cat=v
       ;
       S=n, Cat=v
       ;
       S\=s, S\=n, S\=d, S\=m,S\=v,
       Cat=n)
       ),
    !.
*/
/*
wsl/1 - upper-lower case words that can be matched with
        both upper and lower case words

wsd/3 - dashed upper and lower case words

wsj/3 - lower case words with frequency of occurrence

wsu/3 - upper case words

nnp
nns
nnps
nn
jjr
jjs
jj
uh
fw
rb
ls
sym

*/

access_upwsj(Lex,[[n]-Lex], LowL):-
      nb(Lex),
    !.
access_upwsj(Lex,[[n]-Lex], LowL):-
      mub(Lex),
    !.
access_upwsj(Lex,[S-Lex], LowL):-
    \+ grammw(Lex,_),
    wsu(Lex, Cats, N),
    transl_tags(Lex,Cats,S),
    !.
access_upwsj(Lex,[S-Lex], LowL):-
    wsl(Lex-Cats),
    transl_tags(Lex,Cats,S),
    !.
/*
access_upwsj(Lex,[S-Lex], LowL):-
    wsd(Lex, Cats, N),
    transl_tags(Lex,Cats,S),
    !.
access_upwsj(Lex,[S-LowL], LowL):-
   findall(Cont, termin(Cont-Lexs), Conts),
   Conts=[],
    notfirstword(Lex),
   access_wsj(LowL,S),!.
*/
access_upwsj(Lex,[S-Lex], Lex):-
   \+ firstword(Lex),
   check_forms(Lex,Lex,S).
access_upwsj(Lex,[S-LowL], LowL):-
   \+ firstword(Lex),
   check_forms(LowL,Lex,S).
access_upwsj(Lex,[[n]-Lex], LowL):-
    \+ fct(Lex),
    \+ firstword(Lex),
    lemmatize_dic(Lex,Lem,S),
    search_wn_cats(Lex,Cats),
    (Cats\=[];
       Cats=[], nonvar(S),
       search_wn_cats(Lem,Cats1),
      Cats1\=[]),
    !.
access_upwsj(Lex,[[np]-Lex],Low):-
    citiespreds(Lex,Cats),
    !.

access_wsj(Lex,S):-
    wsj(Lex, Cats, N),
    transl_tags(Lex,Cats,S),
    !.
access_wsj(Lex,S):-
    wsl(Lex-Cats),
    transl_tags(Lex,Cats,S),
    !.


transl_tags(W,Cats,[C]):-
     atomic(Cats),
     ttwsj(Cats,C),
     !.
transl_tags(W,Cats,Cs):-
     atomic(Cats),
     stringof(String,Cats),
     on('_',String),
     recover_descs(Cats, Words),
     transl_tags(W,Words,Cs),
     !.
transl_tags(W,Cats,S):-
    gettabswsj(Cats,Tags),
    ttwsjs(Tags,Ss),
    appiattisci(Ss,Sp),
    sort(Sp,S),
    !.
transl_tags(W,Cats,S):-
    is_list(Cats),
    ttwsjs(Cats,Ss),
    appiattisci(Ss,Sp),
    sort(Sp,S),
    !.
transl_tags(W,Cats,[Cats]):-
     atomic(Cats),
     !.
transl_tags(W,Cats,S):-
    is_list(Cats),
    Cats=[C|Rest],
    transl_tags(W,Rest,S),
    !.
gettabswsj([],[]):-!.
gettabswsj([[C]-_|Cats],[C|Tags]):-
    gettabswsj(Cats,Tags),
    !.
ttwsjs([],[]):-!.
ttwsjs([T|Tags],[C|S]):-
    ttwsj(T,C),
    ttwsjs(Tags,S),
    !.
ttwsjs([T|Tags],S):-
    ttwsjs(Tags,S),
    !.

ttwsj(cc,e).
ttwsj(cd,d).
ttwsj(dt,d).
ttwsj(ex,v).
ttwsj(fw,n).
ttwsj(in,[p,s]).
ttwsj(ins,[p,s]).
ttwsj(jj,a).
ttwsj(jjr,a).
ttwsj(jjs,a).
ttwsj(ls,d).
ttwsj(md,v).
ttwsj(nn,n).
ttwsj(nns,n).
ttwsj(nnp,n).
ttwsj(nnps,n).
ttwsj(pdt,q).
ttwsj(pos,ng).
ttwsj(prp,r).
ttwsj(rb,av).
ttwsj(rbr,av).
ttwsj(rbs,av).
ttwsj(rp,av).
ttwsj(sym,n).
ttwsj(to,p).
ttwsj(uh,i).
ttwsj(vb,v).
ttwsj(vbd,v).
ttwsj(vbg,v).
ttwsj(vbn,v).
ttwsj(vbp,v).
ttwsj(vbz,v).
ttwsj(wdt,[r,w]).
ttwsj(wp,w).
ttwsj(wps,w).
ttwsj(wrb,w).

create_tratti(Feats, P,N,G):-
    recoverpers(Feats, P),
    recovernum(Feats, N),
    recovergen(Feats, G),
   !.

check_sur(Lemma,Cats):-
   spy_lower(Lemma, LowW, 1),
   !.   

check_sur(Lemma,Cats):-
   spy_lower(Lemma, LowW, 0),
   is_list(Cats),
   length(Cats,L),
   L < 3,
   findall(C, (on(C,Cats),  
        (C=sur;C=rel;C=lng)),
       Cc),
   Cc=[],
   lemmatize_dic_v(Lemma, Word, S),
   filter_false_names(Word),
   !.   
check_sur(Lemma,Cats):-
   spy_lower(Lemma, LowW, 0),
   up_wn(Lemma, Feat, Cat),
   (nogen_member(rel,Cat);nogen_member(col,Cat)),
   lemmatize_dic_v(Lemma, Word, S),
   filter_false_names(Word),
   !.   

couple_cats_codes(Cats,Codes):-
    c_transl_wn_cats(Cats, CatC),
    appiattisci(CatC, Catcc),
    sort(Catcc, All),
    couplecatscodes(Cats, All, Codes),
    !.

couplecatscodes(Cats, All, ['s:h:m']):-
   (on(tit,Cats);on(nhm,Cats);on(nmm,Cats);on(sur,Cats)),
    on(nh, All),
    !.

couplecatscodes(Cats, All, ['s:h:f']):-
   (on(tit,Cats);on(nhm,Cats);on(nmf,Cats);on(sur,Cats)),
    on(nh, All),
    !.

couplecatscodes(Cats, All, ['s:h:mf']):-
   (on(rel,Cats);on(col,Cats);on(sac,Cats)),
    on(nh, All),
    !.

couplecatscodes(Cats, All, ['s:geo:n:s']):-
   (on(lcg,Cats);on(lng,Cats);on(loc,Cats)),
    on(nh, All),
    !.

couplecatscodes(Cats, All, ['s:geo:n:s']):-
    on(np, All),
    !.

couplecatscodes(Cats, All, ['n:t:d']):-
    on(nt, All),
    !.

couplecatscodes(Cats, All, ['s:z:m']):-
    on(n, All),
    !.

domain_lex(press).
domain_lex(check).
domain_lex(select).
domain_lex(enter).
domain_lex(set).
domain_lex(start).
domain_lex(stop).

high_rank(to).
high_rank(in).
high_rank(is).
high_rank(it).
high_rank(the).
high_rank(a).
high_rank(an).
high_rank(and).
high_rank(of).
high_rank('The').
high_rank('A').
high_rank('An').
high_rank('Of').
high_rank('In').
high_rank('It').
high_rank('And').
high_rank('To').
high_rank('Is').


check_congc(Cat):-
    on(Cat, [cosu, ccong, cong, congf]),!.
check_congs(Cat):-
    on(Cat, [cosu, ccong]),!.


filter_false_names(W):-
   W\=dy,
   findall(V, v(W,V), Vs),
   Vs=[],
   findall(V, r(W), Vs1),
   Vs1=[],
   findall(V, fct(W), Vs2),
   Vs2=[],!.

filter_false_names(W):-
   spy_lower(W, LW, 1),
   findall(V, v(LW,V), Vs),
   Vs=[],
   findall(V, r(LW), Vs1),
   Vs1=[],
   findall(V, fct(LW), Vs2),
   Vs2=[],!.


new_assign_cat_lex(Loc, Categ, Codes):-
   leaf_fpr(Loc, Codes, Cat, N),
   parse_aff('', Cat, Feats, NFeat),
   Cat=root(root(Loc), Type, Ncat, Feat,_),
   getcat(Loc, NFeat, Categ, Fea, Pred),
    !.
new_assign_cat(Pol, Loc, Feas, Codes):-
   leaf_fpr(Loc, Codes, Cat, N),
   parse_aff('', Cat, Feats, NFeat),
   Cat=root(root(Loc), Type, Ncat, Feat,_),
   getcat(Loc, NFeat, Categ, Fea, Pred),
   stringof(MWord,Loc),
   decompose_secunderscore(MWord, Word),
   (MWord=[A,B,C|_],
    test_abbrs(Fea, [A,B,C]),
    Lemma=Loc, Num=sing
    ;
     Word\=[],
     stringof(Word,MLoc),
     define_number(Fea,MLoc,Lemma,Num)
    ; 
     Word=[],
     Lemma=Loc, Num=sing),
   (Feas\=[], append([feat=Feas], [cat=noun], NewF)
     ;
     Feas=[], NewF=Feat),
   append([pred=Loc], NewF, NFea),
   append([num=Num], NFea, NFeats),
   LCa=[[Categ]-Loc-NFeats],
   assertz(sw(Loc-[Categ]-LCa)),
   !.

search_hyphenated(Lex1, Ct, Lem, S, Feas):-
    stringof(HWord,Lex1),
    decompose_secunderscore(HWord, Wor),
    stringof(Wor, Lex),
    word_cats(1, File, Lex, Lex, Cats, Lems, Type),
    explore_lems(Lems, Cts, Testa, Lemm, Feas),
    sort(Cts, Ct),
    sort(Lemm, Lem),
    !.

assert_new_nouns(Lex1,X,Num,Lemma,Cat):-
    new_npro(Lex1,X,Gen),!.
assert_new_nouns(Lex1,X,Num,Lemma,Cat):-
    new_npro(Lemma,X,Gen),!.
assert_new_nouns(Lex1,X,Num,Lemma,Cat):-
    new_npro(Lem,Lex1,Gen),!.
assert_new_nouns(Lex1,X,Num,Lemma,Cat):-
    new_n(Lex1,X,Gen),!.
assert_new_nouns(Lex1,X,Num,Lemma,Cat):-
    new_n(Lemma,X,Gen),!.
assert_new_nouns(Lex1,X,Num,Lemma,Cat):-
    new_n(Lem,Lex1,Gen),!.

assert_new_nouns(Lex1,X,Num,Lemma,Cat):-
    (Cat=np;Cat=npro;Cat=nh),
    (nonvar(Num),
     Num=plur,
      asserta(
            new_npro(Lex1,X,Gen)),
     assert_new_pred_mw(Lex1,Lemma,np)
     ;
     Num=sing,
     mcon(X,s,Lexx),
     asserta(
            new_npro(Lex1,Lexx,Gen)),
     assert_new_pred_mw(Lex1,Lemma,np))
    ;
    (nonvar(Num),Num=plur,
     (nonvar(X),
       asserta(
            new_n(X,Lex1,Gen))
      ;
      var(X),
       asserta(
            new_n(Lex1,Lex1,Gen))
      ),
     assert_new_pred_mw(Lex1,Lemma,n)
    ; 
     nonvar(Lemma),Lemma\=Lex1,
       asserta(
            new_n(X,Lex1,Gen)),
     assert_new_pred_mw(Lex1,Lemma,n)
    ; 
     (var(Lemma);Lemma=Lex1),
      Num=sing,
     mcon(X,s,Lexx),
     asserta(
            new_n(Lex1,Lexx,Gen)),
     assert_new_pred_mw(Lex1,Lemma,n)).
 
assert_hyphenated(Lex1,Ct,Lem, Feas,n):-
   check_allnouns(Ct,Cat),
   (atomic(Lem), Lm=Lem;list(Lem),on(Lm,Lem)),
   (spy_lower(Lm, LowW, 1);Low=Lm),
   lemmatize_dic(LowW, Lemma, Rest),
    getnumlex(LowW,Rest,Num),
   assert_new_nouns(Lex1,Lex1,Num,Lemma,Cat),!.

assert_hyphenated(Word,Ct,Lem, Feas,v):-
   check_allverbs(Ct, Verbs),
   (atomic(Lem), Lm=Lem;list(Lem),on(Lm,Lem)),
   length(Ct,L),
   getvroots(Word,Lm,Root),
   assert_veerbs(L,Word,Root,Ct,Feas,Out),
   (nonvar(Out),Out=[Num, Te, Mo, Pers],
    asserta(
            new_v(Word, Root,Mo, Te, Pers, Num))
    ;true),!.

mults2(A,B,C,44):-
   mcon(A,'_',Bb),
   mcon(Bb,B,C),
   r(C).

mults2(A,B,C,4):-
   mcon(A,'_',Bb),
   mcon(Bb,B,C),
   j(C).

mults2(A,B,C,44):-
   check_underscore(A,New),
   mcon(New,'_',Bb),
   mcon(Bb,B,C),
   prepos(C).

mults2(A,B,C,44):-
   phrverb([A,B],C).

mults2(A,B,C,4):-
   prag([A,B],C).

mults2(A,B,C,44):-
   avvl1([A,B],C).

mults2(A,B,C,44):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C),
   sub_w(C),!.

mults2(A,B,C,44):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C),
   sub_w_sn(C,_),!.

mults2(A,B,C,4):-
   check_underscore(A,New),
   mcon(New,'_',Bb),
   mcon(Bb,B,C),
   check_form(C,S),
   !.
mults2(A,B,C,4):-
   check_underscore(A,New),
   mcon(New,'_',Bb),
   mcon(Bb,B,C),
   lc3(C,S),
   !.
mults2(A,B,C,4):-
   check_underscore(A,New),
   mcon(New,'_',Bb),
   mcon(Bb,B,Root),
   (tpl(Root, Codes)
    ;
    stringof(List,Root),
    on('_',List),
    recover_descs(Root,Words),
    Words=[Aw,Bw],
    mcon(Aw,'-',A1),
    mcon(A1,Bw,B1),
    tpl(B1, Codes)),
   !.
mults2(A,B,C,4):-
   check_underscore(A,New),
   mcon(New,'_',Bb),
   mcon(Bb,B,C),
   spy_lower(C,Low,Pol),
   new_mults_wn(Pol, Low,C, Feats),
   !.

mults2(A,B,C,4):-
   check_underscore(A,New),
   mcon(New,'_',Bb),
   mcon(Bb,B,C),
   spy_lower(C,Low,1),
   conv_is_ax(A,LowL),
   citiespreds(LowL,Cats),
   strict_locrel(B),
   !.
  
strict_locrel(inhabitant).
strict_locrel(inhabitants).
strict_locrel(citizen).
strict_locrel(citizens).
strict_locrel('Inhabitant').
strict_locrel('Inhabitants').
strict_locrel('Citizen').
strict_locrel('Citizens').

check_mult_func_int_exc(A, B):-
      findall(T,
      (integer(A), T=A;
       integer(B), T=B;
        fct(A), T=A;
        fct(B), T=B;
        excep(A,T);
        excep(B,T)), Ts),
      Ts=[],!.

mults3(A,B,C,D,44):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D),
   r(D),
   !.

mults3(A,B,C,D,4):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D),
   j(D),
   !.

mults3(A,B,C,D,44):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D),
   prepos(D),
   !.

mults3(A,B,C,D,44):-
   avvl2([A,B,C],D),
   !.

mults3(A,B,C,D,44):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C),
   mcon(C1,'_',C2),
   mcon(C2,C,D),
   sub_w(D),!.

mults3(A,B,C,D,44):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C),
   mcon(C1,'_',C2),
   mcon(C2,C,D),
   sub_w_sn(D,_),!.

mults3(A,B,C,D,44):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D),
   check_form(D,S),
   !.

mults3(A,B,C,D,4):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D),
   lc3(D,S),
   !.

mults3(A,B,C,D,4):-
   check_underscore(A,New),
   mcon(New,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D),
   spy_lower(D,Low,Pol),
   new_mults_wn(Pol, Low,D, Feats),
   !.

mults4(A,B,C,D,E,44):-
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E),
   check_form(E,S),
   !.

mults4(A,B,C,D,E,4):-
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E),
   j(E),
   !.

mults4(A,B,C,D,E,44):-
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E),
   prepos(E),
   !.

mults4(A,B,C,D,E,44):-
   atomic(D),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E),
   r(E),
   !.

mults4(A,B,C,D,E,44):-
   avvl3([A,B,C,D],E),
   !.

mults4(A,B,C,D,E,4):-
   atomic(D),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E),
   spy_lower(E,Low,Pol),
   new_mults_wn(Pol, Low,E, Feats),
   !.

mults5(A,B,C,D,E,F,44):-
   atomic(E),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F),
   check_form(F,S),
   !.

mults5(A,B,C,D,E,F,4):-
   atomic(E),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F),
   j(F),
   !.

mults5(A,B,C,D,E,F,44):-
   atomic(E),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F),
   r(F),
   !.

mults5(A,B,C,D,E,F,4):-
   atomic(E),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F),
   spy_lower(F,Low,Pol),
   new_mults_wn(Pol,Low,F, Feats),
   !.

mults6(A,B,C,D,E,F,G,4):-
   atomic(F),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F1),
   mcon(F1,'_',F2),
   mcon(F2,F,G),
   check_form(G,S),
   !.

mults6(A,B,C,D,E,F,G,4):-
   atomic(F),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F1),
   mcon(F1,'_',F2),
   mcon(F2,F,G),
   j(G),
   !.

mults6(A,B,C,D,E,F,G,44):-
   atomic(F),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F1),
   mcon(F1,'_',F2),
   mcon(F2,F,G),
   r(G),
   !.

mults6(A,B,C,D,E,F,G,4):-
   atomic(F),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F1),
   mcon(F1,'_',F2),
   mcon(F2,F,G),
   spy_lower(G,Low,Pol),
   new_mults_wn(Pol,Low,G, Feats),
   !.

mults6(A,B,C,D,E,F,G,44):-
   avvl6([A,B,C,D,E,F],G),
   !.

mults7(A,B,C,D,E,F,G,H,4):-
   atomic(G),
   mcon(A,'_',B1),
   mcon(B1,B,C1),
   mcon(C1,'_',C2),
   mcon(C2,C,D1),
   mcon(D1,'_',D2),
   mcon(D2,D,E1),
   mcon(E1,'_',E2),
   mcon(E2,E,F1),
   mcon(F1,'_',F2),
   mcon(F2,F,G1),
   mcon(G1,'_',G2),
   mcon(G2,G,H),
   spy_lower(H,Low,Pol),
   new_mults_wn(Pol,Low,H, Feats),
   !.

new_mults_wn(Pol,Low,Lemma, Feats):-
    atomic(Lemma),
    nwn(Lemma,Cats),!.
new_mults_wn(Pol,Low,Lemma, Feats):-
    atomic(Lemma),
    n_wn(Lemma,Cats),!.
new_mults_wn(Pol,Low,Lemma, Feats):-
    atomic(Lemma),
    wsd(Lemma,Cats,N),!.
new_mults_wn(Pol,Low,Lemma, Feats):-
    atomic(Lemma),
    mub(Lemma),!.
new_mults_wn(Pol,Low,Lemma, Feats):-
    atomic(Lemma),
    sk(Lemma,Cats),
    stringof(Lis,Cats), Lis=[1|_],!.

new_mults_wn(Pol,Low,Lemma, Feats):-
    atomic(Lemma),
    citiespreds(Lemma,Cats),
    !.
new_mults_wn(1,Low,Lemma, Feats):-
    atomic(Lemma),
    nwn(Low,Cats),!.
new_mults_wn(1,Low,Lemma, Feats):-
    atomic(Lemma),
    wsd(Low,Cats,N),!.
new_mults_wn(1,Low,Lemma, Feats):-
    atomic(Lemma),
    sk(Low,Cats),
    stringof(Lis,Cats), Lis=[1|_],!.
/*
new_mults_wn(Lemma, Feats):-
    recover_descs(Lemma,Lexs),
    is_list(Lexs),
    length(Lexs,L),L=<3,
    lemmatize_dic(Lemma,NewL,S),
    nonvar(S),
    S=s,
    recover_descs(NewL,Lexss),
    is_list(Lexss),
    length(Lexss,L1),L1=L,
    Lexs\=Lexss,
    new_mults_wn(NewL, Feats),
    !.
*/
mults([],[], []):-!.
mults([Lex1|RestoFrase],[Lex1|NuovaFrase],Mults):-
   grw(Lex1),
   mults(RestoFrase,NuovaFrase,Mults),
   !.
mults([Lex1,Lex2|RestoFrase],[Lex1,Lex2|NuovaFrase], Mults):-
   grw(Lex2),
   mults(RestoFrase,NuovaFrase,Mults),
   !.
mults([Lex1,Lex2|RestoFrase],[C|NuovaFrase], [t(C, [Lex1,Lex2], T)|Mults]):-
   mults2(Lex1,Lex2,C,T),
   C\=[],
   mults(RestoFrase,NuovaFrase,Mults),
   !.

mults([Lex1,Lex2,Lex3|RestoFrase],[Lex1,Lex2,Lex3|NuovaFrase], Mults):-
   grw(Lex3),
   mults(RestoFrase,NuovaFrase,Mults),
   !.

mults([Lex1,Lex2,Lex3|RestoFrase],[D|NuovaFrase], [t(D, [Lex1,Lex2,Lex3], T)|Mults]):-
   mults3(Lex1,Lex2,Lex3,D,T),
   D\=[],
   mults(RestoFrase,NuovaFrase,Mults),
   !.

mults([Lex1,Lex2,Lex3,Lex4|RestoFrase],[Lex1,Lex2,Lex3,Lex4|NuovaFrase], Mults):-
   grw(Lex4),RestoFrase\=[],
   mults(RestoFrase,NuovaFrase,Mults),
   !.

mults([Lex1,Lex2,Lex3,Lex4|RestoFrase],[E|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4], T)|Mults]):-
   mults4(Lex1,Lex2,Lex3,Lex4,E,T),
   E\=[],
   mults(RestoFrase,NuovaFrase,Mults),
   !.
mults([Lex1|RestoFrase],[Lex1|NuovaFrase],Mults):-
   Lex1\=a,Lex1\=the,
   fct(Lex1),
   mults(RestoFrase,NuovaFrase,Mults),
   !.
mults([Lex1,Lex2,Lex3,Lex4,Lex5|RestoFrase],[Lex1,Lex2,Lex3,Lex4,Lex5|NuovaFrase], Mults):-
   grw(Lex5),RestoFrase\=[],
   mults(RestoFrase,NuovaFrase,Mults),
   !.

mults([Lex1,Lex2,Lex3,Lex4,Lex5|RestoFrase],[E|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4,Lex5], T)|Mults]):-
   mults5(Lex1,Lex2,Lex3,Lex4,Lex5,E,T),
   E\=[],
   mults(RestoFrase,NuovaFrase,Mults),
   !.
mults([Lex1,Lex2,Lex3,Lex4,Lex5,Lex6|RestoFrase],[E|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4,Lex5,Lex6], T)|Mults]):-
   mults6(Lex1,Lex2,Lex3,Lex4,Lex5,Lex6,E,T),
   E\=[],
   mults(RestoFrase,NuovaFrase,Mults),
   !.

mults([Lex1,Lex2,Lex3,Lex4,Lex5,Lex6,Lex7|RestoFrase],[E|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4,Lex5,Lex6,Lex7], T)|Mults]):-
   mults7(Lex1,Lex2,Lex3,Lex4,Lex5,Lex6,Lex7,E,T),
   E\=[],
   mults(RestoFrase,NuovaFrase,Mults),
   !.
mults([Lex1|RestoFrase],[Lex1|NuovaFrase],Mults):-
   mults(RestoFrase,NuovaFrase,Mults),
   !.

aggl(year_old).

phrverb([A,B],C):-
   mcon(A,'_',Bb),
   mcon(Bb,B,C),
   v(C,Sub),!.

prnoun([hundred,thousand],hundred_thousand).
prnoun([hundred,million],hundred_million).
prnoun([hundred,thousands],hundred_thousands).
prnoun([hundred,millions],hundred_millions).
prnoun([A,B],C):-
   mcon(A,'_',Bb),
   mcon(Bb,B,C),
   lc3(C, Cat),!.

prnoun([A,B],C):-
   mcon(A,'_',Bb),
   mcon(Bb,B,C),
   hm(C),!.

prnoun([A,B],C):-
   toupper(A,Ua),
   mcon(Ua,'_',Bb),
   toupper(B,Ub),
   mcon(Bb,Ub,C),
   hm(C),!.

prag([A,B],C):-
   mcon(A,'_',Bb),
   mcon(Bb,B,C),
   aggl(C),!.

legalnpush(Cat, RecNet) :-
   tpnaccess(RecNet, Pts),
   on(Cat, Pts).

tpnaccess(sn, [abbr, a, ag, agn, art, date, deit, dim, doll, euro, expl, grad, i, in, inta, intal, intn, intnl, n, noun, nf, nh, ng, np, nt, num, npro, pers, poss, pound, pron, pronm, prone, prona, pronl, pronm, relin, relob, qc, qp, q]).
/*, vgin, vgt, vppin, vppt*/
tpnaccess(sq, [ccom, in, ind, q, qc, qd, qo, qp]).
tpnaccess(savv, [adv, avv, av, avvl, in]).
tpnaccess(sa, [a, ag, agn, ccom, grad, in, ind]).
tpnaccess(sp, [in, p, php]).
tpnaccess(spd, [in, pd]).
tpnaccess(spda, [in, pda]).
tpnaccess(sv2, [ausai, ausei, p, pt, viin, vit]).
tpnaccess(sv3, [vppin, vppt, vprin, vprt, avv]).
%tpnaccess(sv5, [auag, aueg, vgin, vgs, vgt, vsfa]).
tpnaccess(fint, [puntint]).
tpnaccess(fp, [par,punt]).

%search_fpp(Out, Out):-!.
search_fpp(In, Out):-
   search_fp(In, Out),!.
search_fpp(In, In):-!.

search_fp([], []):-!.

search_fp([fp-Resto|All], [f3-Resto]):-
   Resto\=[],
   Resto=[f-AllR|Rest],
   All=[cp-[]],
   !.

search_fp([fp-[','-punt-fp],fp-[','-punt-fp]|Rest], [fp-[','-punt-fp]|Alls]):-
   search_fp(Rest, Alls),
   !.
search_fp([fp-['-'-par-fp],fp-[','-punt-fp]|Rest], [fp-['-'-par-fp]|Alls]):-
   search_fp(Rest, Alls),
   !.

/*
search_fp([fp-Resto|All], Ts):-
   Resto\=[],
   All=[fp-AllR|Rest],
   append([fp-Resto],AllR, Alls),
   search_fp(Rest, T1),
   append(Alls,T1,Ts),
   !.
*/
search_fp([fp-Resto|All], [Resto|T1]):-
   Resto\=[],
   Resto\=[','-punt-fp],
   All=[AllR],
   search_fp(AllR, T1),
   !.

search_fp([fp-Resto|All], [f3-Alls|T1]):-
   Resto\=[],
   Resto=[C-AllR|Rest],
   search_fp(Rest, T),
   search_fp(All, T1),
   append([C-AllR],T,Alls),
   !.

search_fp([fc-[fc-Struct|Resto]], [fc-Struct|T]):-
   Resto\=[],
   findall( Rel ,
           on(ibar-[Rel| _], Resto) ,
           Rels ),
   Rels=[],
   search_fp(Resto, T),!.

search_fp([fs-[fs-Struct|Resto]], [fs-Struct|T]):-
   Resto\=[],
   findall( Rel ,
           on(ibar-[Rel| _], Resto) ,
           Rels ),
   Rels=[],
   search_fp(Resto, T),!.

search_fp([Arc-[Leaf-Struct|Resto]], [Arc-[Leaf-Struct|T]]):-
   Resto\=[],
   search_fp(Resto, T),!.

search_fp([cp-Resto], []):-!.

search_fp([Leaf-Struct|Resto], [Leaf-Struct|T]):-
  search_fp(Resto, T),!.

search_fp(cp-Resto, []):-!.

search_fp([[dirsp-Strct]|Resto], [dirsp-T]):-
   Strct=[f-[subj-Subj]],
   append([subj-Subj],Resto, Alls),
   appiattisci(Alls, Alll),
   search_fp([f-Alll], T),
   !.

search_fp([[fs-Strct]|Resto], [fs-[fs-FS|T]]):-
   Strct=[fs-FS, f-[subj-Subj]],
   append([subj-Subj],Resto, Alls),
   appiattisci(Alls, Alll),
   search_fp([f-Alls], T),
   !.

search_fp([[fint-Strct]|Resto], [fint-[fint-FS|T]]):-
   Strct=[fint-FS, f-[subj-Subj]],
   append([subj-Subj],Resto, Alls),
   appiattisci(Alls, Alll),
   search_fp([f-Alls], T),
   !.

search_fp([[Leaf-Strct]|Resto], [Leaf-StrctT]):-
   Resto=[f2-_|_],
   reverse(Strct,[Fun-Cos|_]),
   (Fun=subj;Fun=obj),
   remove(Fun-Cos, Strct, NStrct),
   search_fp(Resto, T),
   append(Cos, T, F2),
   append(NStrct, [Fun-F2], StrctT),
   !.

search_fp([[Leaf-Strct]|Resto], [Leaf-Strct|T]):-
   search_fp(Resto, T),!.

search_fp([[vcomp-Strct|Res]|Resto], [vcomp-All|Alls]):-
   search_fp(Res, T),
   search_fp(Resto, Alls),
   append(Strct,T, All),
   !.

search_fp([[Leaf-Strct|Res]|Resto], [Leaf-Strct|Alls]):-
   search_fp(Res, T),
   search_fp(Resto, T1),
   append(T,T1, Alls),
   !.

reorg(Parse, Parse1):-
    reverse(Parse, [Out|Frase]),
    (Out=_-dots-_, T=1,!
    ;
     Out=_-tit-_,T=1,!
    ;
     Out=_-punto-_,T=1,!
    ;
     Out=_-puntint-_,T=2,!
    ;
     Out\=_-puntint-_,T=1,!
    ),
    (T=1, reorg1(Parse, Parse1)
     ;
    T=2, reorg2(Parse, Parse1)
     ),!.

reorg1(Frase, Frase):-!.
reorg2(Frase, Frase1):-
   reverse(Frase, [P|RFrase]),
   reverse(RFrase, NFrase),
   append([P], NFrase, Frase1),!.


assert_general_location(By_Loc):-
    remove('(',By_Loc, Loc),
    try_under(_, Dashed, Secwo, Mwo, Loc),
    mcon(Mwo, News, Nw), 
    assert(general_loc(Nw)),
    !.


splicomps(P, Toke, Lww, Fw, Sw) :-
    convert(P, Toke, Lww, Fw, Sw),!.

splicomps(1, Toke, Lww, Fw, Sw) :-
     (Toke= Up-Tok-Tt, UpN=Up, To=Tok-Tt
      ;
      Toke= UpTok-To, UpN=UpTok
      ;
      UpN=Toke, To=Toke
      ),
      tolower(UpN, NWo),
      pname(Lww, NWo),
      Lww=Fw-Sw,!.

splicomps(1, Toke, Lww, Fw, Sw) :-
     P=0, UpN=Toke,
     splitch(UpN, Words),
     (
     Words=[Fw, W, Sw]
     ;
     Words=[Fw,Sw]
     ),!.

v_word_cat(Word, Num, Te, Mo, Pers, Root):-
   vword_cats(0, File, UpToken, Word, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lemmas, Feas),
%   on(V-Word-Lemma-V-Feats, Lems),
   (list(Ct), appiattisci(Ct,Cts)
    ;atomic(Ct), Cts=[Ct]),
   check_allverbs(Cts),
   length(Cts,L),
   getvroots(Word,Lemmas,Root),
   assert_veerbs(L,Word,Root,Cts,Feas,Out),
   (Out=[];Out\=[],Out=[Num, Te, Mo, Pers]),
    !.


v_word_cat(Word, Num, Te, Mo, Pers, Lemma):-
   v(Word, Cat),
   lemmatize_dic_v(Word, Lemma, Rest),
   build_mult_lemm(Word,Lemma, Rest,NewLex,NWord),
   decide_mood_tense(NWord,Rest,Mo,Te),
   build_mult_lemm(Word,Lemma, Rest,NewLex,NWord),
   AllCats=[v-Word-NewLex-v-[pred=NewLex, subcat=Cat, mood=Mo, tense=Te]].

v_word_cat(Word, Num, Te, Mo, Pers, Lemma):-
   (Modo=part,Tempo=pres;Modo=ger),
   vv(Word,Vinf,Modo,Tempo,Pers,Num),
   !.
vword_cats(Pol, File, UpToken, Word, NCats, SAllCats, Type) :-
   findall(Cat-Lem, word_cat(File, Word, Cat, Lem), AllCats),
   AllCats \= [],
   decompose_cl(AllCats, AllCs, Lemmas, Ws),
   sort(AllCats, SAllCats),
   sort(Ws, Words),
   sort(Lemmas, Lems),
   sort(AllCs, Cats),
   promote_cat(Cats, NCats),
   !,
   (Pol=1, 
    asserisci_catq(File, Cats, SAllCats, Words, UpToken)
   ;
   asserisci_cat(File, Cats, SAllCats, Words, Word)).

vword_cats(1, File, W, Word, [Cat], [L], _) :-
   (W=A-B, W1=A;W\=A-B,W1=W),
   upparse(Feats, W1, ''),
   countlems(File, W1, Feats, Cat, Lem, L),
   !,
   asserisci_cat(File, [Cat], [Cat-Lem], [L], Word),!.


getvroots(Word,Lemmas,Root):-
   (list(Lemmas), sort(Lemmas, Nroots); atomic(Lemmas), Nroots=[Lemmas]),
   length(Nroots, L),
   (1<L,
    remove(Word, Nroots, Ruts),
    Ruts\=[],
    on(Root,Ruts),
    v(Root, Cat)
    ;
    Nroots=[Root|_],
    v(Root, Cat)
    ;
    on(Root,Nroots),
    v(Root, Cat)
    ),
    !.


check_allverbs(v):-!.
check_allverbs(V):-
  atomic(V),
  check_all_verbs(V),!.
check_allverbs(V):-
  list(V),
  on(Vv, V),
  check_all_verbs(Vv),!.

check_allverbs([], []):-!.
check_allverbs(V, [Vv|Verbs]):-
  list(V),
  remove(Vv, V, V1),
  check_all_verbs(Vv),
  check_allverbs(V1, Verbs),
  !.
check_allverbs(V, Verbs):-
  remove(Vv, V, V1),
  check_allverbs(V1, Verbs),
  !.

getvfeats(X,Feas,Te,Mo,Lem):-
    on(tense=Te, Feas),
    on(mood=Mo, Feas),
    !.
assert_veerbs(L,X,Lem,Cts,[],Out):-!.
assert_veerbs(1,X,Lem,[Ct|Cts],[Feas|Fs],[Num,Te,Mo,Pers]):-
    lemmatize_dic_v(X, Lemma, Rest),
    (Rest=s, Pers=3,Num=sing;Rest\=s),
%    recovertratti(Feas, [Pers,G,Num]),
    getvfeats(X,Feas,Te,Mo,Lem),
    !.
assert_veerbs(L,X,Lem,[Ct|Cts],[Feas|Fs],Out):-
    L\=1,
    lemmatize_dic_v(X, Lemma, Rest),
    (Rest=s, Pers=3,Num=sing;Rest\=s),
%    recovertratti(Feas, [Pers,G,Num]),
    getvfeats(X,Feas,Te,Mo,Lem),
    asserta(
            new_v(X, Lem, Mo, Te, Pers, Num)),
    L1 is L - 1,
    assert_veerbs(L1,X,Lem,Cts,Fs,Out),!.
assert_veerbs(L,X,Lem,[Ct|Cts],[Feas|Fs],Out):-
    1<L,
    L1 is L - 1,
    assert_veerbs(L1,X,Lem,Cts,Fs,Out),!.



extract_root(['_'|NRoot], NRoot, Rest, S):-
    \+ nogen_member('_',NRoot),\+ nogen_member('-',NRoot),
    NRoot=[S|Rest],
    !.

extract_root(['-'|NRoot], NRoot, Rest, S):-
    \+ nogen_member('_',NRoot),\+ nogen_member('-',NRoot),
    NRoot=[S|Rest],
    !.
extract_root(['_'|Prefix], NRoot, Rest, S):-
    (nogen_member('_',NRoot);nogen_member('-',NRoot)),
    extract_root(Prefix, NRoot, Rest, S),
    !.

extract_root(['-'|Prefix], NRoot, Rest, S):-
    (nogen_member('_',NRoot);nogen_member('-',NRoot)),
    extract_root(Prefix, NRoot, Rest, S),
    !.

extract_root([N|Prefix], NRoot, Rest, S):-
    extract_root(Prefix, NRoot, Rest, S),
    !.

cercalemmav(Vinf,Lemma,D):-
   get_irregulars(Vinf, Lemm,Codes,Code),
   (nonvar(Lemm), Lemma=Lemm,
     (var(D), D=d;nonvar(D))
     ;
     var(Lemm),
     v(Vinf, C), Lemma=Vinf
    ).
cercalemmav(Lemma,Lemma,D):-
    cercalemma(2,Lemma).

cercalemma(2,Lemma):-
   v(Lemma, C),!.
cercalemma(1,Lemma):-
   v(Lemma, C),
   !.
cercalemma(1,Lemma):-
   up_wn(Lemma, Feat, Cats),
   Cats\=[],!.

v_word_cats(Word, Num, Te, Mo, Pers, Root):-
   atomic(Word),
   spy_lower(Word, LowW, 1),
   word_cats(0, File, UpToken, LowW, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lemmas, Feas),
%   on(V-Word-Lemma-V-Feats, Lems),
   (list(Ct), appiattisci(Ct,Cts)
    ;atomic(Ct), Cts=[Ct]),
   check_allverbs(Cts),
   length(Cts,L),
   getvroots(Word,Lemmas,Root),
   assert_veerbs(L,Word,Root,Cts,Feas,Out),
   (Out=[];Out\=[],Out=[Num, Te, Mo, Pers]),
    !.

v_word_cats(Word, Num, Te, Mo, Pers, Root):-
   v_word_cat(Word, Num, Te, Mo, Pers, Root),!.


writing_scheme(Pol, Word, Cats, N, LCa):- 
      assertz(sw(Word-Cats-LCa)),
      !.

asserisci_cat(File, Cats, CatLems, Lems, Word) :-
    length(Cats, N),
    (var(Lems), LCa=Cats
     ;
     nonvar(CatLems),
     (composelemcats(N, CatLems, LCa),
      writing_scheme(0, Word, Cats, N, LCa)
      ;
      writing_scheme(0, Word, Cats, 1, CatLems))
     ),
   !.
trans_ucat(n,n).
trans_ucat(na,n).
trans_ucat(nc,n).
trans_ucat(nh,nh).
trans_ucat(nhf,nh).
trans_ucat(nhm,nh).
trans_ucat(nhs,nh).
trans_ucat(nl,np).
trans_ucat(nls,np).
trans_ucat(np,np).
trans_ucat(nps,np).
trans_ucat(ns,n).
trans_ucat(nt,nt).
trans_ucat(nts,nt).
trans_ucat(num,num).
trans_ucat(vb,v).
trans_ucat(vbd,v).
trans_ucat(vbg,v).
trans_ucat(vbi,v).
trans_ucat(vbn,v).
trans_ucat(vbp,v).
trans_ucat(vbt,v).
trans_ucat(vd,v).
trans_ucat(vdi,v).
trans_ucat(vdt,v).
trans_ucat(vg,v).
trans_ucat(vgi,v).
trans_ucat(vgt,v).
trans_ucat(vpp,v).
trans_ucat(vppi,v).
trans_ucat(vppt,v).
trans_ucat(vs,v).
trans_ucat(vsi,v).
trans_ucat(vst,v).

cexcep([ausa, ausai, n, vc, vci], W, [ausa, ausai, vc, vci]).
cexcep([ause, n, vc], W, [ause, vc]).
cexcep([ause, v, vc], W, [ause, vc]).
cexcep([ause, v, vc, vppt], W, [ause, vc]).
cexcep([ausa, n, vc], W, [ausa, vc]).
cexcep([n, num], W, [num]).
cexcep([ag, intj, n, vbt], W, [intj, n, vbt]).
cexcep([n, vgin, vgt, vppt, vprt], W, [n, vgin, vgt, vprt]).
cexcep([n,vgin, vprt], W, [vgin, vprt]).
cexcep([n, vgc, vgin, vgt, vprt], W, [vgc, vgin, vgt, vprt]).
cexcep([v], W, Codes):-
    get_irregulars(W, Lemm, AllCode,Co),
    participio(W,Verbo,Gen,Num),
    (\+ on(p-pp-Lemm,Co), \+ on(pt,Co),
      (v(W,Cats),
       (\+ on(t,Cats),
         Codes=[vppin]
         ;
         Codes=[vppt]))
     ;
      (v(W,Cats),
       (\+ on(t,Cats),
        Codes=[vin,vppin]
        ;
       Codes=[vt,vppt]))
       ).
cexcep([v], W, [vppin, vppt]):-
    spy_lower(W,Low,Pol), Pol=1,
    get_irregulars(Low, Lemm, AllCode,Co),
    participio(Low,Verbo,Gen,Num),
    (\+ on(p-pp-Lemm,Co), \+ on(pt,Co),
      (v(Low,Cats),
       (\+ on(t,Cats),
         Codes=[vppin]
         ;
         Codes=[vppt]))
     ;
      (v(Low,Cats),
       (\+ on(t,Cats),
        Codes=[vin,vppin]
        ;
       Codes=[vt,vppt]))
       ).
cexcep([v], W, [vin, vt]).
cexcep([vq], W, [vppin, vppt]).
cexcep([vppt, vt], W, [vt,vppt]).
cexcep([v, vin, vppin, vppt, vt], W, [vin, vppin, vppt, vt]).
cexcep([v, vin, vppin, vppt, vq, vt], W, [vin, vppin, vppt, vt]).
cexcep([v, vin, vppt, vq, vt], W, [vin, vppin, vppt, vt]).

checkab('AST').
checkab('Adm').
checkab('Ala').
checkab('Alta').
checkab('Apr').
checkab('Ariz').
checkab('Ark').
checkab('Assn').
checkab('Atty').
checkab('Aug').
checkab('Ave').
checkab('Bancorp').
checkab('Bankcorp').
checkab('Bhd').
checkab('Bros').
checkab('CO').
checkab('CORP').
checkab('Calif').
checkab('Capt').
checkab('Cia').
checkab('Cie').
checkab('Cmdr').
checkab('Co').
checkab('Col').
checkab('Colo').
checkab('Conn').
checkab('Corp').
checkab('Cos').
checkab('Dec').
checkab('Del').
checkab('Dept').
checkab('Dist').
checkab('De').
checkab('Di').
checkab('Dr').
checkab('Drs').
checkab('Elec').
checkab('Etc').
checkab('Feb').
checkab('Fla').
checkab('Fri').
checkab('Ga').
checkab('Gen').
checkab('Gov').
checkab('INC').
checkab('Ia').
checkab('Ida').
checkab('Ill').
checkab('Inc').
checkab('Ind').
checkab('Jan').
checkab('Jr').
checkab('Jul').
checkab('Jun').
checkab('Kans').
checkab('Ken').
checkab('Kft').
checkab('La').
checkab('Lt').
checkab('Ltd').
checkab('MR').
checkab('Mar').
checkab('Mass').
checkab('Md').
checkab('Me').
checkab('Mfg').
checkab('Mich').
checkab('Minn').
checkab('Miss').
checkab('Mo').
checkab('Mon').
checkab('Mont').
checkab('Mr').
checkab('Mrs').
checkab('Ms').
checkab('Nebr').
checkab('Nev').
checkab('Nfld').
checkab('No').
checkab('Nov').
checkab('Oct').
checkab('Ont').
checkab('Ore').
checkab('PLC').
checkab('Pa').
checkab('ParCorp').
checkab('Pct').
checkab('Penn').
checkab('Pf').
checkab('Ph').
checkab('Prof').
checkab('Pte').
checkab('Pty').
checkab('Que').
checkab('R-Wis').
checkab('Rd').
checkab('REP').
checkab('Rep').
checkab('Reps').
checkab('Rev').
checkab('SA').
checkab('SCEcorp').
checkab('SR').
checkab('Sask').
checkab('Sen').
checkab('Sep').
checkab('Sept').
checkab('Sgt').
checkab('Sr').
checkab('St').
checkab('Sun').
checkab('Supt').
checkab('Tenn').
checkab('Tex').
checkab('Thu').
checkab('Tue').
checkab('Univ').
checkab('Ur').
checkab('Va').
checkab('Vt').
checkab('Wash').
checkab('Wed').
checkab('Wis').
checkab('Wyo').
checkab('Yr').
checkab('WWW').
checkab(al).
checkab(bn).
checkab(bin).
checkab(cent).
checkab(co).
checkab(conv).
checkab(dept).
checkab(ed).
checkab(de).
checkab(et).
checkab(etc).
checkab(hr).
checkab(ie).
checkab(inc).
checkab(km).
checkab(lbs).
checkab(m).
checkab(mg).
checkab(di).
checkab(min).
%checkab(no).
checkab(pct).
checkab(pds).
checkab(pts).
checkab(rd).
checkab(s).
checkab(sq).
checkab(th).
checkab(v).
checkab(vs).
checkab(yr).
checkab('Art').
checkab('ART').
checkab(art).
checkab(artt).
checkab(chapt).
checkab(cfr).
checkab('Cfr').
checkab(cm).
%checkab(cod).
checkab(dd).
checkab(disp).
checkab(div).
checkab(doc).
checkab(dr).
checkab(exp).
%checkab(i).
checkab(ii).
checkab(iii).
checkab(iv).
checkab(industr).
checkab(eng).
checkab(ibid).
checkab(imp).
checkab(ix).
checkab(kg).
checkab(lett).
checkab('L').
checkab('£').
checkab('$').
checkab('€').
checkab('Lit').
checkab(lit).
checkab(mm).
checkab(mod).
checkab(mr).
checkab(ms).
checkab(sen).
checkab(mrs).
checkab('Mr').
checkab('Ms').
checkab('Mrs').
checkab('Sen').
checkab('N').
checkab(n).
checkab(nd).
checkab(p).
checkab(pag).
checkab(pp).
checkab(ps).
checkab(prec).
checkab(prof).
checkab(res).
checkab(rtf).
checkab(sec).
checkab(serv).
checkab(sect).
checkab('Sen').
checkab(sig).
checkab(s).
checkab(st).
checkab(tel).
checkab(ton).
checkab('Tel').
checkab(v).
checkab(vi).
checkab(vii).
checkab(viii).
checkab(vol).
checkab(voll).
checkab(x).

checkabm('€').
checkabm('£').
checkabm('$').

checkamb('M').

chabbr('A').
chabbr('B').
chabbr(a).
chabbr(c).
chabbr(cc).
chabbr('C').
chabbr('CC').
chabbr(d).
chabbr(dd).
chabbr(dm).
chabbr('D').
chabbr('DD').
chabbr(e).
chabbr('E').
chabbr(f).
chabbr(g).
chabbr('F').
chabbr('G').
chabbr(i).
chabbr(ii).
chabbr('II').
chabbr('H').
chabbr('I').
chabbr('J').
chabbr('K').
chabbr('L').
chabbr('M').
chabbr('N').
chabbr(l).
chabbr(m).
chabbr(n).
chabbr('O').
chabbr(o).
chabbr(op).
chabbr(p).
chabbr('P').
chabbr('Q').
chabbr('R').
chabbr('S').
chabbr(s).
chabbr(t).
chabbr(u).
chabbr('T').
chabbr('U').
chabbr('V').
chabbr('W').
chabbr('X').
chabbr('Y').
chabbr('Z').
chabbr(x).

charl('Amm_').
charl('Assicur_').
charl(config_).
charl('Impr_').
charl('Amm').
charl('Assicur').
charl(config).
charl('Impr').
charl(mclink).
charl(serv).
charl(sig).
charl(unive).
charl(www).
charl(http).
charl(ftp).

ck2('A').
ck2('B').
ck2(a).
ck2(d).
ck2('D').
ck2(e).
ck2(f).
ck2(o).
ck2(l).
ck2(m).
ck2(p).
ck2('P').
ck2(t).
ck2(u).
ck2('U').

chk2cm(a).
chk2cm(d).
chk2cm(m).
chk2cm('M').
chk2cm(com).
chk2cm(edu).
chk2cm(uk).
chk2cm(org).
chk2cm(de).
chk2cm(fr).
chk2cm(it).
chk2cm(l).
chk2cm(s).
chk2cm(u).
chk2cm('U').

extract_new_form(W, C, [nt]):-
   C=n, nt(W),
   !.
extract_new_form(W, C, [np]):-
   C=n, extract_new_np(W, np),
    !.
extract_new_form(W, C, [np]):-
   spy_lower(W,L,P),P=1,
   C=n, npro(W,_,_),
    !.
extract_new_form(W,C, [n]):-
   C=n, n(W,_,_),
    !.
extract_new_form(W, C, [n]):-
   C=n, n(_,W,_),
    !.
extract_new_form(W, C, [n]):-
   C=n,
    !.
extract_new_form(W, C, [Ca]):-
   new_form(W,Cat),
   atomic(Cat),
   filter_new(Cat,Ca),
    !.
/*
extract_new_form(W, C, [Ca]):-
   C\=v,
   create_form(W,C),
   new_form(W,Cat),
   atomic(Cat),
   filter_new(Cat,Ca),
   !.
*/
extract_new_np(W, np):-
			new_np(L,W,N).
extract_new_np(W, np):-
			new_npro(L,W,N).
extract_new_np(W, np):-
			new_np(W,L,N).
extract_new_np(W, np):-
			new_npro(W,L,N).

extract_determiners(W, [num]):-
   cardin(W,_,_),
   !.
extract_determiners(W, [in]):-
   inten(W),
   !.
extract_determiners(W, [grad]):-
   intn(W),
   !.
extract_determiners(W, [ag]):-
   ord(W,_,_,_),
   !.
extract_determiners(W, [q]):-
   quant(W,_,_,_,_),
   !.
extract_determiners(W, [num]):-
   name(W,Ws),
   on(C,Ws), car_num(C),
   !.
extract_determiners(W, [num]):-
   !.
extract_determiners(W, [num]):-
   integer(W),
   !.
extract_determiners(W, [art]):-
   art_det_engl(W),
   !.
extract_determiners(W, [art]):-
   art_ndet_engl(W),
   !.

assoc_cats([], []):-!.
assoc_cats([W|Frase], Cats):-
   select_punct(W, P),
   assoc_cats(Frase, Cats),
   !.
assoc_cats([W|Frase], [W-L-Cat|Cats]):-
     sw(W-Cat-Lemma),
     (Lemma=[L] ;
      on(L-R, Lemma)),
     assoc_cats(Frase, Cats),
     !.

assoc_cats([UW|Frase], [UW-L-Cat|Cats]):-
     tolower(UW, W),
     sw(W-Cat-Lemma),
     (Lemma=[L] ;
      on(L-R, Lemma)),
     assoc_cats(Frase, Cats),
     !.
assoc_cats([W|Frase], Cats):-
     assoc_cats(Frase, Cats),
     !.

nnt(age).
nnt(ages).
nnt(beginning).
nnt(beginnings).
nnt(end).
nnt(continuation).
nnt(interruption).
nnt(period).
nnt(periods).
nnt(stage).
nnt(stages).
nnt(birthday).
nnt(birthdays).
nnt(term).
nnt(semester).
nnt(semesters).
nnt(season).
nnt(seasons).
nnt(bimester).
nnt(bimesters).
nnt(time).

coplb(be).
coplb(there_be).
coplb(being).
coplb(been).
coplb(was).
coplb(were).
coplb(is).
coplb(are).
coplb(am).
coplb('weren-t_').
coplb('aren-t_').
coplb('ain-t_').
coplb('isn-t_').
coplb('wasn-t_').

coplh(having).
coplh(have).
coplh(had).
coplh(has).

matchcomplex(Word, Cat, Out):-
   tolower(Word,LW),
   (contr(Word, Cat, Comp, W1);contr(LW, Cat, Comp, W1)),
   Out=[W1, Cat1, not, neg],
   (supporto(W1), Cat1=vsup
    ;
    coplb(W1), Cat1=ause
    ;
    coplh(W1), Cat1=ausa
    ),
   !.

matchcomplex(Word, Cat, Out):-
   tolower(Word,LW),
   (soggcontr(Word, Cat, W1, W2);soggcontr(LW, Cat, W1, W2)),
   Out=[W1, pron, W2, Cat2],
   (supporto(W2), Cat2=vsup
    ;
    coplb(W2), Cat2=ause
    ;
    coplh(W2), Cat2=ausa
    ),
   !.

init_chunks:-
   abolish(dism/3),
   abolish(disnets/7),
   abolish(amb_str/4),
   assert(amb_str(nil,nil,nil,nil)),
   assert(disnets(nil,nil,nil,nil,nil,nil,0)),
   assert(dism(nil,nil,nil)),
   !.

np_chunking(Tags, OutFile, Parse):-
    init_chunks,
   npchunks(Tags, OutFile, Parse),!.

npchunks([], OutFile, Parse):-!.
npchunks(F-Tagged, Tokens, Parse):-
    chkqun(Tagged, Tokens),
    detectambsanv(Tokens,Tokenss),
    checkuniq(Tokenss, FParse, Parse),
/*   writedis(OutFile, Tokens, FParse, Parse), 
   nl(OutFile),
   write(OutFile, 'SENTENCE NUMBER:   '),
   write(OutFile, F),
   nl(OutFile),
   writeseq(OutFile, Parse),
   nl(OutFile),
   nl(OutFile),
*/   !.

disambanv([],[]):-!.
disambanv([[ag,v]-2-A,[n]-1-P|Tokens],[[v]-1-A,[n]-1-P|Tokenss]):-
    verbgerund(A),
    disambanv(Tokens,Tokenss),
   !.
disambanv([[v]-1-P,[ag,v]-2-A|Tokens],[[v]-1-P,[v]-1-A|Tokenss]):-
    verbgerund(A),
    pp_word_cat(P, Temp, part, Vinf),
    disambanv(Tokens,Tokenss),
   !.
disambanv([[p]-1-P,[n,v]-2-A|Tokens],[[p]-1-P,[v]-1-A|Tokenss]):-
    verbgerund(A),P\=to,
    disambanv(Tokens,Tokenss),
   !.
disambanv([[n]-1-P,[ag,avv,v]-3-A|Tokens],[[n]-1-P,[v]-1-A|Tokenss]):-
    \+ verbgerund(A),
    disambanv(Tokens,Tokenss),
   !.
disambanv([[p]-1-to,[n,v]-2-A|Tokens],[[p]-1-P,[v]-1-A|Tokenss]):-
    \+ verbgerund(A),
    disambanv(Tokens,Tokenss),
   !.
disambanv([[p]-1-P,[n,v]-2-A|Tokens],[[p]-1-P,[n]-1-A|Tokenss]):-
    \+ verbgerund(A),P\=to,
    disambanv(Tokens,Tokenss),
   !.
disambanv([[art]-1-Art,[n,v]-2-A,[n]-1-B|Tokens],[[art]-1-Art,[ag]-1-A,[n]-1-B|Tokenss]):-
    disambanv(Tokens,Tokenss),
   !.
disambanv([[art]-1-Art,[n,v]-2-A|Tokens],[[art]-1-Art,[ag,n]-1-A|Tokenss]):-
    disambanv(Tokens,Tokenss),
   !.
disambanv([[Cat]-1-A|Tokens],[[Cat]-1-A|Tokenss]):-
    disambanv(Tokens,Tokenss),
   !.
disambanv([[n,v]-2-A,[vin,vt]-2-B|Tokens],[[n]-1-A,[vin,vt]-2-B|Tokenss]):-
    disambanv(Tokens,Tokenss),
   !.
disambanv([[n,v]-2-A|Tokens],[[n]-1-A|Tokenss]):-
    disaccess_wsj(A,Bes), (Bes=nn;Bes=nns),
    disambanv(Tokens,Tokenss),
   !.
disambanv([[n,v]-2-A|Tokens],[[n]-1-A|Tokenss]):-
     select_bestgg(A,Best1),
     transl_tags(A,Best1,Tags1),
     on(Tag1,Tags1), Tag1=n,
    disambanv(Tokens,Tokenss),
   !.
disambanv([[n,v]-2-A|Tokens],[[n]-1-A|Tokenss]):-
     \+ verbgerund(A),
    \+ wsentence_start(A),
    Tokens=[Cats-N-B|_],
    Cats=[ag, pk, rel, pron],
    disambanv(Tokens,Tokenss),
   !.
disambanv([[n,v]-2-A|Tokens],[[v]-1-A|Tokenss]):-
     \+ verbgerund(A),
    \+ wsentence_start(A),
    Tokens=[Cats-N-B|_],
    (on(n,Cats);on(ag,Cats);on(art,Cats);
     on(nh,Cats);on(np,Cats);on(num,Cats);on(avv,Cats)),
    disambanv(Tokens,Tokenss),
   !.
disambanv([[ause,vc]-2-A,[vin,vt]-2-B|Tokens],[[ause]-1-A,[vin,vt]-2-B|Tokenss]):-
    disambanv(Tokens,Tokenss),
   !.
disambanv([[vc,ausa]-2-A,[vin,vt]-2-B|Tokens],[[ausa]-1-A,[vin,vt]-2-B|Tokenss]):-
    disambanv(Tokens,Tokenss),
   !.
disambanv([A-L|Tokens],[A-L|Tokenss]):-
    disambanv(Tokens,Tokenss),
   !.


detectambsanv(Tokens,Tokenss):-
    detectambs(Tokens,Ambs),
    (Ambs=[], Tokenss=Tokens
     ;
     Ambs\=[],
%     length(Tokens,L),
%     (L=<10,
     disambanv(Tokens,Tokenss)
%      ;
%      10<L, Tokenss=Tokens)
     ),
   !.
detectambs([],[]):-!.
detectambs([[Cat]-1-A|Tokens],Tokenss):-
    detectambs(Tokens,Tokenss),
   !.
detectambs([[n,v]-2-A|Tokens],[[n,v]-2-A|Tokenss]):-
    detectambs(Tokens,Tokenss),
   !.
detectambs([[ause,vc]-2-A,[vin,vt]-2-B|Tokens],[[ause]-1-A,[vin,vt]-2-B|Tokenss]):-
    detectambs(Tokens,Tokenss),
   !.
detectambs([[vc,ausa]-2-A,[vin,vt]-2-B|Tokens],[[ausa]-1-A,[vin,vt]-2-B|Tokenss]):-
    detectambs(Tokens,Tokenss),
   !.
detectambs([[ag,avv,v]-3-A|Tokens],[[ag,avv,v]-3-A|Tokenss]):-
    detectambs(Tokens,Tokenss),
   !.
detectambs([A-L-_|Tokens],Tokenss):-
    detectambs(Tokens,Tokenss),
   !.

retag(NoFr, Frase, Tags, FunctsOut,DClauses, [], L-N, [FunctsOut,DClauses]):-
     !.
retag(NoFr, Frase, Tags, FunctsOut,DClauses, Tensed, N, [FunctsOut,DClauses]):-
     atomic(N),!.
retag(NoFr, Frase, Tags, Functs,DC, Tensed, L-N, [FunctsOut,DClauses]):-
     (L\=N;N=0),
     remove(Word-Cat, Tensed, NTense),
     nth(Tags, Num, Word-_),
     substitute(Tags, Num, Word-Cat, NTags),
     initheaps,
     shallow_parsing(NoFr, Frase, NTags, Costs, FunctsOut, DClauses, DTags, T, NC),
     !.
retag(NoFr, Frase, Tags, FunctsOut,DClauses, Tensed, N-N, [FunctsOut,DClauses]):-
     !.
retag(NoFr, Frase, Tags, FunctsOut,DClauses, Tensed, L-N, [FunctsOut,DClauses]):-
%     integer(N),
     !.
retag(NoFr, Frase, Tags, FunctsOut,DClauses, Tensed, N, [FunctsOut,DClauses]):-
%     integer(N),
     !.

substitute([W-T|Tags], 1, Word-Cat, [Word-[Cat]|Tags]):-!.
substitute([W-T|Tags], Num, Word-Cat, [W-T|NTags]):-
     N is Num - 1,
     substitute(Tags, N, Word-Cat, NTags),
     !.

super_predn(Lemma, Stem, CatSem, Sub):-
   spy_lower(Lemma, LowL, 1),
   pred_n(LowL, Stem, CatSem, Sub).

super_predn(Lemma, Stem, CatSem, Sub):-
   pred_n(Lemma, Stem, CatSem, Sub).

super_predn(Lemma, Stem, CatSem, []):-
   new_pred_n(Lemma, Stem, CatSem, []).

super_prednp(Lemma, Stem, CatSem, []):-
   pred_np(Lemma, Stem, CatSem, Sub).

super_prednp(Lemma, Stem, CatSem, []):-
   new_pred_np(Lemma, Stem, CatSem, []).

get_feats_pron(Lemma,[any]):-
   filter_pron(Lemma, Feats, it),
    !.
get_feats_pron(Lemma,[umano]):-
   filter_pron(Lemma, Feats, Lem),
   (on(gen=mas, Feats);
    on(gen=fem, Feats)),
    !.
get_feats_pron(Lemma,[umano]):-
   filter_pron(Lemma, Feats, we),
    !.
get_feats_pron(Lemma,[umano]):-
   filter_pron(Lemma, Feats, i),
    !.
get_feats_pron(Lemma,[umano]):-
   filter_pron(Lemma, Feats, one),
    !.
get_feats_pron(Lemma,[umano,oggetto,informa,istituzione,evento,stato,attivita]):-
   filter_pron(Lemma, Feats, they),
    !.


check_title([A,B,C,D|_],Tit):-
   stringof([A,B,C,D],Lex),
   checkt(Lex),!.
check_title([A,B,C,D|_],Tit):-
   stringof([A,B,C],Lex),
   checkt(Lex),!.
check_title([A,B,C,D|_],Tit):-
   stringof([A,B],Lex),
   checkt(Lex),!.

getsuperl([adj:c],jjr):-!.
getsuperl([adj:s],jjs):-!.

list_exs(a_lot, 'dt-nn').
list_exs(no_one, 'dt-nn').
list_exs(each_month, 'dt-nn').
list_exs(no_comment, 'dt-nn').
list_exs(many_more, 'jj-jjr').
list_exs(much_more, 'jj-rbr').
list_exs(no_more, 'dt-rbr').
list_exs(another, dt).
list_exs(enough, jj).
list_exs(other, jj).
list_exs(all, jj).
list_exs(few, jj).
list_exs(little, jj).
list_exs(each_week, 'dt-nn').
list_exs(each_day, 'dt-nn').
list_exs(a_little, 'dt-jj').
list_exs(a_lot, 'dt-nn').
list_exs(nine_times, 'cd-nn').
list_exs(equivalent_to, 'jj-to').
list_exs(less_than, 'jjr-in').
list_exs(more_than, 'jjr-in').
list_exs(several, jj).
list_exs(many, jj).
list_exs(much, jj).
list_exs(such_as, 'jj-in').
list_exs(whole, jj).
list_exs(on_the_other_hand, 'in-dt-jj-nn').
list_exs(as_of, 'in-in').
list_exs(out_of, 'in-in').
list_exs(because_of, 'in-in').
list_exs(for_instance, 'in-nn').
list_exs(for_example, 'in-nn').
list_exs(in_comparison_with, 'in-nn-in').
list_exs(in_return, 'in-nn').
list_exs(at_the_start, 'in-dt-nn').
list_exs(as_soon_as, 'rb-rb-in').
list_exs(in_addition, 'in-nn').
list_exs(as_expected, 'in-vbn').
list_exs(at_least, 'in-jjs').
list_exs(in_theory, 'in-nn').
list_exs(of_course, 'in-nn').
list_exs(at_times, 'in-nns').
list_exs(along_with, 'in-in').
list_exs(in_place, 'in-nn').
list_exs(in_arrears, 'in-nns').
list_exs(as_though, 'in-in').
list_exs(on_average, 'in-nn').
list_exs(for_the_first_time, 'in-dt-jj-nn').
list_exs(for_the_most_time, 'in-dt-jjs-nn').
list_exs(at_the_same_time, 'in-dt-jj-nn').
list_exs(once_again, 'rb-rb').
list_exs(as_well, 'in-rb').
list_exs(up_to, 'in-to').
list_exs(at_large, 'in-jj').
list_exs(by_any_means, 'in-dt-nns').
list_exs(accross_the_board, 'in-dt-nn').
list_exs(in_general, 'in-jj').
list_exs(in_order_to, 'in-nn-to').

getcrb('aren-t_','vbp-rb').
getcrb('weren-t_','vbd-rb').
getcrb('wasn-t_','vbd-rb').
getcrb('hadn-t_','vbd-rb').
getcrb('isn-t_','vbz-rb').
getcrb('hasn-t_','vbz-rb').
getcrb('doesn-t_','vbz-rb').
getcrb('didn-t_','vbz-rb').
getcrb('don-t_','vbp-rb').
getcrb('haven-t_','vbp-rb').

ttws(W,C,I):-
 list_exs(W, C).
ttws(W,cd,I):-
   stringof([A|MWord],W),
   on('/',MWord),
   pname(Aa,A),
   integer(Aa).
ttws(W,'md-rb',I):-
   contr(W, vsupn, _, _).
ttws(W,C,I):-
   contr(W, ausan, _, _),
   getcrb(W,C).
ttws(W,C,I):-
   contr(W, ausen, _, _),
   getcrb(W,C).
    
ttws(W,in,c).
ttws(W,cc,ccom).
ttws(W,cc,cong).
ttws(W,cd,num).
ttws(W,cd,date).
ttws(W,'$',doll).
ttws(W,'£',pound).
ttws(W,'€',euro).
ttws(W,dt,art).
ttws(W,dt,qc).
ttws(W,dt,qo).
ttws(W,dt,qp).
ttws(W,dt,ind).
ttws(W,dt,q).
ttws(W,ex,expl).
ttws(W,fw,fw).
ttws(W,in,p).
ttws(W,in,php).
ttws(W,in,pda).
ttws(W,in,pk).
ttws(W,wrb,cosu):-
   stringof([Ww,H|Sw],W), Wv=w,H=h.
ttws(W,in,cosu).
ttws(W,in,congf).
ttws(W,in,ccong).
ttws(W,in,conjl).
ttws(W,C,I):-
   W \= last,
   rj(W,_,T), getsuperl(T,C).
ttws(W,dt,C):- deits(W).
ttws(W,'prp$',C):- 
    filter_pos_ag(W, F, H).
ttws(W,jj,ag).
ttws(W,jj,dim).
ttws(W,'vbg-to',vsup):-
   W=going_to;W=set_to.
ttws(W,md,vsup).

ttws(W,'nn-pos',n):-
   stringof(Sw,W), reverse(Sw,['_',s,'-'|_]).
ttws(W,nns,n):- 
    spy_lower(W, LowW, Pol),
    \+ k(LowW),
    Pol=1,
      stringof(Sw,LowW), reverse(Sw,[S,I|_]), 
      (S=s,
%       (I=y; is_vow(I), I=e; \+ is_vow(I)),
        \+ snp(W)
       ;
       S\=s,
        (listirr(LowW)
         ;
         is_in_lexicon(LowW, Code, From),
         excod(Code))).
ttws(W,nnp,n):- 
    spy_lower(W, LowW, Pol),
    Pol=1.
ttws(W,nns,n):- 
     \+ k(W),
      stringof(Sw,W), reverse(Sw,[S,I|_]), 
      (S=s,
%       (I=y; is_vow(I), I=e; \+ is_vow(I)),
        \+ snp(W)
       ;
       S\=s,
        (listirr(W)
         ;
         is_in_lexicon(W, Code, From),
         excod(Code))).
ttws(W,nn,n).
ttws(W,nn,nf).
ttws(W,nns,nt):- 
      stringof(Sw,W), reverse(Sw,[S,I|_]), 
      (S=s,
%       (is_vow(I), I=e; \+ is_vow(I)),
        \+ snp(W)
       ;
       S\=s,
        (listirr(W)
         ;
         is_in_lexicon(W, Code, From),
         excod(Code))).
ttws(W,nn,nt).
ttws(W,nnp,abbr).
ttws(W,'nnp-pos',np):-
   stringof(Sw,W), reverse(Sw,['_',s,'-'|_]).
ttws(W,nnp,np).
ttws(W,nnp,npro).
ttws(W,nnp,nh).
ttws(W,'nnp-pos',ng):- 
    spy_lower(W, LowW, Pol),
    Pol=1.
ttws(W,'nn-pos',ng).
ttws(W,prp,pers).
ttws(W,prp,pron).
ttws(W,prp,prona).
ttws(W,prp,pronl).
ttws(W,prp,prone).
ttws(W,prp,pronm).
ttws(W,prp,pron).
ttws(W,'prp$',poss).
ttws(W,rb,in).
ttws(W,rb,av).
ttws(W,rb,neg).
ttws(W,rb,avv).
ttws(W,rb,avvl).
ttws(W,rb,adv).
ttws(W,rb,grad).
ttws(W,rp,pt).
ttws(W,to,pt).
ttws(W,uh,intj).
ttws(W,vb,vbin).
ttws(W,vb,vbt).
ttws(W,vbz,aux):-(W=is;W=has).
ttws(W,vbd,aux):-(W=was;W=were).
ttws(W,vb,aux).
ttws(W,vb,ausai).
ttws(W,vb,ausei).
ttws(W,vbg,aueg).
ttws(W,vbd,v):-(W=was;W=were).
ttws(W,C,V):-
    (V=v;V=vt;V=vin),
     stringof(Sw,W), 
     on('_', Sw),
   lemmatize_dic_v(W, Lemma, Rest),
   decompose_underscore(Sw,K),
   stringof(K,K1),
   decide_mood_tense(K1,Rest,Mo,Te),
   extract_phraseverb(Mo,Sw,Te,C).
ttws(W,vbz,v):- stringof(Sw,W), reverse(Sw,[S|_]), S=s.
ttws(W,vbg,v):- stringof(Sw,W), reverse(Sw,[g,n,i|_]).
ttws(W,C,v):-
    (C=vbn;C=vbg;C=vbd),
   lemmatize_dic_v(W, Lemma, Rest),
   decide_mood_tense(W,Rest,Mo,Te),
   (Mo=part, C=vbn
    ;
    Mo=ger, C=vbg
    ;
    Mo=ind, 
     (C=vbd
     ;
     stringof(K,C),
     K=[v,b,d|_])
        ).
ttws(W,vb,v).
ttws(W,vbd,vc):-(W=was;W=were).
ttws(W,vb,vc).
ttws(W,vb,vprog).
ttws(W,vbz,vt):- stringof(Sw,W), reverse(Sw,[S|_]), S=s.
ttws(W,vbg,vt):- stringof(Sw,W), reverse(Sw,[g,n,i|_]).
ttws(W,vbd_vbn,vt).
ttws(W,vbn_jj,vppt).
ttws(W,vbn_jj,ag).
ttws(W,vbd,vt).
ttws(W,vbg,vprin).
ttws(W,vbg,vprt).
ttws(W,vbg,vgt).
ttws(W,vbg,vgin).
ttws(W,vbn,ausep).
ttws(W,vbn,vppt).
ttws(W,vbn,vppin).
ttws(W,vb,ausa):-W=have.
ttws(W,vbd,ausa):-W=had.
ttws(W,vbz,ausa):-W=has.
ttws(W,vbp,ausa).
ttws(W,vb,ause):-W=be.
ttws(W,vbd,ause):-(W=was;W=were).
ttws(W,vbz,ause):-W=is.
ttws(W,vbp,ause).
ttws(W,vb,ausd):-W=do.
ttws(W,vbd,ausd):-W=did.
ttws(W,vbz,ausd):-W=does.
ttws(W,'vbd-rb',ausd):-W='didn-t_'.
ttws(W,vbz,vin):- stringof(Sw,W), reverse(Sw,[S|_]), S=s.
ttws(W,vbg,vin):- stringof(Sw,W), reverse(Sw,[g,n,i|_]).
ttws(W,vbd,vin).
ttws(W,md,vsup).
ttws(W,wrb,rel):- W=where;W=when.
ttws(W,wrb,relin):- W=where;W=when.
ttws(W,wrb,int):- W=where;W=when.
ttws(W,wdt,rel).
ttws(W,wdt,relin).
ttws(W,wp,int).
ttws(W,'wp$',relob).
ttws(W,wrb,w).
ttws(W,uh,intj).
ttws(W,fw,fw).
ttws(W,pun,fw).
ttws(W,pun,dirs).
ttws(W,pun,dots).
ttws(W,pun,par).
ttws(W,pun,punt).
ttws(W,pun,punto).
ttws(W,pun,puntint).
ttws(W,C,V):-
     stringof(Sw,C), 
     on('_', Sw),
    decompose_underscore_all(Sw,K),
    on(K1,K),
   ttws(W,K1,V).

extract_phraseverb(Mo,Word,Te,C1):-
   (Mo=part, C=vbn
    ;
    Mo=ger, C=vbg
    ;
    Mo=ind, (Te=pass, C=vbd; C=vb)
    ),
    decompose_secunderscore(Word, Suff),
    stringof(Suff,Suf),
    define_phraseverb(Suf,P),
    mcon(C,'-',Cc),
    mcon(Cc, P, C1).
define_phraseverb(Suf,P):-
    r(Suf), P=rb
     ;
    prepos(Suf), P=in
     ;
     j(Suf), P=jj
     ;
     P=nn.

deits(this).
deits(these).
deits(that).
deits(those).
deits(such).
evalpp(W,VP1, Words,VP2, Words1):-
   coplbh(W),
   W\=do, W\=does, W\=did,
   reverse(VP1, [W1-Cat-Cos|Rest]),
   (
     (Cat=vppt;Cat=vppin), VP2=VP1, 
      Words1=Words
      ;
      (W1=had;W1=been), VP2=VP1, 
      Words1=Words
      ;
     (Cat=v; Cat=vin; Cat=vt),
      (
        stringof(Gerund1,W1),
        reverse(Gerund1, [g,n,i|_]),
        append(Rest,[W1-vgin-Cos],VP2), 
       reverse(Words, [W1-Cat|Res]), append(Res,[W1-vgin], Words1)
       ;
        append(Rest,[W1-vppt-Cos],VP2), 
       reverse(Words, [W1-Cat|Res]), append(Res,[W1-vppt], Words1))
     ),
    !.
%evalpp(W,VP, Words,VP, Words):-

snp(amends).
snp(odds).
snp(smallpox).
snp(gallows).
snp(pains).
snp(thanks).
snp(news).
snp(shambles).
snp(tidings).
snp(headquarters).
snp('Amends').
snp('Odds').
snp('Smallpox').
snp('Gallows').
snp('Pains').
snp('Thanks').
snp('News').
snp('Shambles').
snp('Tidings').
snp('Headquarters').
snp(W):-
  spy_lower(W,Low,Pol),
  Pol=1,
  snp(Low),!.


%excod(npl:_):-!.
excod(npl):-!.

listirr(phenomena).
listirr(miasmata).
listirr(banditti).
listirr(libretti).
listirr(virtuosi).
listirr(dilettanti).
listirr(cherubim).
listirr(seraphim).
listirr(radii).
listirr(vitae).
listirr(vertebrae).
listirr(nebulae).
listirr(nuclei).
listirr(ova).
listirr(syllabi).
listirr(strata).
listirr(symposia).
listirr(novae).
listirr(larvae).
listirr(herniae).
listirr(retinae).
listirr(supernovae).
listirr(tibiae).
listirr(uvulae).
listirr(vulvae).
listirr(herbaria).
listirr(labia).
listirr(spectra).
listirr(magi).
listirr(esophagi).
listirr(oesophagi).
listirr(papyri).
listirr(stimuli).
listirr(termini).
listirr(thesauri).
listirr(lire).
listirr(passersby).

/*
deer
offspring
clasp
cod
fish
pence
shot
elk
grouse
roe
moose
hake
salmon
snipe
swine
trout
sheep
scissors
snp(series).
snp(species).
get_back-vbd/VB-RB-
looking_at-nn/VBG-IN-
brought_in-vbn/VBN-RB+
worked_out-vbn/VBD-RP-
lock_in-vbd/VBP-IN-
benefit_from-vbd/VB-IN-
starting_up-vbn/VBG-RP-
coming_back-vbn/VBG-RB-
*/

get_cat(auxiliary, Word, Feats, Category, Fea, Word-Pred) :-
   !,
   remove(root(Root), Feats, Feat),
%   on(mood=Mode, Feats),
   on(tense=Tense, Feats),
   remove(cat=Cat, Feat, Fea),
   conv_subcat(SubCat, Root, Mode, Tense, Category),
   !.

get_cat(aux, s_, Feats, Category, Fea, Word-Pred) :-
   !,
   remove(pred=Pre, Feats, Feat),
   remove(cat=Cat, Feat, Fea1),
   conv_subcat(SubCat, Word, Mode, Tense, Category),  
   (atomic(Category),Category=ausae3;
    list(Category),on(ausae3,Category)), 
   append([pred='be-have'], Fea1, Fea), Pred='be-have'.

get_cat(aux, Word, Feats, Category, Feas, Word-Pred) :-
   !,
   remove(pred=Pred, Feats, Feat),
   remove(cat=Cat, Feat, Fea),
   (on(mood=Mode, Feats),
    on(tense=Tense, Feats),
    Feas=Fea,!
    ;
    on(tense=Tense, Feats),
    Feas=Fea,!
    ;
    on(mood=Mode, Feats),!
    ;
    Mode=base-subj,
   assign_mt(Fea, Mode, Tense, Feas)
    ),
   conv_subcat(aux, Word, Mode, Tense, Category),
   !.

get_cat(verb, Word, Feats, Category, Feas, Word-Pred) :-
   on(pred=Pred, Feats),
   remove(pred=Pred, Feats, Feat),
   (on(subcat=SubCat, Feats),
   (SubCat\=aux
    ;
    SubCat=aux),SubCa=SubCat
     ;
     SubCa=nil),
   on(mood=Mode, Feats),
   (Word\=was, Feaa=Feat, 
    Mod=Mode
   ;
   Word=was,
   remove(mood=Mode, Feat, Fff),
   Mod=ind,
   append([mood=ind], Fff, Feaa)
   ),
   on(tense=Tense, Feats),
   remove(cat=Cat, Feaa, Fea),
   conv_subcat(SubCa, Word, Mod, Tense, Category),
   (Category=vsup,
    Word=cannot, 
    append([neg=non], Fea, Feas)
    ;   
   Feas=Fea),!.
   
get_cat(verb, Word, Feats, Category, Feas, Word-Pred) :-
   remove(pred=Root, Feats, Feat),
   Pred=Root,
   (on(subcat=SubCat, Feats),
   (SubCat\=aux
    ;
    SubCat=aux), SubCa=SubCat
     ;
     SubCa=nil),
   remove(cat=Cat, Feat, Fee),
   (remove(tense=Tens, Fee, Fea),
    (Tens=pres, (Tense=pres;Tense=base)
     ; Tens=past, Tense=past
     ; Tens=progr, Tense=progr),!
    ;
     Fea=Fee),
   conv_subcat(SubCa, Root, Mode, Tense, Category),
   assign_mt(Fea, Mode, Tense, Feas).

get_cat(pron, Word, Feats, Category, Feat, Word-Pred) :-
   remove(type=Category, Feats, Featt),
   conv_pron(pro, Word, Category, Feat, Pred).

get_cat(pronoun, Word, Feats, Category, Feat, Word-Pred) :-
   remove(type=Category, Feats, Featt),
   conv_pron(pro, Word, Category, Feat, Pred).

get_cat(contrac, Word, Feats, Category, Feat, Word-Pred) :-
   remove(pred=Root, Feats, Featt),
   soggcontr(Word, Category, Pre,_),
   conv_pron(pro, Pre, Cat, Fea, Pred),
   append(Featt, Fea, Feat).

get_cat(contr, Word, Feats, Category, Feat, Word-Pred) :-
   remove(pred=Root, Feats, Featt),
   soggcontr(Word, Category, Pre,_),
   conv_pron(pro, Pre, Cat, Fea, Pred),
   append(Featt, Fea, Feat).

get_cat(noun, Word, Feats, Category, Feat, Word-Pred) :-
%   !,
   on(cat=Cat, Feats),
   (on(root(Pred), Feats),
    remove(root(Pred), Feats, Feat)
     ;
    on(pred=Pred, Feats), Feat=Feats
     ),
    conv_cat(noun, Word, Category),!.
   
get_cat(agg, Word, Feats, Category, Feat, Word-Pred) :-
   on(cat=Cat, Feats),
%   on(root(OldPred), Feats),
   conv_catag(agg, Word, Category, Feat, Pred),!.

get_cat(Cat, Word, Feats, Cat, Feats, Word-Word) :-
   Feats\=[],
   (on(cat=np, Feats);
    on(cat=n, Feats);
    on(cat=nt, Feats);
    on(cat=nh, Feats)),!.

get_cat(Cat, Word, Feats, Category, Feat, Word-Word) :-
   on(cat=adv, Feats),
   (on(root(OldPred), Feats)
    ;
   on(pred=(not), Feats)),
   conv_catad(adverb, Word, Category, Feat).
  
get_cat(Cat, Word, Feats, Categ, Feats, Word) :-
   Feats\=[],
   (on(cat=avvl, Feats), Categ=avvl;
    on(cat=php, Feats), Categ=php;
    on(cat=conjl, Feats), Categ=conjl;
    on(cat=phl, Feats), Categ=phl),
   !.

get_cat(Cat, Word, Feats, Category, Feats, Word) :-
   !,
   conv_cat(Cat, Word, Category),!.

assign_mt(Feat, ind, Tense, Feas):-
   append([mood=ind], Feat, Faa),
   append([tense=Tense], Faa, Feas).

assign_mt(Feat, subj, Tense, Feas):-
   append([mood=subj], Feat, Faa),
   append([tense=Tense], Faa, Feas).

assign_mt(Feat, ind-subj, Tense, Feas):-
   append([mood=ind-subj], Feat, Faa),
   append([tense=Tense], Faa, Feas).

assign_mt(Feat, base-subj, Tense, Feas):-
   append([mood=base-subj], Feat, Faa),
   append([tense=Tense], Faa, Feas).

assign_mt(Feat, infinite, Tense, Feas):-
    append([mood=inf], Feat, Faa),
    append([tense=Tense], Faa, Feas).

assign_mt(Feat, base, base, Feas):-
    append([mood=base], Feat, Faa),
    append([tense=base], Faa, Feas).

assign_mt(Feat, Mood, base, Feas):-
    append([tense=base], Feat, Feas).


conv_subcat(_,    s_, ind,   pres,     [ausae3,vc]).
conv_subcat(_,    being, _,   progr,     [aueg,vcg])  :-!.
conv_subcat(_,    been, part, past,  [ausep,vc]).
conv_subcat(_,    be, infinite,   pres,     [ausei,vci]).
conv_subcat(_,    aren_t, ind,   pres,     [ausen,vc]).
conv_subcat(_,    isn_t, ind,   pres,     [ause3n,vc]).
conv_subcat(_,    wasn_t, ind,   past,     [ause3n,vc]).
conv_subcat(_,    weren_t, ind-subj,   past,     [ausen,vc]).
conv_subcat(_,    do, ind,   pres,     [ausd,vt]).
conv_subcat(_,    did, ind,   past,     [ausd,vt]).
conv_subcat(_,    don_t, ind,   pres,     [ausdn,vt]).
conv_subcat(_,    didn_t, ind,   pres,     [ausdn,vt]).
conv_subcat(_,    does, ind,   pres,     [ausd3,vt]).
conv_subcat(_,    doesn_t, ind,   pres,     [ausd3n,vt]).
conv_subcat(vc,    be, infinite,   pres,     vci).
conv_subcat(vc,    be, base-subj,   pres,     vc)  :-!.
conv_subcat(vc,    was,  ind,   past,     vc)  :-!.
conv_subcat(vc,    were,  ind-subj,   past,     vc):-!.
conv_subcat(_,    be, base-subj,   pres,     ausei).
conv_subcat(_,    was, ind,          _,     [ause,vc]).
conv_subcat(_,    were, ind-subj,          _,     [ause,vc]).
conv_subcat(_,    is, ind,          _,     [ause,vc]).
conv_subcat(_,    are, ind,          _,     [ause,vc]).
conv_subcat(_,    having,  _,   progr,     [auag,vcg])  :-!.
conv_subcat(_,    have,  infinite,   pres,     [ausai,vci]).
conv_subcat(_,    have, _,   _,     [ausa,vc]).
conv_subcat(_,    has, _,   _,     [ausa,vc]).
conv_subcat(_,    had, _,   _,     [ausa,vc]).
conv_subcat(_,    hasn_t,  ind,   pres,     [ausa3n,vc]).
conv_subcat(_,    haven_t,  ind,   pres,     [ausan,vc]).
conv_subcat(_,    hadn_t,  ind,   pres,     [ausan,vc]).
conv_subcat(vc,    have,  infinite,   pres,     vci).
conv_subcat(vc,    has,  ind,   pres,     vc)  :-!.
conv_subcat(vc,    have,  ind-subj,   pres,     vc)  :-!.
conv_subcat(vc,    had,  ind-subj,   past,     vc)  :-!.
conv_subcat(_,    Verb,  _,    progr,     vgs)   :-
   supporto(Verb),
   !.
conv_subcat(vc,    Root,  _,   base,     vbc):-!.
conv_subcat(vc,    Root,  ind,   pres,     vc)  :-!.
conv_subcat(vc,    Root,  ind,   past,     vc)  :-!.
conv_subcat(vc,    Root,  ind-subj,   pres,     vc)  :-!.
conv_subcat(vc,    Root,  ind-subj,   past,     vc)  :-!.
conv_subcat(vc,    Root,  part,   past,     vppc)  :-!.
conv_subcat(vc,    Root,  part,   past,     vprc)  :-!.
conv_subcat(vc,    Root,  _,   progr,     vgc)  :-!.

conv_subcat(_,    can,  ind,   pres,     vsup) :- !.
conv_subcat(_,    cannot,  ind,   pres,     vsupn) :- !.
conv_subcat(ti,    W,   base,            base,     [vbt,vbin]).
conv_subcat(ti,    _,   ind,     pres,     [vt,vin]):-!.
conv_subcat(ti,    _,   ind,     past,     [vt,vin]):-!.
conv_subcat(ti,    _,   ind-subj,     pres,     [vt,vin]):-!.
conv_subcat(ti,    _,   ind-subj,     past,     [vt,vin]):-!.
conv_subcat(ti,    _,   _,     progr,     [vgt,vgin])   :-!.
conv_subcat(ti,    _,   part,   past,  [vppt,vppin]) :-!.
conv_subcat(ti,    _,   part,   pres,  [vprt,vprin])  :-!.
conv_subcat(t,    W,   base,            base,     [vbt,vt]).
conv_subcat(t,    _,   ind,     pres,     vt):-!.
conv_subcat(t,    _,   ind,     past,     vt):-!.
conv_subcat(t,    _,   base-subj,     [base,pres],     [vbt,vt]):-!.
conv_subcat(t,    _,   ind-subj,     past,     vt):-!.
conv_subcat(t,    _,   _,     progr,     vgt)   :-!.
conv_subcat(t,    _,   part,   past,  vppt) :-!.
conv_subcat(t,    _,   part,   pres,  vprt)  :-!.
conv_subcat(i, 		W,    base,            base,     [vbin,vin]) :- !.
conv_subcat(i,  W,   ind,     pres,     vin):-!.
conv_subcat(i,  W,   ind,     past,     vin):-!.
conv_subcat(i,  W,   base-subj,     [base,pres],     [vbin,vin]):-!.
conv_subcat(i,  W,   ind-subj,     past,     vin):-!.
conv_subcat(i,  _,   _,     progr,     vgin)  :-!.
conv_subcat(i, _,    part,   past,  vppin) :-!.
conv_subcat(i, _,    part,   pres,  vprin) :-!.
conv_subcat(_,    Verb,  _,           _,     vsup) :-
   supporto(Verb).
conv_subcat(nil,  W,   M,     T,     C)  :-
   conv_subcat(t,  W,   M,     T,     C).
conv_subcat(nil,  W,   M,     T,     C)  :-
   conv_subcat(i,  W,   M,     T,     C).
conv_subcat(nil,  W,   M,     T,     C)  :-
   conv_subcat(vc,  W,   M,     T,     C).

conv_subcat(rifl,  W,   M,     T,     C)  :-
   conv_subcat(tr,  W,   M,     T,     C),
   !.
conv_subcat(rifl:rec,  W,   M,     T,     C)  :-
   conv_subcat(intr,  W,   M,     T,     C),
   !.
conv_subcat(intr:_,  W,   M,     T,     C)  :-
   conv_subcat(intr,  W,   M,     T,     C),
   !.

conv_catag(agg, W, poss, Feats, Pred) :-
  filter_pos_ag(W, Feats, Pred),!.

conv_catag(agg, W, rel, Feats, Pred) :-
  filter_rel(W, Feats, Pred),!.

conv_catag(agg, W, int, Feats, Pred) :-
  filter_int(W, Feats, Pred),!.

conv_catag(agg, W, dim, Feats, Pred) :-
  filter_dim_ag(W, Feats, Pred),!.

conv_catag(agg, W, deit, Feats, Pred) :-
  filter_deit(W, Feats, Pred),!.

conv_catag(agg, W, pron, Feats, Pred) :-
  filter_pron_q(W, Feats, Pred),!.

conv_catag(agg, W, q, Feats, Pred) :-
  filter_pro_q(W, Feats, Pred),!.

filter(does).
filter(on).
filter(there).

conv_catad(adv, W, int, Feats) :-
  filter_int(W, Feats, Pred),!.


conv_cat(agg, an, art) :-!. 

conv_cat(agg, W, ag) :- !.

conv_cat(noun, W, nf) :-
   on(W, [evidence, proof, fact, hypothesis, possibility, probability, condition, will, wish, desire, decision]).

conv_cat(noun, there, ext).

conv_cat(noun, W, C) :- 
      nt(W), C=nt,!.

conv_cat(noun, W, C) :- 
   (filter(W), !,
    fail;
    true,
    C=n), !.

conv_cat(noun, W, C) :- 
   (filter(W), !,
    fail;
    true,
    C=npro), !.

conv_cat(num, _, num) :- !.

conv_cat(art, _, art) :- !.

conv_cat(p, since, cosu).

conv_cat(p, to, [p, pt]).

conv_cat(p, of, pd).
conv_cat(p, by, pda).

conv_cat(p, W, p) :-!.

conv_cat(phl, W, p) :-!.

conv_cat(adv, W, in) :- 
   on(W, [about, around, indeed, just, enough, only, sure, too]),!.

conv_cat(adv, W, grad) :- 
   on(W, [almost, far, much, over, quite, so, too, very]),!.

conv_cat(adv, not, neg) :- !.
conv_cat(adv, non, neg) :- !.

conv_cat(avvl, W, avvl) :-!.

conv_cat(adv, rather, cong).

conv_cat(adv, W, avv) :-
   W\=the, W\=to,W\=rather,W\=by,W\=in,
   !.
conv_cat(adv, W, cosu) :-
   on(W, [but, although, though, since, because, rather]),
   !.

conv_cat(conj, whether, int):-!.

conv_cat(conj, W, cosu) :-
   on(W, [but, although, though, if, whether, since, because]),
   !.

% conv_cat(conj, than, pk) :- !.

conv_cat(conj, W, congf) :-
   on(W, [and, or]).

conv_cat(conj, W, cong) :- !.

conv_cat(inter, W, inta) :- 
    on(W, [alright, yeh, yes, yeah]), !.

conv_cat(inter, W, intj) :- !.

conv_cat(inter, W, intj) :- !.

conv_cat(intjl, W, intjl) :- !.

conv_cat(inta, W, inta) :- !.
conv_cat(intn, W, intn) :- !.
conv_cat(intal, W, intal) :- !.
conv_cat(intnl, W, intnl) :- !.

conv_cat(abbr, W, abbr) :- !.

conv_cat(punto, W, punto) :- !.
conv_cat(par, W, par) :- !.
conv_cat(puntint, W, puntint) :- !.

conv_cat(euro, W, euro) :- !.
conv_cat(pound, W, pound) :- !.
conv_cat(doll, W, doll) :- !.
conv_cat(dirs, W, dirs) :- !.
conv_cat(and, W, and) :- !.

conv_cat(punt, '=', Cat) :-
   (Cat=inizio; Cat=fine).

conv_cat(modal, W, vsup) :- 
    supporto(W),!.

conv_cat(modal, W, vsupn) :- 
    contr(W,C,_,_),!.

conv_cat(rel, W, rel) :- 
  conv_pron(pro, W, T, Feats, Pred).

conv_cat(dim, W, dim) :- 
  conv_pron(pro, W, T, Feats, Pred).

conv_cat(int, W, int) :- 
  conv_pron(pro, W, T, Feats, Pred).

conv_cat(deit, W, deit) :- 
  conv_pron(pro, W, T, Feats, Pred).

conv_cat(poss, W, poss) :- 
  conv_pron(pro, W, T, Feats, Pred).

conv_cat(q, W, q) :- 
  conv_pron(pro, W, T, Feats, Pred).

conv_cat(pers, W, pers) :- 
  conv_pron(pro, W, T, Feats, Pred).

conv_cat(pron, W, pron) :- 
  conv_pron(pro, W, T, Feats, Pred).

find_pron(W, T, Feats):-
  conv_pron(pro, W, T, Feats, Pred).


conv_pron(pro, W, pers, Feats, Pred) :-
  filter_pers(W, Feats, Pred),!.

conv_pron(pro, W, rel, Feats, Pred) :-
  filter_rel(W, Feats, Pred).

conv_pron(pro, W, int, Feats, Pred) :-
  filter_int(W, Feats, Pred),!.

conv_pron(pro, W, poss, Feats, Pred) :-
  filter_pos_ag(W, Feats, Pred),!.

conv_pron(pro, W, dim, Feats, Pred) :-
  filter_dim_ag(W, Feats, Pred).

conv_pron(pro, W, deit, Feats, Pred) :-
  filter_deit(W, Feats, Pred),!.

conv_pron(pro, W, Cat, Feats, Pred) :-
  filter_pron_q(W, Feats, Pred),
  on(type=T, Feats),
  (on(def=D, Feats)
   ;
   on(deg=D, Feats)),
  def_ca(T, D, Cat), !.

conv_pron(pro, W, pron, Feats, Pred) :-
  filter_pron(W, Feats, Pred),!.


soggcontr('he-d_', pronm, he, had).
soggcontr('he-ll_', pronm, he, will).
soggcontr('it-ll_', pronm, it, will).
soggcontr('he-s_', prone, he, is).
soggcontr('it-s_', prone, it, is).
soggcontr('i-d_', pronm, i, had).
soggcontr('i-ll_', pronm, i, will).
soggcontr('i-m_', prone, i, am).
soggcontr('i-ve_', prona, i, have).
soggcontr('I-d_', pronm, i, had).
soggcontr('I-ll_', pronm, i, will).
soggcontr('I-m_', prone, i, am).
soggcontr('I-ve_', prona, i, have).
soggcontr('let-s_', pronl, we, let).
soggcontr('she-d_', pronm, she, had).
soggcontr('she-ll_', pronm, she, will).
soggcontr('she-s_', prone, she, is).
soggcontr('that-s_', pronl, that, is).
soggcontr('that-ll_', pronl, that, will).
soggcontr('here-s_', pronl, here, is).
soggcontr('there-s_', pronl, there, is).
soggcontr('they-d_', pronm, they, had).
soggcontr('they-ll_', pronm, they, will).
soggcontr('they-re_', prone, they, are).
soggcontr('they-ve_', prona, they, have).
soggcontr('we-d_', pronm, we, had).
soggcontr('we-ll_', pronm, we, will).
soggcontr('we-re_', prone, we, are).
soggcontr('we-ve_', prona, we, have).
soggcontr('what-s_', prone, what, is).
soggcontr('where-s_', prone, where, is).
soggcontr('who-ll_', pronm, who, will).
soggcontr('who-s_', prone, who, is).
soggcontr('you-d_', pronm, you, had).
soggcontr('you-ll_', pronm, you, will).
soggcontr('you-re_', prone, you, are).
soggcontr('you-ve_', prona, you, have).
soggcontr('now-s_', prone, now, is).

contr('mustn-t_', vsupn, mustn, must).
contr('needn-t_', vsupn, needn, need).
contr('wouldn-t_', vsupn, wouldn, would).
contr('won-t_', vsupn, won, will).
contr('shouldn-t_', vsupn, shouldn, should).
contr('shan-t_', vsupn, shan, shall).
contr('couldn-t_', vsupn, couldn, could).
contr('can-t_', vsupn, can, can).
contr('hadn-t_', ausan, hadn, had).
contr('haven-t_', ausan, haven, have).
contr('hasn-t_', ausan, hasn, has).
contr('doesn-t_', ausdn, doesn, does).
contr('didn-t_', ausdn, didn, did).
contr('don-t_', ausdn, don, do).
contr('weren-t_', ausen, weren, were).
contr('aren-t_', ausen, aren, are).
contr('isn-t_', ausen, isn, is).
contr('wasn-t_', ausen, wasn, was).
contr('ain-t_', ausen, isn, is).


check_sem_wh(Sem,cmod):-
   filter_int(Sem, Fea, Le).
%check_sem_wh(Sem,adj):-!.

filter_int(whether, [cat=int, pred=whether, case=obl, sem=int], if).
filter_int(when, [cat=int, pred=when, case=obl, sem=temp], when).
filter_int(how_long, [cat=int, pred=how_long, case=obl, sem=temp], long).
filter_int(where, [cat=int, pred=where, case=obl, sem=loc], where).
filter_int(why, [cat=int, pred=why, case=obl, sem=rat], why).
filter_int(how, [cat=int, pred=how, case=obl, sem=mann], how).
filter_int(whover, [cat=int, pred=who, case=nom, sem=hum], who).
filter_int(whatever, [cat=int, pred=what, case=acc, sem=obj], what).
filter_int(who, [cat=int, pred=who, case=nom, sem=hum], who).
filter_int(whom, [cat=int, pred=who, case=acc, sem=hum], who).
filter_int(whose, [cat=int, pred=who, case=gen, sem=hum], who).
filter_int(how_many, [cat=int, pred=how_much, case=acc, sem=obj], much).
filter_int(how_much, [cat=int, pred=how_much, case=acc, sem=obj], much).
filter_int(which, [cat=int, pred=who, case=acc, sem=obj], which).
%filter_int(there, [cat=int, pred=there, case=obl, sem=loc], there).
filter_int(what, [cat=int, pred=what, case=acc, sem=obj], what).

filter_rel(whover, [cat=rel, pred=who, case=nom, sem=hum], who).
filter_rel(whatever, [cat=rel, pred=what, case=acc, sem=obj], what).
filter_rel(where, [cat=rel, pred=where, case=obl, sem=loc], where).
filter_rel(why, [cat=rel, pred=why, case=obl, sem=rat], why).
filter_rel(who, [cat=rel, pred=who, case=nom, sem=hum], who).
filter_rel(whom, [cat=rel, pred=who, case=acc, sem=hum], who).
filter_rel(whose, [cat=rel, pred=who, case=gen, sem=hum], who).
filter_rel(which, [cat=rel, pred=who, case=acc, sem=obj], which).
filter_rel(what, [cat=rel, pred=who, case=acc, sem=obj], what).
filter_rel(that, [cat=rel, pred=that, case=acc, sem=obj], that).

filter_pers(you, [cat=pers, pred=you, pers=2, num=N, gen=Gen], you).
filter_pers(we, [cat=pers, pred=we, pers=1, num=plur, gen=Gen], we).
filter_pers(he, [cat=pers, pred=he, pers=3, num=sing, gen=mas], he).
filter_pers(she, [cat=pers, pred=she, pers=3, num=sing, gen=fem], she).
filter_pers(it, [cat=pers, pred=it, pers=3, num=sing, gen=neu], it).
filter_pers(i, [cat=pers, pred=i, pers=1, num=sing, gen=Gen], i).
filter_pers(they, [cat=pers, pred=they, pers=3, num=plur, gen=Gen], they).
filter_pers(there, [cat=ext, pers=3, num=sing, gen=neu], it).
filter_pers('You', [cat=pers, pred=you, pers=2, num=N, gen=any], you).
filter_pers('We', [cat=pers, pred=we, pers=1, num=plur, gen=any], we).
filter_pers('He', [cat=pers, pred=he, pers=3, num=sing, gen=mas], he).
filter_pers('She', [cat=pers, pred=she, pers=3, num=sing, gen=fem], she).
filter_pers('It', [cat=pers, pred=it, pers=3, num=sing, gen=neu], it).
filter_pers('I', [cat=pers, pred=i, pers=1, num=sing, gen=any], i).
filter_pers('They', [cat=pers, pred=they, pers=3, num=plur, gen=any], they).
filter_pers('One', [cat=pron, pred=one, type=pers, pers=3, num=N, gen=any], one).

filter_pos_ag(its, [cat=poss, pred=it, pers=3, num=sing, gen=neu], its).
filter_pos_ag(your, [cat=poss, pred=you, pers=2, num=N, gen=Gen], your).
filter_pos_ag(our, [cat=poss, pred=we, pers=1, num=plur, gen=Gen], our).
filter_pos_ag(her, [cat=poss, pred=she, pers=3, num=sing, gen=fem], her).
filter_pos_ag(his, [cat=poss, pred=he, pers=3, num=sing, gen=mas], his).
filter_pos_ag(my, [cat=poss, pred=i, pers=1, num=sing, gen=Gen], my).
filter_pos_ag(their, [cat=poss, pred=they, pers=3, num=plur, gen=Gen], their).
filter_pos_ag('Its', [cat=poss, pred=it, pers=3, num=sing, gen=neu], its).
filter_pos_ag('Your', [cat=poss, pred=you, pers=2, num=N, gen=Gen], your).
filter_pos_ag('Our', [cat=poss, pred=we, pers=1, num=plur, gen=Gen], our).
filter_pos_ag('Her', [cat=poss, pred=she, pers=3, num=sing, gen=fem], her).
filter_pos_ag('His', [cat=poss, pred=he, pers=3, num=sing, gen=mas], his).
filter_pos_ag('My', [cat=poss, pred=i, pers=1, num=sing, gen=Gen], my).
filter_pos_ag('Their', [cat=poss, pred=they, pers=3, num=plur, gen=Gen], their).

filter_dim_ag(that, [cat=dim, pred=that, type=deic, num=sing], that).
filter_dim_ag(this, [cat=dim,pred=this, type=deic, num=sing], this).
filter_dim_ag(those, [cat=dim,pred=that, type=deic, num=plur], that).
filter_dim_ag(these, [cat=dim,pred=this, type=deic, num=plur], this).
filter_dim_ag(such, [cat=dim, pred=that, type=deic, num=sing], that).

filter_deit(that, [cat=deit,pred=that, num=sing], that).
filter_deit(this, [cat=deit,pred=this, num=sing], this).
filter_deit(those, [cat=deit,pred=that, num=plur], that).
filter_deit(these, [cat=deit,pred=this, num=plur], this).

def_ca(ind, -, qp).
def_ca(ind, +, qe).
def_ca(def, +, qc).
def_ca(def, -, qd).
def_ca(neg, +, nc).
def_ca(neg, -, nd).
def_ca(ass, +, qc).
def_ca(ass, -, qd).
def_ca(def, def, qt).
def_ca(def, '+', qo).

filter_pro_q(any, [cat=q, pred=any, type=ind, def='-', num=sing], any).
filter_pro_q(some, [cat=q, pred=some, type=ind, def='-', num=sing], some).
filter_pro_q(either, [cat=q, pred=either, type=ind, def='+', num=N], either).
filter_pro_q(both, [cat=q, pred=two, type=def, def=def, num=plur], two).
filter_pro_q(other, [cat=q, pred=other, type=ind, def='-', num=sing], other).
filter_pro_q(another, [cat=q, pred=one, type=def, def='+', num=sing], one).
filter_pro_q(all, [cat=q, pred=all, type=def, def='+', num=sing], all).
filter_pro_q(each, [cat=q, pred=each, type=ind, def='-', num=sing], each).
filter_pro_q(every, [cat=q, pred=every, type=ind, def='-', num=N], every).
filter_pro_q(no, [cat=q, pred=no, type=neg, def='-'], no).
filter_pro_q(none, [cat=q, pred=no, type=neg, def='-'], no).
filter_pro_q(no_one, [cat=q, pred=no, type=neg, def='-'], no).
filter_pro_q(more, [cat=q, pred=more, type=ass, deg='+'], more).
filter_pro_q(most, [cat=q, pred=more, type=ass, deg='+'], more).
filter_pro_q(much, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pro_q(as_much_as, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pro_q(a_lot, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pro_q(a_lot_of, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pro_q(many, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pro_q(as_many_as, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pro_q(several, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pro_q(enough, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pro_q(little, [cat=q, pred=little, type=ass, deg='-'], little).
filter_pro_q(a_little, [cat=q, pred=little, type=ass, deg='-'], little).
filter_pro_q(less, [cat=q, pred=little, type=ass, deg='-'], little).
filter_pro_q(least, [cat=q, pred=little, type=ass, deg='-'], little).
filter_pro_q(few, [cat=q, pred=little, type=ass, deg='-'], little).
filter_pro_q(a_few, [cat=q, pred=little, type=ass, deg='-'], little).
filter_pro_q(fewest, [cat=q, pred=little, type=ass, deg='-'], little).
filter_pro_q(fewer, [cat=q, pred=little, type=ass, deg='-'], little).

filter_pron_q(anyone, [cat=pron, pred=any, type=ind, def='-', num=sing], any).
filter_pron_q(anything, [cat=pron, pred=any, type=ind, def='-', num=sing], any).
filter_pron_q(any, [cat=pron, pred=any, type=ind, def='-', num=sing], any).
filter_pron_q(some, [cat=pron, pred=some, type=ind, def='-', num=sing], some).
filter_pron_q(either, [cat=pron, pred=either, type=ind, def='+', num=N], either).
filter_pron_q(someone, [cat=pron, pred=some, type=ind, def='-', num=sing], some).
filter_pron_q(somebody, [cat=pron, pred=some, type=ind, def='-', num=sing], some).
filter_pron_q(something, [cat=pron, pred=some, type=ind, def='-', num=sing], some).

filter_pron_q(both, [cat=pron, pred=two, type=def, def=def, num=plur], both).
filter_pron_q(one, [cat=pron, pred=one, type=def, def=def, num=sing], one).
filter_pron_q(another, [cat=pron, pred=one, type=def, def='+', num=sing], one).
filter_pron_q(others, [cat=q, pred=other, type=ind, def='-', num=plur], other).

filter_pron_q(all, [cat=pron, pred=all, type=def, def='+', num=sing], all).
filter_pron_q(each, [cat=pron, pred=each, type=ind, def='-', num=sing], each).
filter_pron_q(everyone, [cat=pron, pred=every, type=ind, def='-', num=sing], every).
filter_pron_q(everybody, [cat=pron, pred=every, type=ind, def='-', num=sing], every).
filter_pron_q(everything, [cat=pron, pred=every, type=ind, def='-', num=sing], every).

filter_pron_q(no, [cat=pron, pred=no, type=neg, def='-'], no).
filter_pron_q(none, [cat=pron, pred=no, type=neg, def='+', sem=hum], no).
filter_pron_q(no_one, [cat=pron, pred=no, type=neg, def='+', sem=hum], no).
filter_pron_q(nobody, [cat=pron, pred=no, type=neg, def='+', sem=hum], no).
filter_pron_q(nothing, [cat=pron, pred=no, type=neg, def='+', sem=obj], no).
filter_pron_q(neither, [cat=pron, pred=no, type=neg, def='-'], no).
filter_pron_q(more, [cat=pron, pred=more, type=ass, deg='+'], more).
filter_pron_q(most, [cat=pron, pred=more, type=ass, deg='+'], more).
filter_pron_q(much, [cat=pron, pred=much, type=ass, deg='+'], much).
filter_pron_q(as_much_as, [cat=pron, pred=much, type=ass, deg='+'], much).
filter_pron_q(a_lot, [cat=q, pred=much, type=ass, deg='+'], much).
filter_pron_q(a_lot_of, [cat=pron, pred=much, type=ass, deg='+'], much).
filter_pron_q(many, [cat=pron, pred=much, type=ass, deg='+'], much).
filter_pron_q(as_many_as, [cat=pron, pred=much, type=ass, deg='+'], much).
filter_pron_q(several, [cat=pron, pred=much, type=ass, deg='+'], much).
filter_pron_q(enough, [cat=pron, pred=much, type=ass, deg='+'], much).
filter_pron_q(little, [cat=pron, pred=little, type=ass, deg='-'], little).
filter_pron_q(a_little, [cat=pron, pred=little, type=ass, deg='-'], little).
filter_pron_q(less, [cat=pron, pred=little, type=ass, deg='-'], little).
filter_pron_q(least, [cat=pron, pred=little, type=ass, deg='-'], little).
filter_pron_q(few, [cat=pron, pred=little, type=ass, deg='-'], little).
filter_pron_q(a_few, [cat=pron, pred=little, type=ass, deg='-'], little).
filter_pron_q(fewest, [cat=pron, pred=little, type=ass, deg='-'], little).
filter_pron_q(fewer, [cat=pron, pred=little, type=ass, deg='-'], little).

filter_pron(s_, [cat=pron, pred=s, type=poss, pers=3, num=sing, case=gen], s).
filter_pron(its, [cat=pron, pred=it, type=poss, pers=3, num=sing, gen=neu], its).
filter_pron(yours, [cat=pron, pred=you, type=poss, pers=2, num=N, gen=any], yours).
filter_pron(ours, [cat=pron, pred=we, type=poss, pers=1, num=plur, gen=any], ours).
filter_pron(hers, [cat=pron, pred=she, type=poss, pers=3, num=sing, gen=fem], hers).
filter_pron(his, [cat=pron, pred=he, type=poss, pers=3, num=sing, gen=mas], his).
filter_pron(mine, [cat=pron, pred=i, type=poss, pers=1, num=sing, gen=any], mine).
filter_pron(theirs, [cat=pron, pred=they, type=poss, pers=3, num=plur, gen=any], theirs).

filter_pron(it, [cat=pron, pred=it, type=pers, pers=3, num=sing, gen=neu], it).
filter_pron(you, [cat=pron, pred=you, type=pers, pers=2, num=N, gen=any], you).
filter_pron(us, [cat=pron, pred=we, type=pers, pers=1, num=plur, gen=any], we).
filter_pron(her, [cat=pron, pred=she, type=pers, pers=3, num=sing, gen=fem], she).
filter_pron(him, [cat=pron, pred=she, type=pers, pers=3, num=sing, gen=mas], he).
filter_pron(me, [cat=pron, pred=i, type=pers, pers=1, num=sing, gen=any], i).
filter_pron(them, [cat=pron, pred=they, type=pers, pers=3, num=plur, gen=any], they).
filter_pron(they, [cat=pron, pred=they, type=pers, pers=3, num=plur, gen=any], they).
filter_pron(there, [cat=ext, pred=nil, type=pers, pers=3, num=sing, gen=neu], it).
%filter_pron(one, [cat=pron, pred=one, type=pers, pers=3, num=N, gen=any], one).

filter_pron(oneself, [cat=pron, pred=one, type=ana, pers=3, num=sing, gen=any], one).
filter_pron(itself, [cat=pron, pred=it, type=ana, pers=3, num=sing, gen=neu], it).
filter_pron(yourself, [cat=pron, pred=you, type=ana, pers=2, num=sing, gen=any], you).
filter_pron(ourselves, [cat=pron, pred=we, type=ana, pers=1, num=plur, gen=any], we).
filter_pron(herself, [cat=pron, pred=she, type=ana, pers=3, num=sing, gen=fem], she).
filter_pron(himself, [cat=pron, pred=she, type=ana, pers=3, num=sing, gen=mas], he).
filter_pron(myself, [cat=pron, pred=i, type=ana, pers=1, num=sing, gen=any], i).
filter_pron(yourselves, [cat=pron, pred=you, type=ana, pers=2, num=plur, gen=any], you).
filter_pron(themselves, [cat=pron, pred=they, type=ana, pers=3, num=plur, gen=any], they).


case(acc,me).
case(acc,them).
case(acc,us).
case(acc,him).
case(acc,her).
case(nacc,you).
case(nacc,it).
case(nom,i).
case(nom,they).
case(nom,she).
case(nom,we).
case(nom,he).

reduce_lems(1,Word,Lems,NLems):-
   length(Lems, L),
   (1<L,
    remove(Cat-Word-Feat, Lems, NLems)
    ;
    NLems=Lems),
   !.

reduce_llems(1,Word,Lems,NLems):-
   length(Lems, L),
   (1<L,
    remove(Word-Cat, Lems, NLems)
    ;
    NLems=Lems),
   !.

convert_tagf(W, g, [neg]).
convert_tagf(W, nh, [nh]).
convert_tagf(W, ng, [ng]).
convert_tagf(W, np, [np]).
convert_tagf(W, a, [ag]).
convert_tagf(W, r, [pron]).
convert_tagf(W, r, [rel]).
convert_tagf(W, w, [int]).
convert_tagf(W, e, [ccom,cong]).
convert_tagf(W, s, [cosu]).
convert_tagf(W, av, [avv]).
convert_tagf(W, p, [p]).
convert_tagf(W, c, [pk, rel]).
convert_tagf(W, d, Cat):-
   atomic(W),
   extract_determiners(W, Cat),
   !.
convert_tagf(W, Cat, [Cat]):-
    Cat=nt;Cat=npro;Cat=n,!.

convert_tagf(W, Cat, [Cat]):-!.

reverse_tags(W, C, Tns):-
   (atomic(C),
   convert_tagf(W, Tns,[C])
   ;
   list(C),
   revtag(W,Tns,C)
   ), 
   !.

revtag(W,[],[]):-!.
revtag(W,[C|Cs],[T|Ts]):-
   convert_tagf(W, C, [T]),
   revtag(W,Cs,Ts),
   !.

convert_tag_new_forms(W, C, Tnew):-
   atomic(W),
   spy_lower(W, LWord, 1),
   convert_tag_new_form(LWord, C, Tnew),!.

convert_tag_new_forms(W, C, Tnew):-
   convert_tag_new_form(W, C, Tnew),!.

convert_tag_new_form(W, g, [neg]).
convert_tag_new_form(W, nh, [nh]).
convert_tag_new_form(W, ng, [ng]).
convert_tag_new_form(W, np, [np]).
convert_tag_new_form(W, a, [ag]).
convert_tag_new_form(W, r, [pron]).
convert_tag_new_form(W, r, [rel]).
convert_tag_new_form(W, w, [int]).
convert_tag_new_form(than, e, [ccom]):-!.
convert_tag_new_form(W, e, [cong]).
convert_tag_new_form(W, s, [cosu]).
convert_tag_new_form(W, av, [avv]).
convert_tag_new_form(W, p, [p]).
convert_tag_new_form(W, c, [pk, rel]).
convert_tag_new_form(W, d, Cat):-
   atomic(W),
   extract_determiners(W, Cat),
   !.
convert_tag_new_form(W, n, Cat):-
   atomic(W),
   extract_new_form(W, n, Cat),!.
convert_tag_new_form(W, C, C):-
   list(C),!.
convert_tag_new_form(W, Cat, [Cat]):-
    Cat=nt;Cat=npro;Cat=n,!.

/*
convert_tag_new_form(W, v, Tnew):-
   spy_lower(W, LWord, Pol),
   word_cats(0, File, W, LWord, NCats, SAllCats, Type),
   NCats\=[], NCats\=[fw],
   sort(NCats, T),
   evaluate_tags(T,[v-_],Tnew),
   !.
*/
convert_tag_new_form(W, T, [T]):-!.


convertalltags(W, [], []):-!.
convertalltags(W, Tags, [Tt|Rest]):-
   remove(T-W, Tags, Tgs),
   convert_tag_new_forms(W, T, Tt),
   convertalltags(W, Tgs, Rest),!.
convertalltags(W, [T-W|Tags], Rest):-
   convertalltags(W, Tags, Rest),!.

composelemcats(N, [], []):-!.
composelemcats(1, [NCat|NCats], LCats):-
     NCats\=[],
     NCat=C-Lem,
     Lem=W-W-C-F,
     LCat=C-L-F, 
     composelemcats(1, NCats, LCats).

composelemcats(N, [NCat|NCats], [LCat|LCats]):-
     NCat=C-Lem,
     Lem=W-L-C-F,
     LCat=C-L-F, 
     composelemcats(N, NCats, LCats).

composelemcats(N, [NCat], [LCat|LCats]):-
     NCat=W-L-C-F,
     \+ atomic(L),
     L=[L1|Ls],
     LCat=C-L1-F, 
     (Ls\=[], 
      NCt=W-Ls-C-F
      ;Ls=[]),
     composelemcats(N, NCt, LCats).

composelemcats(N, W-L-C-F, [LCat|LCats]):-
     \+ atomic(L),
     L=[L1|Ls],
     LCat=C-L1-F, 
     (Ls=[],
     composelemcats(N, [], []),!;
     Ls\=[],Ls=[L2|Lss],
     NCt=W-Ls-C-F,
     composelemcats(N, NCt, LCats)).

composelemcats(N, [NCat|NCats], [LCat|LCats]):-
     NCat=C-Lem,
     Lem=[W-L-C-F],
     LCat=C-L-F, 
     composelemcats(N, NCats, LCats).

composelemcats(N, [NCat|NCats], [Lem|LCats]):-
     NCat=C-Lem,
     composelemcats(N, NCats, LCats).


dot(File):-
   writenl(File, '.').

text_loadt(Input, Win) :-
  flen(Input, Flen),
  Flen=<32500,
  wfront(Win),
  wscroll(Win),
  copy_bytes(Flen, Input, Win),
  close(Input).

text_load(Input, 0) :-
  flen(Input, Flen),
  Flen=<32500,
  crea_fin(Win),
  wfront(Win),
  wscroll(Win),
  copy_bytes(Flen, Input, Win),
  close(Input).

text_load(Input, Rest) :-
  flen(Input, Flen),
  32500 < Flen,
  crea_fin(Win),
  wfront(Win),
  wscroll(Win),
  copy_bytes(32500, Input, Win),
  find_in_cont(Win, 0, 32500, PreCar, Rest),
  close(Input),
  !.

erase_under(Pol,F,Abbr,LowAbbr):-
  stringof(List,F),
  reverse(List,['_'|Fi]),
  reverse(Fi, Abb),
  stringof(Abb,Abbr),
  crealowabb(Pol,Abbr,LowAbbr),
  !.

crealowabb(1,Abbr,LowAbbr):-
  tolower(Abbr, LowAbbr),
   !.
crealowabb(0,Abbr,LowAbbr):-
  toupper(Abbr, LowAbbr),
   !.

totsommar(NInput):-
   init,
   old('TEXT', Input),
   open(Input, read),
%   text_loadt(Input, 'Text'),
   cursor(spy_glass),
%   extract_title(Input, Title),
   centred(T,L,45,450),
%   banner(
   tokenizer(Input,'Macintosh HD:tokens'), 
%   ['I am currently tokenizing the input text'], T, L),
   cursor(watch),
   close('Macintosh HD:tokens'),
   open('Macintosh HD:tokens',read),
   dvol('Macintosh HD:work:riassuntore'),
   create('Macintosh HD:work:riassuntore:riass', 'Macintosh HD:work:riassuntore:', 'TEXT'),
   open('Macintosh HD:work:riassuntore:riass', write),
%   banner(
   rtn('Macintosh HD:tokens', 'Macintosh HD:work:riassuntore:riass',  Parse),
%   ['I am currently creating multiwords and tagging them from tokenized text'], T, L),
   cursor(crane),
   close('Macintosh HD:work:riassuntore:riass'),
   open('Macintosh HD:work:riassuntore:riass',read),
   fname(Input,Vol,Text,_),
   assert_sentences(Text,'Macintosh HD:work:riassuntore:riass'),
   init_model(Input,NInput),
   !.

tokenizer(Input,Outfile):-
   abolish(rm/3),
   assert(rm(nil,nil,nil)),
   abolish(ts/3),
   assert(ts(nil,nil,nil)),
   repeat,
   see(Input),
   get0(Car),
   tkz(Car, LCar, Pol, OrTok, Token, Type),
   (
   Token=[],
   !
   ;
   Car = -1
   ;
   nonvar(LCar),
   LCar = -1
   ;
   Token=[Tok],
   nonvar(Tok),
   build_tok(Pol, OrTok, Tok, OutTok),
   write_alltokens(Input, LCar, Type, Pol, OutTok, Outfile),
   fail
   ),
   seen.

write_alltokens(Input, LCar, Type, Pol, OutTok, Output):-
    writetokens(Input, LCar, NCar, Type, NTyp, Pol, OutTok, Output),
    trecpunc(Input, NCar, Pol-NTyp, Ccar, OtTok, Output),
    !.

tkz(Car, Car, Pol1, OrTok, [Token], Type):-
     rm(OrTk,Pol1,Type),
    (Pol1=1, OrTk=OrTok-Token
     ;
     Pol1=1, Token=OrTk, OrTok=OrTk
     ;
     Pol1=0, Token=OrTk, OrTok=OrTk),
     Token\=nil,
    !.

tkz(Car, LCar, Pol, OrTok, Token, NType):-
   l_p(Car, LCar, Pol, OrTok, Token, Type),
   Token=[Toke],
   build_tok(Pol, OrTok, Toke, OutTok),
   content_funct(OutTok, Pol, Type, NType), 
   !.

ver_write_word(File):-
   verify_tkz(Pol, OrTok, Toke, Type),
   (Toke=[Tok],
    Tok\=nil,
    build_tok(Pol, OrTok, Tok, OutTok),
    writetk(Type, Pol, OutTok, File)
    ;
   Tok=nil),
   !.

ver_write_punct(File, Toke, T):-
   verify_tkz(Pol, OrTok, Token, Type),
   Token=[Tok],
    Tok\=nil,
   build_tok(Pol, OrTok, Tok, OutTok),
   writetk(Type, Pol, OutTok, File),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
   write_punct(File, Pol, Toke),!.

ver_write_punct(File, Toke, T):-
   verify_tkz(Pol, Ortok, Tok, Type),
   Tok=nil,
   write_punct(File, Pol, Toke),!.
   
verify_tkz(Pol, OrTok, [Token], Type):-
     rm(OrTk,Pol1,Type),
%     !,
    (Pol1=1, OrTk=OrTok-Token
     ;
     Pol1=1, Token=OrTk, OrTok=OrTk
     ;
     Pol1=0, Token=OrTk, OrTok=OrTk),
     Token\=nil,
     (var(Pol), Pol=Pol1;nonvar(Pol)).
verify_tkz(Pol, nil, nil, Type).

trecpunc(Input, -1, P-5, Car, OutTok, File):-
   ver_write_punct(File, '.',5),
   write_punct(File, 1, '§'),!.
trecpunc(Input, 10, P-5, Car, OutTok, File):-
   ver_write_punct(File, '§',5),!.
trecpunc(Input, 13, P-8, Car, OutTok, File):-
   write_punct(File, 1, '.'),!.
trecpunc(Input, 13, P-7, Car, OutTok, File):-
    ver_write_punct(File, '§', 5),!.

trecpunc(Input, 13, P-Type, Car, OutTok, File):-
   Type\=5,
   Type\=6,
   get0(Car1),
   (Car1=13, 
    ver_write_punct(File, '§', 5),!
    ;
    Car1\=13,  
    trecpunc(Input, Car1, P-Type, LCar, OtTok, File),
   (interpunzione(LCar),
      (word_start(LCar), Car=60
     ;
    trecpunc(Input, LCar, P-Type, Car, OutTok, File))
     ;
    Car=LCar)
    ),
   !.

trecpunc(Input, 13, P-5, Car, OutTok, File):-
   get0(Car1),
   (Car1=13, 
    ver_write_punct(File, '§', 5),!
    ;
    Car1\=13,  
    trecpunc(Input, Car1, P-Type, Car, OutTok, File)
    ),
   !.

trecpunc(Input, End, P-T, Car, OutTok, File):-
   (T=4;T=6),
   sentence_end(End,Par),
   get0(Car1),
   (
    (Car1=13;Car1=32;Car1=10;Car1= -1), 
     Car=Car1,
     ver_write_punct(File, Par, 5),
     ver_write_punct(File, '§', 5),!
    ;
    Car1=46,
    Car=Car1,
    get0(Car2), 
    Car2=46, ver_write_punct(File, '...', 5)
    ;
     (
      End=46,
      Car1\=13,Car1\=32,Car1\=10,Car1\= -1,
      trecpunc(Input, Car1, P-Type, Car, OutTok, File)
      ;
      Car1\=13,
      ver_write_punct(File, Par, 5), 
      (Car1\=34,
       Car=Car1
       ;
       Car1\=32,Car1\=10,Car1\= -1,
       trecpunc(Input, Car1, P-Type, Car, OutTok, File)))
     ),
   !.

trecpunc(Input, Car, P-T, Car, OutTok, File):-
   fine_parola(Car),
   !.

trecpunc(Input, 60, P-T, Car1, OutTok, File):-
   !.
trecpunc(Input, Car, P-T, Car1, OutTok, File):-
     word_start(Car),
     name(Par,[Car]),
    (select_punct(Par,Tag),
     ver_write_punct(File, Par, 5),
     (
       (Par='(';Par='[';Par='{';Par='<'), Car1=Car
       ;
        Car1=60)
     ;
     true, Car1=60), 
   !.

trecpunc(Input, Car, P-T, Last, OutTok, File):-
   l_p(Car, LastC, NPol, NTok, NToken, NType),
   NToken=[Toke],
   (fine_di_parola(LastC, Las, P, _, _),
    NType=5,    
    (word_end(LastC),
      get0(Car1),
      (Car1=13, 
       Last=Car1,
       ver_write_punct(File, NTok, 5),
       ver_write_punct(File, '§', 5),!
      ;
       interpunzione(Car1),
       ver_write_punct(File, NTok, 5),
       trecpunc(Input, Car1, P-Type, Last, OutTok, File)
      ;
      Car1\=13,  
      Last=Car1,
      ver_write_punct(File, Toke, NType))
       ;
      Last=Las,
      ver_write_punct(File, Toke, NType))
     ;
      LastC=64,
      mcon(T, '_', Nn),
      mcon(Nn, Toke, NW1),
      contr_apice(4, 64, NW1, NL, OutTok, 7),
      writetk(7, P, OutTok, File),Last=LastC
     ;
      build_tok(NPol, NTok, Toke, OutTok),
      ver_write_word(File),
      abolish(rm/3),
      assert(rm(nil,nil,nil)),
      content_funct(OutTok, NPol, NType, NTyp), 
      writetk(NTyp, NPol, OutTok, File),
      (fine_di_parola(LastC, Las, P, _, _),
       \+ interpunzione(LastC),
        Last=LastC
      ;
       interpunzione(LastC),
      (word_start(LastC), Last=60
      ;
      trecpunc(Input, LastC, P-Type, Last, NOutTok, File))
      ;
      trecpunc(Input, LastC, P-Type, Last, NOutTok, File)
      ;
      Last=LastC)
   ),
   !.

writetokens(Input, Car, LastC, 5, 5, P, T, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    write_punct(File, P, T),
    (word_start(Car),
      LastC=60
%      get0(Car1), LastC=Car1
     ;
     fin_par(Car, Car, _, _),
     (get0(Car1), Car2=Car1
      ;
      Car2=Car),
      trecpunc(Input, Car2, P-5, LastC, OutTok, File)
      ;
      LastC=Car
      ),
   !.

writetokens(Input, 13, 13, 6, 6, P, T, File):-
   writetk(6, P, T, File),!.

writetokens(Input, Car, Car, 6, 6, P, T, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
   writetk(6, P, T, File),
%   trecpunc(Input, Car, P-6, LastC, OutTok, File),
   !.

/*
writetokens(Input, Car, Car, 8, 8, P, T, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
   writetk(8, P, T, File),
   trecpunc(Input, Car, P-8, LastC, OutTok, File),
   !.


writetokens(Input, Car, LastC, T, NTyp, P, Tok, File):-
    loc1(Tok,L),
    \+ interpunzione(Car),
    writetoken(Car, 80, NTyp, P, Tok, LastC, File),
    !.

writetokens(Input, Car, LastC, T, NTyp, 1, Tok, File):-
    Tok=UTok-_,
    \+ loc1(UTok,L),
    writetoken(Car, 80, NTyp, 1, Tok, LastC, File),
    !.

writetokens(Input, Car, LastC, T, NTyp, 1, Tok, File):-
    Tok=_-UTok,
    loc1(UTok,L),
    writetoken(Car, 80, NTyp, 1, Tok, LastC, File),
    !.
*/
writetokens(Input, Car, Car, 44, 44, P, T, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
   writetk(44, P, T, File),
%   trecpunc(Input, Car, P-44, LastC, OutTok, File),
   !.

writetokens(Input, Car, LCars, T, NTyp, Pol, Tok, File):-
   writetoken(Car, T, NTyp, Pol, Tok, LCar, File),
   recover_quotes(LCar, LCars),
   !.

recover_quotes(34, Car):-
%      l_p(34, LastC, NPol, NTok, NToken, NType),
%      ver_write_punct(File, NTok, NType),
   get0(Car),
   !.
recover_quotes(Car, Car).

writetoken(Car, 5, 5, Pol, Tok, LCar, File):-
   !,
   write_punct(File, Pol, Tok),!.


writetoken(Car, 80, NType, Pol1, OrTk, LCar, File):-
    l_p(Car, LCar, Pol, Parol, [NWord], Typ),
    (Typ=5,
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    content_funct(OrTk, Pol1, 4, NType), 
    writetk(NType, Pol1, OrTk, File),
%    (LCar=32,
     write_punct(File, 1, NWord)
%    ; LCar\=32)
    ;
    conc_two(_-_-OrTk,Pol,_-_-Parol,Loc),
    tolower(Loc, LLoc), 
    build_tok(Pol, Parol, NWord, OutTok),
    (
    loc2(NWord,L),
    (tp_lex(LLoc, Codes, locs),Locc=LLoc
      ;
      tp_lex(Loc, Codes, locs),Locc=Loc),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(80, [OrTk,Parol], Locc, File),!
    ;
    (tp_lex(LLoc, Codes, locs),Locc=LLoc
      ;
      tp_lex(Loc, Codes, locs),Locc=Loc),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(80, [OrTk,Parol], Locc, File),!
    ;
    abolish(rm/3),
    content_funct(NWord, Pol, 4, NTyp), 
    (Pol=1,assert(rm(OutTok,Pol,NTyp))
     ;
     Pol=0,assert(rm(NWord,Pol,NTyp))),
    content_funct(OrTk, Pol1, 4, NType), 
    writetk(NType, Pol1, OrTk, File))),
    !.

writetoken(Car, 44, T, Pol, OrTk, Car, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
   writetk(44, Pol, OrTk, File),!.

writetoken(Car, 66, 5, Pol, OrTk, Car, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
   writetk(5, Pol, 'Sect', File),!.

writetoken(Car, T, T, Pol, OrTk, Car, File):-
   interpunzione(Car),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
   writetk(T, Pol, OrTk, File),!.

writetoken(Car, T, NTyp, Pol1, OrTk, LCar, File):-
    l_p(Car, LCar, Pol, Parol, [NWord], Typ),
    content_funct(NWord, Pol, Typ, NTyp), 
     build_tok(Pol, Parol, NWord, OutTok),
     conc_two(_-_-OrTk,Pol,_-_-OutTok,Loc),
     tolower(Loc, Loc1),
     (Loc=Loc1, LLoc=Loc1; Loc\=Loc1, LLoc=Loc), 
     search_polrem(OrTk, T, Pol1, LLoc, OutTok, Pol, NTyp, File),
     !.

/*
test_sw(LLoc):-
   r(LLoc-Lem),
   !.
   */
test_sw(LLoc):-
   sw(LLoc-Lem-Feat),
   !.

search_polrem(Tok1, T, Pol1, LLoc, -1, Pol, T, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(T, Pol1, Tok1, File),
    !.

search_polrem(Tok1, T, Pol1, LLoc, [], Pol, T, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(T, Pol1, Tok1, File),
    !.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, Typ, File):-
    test_sw(LLoc), 
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(77, [Tok1,Tok2], LLoc, File),!.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, 5, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(T, Pol1, Tok1, File),
    (select_punct(Tok2, Cats),
      \+ doublendpunct(Toks2),
      write_punct(File, Pol, Tok2)
     ;
     select_dirs(Tok2, [Cat]),
      \+ doublendpunct(Toks2),
      writepun(File, Tok2-Cat)
     ;
     writetk(T, Pol, Tok2, File)),
    !.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, 5, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(T, Pol1, Tok1, File),
    !.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, 76, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(T, Pol1, Tok1, File),
    writetk(76, Pol, Tok2, File),
    !.

search_polrem(Tok1, 80, Pol1, LLoc, Tok2, Pol, Typ, File):-
    loc2(Tok2, _),
    tp_lex(LLoc, Codes, locs),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(80, [Tok1,Tok2], LLoc, File),!.

search_polrem(Tok1, T, 1, LLoc, Tok2, 1, Typ, File):-
    Tok1=UpTok-_,
    if_first_name(UpTok),
    Tok2=UpTok2-_,
    \+ nt(UpTok2),
    name_new_hm(UpTok, Cats),
    name_new_hm(UpTok2, Cats1),
    (\+ on(loc,Cats);
     on(loc,Cats),on(loc,Cats1)),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(77, [Tok1,Tok2], LLoc, File),!.


search_polrem(Tok1, T, 1, LLoc, Tok2, 1, Typ, File):-
    conc_two(_-_-Tok1,Pol1,_-_-Tok2,Loc),
    tp_lex(Loc, Codes, _),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(77, [Tok1,Tok2], Loc, File),!.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, Typ, File):-
    tp_lex(LLoc, Codes, _),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(77, [Tok1,Tok2], LLoc, File),!.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, Typ, File):-
    v(LLoc,Kk),
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(78, [Tok1,Tok2], LLoc, File),
    !.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, 44, File):-
    abolish(rm/3),
    assert(rm(nil,nil,nil)),
    writetk(T, Pol1, Tok1, File),
    writetk(44, Pol, Tok2, File),
    !.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, 6, File):-
    verify_tkz(Pol2, Ortok, Toke, Type),
    Toke=[Tok],
    Tok\=nil, Type=5,
    content_funct(Tok2, Pol, Typ, NType), 
    writetk(T, Pol1, Tok1, File),
    writetk(NType, Pol, Tok2, File),
    !.

search_polrem(Tok1, T, Pol1, LLoc, Tok2, Pol, Typ, File):-
    abolish(rm/3),
    content_funct(Tok2, Pol, Typ, NType), 
    assert(rm(Tok2,Pol,NType)),
    writetk(T, Pol1, Tok1, File),
    !.

verifica_codici(Codes, NTyp):-
    findall(Ncat, (leaf_fpr(Loc, Codes, Cat, N),
                  Cat=root(root(Loc), Type, Ncat, Feat,_)), 
              Cats),
    Cats\=[],
     (member(verb, Cats), NTyp=78
       ;
       NTyp=77).
verifica_codici(Codes, 77).

doublendpunct(Punc):-
    Punc='"';Punc=')';Punc=']';Punc='>'.
    
write_punct(File, Pol, Tok):-
    (Pol=1, Tok=UTok-_
     ;
     Pol=1, UTok=Tok
     ;
     Pol=0, UTok=Tok),
   select_punct(UTok, Cats),
    Cats=[Cat],
   (Cat=punto, NTok='.', P=2; 
    Cat=dirs, NTok=':', P=2;
    Cat=par, UTok='-', NTok='-', P=2;
    Cat\=dirs, Cat\=punto, 
    NTok=UTok, P=1),
    writepun(File, NTok-Cat),!.

writepun(File, NTok-Cat):-
      writeq(t(NTok, Cat, 5)),
      dot(File),
      assert(ts(NTok, Cat, 5)),
      !.

writetk(T, Pol, '.', File):-
      nonvar(T), Pol=0,
      writepun(File, '.'-punto),!.
      
writetk(T, Pol, Tok, File):-
      (nonvar(T), Ty=T; var(T),Ty=4),
      writeq(t(Tok, Pol, Ty)),
      dot(File),
      assert(ts(Tok, Pol, Ty)),
      !.

/* non è tra le forme loc1*/
assemble_polrem(Type, 32, NCar, OrTok, Tok, OutFile):-
    nonvar(Tok),
    OrTok=[Type-Pol-OrTk],
    build_tok(Pol, OrTk, Tok, OutTok),
    search_loc1(32, NCar, [Type-Pol-OutTok], Pol, [Tok], _, _, OutFile),
    !.

assemble_polrem(Type, 13, NCar, OrTok, Tok, OutFile):-
    nonvar(Tok),
    OrTok=[Type-Pol-OrTk],
    (Pol=1, NTk=OrTk-Tok
     ;
     Pol=0, NTk=OrTk),
    !,
    search_loc1(13, NCar, [Type-Pol-NTk], Pol, [Tok], _, _, OutFile).

assemble_polrem(Type, -1, NCar, OrTok, Tok, OutFile):-
    !,
    nonvar(Tok),
    anal_wrd(-1, NCar, OrTok, Type, Tok, OutFile).

assemble_polrem(5, Car, NCar, OrTok, Tok, OutFile):-
    Car\=32,
    nonvar(Tok),
    anal_wrd(Car, NCar, OrTok, 5, Tok, OutFile),!.

assemble_polrem(Type, Car, NCar, [Type-Pol1-OrTk], Tok, OutFile):-
    nonvar(Tok),
    (Pol1=1, OrTk=UTok-_
     ;
     Pol1=1, UTok=OrTk
     ;
     Pol1=0, UTok=Tok),
    \+ fct(UTok),
    l_p(Car, LCar, Pol, Parol, [NWord], Typ),
    conc_two(_-_-Tok,Pol,_-_-NWord,Loc),
    tolower(Loc, LLoc), 
    hash_search(LLoc,K),
    (K\=[],
    assert_polrem(Pol, [Tok,NWord], LLoc, K, OutFile),
    NCar=LCar
    ;
    K=[],
    (
     v(LLoc,Kk),
     hash_search(UTok,Kn),
     Kn\=[],
     AllCats=[vt-LLoc-UTok-vt-[pred=UTok, subcat=Kk]],
     asserisci_cat(File, [vt], AllCats, [], LLoc),
     NCar=LCar
    ;
    anal_wrd(LCar, NCar, [Typ-Pol-NWord, Type-Pol1-OrTk], Typp, [Tok,NWord], OutFile))
    ),
    !.

assemble_polrem(Type, Car, NCar, OrTok, Tok, OutFile):-
    Car\=32, Type\=5,
    nonvar(Tok),
    anal_wrd(Car, NCar, OrTok, Type, Tok, OutFile),
/*
    leggi_par(Car, NTok, LCar),
    anal_wrd(LCar, [5-0-NTok], 5, NTok, OutFile),
    (fine_parola(LCar)
     ;
     interpunzione(LCar)
     ;
    l_p(LCar, LastC, Pol, Parol, [NWord], Typ),
    anal_wrd(LastC, [Typ-Pol-NWord], Typ, NWord, OutFile)), */
    !.

s_l(L, Ipol, UpTok-Tok, OTok, Opol, 32, LCar, Pol, OutTok, NTok, Type):-
      find_locs(L, Ipol, UpTok, Tok, OTok, Opol),
      l_p(32, Car, Pl, Nr, [NTk], Typ),
      (Typ=75, 
       W1=Nr-NTk, 
       L1 is L + 1,
       find_locs(L1, Pl, Nr, NTk, STok, Spol),
       spcomps(File, 75, Pl, W1, Lww, Fw, Sw),
       l_p(Car, LCar, Pol, NOr, [Nok], Type),
       W2=NOr-Nok,
       conc_two(_-_-W1,Pl,_-_-W2,Loc),
       tolower(Loc, LLoc), 
       NTok=[Fw, Sw, Nok]
       ;
       Typ=75, 
       W1=Nr-NTk, 
       spcomps(File, 75, Pl, W1, Lww, Fw, Sw),
       Loc=Nr, LLoc=NTk, Type=Typ, Pol=Pl, LCar=Car,
       NTok=[Fw, Sw]
       ;
       Loc=Nr, LLoc=NTk, Type=Typ, Pol=Pl, LCar=Car,
       nonvar(NTk),
       NTok=[NTk]
       ),
       build_tok(Pol, Loc, LLoc, OutTok),
      !.

s_l(L, Opol, Tok, Tok, Opol, 32, LCar, Pol, OutTok, NTok, Type):-
      find_loc(L, Tok),
      l_p(32, LCar, Pol, NOr, [NTk], Type),
      build_tok(Pol, NOr, NTk, OutTok),
      nonvar(NTk),
      NTok=[NTk],
      !.
build_tok(P, in, in, in):-!.
build_tok(P, public, public, public):-!.
build_tok(P, dynamic, dynamic, dynamic):-!.
build_tok(P, 'IN', in, in):-!.
build_tok(P, 'In', in, in):-!.
build_tok(P, 'Public', public, public):-!.
build_tok(P, 'Dynamic', dynamic, dynamic):-!.
build_tok(P, 'PUBLIC', public, public):-!.
build_tok(P, 'DYNAMIC', dynamic, dynamic):-!.
build_tok(0, UpT, LTok, LTok):-!.
build_tok(1, UpT, Lt, UpT-Lt):-!.


find_locs(L, Pol, UpTok, Tok, Otok, Opol):-
     (Pol=0,
      (
       find_loc(L, Tok), Otok=Tok, Opol=Pol
       ;
       UpTok\=Tok, find_loc(L, UpTok), Otok=Tok, Opol=Pol)
      ;
      Pol=1,
      (find_loc(L, UpTok), Otok=UpTok, Opol=Pol
       ;
       find_loc(L, Tok), Otok=Tok, Opol=0)
      ).

find_locs(L, 1, UpTok, Tok, Otok, Opol):-
      toupper(Tok, UpAtom),
      find_loc(L, UpAtom), Otok=UpAtom, Opol=Pol,!.

find_loc(5, Tok).
find_loc(6, Tok).
find_loc(7, Tok).

find_loc(1, A):-
   checkt(A).

find_loc(1, Tok):-
      loc1(Tok, N).

find_loc(1, Tok):-
      prep_loc(Tok).

find_loc(1, Tok):-
      lc4(Tok, N).

find_loc(2, Tok):-
      loc2(Tok, N).

find_loc(3, Tok):-
      loc3(Tok, N).

find_loc(4, Tok):-
      loc4(Tok, N).

prep_loc(out).
prep_loc(up).
prep_loc(at).

conc_two_w(W1,1,T-1-W2,Loc):-
       stringof(Lis,W1),
       reverse(Lis,['_'|_]),
       W2=Uw-Lw,
       mcon(W1, Uw, Loc),!.

conc_two_w(W1,0,T-0-W2,Loc):-
       stringof(Lis,W1),
       reverse(Lis,['_'|_]),
       mcon(W1, W2, Loc),!.

conc_two_w(W1,0,W2,Loc):-
       stringof(Lis,W1),
       reverse(Lis,['_'|_]),
       mcon(W1, W2, Loc),!.

conc_two_w(W1,1,W2,Loc):-
       stringof(Lis,W1),
       reverse(Lis,['_'|_]),
       mcon(W1, W2, Loc),!.

conc_two_w(W1,1,T-1-W2,Loc):-
       W2=Uw-Lw,
       mcon(W1, '_', Ntt),
       mcon(Ntt, Uw, Loc),!.

conc_two_w(W1,0,T-0-W2,Loc):-
       mcon(W1, '_', Ntt),
       mcon(Ntt, W2, Loc),!.

conc_two_w(W1,0,W2,Loc):-
       mcon(W1, '_', Ntt),
       mcon(Ntt, W2, Loc),!.

conc_two_w(W1,1,W2,Loc):-
       mcon(W1, '_', Ntt),
       mcon(Ntt, W2, Loc),!.

conc_two(_-_-W1,Pol,_-_-W2,Loc):-
       stringof(Lis,W1),
       reverse(Lis,['_'|_]),
       create_toks1(Pol, W1, W2, [Nw1, Nw2]),
       mcon(W1, Nw2, Loc),!.

conc_two(_-_-W1,Pol,_-_-W2,Loc):-
       create_toks1(Pol, W1, W2, [Nw1, Nw2]),
       stringof(Lis,Nw1),
       reverse(Lis,['_'|_]),
       mcon(Nw1, Nw2, Loc),!.

conc_two(_-_-W1,Pol,_-_-W2,Loc):-
       create_toks1(Pol, W1, W2, [Nw1, Nw2]),
       mcon(Nw1, '_', Ntt),
       mcon(Ntt, Nw2, Loc),!.

conc_three([_-_-W1, _-_-W2, _-_-W3],1,Loc):-
      create_toks2(1, W3, W2, W1, [Nw1, Nw2, Nw3]),
      mcon(Nw1, '_', Nt),
      mcon(Nt, Nw2, Lo),
      mcon(Lo, '_', Ntt),
      mcon(Ntt, Nw3, Loc),
      !.

conc_three([_-_-W1, _-_-W2, _-_-W3],0,Loc):-
      create_toks2(0, W3, W2, W1, [Nw1, Nw2, Nw3]),
      mcon(Nw1, '_', Nt),
      mcon(Nt, Nw2, Lo),
      mcon(Lo, '_', Ntt),
      mcon(Ntt, Nw3, Loc),
      !.

/* loc1 ha successo ma fallisce loc2*/
search_loc1(Car, NCar, [T-Ipol-Tok], Ipol, Tk, NTok, Toks, OutFile):-
      s_l(1, Ipol, Tok, Oto, Opol, Car, LCar, Pol, NOr, NTok, Type),  
      !,
      search_loc2(LCar, NCar, [Type-Pol-NOr,T-Ipol-Tok], Opol, Tk, NTok, Toks, OutFile).
/*      ;
     anal_wrd(Car, NCar, [T-Ipol-Tok], T, Tk, OutFile), NCar=Car).*/


/* loc2 ha successo o fallisce */
search_loc2(Car, NCar, [T-P-Tk,OrTk], Ipol, Tok, NTok, Toks, OutFile):-
     (s_l(2, Ipol, Tk, Oto, Opol, Car, LCar, Pol, NOr, NTo, Type),
      !,
      search_loc3(LCar, NCar, [Type-Pol-NOr,T-P-Tk,OrTk], Pol, Tok, NTok, NTo, OutFile)
     ;
     (
      conc_two(OrTk, Ipol, T-P-Tk, Loc),
      (tp_lex(Loc, Codes, locs)
       ;
       checklocprep(OrTk, Tk, Codes)
       ;
       checklocfree(OrTk, P, Loc, Codes)
        ),
      !,
      append(Tok, NTok, Xtk),
      assert_polrem(P, Xtk, Loc, Codes, OutFile),
      (var(NCar),
       NCar=Car; nonvar(NCar))
      ;
      (
      s_l(1, Ipol, Tk, Oto, Opol, Car, LCar, Pol, NOr, NTo, Type),
      !,
      anal_wrd(Car, XCar, [OrTk], Ty, Tok, OutFile),
      search_loc2(LCar, NCar, [Type-Pol-NOr,T-P-Tk], Pol, NTok, NTo, Toks, OutFile)
      ;
      append(Tok, NTok, Xtk),
      anal_wrd(Car, NCar, [T-P-Tk,OrTk], Type, Xtk, OutFile), 
     (var(NCar),
       NCar=Car; nonvar(NCar)))
      )
      ).

leaf_fpr(Loc, [Cod], Cat, 1):-
   !,
   pname(Code, Cod),
   w(Code, Loc, Cat).

leaf_fpr(Loc, Codes, Cat, N):-
   sort(Codes, SortCodes), 
   on(CodeAtm, SortCodes),
   pname(Code, CodeAtm),
   w(Code, Loc, Cat).

chlp(P, vc:loc:P, ['vc:loc']):-!.

checklocprep(_-0-P, Tk, Codd):-
   tp_lex(Tk, Codes, tml),
   on(CodeAtm, Codes),
   pname(Code, CodeAtm),
   chlp(P, Code, Cod),
   remove(CodeAtm, Codes, Cc),
   append(Cod, Cc, Codd) .

checklocprep(_-1-Up-P, Tk, Codd):-
   tp_lex(Tk, Codes, tml),
   on(CodeAtm, Codes),
   pname(Code, CodeAtm),
   chlp(P, Code, Cod),
   remove(CodeAtm, Codes, Cc),
   append(Cod, Cc, Codd) .

checklocfree(_-Pol-P, Pol, Loc, Codd):-
   Pol=1, P=Pa-_,
   lc4(Pa, Codd).

checklocfree(_-Pol-P, Pol, Loc, Codd):-
   Pol=1, P=Pa-_,
   turn_up_wn(Pa, Cod),
   (on(sur, Cod), Codd=['s:h:mf']
    ;
    on(nmm, Cod), Codd=['s:h:m']
    ;
    on(nmf, Cod), Codd=['s:h:f']
    ).

/*
checklocfree(_-Pol-P, Pol, Loc, ['s:h:m']):-
   Pol=1, P=Pa-_,
   nm(Pa).

checklocfree(_-Pol-P, Pol, Loc, ['s:h:f']):-
   Pol=1, P=Pa-_,
   nf(Pa).
*/

checklocfree(_-Pol-P, Pol, Loc, Codd):-
   Pol=1, P=_-Tok,
   toupper(Tok, Upt),
   lc4(Upt, Codd).   

/* create_toks1(Pol, W1, W2, [Nw1, Nw2] */
create_toks1(0, Ut-Lt, Unt-Lnt, [Lt, Lnt]):-!.
create_toks1(0, Lt, Unt-Lnt, [Lt, Lnt]):-!.
create_toks1(0, Ut-Lt, Lnt, [Lt, Lnt]):-!.
create_toks1(0, Lt, Lnt, [Lt, Lnt]):-!.
create_toks1(1, Ut-Lt, Unt-Lnt, [Ut, Unt]):-!.
create_toks1(1, Lt, Unt-Lnt, [Lt, Unt]):-!.
create_toks1(1, Ut-Lt, Lnt, [Ut, Lnt]):-!.
create_toks1(1, Lt, in-(in), [Lt, in]):-!.
create_toks1(1, Lt, Lnt, [Lt, Lnt]):-!.

/* create_toks2(Pol, W1, W2, W3, [Nw1, Nw2, Nw3] */
create_toks2(1, Ut-Lt, Unt-Lnt, Urt-Lrt, [Ut, Unt, Urt]):-!.
create_toks2(1, Lt, Unt-Lnt, Urt-Lrt, [Lt, Unt, Urt]):-!.
create_toks2(1, Ut-Lt, Lnt, Urt-Lrt, [Ut, Lnt, Urt]):-!.
create_toks2(1, Lt, Lnt, Urt-Lrt, [Lt, Lnt, Urt]):-!.
create_toks2(1, Ut-Lt, Unt-Lnt, Lrt, [Ut, Unt, Lrt]):-!.
create_toks2(1, Lt, Unt-Lnt, Lrt, [Lt, Unt, Lrt]):-!.
create_toks2(1, Ut-Lt, Lnt, Lrt, [Ut, Lnt, Lrt]):-!.
create_toks2(0, Ut-Lt, Unt-Lnt, Urt-Lrt, [Lt, Lnt, Lrt]):-!.
create_toks2(0, Lt, Unt-Lnt, Urt-Lrt, [Lt, Lnt, Lrt]):-!.
create_toks2(0, Ut-Lt, Lnt, Urt-Lrt, [Lt, Lnt, Lrt]):-!.
create_toks2(0, Lt, Lnt, Urt-Lrt, [Lt, Lnt, Lrt]):-!.
create_toks2(0, Ut-Lt, Unt-Lnt, Lrt, [Lt, Lnt, Lrt]):-!.
create_toks2(0, Lt, Unt-Lnt, Lrt, [Lt, Lnt, Lrt]):-!.
create_toks2(0, Ut-Lt, Lnt, Lrt, [Lt, Lnt, Lrt]):-!.
create_toks2(0, Lt, Lnt, Lrt, [Lt, Lnt, Lrt]):-!.

/* la terza non è una loc: si tenta di trovare una polirem di tre parole, altrimenti si analizzano le due*/
search_loc3(Car, NCar, OrTk, Ipol, Tok, NTok, NTo, OutFile):-
     (s_l(3, Ipol, NTo, Oto, Opol, Car, LCar, Pol, NOr, NT, Type),
      conc_three(OrTk,Ipol,Loc),   
      !,
      append(Tok, NTok, Xtk),
      append(Xtk, NTo, Ytk),
      search_loc4(LCar, NCar, [Type-Pol-NOr|OrTk],Ytk, Pol, Loc, NT, Toks, OutFile)
     ;
     (
      OrTk=[W3, W2, W1],
      conc_three(OrTk, Ipol, Loc),
      (tp_lex(Loc, Codes, locs)
       ;
       conc_two(W1, Pol, W2, Loc2),
       checklocprep(Type-Pol-NTo, Loc2, Codes)
       ;
       checklocfree(W1, Pol, Loc, Codes),
       Ipol=Pol, W2=_-Pol-_
      ),
      !,
      append(Tok, NTok, Xtk),
      append(Xtk, NTo, Ytk),
      assert_polrem(Ipo, Ytk, Loc, Codes, OutFile),
      (var(NCar),
       NCar=Car; nonvar(NCar))
      ;
      OrTk=[W3, W2, W1],
      conc_two(W1, Pol, W2, Loc),
      tp_lex(Loc, Codes, locs),
      !,
      append(Tok, NTok, Xtk),
      assert_polrem(Pol, Xtk, Loc, Codes, OutFile),
      !,
      search_loc1(Car, NCar, [W3], P1, NTo, NT, Toks, OutFile)
      ;
      (
      s_l(1, _, NTo, Oto, Opol, Car, LCar, Pol, NOr, NT, Type),
      OrTk=[W3, W2, W1],
      append(Tok, NTok, Xtk),
      anal_wrd(Car, MCar, [W2, W1], Ty, Xtk, OutFile),
      !,
      (search_loc2(LCar, NCar, [Type-Pol-NOr, W3], Opol, NTo, NT, Toks, OutFile)
      ;
       anal_wrd(LCar, NCar, OrTk, Type, NTo, OutFile), 
       (var(NCar),
       NCar=Car; nonvar(NCar))
       )
      ;
      append(Tok, NTok, Xtk),
      append(Xtk, NTo, Ytk),
      anal_wrd(Car, NCar, OrTk, Ty, Ytk, OutFile),         
      (var(NCar),
       NCar=Car; nonvar(NCar))
      )
      )
      ).

search_loc4(Car, NCar, OrTk, OldL, Opol, Lo, NT, NTo, OutFile):-
     (s_l(4, _, NT, Oto, Opol, Car, LCar, Pol, NOr, NTn, Type),
      OrTk = [W4,W3,W2,W1],
      conc_two_w(Lo,Opol,W4,Loc),
      append(OldL, NT, Toks), 
      !,
      search_loc5(LCar, NCar, [Type-Pol-NOr|OrTk], Toks, Pol, Loc, NTn, Toks, OutFile)
     ;
     (
      OrTk = [W4,W3,W2,W1],
      conc_two_w(Lo,Opol,W4,Loc),
      tp_lex(Loc, Codes, locs),
      !,
      append(OldL, NT, Toks), 
      assert_polrem(Opol, Toks, Loc, Codes, OutFile),
      (var(NCar),
       NCar=Car; nonvar(NCar))
      ;
      tp_lex(Lo, Codes, locs),
      !,
      assert_polrem(Opol, OldL, Lo, Codes, OutFile),
      anal_wrd(Car, NCar, [W4], Type, NTn, OutFile)
      ;
      append(OldL, NT, Toks), 
      anal_wrd(Car, NCar, OrTk, Type, Toks, OutFile), 
     (var(NCar),
       NCar=Car; nonvar(NCar)))
      ).

search_loc5(Car, NCar, OrTk, OldL, Pol, Lo, NT, NTo, OutFile):-
     (s_l(5, _, NT, Oto, Opol, Car, LCar, Pol, NOr, NTn, Type),
      OrTk = [W5,W4,W3,W2,W1],
      conc_two_w(Lo,Opol,W5,Loc),
      append(OldL, NT, Toks), 
      !,
      search_loc6(LCar, NCar, [Type-Pol-NOr|OrTk], Toks, Pol, Loc, NTn, Toks, OutFile)
     ;
     (
      OrTk = [W5,W4,W3,W2,W1],
      conc_two_w(Lo,Pol,W5,Loc),
      tp_lex(Loc, Codes, locs),
      !,
      append(OldL, NT, Toks), 
      assert_polrem(Pol, Toks, Loc, Codes, OutFile),
      NCar=Car
      ;
      append(OldL, NT, Toks), 
      anal_wrd(Car, NCar, OrTk, Type, Toks, OutFile), 
          (var(NCar),
       NCar=Car; nonvar(NCar)))
      ), !.

search_loc6(Car, NCar, OrTk, OldL, Pol, Lo, NT, NTo, OutFile):-
     (s_l(6, _, NT, Oto, Opol, Car, LCar, Pol, NOr, NTn, Type),
      OrTk = [W6,W5,W4,W3,W2,W1],
      conc_two_w(Lo,Opol,W6,Loc),
      append(OldL, NT, Toks), 
      !,
      search_loc7(LCar, NCar, [Type-Pol-NOr|OrTk], Toks, Pol, Loc, NTn, Toks, OutFile)
     ;
     (
      OrTk = [W6,W5,W4,W3,W2,W1],
      conc_two_w(Lo,Pol,W6,Loc),
      tp_lex(Loc, Codes, locs),
      !,
      append(OldL, NT, Toks), 
      assert_polrem(Pol, Toks, Loc, Codes, OutFile),
      NCar=Car
      ;
      append(OldL, NT, Toks), 
      anal_wrd(Car, NCar, OrTk, Type, Toks, OutFile), 
          (var(NCar),
       NCar=Car; nonvar(NCar)))
      ).

search_loc7(Car, NCar, OrTk, OldL, Pol, Lo, NT, NTo, OutFile):-
     (OrTk = [W7,W6,W5,W4,W3,W2,W1],
      conc_two_w(Lo,Pol,W7,Loc),
      tp_lex(Loc, Codes, locs),
      !,
      append(OldL, NT, Toks), 
      assert_polrem(Pol, Toks, Loc, Codes, OutFile),
      NCar=Car
      ;
      append(OldL, NT, Toks), 
      anal_wrd(Car, NCar, OrTk, Type, Toks, OutFile), 
          (var(NCar),
       NCar=Car; nonvar(NCar))
      ).
lc(A,B):-
  lc1(A,B).

lc(A,B):-
  lc2(A,B).

lc(A,B):-
  lc3(A,B).


tp_lex(Root, [pron], tml) :-
   find_pron(Root, T, Feats),!.

tp_lex(Root, Codes, tml) :-
   lc(Root, Codes),!.

tp_lex(Root, Codes, locs) :-
   lc4(Root, Codes),!.

tp_lex(Root, ['agg:z'], locs) :-
   j(Root),!.

tp_lex(Root, Codes, locs) :-
   lc(Root, Codes),!.

tp_lex(Root, Codes, locs) :-
   m_lex(Root, Codes, dizionario),!.

tp_lex(Root, ['num:z'], num) :-
   nm(Root, _, _),!.

tp_lex(Root, Codes, tpl) :-
   (tpl(Root, Codes)
    ;
    stringof(List,Root),
    on('_',List),
    recover_descs(Root,Words),
    Words=[A,B],
    mcon(A,'-',A1),
    mcon(A1,B,B1),
    tpl(B1, Codes)),
   on(Code, Codes),
   !.

/*
tp_lex(Root, Codes, tml) :-
   tml(Root, Codes),!.

*/

tev_spwords(InFile, OutFile) :-
   repeat,
   seeing(DefaultInFile),
   see(InFile),
   read(InFile, T), 
  (T=end_of_file,!
   ;
   T\=end_of_file,
   T=t(OrTok, Pol, Typ),
   tbuild_tok(Pol, OrTok, Typ, OutTok, Tok),
   tsp_wrds(InFile, Typ, Pol, OutTok, Tok, OutFile),
   fail
   ),
   seeing(DefaultInFile).

tbuild_tok(Pol, OrTok, 5, OrTok, OrTok):-!.

tbuild_tok(1, OrTok-Tok, Typ, OrTok, Tok):-!.

tbuild_tok(Pol, OrTok, Typ, OrTok, OrTok):-!.

t_polrem(InFile, Typ, Pol, OutTok, Tok, File):-
   read(InFile, T), 
  (T=end_of_file,!
   ;
   T\=end_of_file,
   Typ\=44,
   T=t(OrTok1, Pol1, Typ1),
   Typ1=44,
   tbuild_tok(Pol1, OrTok1, Typ1, OutTok1, Tok1),
   Tok1=of,
   concatena_locs(Pol, Pol1, OutTok, OutTok1, Tok, of, Typ, 44, OutTok2, LLoc, Toks),
   read(InFile, T2), 
   T2=t(OrTok3, Pol3, Typ3),
   tbuild_tok(Pol3, OrTok3, Typ3, OutTok3, Tok3),
   tsearch_polrem(LLoc, 90, Pol1, Toks, OutTok3, Tok3, Pol3, Typ3, File)
   ;
   T\=end_of_file,
   T=t(OrTok1, Pol1, Typ1),
   tbuild_tok(Pol1, OrTok1, Typ1, OutTok1, Tok1),
   tsearch_polrem(OutTok, Typ, Pol, Tok, OutTok1, Tok1, Pol1, Typ1, File)),
   !.
twords([OTok|OrTok], [Tok|Token], File) :-
   choose_ptt(OTok, Type, Pol, OrTk),
   w_twords(OrTk, Pol, Tok, Type, File),
   twords(OrTok, Token, File),
   !.

twords([], [], File) :- !.

w_twords(UpToken, Pol, [], Type, File):-!.
w_twords(UpToken, Pol, Tokens, Type, File):-
   list(Tokens),
   Tokens=[Tok|Toks],
   all_sp(Pol, UpToken, Tok, Type, File),
   w_twords(UpToken, Pol, Toks, Type, File),
   !.

w_twords(UpToken, 1, Token, Type, File):-
   writing_scheme(1, UpToken, [], N, []),
%   all_sp(Pol, UpToken, Token, Type, File),
   !.

w_twords(UpToken, 0, Token, Type, File):-
   writing_scheme(1, Token, [], N, []),
%   all_sp(Pol, UpToken, Token, Type, File),
   !.

w_twords(UpToken, Pol, Token, Type, File):-
   writing_scheme(1, Token, [], N, []),
   !.

t_checklocfree(Up-Low, Pol, Loc, Codd):-
   Pol=1,
   lc4(Up, Codd).

t_checklocfree(Up-Low, Pol, Loc, Codd):-
   Pol=1,
   turn_up_wn(Up, Cod),
    Cod\=[],
   (on(sur, Cod), Codd=['s:h:mf']
    ;
    on(nmm, Cod), Codd=['s:h:m']
    ;
    on(nmf, Cod), Codd=['s:h:f']
    ).

t_checklocfree(Up-Low, Pol, Loc, Codd):-
   Pol=1,
   atomic(Low),
   turn_up_wn(Low, Cod),
    Cod\=[],
   (on(sur, Cod), Codd=['s:h:mf']
    ;
    on(nmm, Cod), Codd=['s:h:m']
    ;
    on(nmf, Cod), Codd=['s:h:f']
    ).

tconcatena_lookup(Pol, Toks, LLoc, OutFile):-
    p_lex(LLoc, Codes, _),
    Codes\=[],
    assert_polrem(Pol, Toks, LLoc, Codes, OutFile),
    !.
choose_ptt(Token, Type, Pol, OrTk):-
   (Token=[Type-Pol-OrTk|Pols]
     ;
    Token=Type-Pol-OrTk),
    !.

asserisci_catq(File, Cats, CatLems, Lems, Word) :-
    length(Cats, N),
    (var(Lems), LCa=Cats
     ;
     nonvar(CatLems),
     (composelemcats(N, CatLems, LCa),
      writing_scheme(1, Word, Cats, N, LCa)
      ;
      writing_scheme(1, Word, Cats, 1, CatLems))
     ),
   !.

buildnewab(1,T, Nn,NLw):-
    T=UpT-Lt,
    mcon(UpT, '-', Nwa),
    mcon(Nwa, Nn, NUw),
    mcon(Lt, '-', Nwt),
    mcon(Nwt, Nn, NLw),
    !.
     
buildnewab(0,T, Nn,Nw):-
    mcon(T, '-', Nwa),
    mcon(Nwa, Nn, Nw),
    !.

content_funct(OrTk, Pol, 4, 44):-
   consult_func(OrTk, Pol),
   !.
content_funct(OrTk, Pol, Type, Type).

test_abbrs(Fea, [A,B,C]):-
    on(feat=hum, Fea),
    mcon(A,B,Abr),
    checkab(Abr),
    !.

evaluate_tags(T,T,T):-!.
evaluate_tags(T,Tt,Sss):-
   evaluate_alltags(T,Tt,Tn),
   appiattisci(Tn, Ss),
   sort(Ss, Sss), Sss\=[].

evaluate_tags(T,Tt,Sss):-
   nogen_member(Tag-Lex1,Tt),
   findall(S,
    (converti_tag_new_forms(Lex1, Tag, St), St=[S]),Ss),
   sort(Ss, Sss), Sss\=[].

evaluate_tags(T,Tt,T).

evaluate_alltags(T,[],[]):-!.
evaluate_alltags(T,[PTag|Tt],[Tn|Tnn]):-
    PTag=n-_, 
    check_allnouns(T,Tnew),
     Tnew\=[],
    (atomic(Tnew),Tn=[Tnew];list(Tnew),Tn=Tnew),
    evaluate_alltags(T,Tt,Tnn).

evaluate_alltags(T,[PTag|Tt],[Tn|Tnn]):-
    (PTag=v-_;PTag=PTg-_,on(q,PTg)), 
    check_allverbs(T,Tnew),
     Tnew\=[],
    (atomic(Tnew),Tn=[Tnew];list(Tnew),Tn=Tnew),
    evaluate_alltags(T,Tt,Tnn).

evaluate_alltags(T,[PTag|Tt],[Tn|Tnn]):-
    PTag=q-_,
    check_allverbs(T,Tnew),
    Tnew\=[],
    Tn=[vq],
    evaluate_alltags(T,Tt,Tnn).

evaluate_alltags(T,[Tags-Lex1|Tt],[Sss|Tnn]):-
   list(Tags), on(Tag, Tags),
   findall(St,
   converti_tag_new_forms(Lex1, Tag, St),Ss),
   appiattisci(Ss, Ass),
   sort(Ass, Sss), 
   Sss\=[],
   evaluate_alltags(T,Tt,Tnn).

evaluate_alltags(T,[Tag-Lex1|Tt],[T|Tnn]):-
    atomic(Tag),   T=[A],
    evaluate_alltags(T,Tt,Tnn).
evaluate_alltags(T,[Tag-Lex1|Tt],[Sss|Tnn]):-
   atomic(Tag),
   findall(St,
    converti_tag_new_forms(Lex1, Tag, St),Ss),
   appiattisci(Ss, Ass),
    sort(Ass, Sss), 
    Sss\=[],
    evaluate_alltags(T,Tt,Tnn).

evaluate_alltags(T,Tt,Tn):-
    Tt\=[],
    T\=[],
    Tt=[A],
    on(Tag-_,Tt),
    Tn=[Tag],
    !.
readfile(Input, OrTok):-
   see(Input),
   get0(Car),
   l_p(Car, LCar, Pol, OrTok, Token, Type),
   !.

l_p(Car, LastC, Pol, Parol, [NWord], Typ) :-
   erase_blanks(Car, NCar, Pol, Type),
   leggi_par(NCar, Parl, LastCar),
   mpname(Type, Pol, Parl, Parola),
   contr_apice(Type, LastCar, Parola, LastC, Parol, NType),
   tolow(Pol, Parol, NWord),
   (var(Type), Typ=NType
    ; 
    nonvar(Type), var(NType),
    Type=4,
    (NCar=163;NCar=161;NCar=219),
     Typ=6
    ;
    nonvar(Type), 
    (Type=6,
     (Car=13,
      LastCar=46, 
       LastC\=32,Typ=66
      ;
     Typ=Type)
     ;
     nonvar(NType),
     Typ=NType
     ;
     var(NType),
     Typ=Type)),
/*    (Typ=4,
     assertz(rr(NWord))
     ;
     Typ\=4,
     pname(NWord, Wor),
     assertz(rr(Wor))),
*/     !.

mpname(5, P, 9, 9):-!.
mpname(T, P, -1, -1):-!.

mpname(T, 1, Parola, Parola):-nonvar(T),!.
mpname(T, 0, ':', ':'):-!.
mpname(T, 0, '"', '"'):-!.
mpname(T, 0, '˝', '˝'):-!.
mpname(T, 0, '...', '...'):-!.
mpname(5, 0, Parola, Parol):-
      select_punct(Parola, _),
      stringof([Parola], Parol),
      !.
mpname(6, 0, Parol, Parola):-
      name(Parol,[A|P]),
      car_num(A),
      name(Parola,[A|P]),!.
mpname(4, 0, Parol, Parol):-
      name(Parol,[A,H|P]),
      car_num(A),
      car_num(H),
%      append([H|P],[A],List),
%      name(Parola,List),
      !.
% mpname(T, P, Parola, Parola):-!.

mpname(T, 0, Parol, Parola):-
  pname(Parola, Parol),
  nonvar(Parola),!.

mpname(T, 1, Parol, Parola):-
  pname(Parol, Parola),
   (var(T), T=4;nonvar(T)),!.

recov_quant(Np1, LastCar, Nc, NW, 6):-
     car_lettere(LastCar),
     leggi_par(LastCar, Np2, NLc),
     (fine_parola(NLc),
      mcon(Np1, '/', Ncw),
      mcon(Ncw, Np2, NW), Nc=NLc
       ;
       mcon(Np1, '/', Ncw),
      mcon(Ncw, Np2, P),
      contr_ap(6, NLc, P, Nc, NW, Type)
       ),
     !.

recov_quant(Parol, LastCar, Parol, 6):-!.

fine_parola(Car) :-
   car_tra_parole(Car).

fine_parola(Car) :-
   fine_frase(Car).

/**********
leggi_par(+firstCar, -atom, -nextCar)
**********/
leggi_par(32, _, 32) :- !.
leggi_par(13, 13, 13) :- !.
leggi_par(10, 10, 10) :- !.
leggi_par(225, '•', 32) :- 
 get0(Car),!.
leggi_par(9, _, 9) :- 
 get0(Car),!.
leggi_par(-1, -1, -1) :- !.

leggi_par(46, Np, NLc) :-
   contr_apice(T, 46, '.', NLc, Np, Typ),
		 !.

leggi_par(43, Np, NLc) :-
   get0(Car),
   leggi_par(Car, P, Car1),
   (fine_parola(Car1),
    Np=P, NLc=Car1
    ;
    contr_apice(T, 43, P, NLc, Np, Typ)),
    !.

leggi_par(36, Np, NLc) :-
   get0(NCar),
   numb_char(NCar),
   name(Pa, [36]),
   contr_apice(6, NCar, Pa, NLc, Np, Typ),
		 !.

leggi_par(219, Np, NLc) :-
   get0(NCar),
   numb_char(NCar),
   name(Pa, [36]),
   contr_apice(6, NCar, Pa, NLc, Np, Typ),
		 !.
leggi_par(163, Np, NLc) :-
   get0(NCar),
   numb_char(NCar),
   name(Pa, [36]),
   contr_apice(6, NCar, Pa, NLc, Np, Typ),
		 !.


leggi_par(38, and, Car) :-
   get0(Car),
   !.

leggi_par(39, Np, Car1) :-
   get0(NCar),
   (numb_char(NCar),
    get0(Car),
    name(Pa, [NCar]),
    name_conc(_, Pa, Car, NPp),
    (
    pname(Npp, NPp),
     nm(Np,_,Npp)
     ;
     stringof(M, NPp),
     aposturn_intonum(M, Np)),
    get0(Car1)
    ;
    NCar=39,
    get0(Car1),
    Np='"'
    ;
    NCar=13, Car1=13,
    Np='"'
    ;
    leggi_par(NCar, Np, Car1)
%    Car1=NCar, Np='"'
    ),
   !.

leggi_par(96, Np, Car1) :-
   get0(NCar),
   (NCar=96,
    get0(Car1),
    Np='"'
    ;
    Car1=NCar, Np='"'),
   !.

leggi_par(Car, Parola, Car1) :-
   car_punteg(Car, Car1),
%   get0(NCar),
   name(Parola, [Car1]), !.

leggi_par(Car, Parola, LastCar) :- 
   leggi_caratteri(Car, Caratteri, LastCar),
   bytestochars(Caratteri, ListOfChars ),
   ListOfChars=[M|_], 
   (pname(M, Sec),
    integer(Sec),
    turn_intonum(ListOfChars, Parola)
    ;
    \+ integer(M),
    stringof(ListOfChars, Parola)
    ;
    integer(M),
    turn_intonum(ListOfChars, Parola)).

car_punteg(C, C) :-
  interpunzione(C). 

aposturn_intonum(M, Np):-
     length(M, N),
     N=2, remove(First, M, Second),
     mcon(First, '0', Ny),
     pname(Nyp, Ny),
     nm(Np1,_,Nyp),
     remove(Sec, Second, Nil),
     pname(N2, Sec),
     nm(Np2,_,N2),
     mcon(Np1, Np2, Np),!.

turn_intonum(M, Np):-
     length(M, N),
     N=3, 
     (M=['0'|Second], I=0;
        M=[0|Second], I=0;
        M=[I|Second], integer(I)),
     remove(Sec, Second, Ters),
     mcon(I, Sec, Np1),
     remove(Ter, Ters, Nil),
     mcon(Np1, Ter, Np),
     !.
turn_intonum(ListOfChars, Parola):-
    stringof(ListOfChars, Parola),
     !.
leggi_caratteri(Car, [Car1 | Cars], LastCar) :-
   car_check(Car, Ca),
   get0(NewCar),
   (capital_e(Car, NewCar, Carr),
    LastCar=Carr, Car1=Ca, Cars=[] 
    ;
    dashap(NewCar, Nc),
    LastCar=Nc, Car1=Ca, Cars=[] 
    ;
    turn_ap(Car, NewCar, Carr),
    LastCar=Carr, Car1=Car, Cars=[]
    ;
    car_num(Car),
    car_lettere(NewCar),
    LastCar=NewCar, Car1=Ca, Cars=[] 
    ;
    interpunz(NewCar),
    LastCar=NewCar, Car1=Ca, Cars=[] 
   ;
   NCar=NewCar, Car1=Ca,
   leggi_caratteri(NCar, Cars, LastCar)),!.

leggi_caratteri(Car, [], Car) :-
   fine_parola(Car).

turn_ap(Car, 39, 95) :-!.

tolow(P, -1, -1):-!.

tolow(0, Parol, Parol):-!.

tolow(1, Parol, LowAtom):-
   !,
   nonvar(Parol),
   tolower(Parol, LowAtom), !.

dashap(43, 43).
dashap(45, 45).
dashap(47, 45).
dashap(92, 95).
dashap(44, 44).
dashap(46, 46).
dashap(39, 39).
dashap(96, 39).
dashap(37, 37).
dashap(161, 161).

interpunz(33). /* punto esclamativo */
interpunz(34). /* doppi apici */
interpunz(210). /* doppi apici */
interpunz(211). /* doppi apici */
interpunz(35). /* # */
%interpunz(36). /* $ */
%interpunz(163). /* £ */
%interpunz(219). /* € */
interpunz(40). /* open paren */
interpunz(41). /* closed paren */
interpunz(42). /* * */
interpunz(43). /* + */
interpunz(44). /* virgola */
%interpunz(47). /* / */
interpunz(58). /* due punti */
interpunz(59). /* punto e virgola */
interpunz(60). /* < */
interpunz(61). /* =*/
interpunz(62). /* > */
interpunz(63). /* punto interrogativo */
interpunz(64). /* @ at */
interpunz(95). /* underscore */
interpunz(91). /* open square bracket */
interpunz(93). /* closed square bracket */
interpunz(161). /* ° */

%sentence_end(58,:). /* punto esclamativo */
sentence_end(33,!). /* punto esclamativo */
sentence_end(46,'.'). /* punto */
sentence_end(63,?). /* punto interrogativo */

word_end(41).
word_end(93).
word_end(211).


/*
name(•,J),[165]
name(·,J),[225]
name('`',J),[96]
*/
word_start(40). /* open paren */
word_start(42). /* * */
word_start(60). /* < */
word_start(64). /* @ at */
word_start(47). /* / slash */
word_start(34). /* doppi apici */
word_start(210). /* doppi apici */
word_start(211). /* doppi apici */
word_start(35). /* # */
word_start(161). /* ° */
word_start(91). /* open square bracket */

interpunzione(33). /* punto esclamativo */
interpunzione(34). /* doppi apici */
interpunzione(210). /* doppi apici */
interpunzione(211). /* doppi apici */
interpunzione(225). /* sect */
interpunzione(165). /* sect */
interpunzione(35). /* # */
%interpunzione(36). /* $ */
%interpunzione(163). /* £ */
%interpunzione(219). /* € */
%interpunzione(37). /* % */
interpunzione(39). /* apice */
interpunzione(40). /* open paren */
interpunzione(41). /* closed paren */
interpunzione(42). /* * */
interpunzione(43). /* + */
interpunzione(44). /* virgola */
interpunzione(45). /* dash */
interpunzione(46). /* punto */
interpunzione(47). /* / */
interpunzione(58). /* due punti */
interpunzione(59). /* punto e virgola */
interpunzione(60). /* < */
interpunzione(61). /* =*/
interpunzione(62). /* > */
interpunzione(63). /* punto interrogativo */
interpunzione(64). /* @ */
interpunzione(91). /* open square bracket */
interpunzione(93). /* closed square bracket */
% interpunzione(92). /* \ */
% interpunzione(94). /* ^ */
interpunzione(95). /* underscore */
interpunzione(96). /* accento */
interpunzione(161). /* ° */
/* à = 136, { = 123, } = 125, é = 142, è = 143 */

prima_interp(34).
prima_interp(36).
prima_interp(39).
prima_interp(40).
prima_interp(42).
prima_interp(43).
prima_interp(45).
prima_interp(47).
prima_interp(60).
prima_interp(61).
prima_interp(91).
prima_interp(92).
prima_interp(96).


car_tra_parole(32). /* spazio */
car_tra_parole(13). /* a capo */
car_tra_parole(10). /* a capo */

fine_frase(-1).   /* end_of_file */
fine_frase(10).
fine_frase(end_of_text).
% simboli(37). /* % */
% simboli(38). /* & */

erase_blanks(225, 225, 1, 5) :- !.
erase_blanks(165, 165, 1, 5) :- !.
erase_blanks(-1, -1, Pol, Type) :- !.

erase_blanks(39, 39, 0, Type):- !.
erase_blanks(95, NCar, Pol, Type) :- 
   get0(Car),
   (Car=95,
    erase_blanks(Car, NCar, Pol, Type)
    ;
    Car=32, NCar=32
    ;
    erase_blanks(Car, NCar, Pol, Type)
    ),!.

erase_blanks(10, NCar, Pol, Type) :- 
   get0(Car),
   erase_blanks(Car, NCar, Pol, Type).

erase_blanks(13, NCar, Pol, Type) :- 
   get0(Car),
   erase_blanks(Car, NCar, Pol, Type).

erase_blanks(9, NCar, Pol, Type) :- 
   get0(Car),
   erase_blanks(Car, NCar, Pol, Type).

erase_blanks(32, NCar, Pol, Type):-
   get0(Car),
   !,
   erase_blanks(Car, NCar, Pol, Type).

erase_blanks(Car, Car, 1, 4):-
   Car >= 65,
   Car =< 90,!.
erase_blanks(Car, Car, 0, 4):-
   Car >= 135,!.
erase_blanks(Car, Car, 0, 6):-
   Car >= 48,
   Car =< 57, !.
erase_blanks(Car, Car, 0, 6):-
   Car=36;Car=163;Car=161;Car=219, !.
erase_blanks(Car, Car, 0, 4):-
   Car >= 97,
   Car =< 122, !.

erase_blanks(43, NCar, 0, _):-
   get0(Car),
   (Car=45,
    erase_blanks(Car, NCar, Pol, Type)
    ;
    Car=32, NCar=43
%    erase_blanks(Car, NCar, Pol, Type)
    ;
    erase_blanks(Car, NCar, Pol, Type)
    ),!.

erase_blanks(Car, Car, 0, 5):-
   !,
   (Car\=32,
    Car =< 64
    ;
    Car >= 91,
    Car =< 96
    ;
    Car >= 123,
    Car =< 125
    ;
    Car >= 208,
    Car =< 214), !.

car_num(36).
car_num(161).
car_num(163).
car_num(219).
car_num(Car):-
   Car >= 48,
   Car =< 57, !.


car_check(36, 36).
car_check(163, 163).
car_check(219, 219).
car_check(161, 161).
   
% car_parola(37, 37). 
% car_parola(45, 45). 
car_check(38, 38). 

% car_parola(47, 45).
car_check(92, 95).

car_check(C, C) :-
   C >= 95,
   C =< 122
   ;
   C >= 48,
   C =< 57
   ;
   C >= 65,
   C =< 90
   ;
   C >= 193,
   C =< 255.


car_check(129, 129). /* à */
car_check(130, 130). /* à */
car_check(131, 131). /* à */
car_check(132, 132). /* à */
car_check(133, 133). /* à */
car_check(134, 134). /* à */
car_check(136, 136). /* à */
car_check(137, 137). /* à */
car_check(138, 138). /* à */
car_check(139, 139). /* à */
car_check(140, 140). /* ç */
car_check(141, 141). /* ç */
car_check(142, 142). /* é */
car_check(143, 143). /* è */
car_check(144, 144). /* è */
car_check(147, 147). /* è */
car_check(148, 148). /* è */
car_check(149, 149). /* è */
car_check(150, 150). /* ì */
car_check(151, 151). /* ù */
car_check(152, 152). /* ò */
car_check(153, 153). /* ò */
car_check(154, 154). /* ò */
car_check(155, 155). /* ò */
car_check(157, 157). /* ò */
car_check(160, 160). /* ò */
car_check(161, 161). /* ò */
car_check(162, 162). /* ò */
car_check(163, 163). /* ò */
car_check(181, 181). /* ò */
car_check(181, 181). /* ò */
car_check(182, 182). /* ò */
car_check(183, 183). /* ò */


car_upper(C, C) :-
    C >= 65,
    C =< 90.

car_lettere(C):-
   C >= 95,
   C =< 122
   ;
    C >= 65,
    C =< 90
    ;
    C >= 193,
    C =< 255.
 
findrest(Car, Nwa, Car):-
   (fine_parola(Car)
    ;
    interpunz(Car)),!.

findrest(92, Np, NLc):-
   get0(Car1),
   (fine_parola(Car1),
    NLc=Car1
    ;
    leggi_par(Car1, Np, NLc),
    NLc=92
    ),
    !.

findrest(Car, Np1, NLc):-
   (Car\=46,
    leggi_par(Car, Np1, NLc)
    ;
    NLc=Car),
    !.

% sogg_contr(they_d, pronm, they).

termn(t_,t, not).
termn(s_,s, s_).
termn(d_,d, had).
termn(ll_,ll, will).
termn(m_,m, am).
termn(ve_,ve, have).
termn(re_,re, are).

find_rest(Car, Nwa, Car):-
   (fine_parola(Car)
    ;
    interpunz(Car)),!.

find_rest(46, Np, NLc):-
   get0(Car1),
   (fine_parola(Car1),
    NLc=Car1
    ;
    leggi_par(Car1, Np, NLc),
    NLc=46
    ),
    !.

find_rest(Car, Np1, NLc):-
   (Car\=46,
    leggi_par(Car, Np1, NLc)
    ;
    NLc=Car),
    !.

fill_list(Car, NLc):-
   get0(Car1),
   (Car1=46,
    fill_list(Car1, NLc) 
    ;
    NLc=Car1),!.

fine_di_parola(Car1, NLc, P, Np, 5):-
   (
   fin_par(Car1, NLc, P, Np)
   ;
   interpunz(Car1), 
   NLc=Car1, Np=P
   ;
   Car1=37, 
   NLc=Car1,
   mcon(P, '%', Np)
   ),
   !.

fin_par(32, 32, P, P). 
fin_par(13, 13, P, P). 
fin_par(10, 10, P, P). 


contr_ap(6, 45, P, Nc, Nw, Type):- 
   !,
   get0(C),
   (C=39,
    get0(NCar),
    numb_char(NCar),
    get0(Car),
    name(Pa, [NCar]),
    name_conc(_, Pa, Car, NPp),
    pname(N, NPp),
    mcon(P, '/', Cn),
    mcon(Cn, N, Nw),    
    get0(Nc), Type=6 
    ;
    interpunzione(C),
    name(N, [C]), 
    mcon(P, '/', Cn),
    mcon(Cn, N, Nw),
    Nc=C, Type=6
    ;
    leggi_par(C, Np, NLc),
     mcon(P, '/', Cn),
     mcon(Cn, Np, Nww),
     (
      fine_parola(NLc), Nc=NLc,  Type=6, Nw=Nww 
/*      (integer(Np), Type=6, Nw=Np-plus
       ;
       Type=4, mcon(Np, '+', Nw)) */
     ;
     (NLc=45;NLc=46;NLc=44),
     get0(Car2),
     (
      fine_parola(Car2), 
       Nc=Car2,  Nw=Nww,  Type=6
      ;
     leggi_par(Car2, Nn, Noc),
     mcon(Nww, '/', Cmn),
     mcon(Cmn, Nn, Ny),
     ((Noc=45;Noc=46),
      get0(Car3),
      leggi_par(Car3, Nun, Nyc),
      mcon(Ny, '/', Cc),
      mcon(Cc, Nun, Nwu),
      ((Nyc=45;Nyc=46;NLc=44),
       get0(Car4),
       leggi_par(Car4, Nen, Nac),
       mcon(Nwu, '/', Yc),
       mcon(Yc, Nen, Nwa),
       ((Nac=45;Nac=46;NLc=44),
        get0(Car5),
        leggi_par(Car5, Nan, Njc),
        mcon(Nwa, '/', Cac),
        mcon(Cac, Nan, Pwu),
        ((Njc=45;Njc=46;NLc=44),
         get0(Car5),
         leggi_par(Car5, Pjn, Pac),
         mcon(Pwu, '/', Coc),
         mcon(Coc, Pjn, Pw),
         Nc=Pac, Nw=Pw, Type=6
         ;
         Nc=Njc,
         Nw=Pwu, Type=6)
        ;
        Nc=Nac,
        Nw=Nwa, Type=6)
       ;
       Nc=Nyc,
       Nw=Nwu, Type=6)
      ;
      Nc=Noc,
      Nw=Ny, Type=6)
     ;
     Nc=NLc,
     Nw=Nww, Type=6)    
         ;
     Nc=NLc,
     Nw=Nww, Type=6)),
    !.

contr_apice(Ty, -1, P, -1, P, T) :-!.


contr_apice(T, 37, P, Car, Nw, 7):- 
   !,
   get0(Car),
   mcon(P, '%', Nw), 
   !.

contr_apice(T, 95, P, Nc, Nw, Type):- 
   \+ integer(P),
   P\='_',
   get0(Car),
   (fine_parola(Car),
    (
    (P='O'; P='Ca'), 
    mcon(P, '_', Nw),
    Nc=Car, Type=4
    ;
    stringof(Word, P),
    reverse(Word, [First|_]),
    (First=s,
      mcon(P, '-', NPp),
      mcon(NPp, 's', Npp),
      mcon(Npp, '_', Nw),
      Nc=Car, Type=75
      ;
      First\=s, Nw=P,
      Nc=Car, Type=4)
      )
    ;
    Car=39,
    findrest(Car, Np, NLc),
     Nc=34, Nw=P, Type=4
    ;
    findrest(Car, Np, NLc),
    (termn(_,Np, _),
      tolow(1, P, Par),
     (soggcontr(_, _, Par,_),
      mcon(P, '-', NPp),
      mcon(NPp, Np, Npp),
      mcon(Npp, '_', Nww),
      (Np\=s,Typ=76; Np=s,Typ=75)
      ;
      contr(_,_,Par,_),
      mcon(P, '-', NPp),
      mcon(NPp, Np, Npp),
      mcon(Npp, '_', Nww),
      (Np\=s,Typ=76; Np=s,Typ=75))
     ;
%     Np\=s,
     mcon(P, '-', NPp),
     mcon(NPp, Np, Npp),
     mcon(Npp, '_', Nww),
     (Np\=s,Typ=76; Np=s,Typ=75)
    ),
    (
     (NLc=46
     ;
     NLc=95),
    get0(Car1),
    (fine_parola(Car1),
     Nc=Car1, Nw=Nww, Type=7
     ;
     leggi_par(Car1, Nn, Nca),
     mcon(Nww, '_', Ncc),
     Nca=46,
     get0(Car2),
     leggi_par(Car2, Nnw, Nc),
     mcon(Ncc, Nn, Nwa),
     mcon(Nwa, '-', Ncw),
     mcon(Ncw, Nnw, Nw), Type=7
     )
     ;
     fine_di_parola(NLc, Nc, Nww, Nw, NT),
%     fine_parola(NLc),
%     Nw=Nww, Nc=NLc, 
     (var(Typ),Type=7
      ;
      nonvar(Typ), Type=Typ)
     )
     ),
     !.     

contr_apice(T, 45, P, Nc, Nw, Type):- 
   \+ integer(P),
   P\='-',
   get0(Car),
   (fine_parola(Car),
    mcon(P, '-', Nw),
    Nc=Car, Type=3
    ;
    interpunz(Car),
    mcon(P, '-', Nw),
    Nc=Car, Type=4
    ;
    Car=45,
    Nc=Car, Nw=P
    ;
    leggi_par(Car, Np, NLc),
    mcon(P, '-', Npp),
    mcon(Npp, Np, Nww),
    (
    NLc=39,
    get0(Car1),
    leggi_par(Car1, Nn, Nca),
    mcon(Nww, '_', Ncc),
    mcon(Ncc, Nn, Nwa),
    (fine_parola(Nca),
     Nc=Nca, Nw=Nwa, Type=7
    ;
     Nca=45,
     get0(Car2),
     leggi_par(Car2, Nnw, Nc),
     mcon(Nwa, '-', Ncw),
     mcon(Ncw, Nnw, Nw), Type=7
     )     
     ;
     NLc=95,
     get0(Car2),
     leggi_par(Car2, Nn, Nca),
     mcon(Nww, '-', Ncc),
     Nn=s,
     mcon(Ncc, 's', Nwa),
     mcon(Nwa, '_', Nw),
     Nc=Nca, Type=75
     ;
     NLc=46,
     checkab(Np),
     get0(Car2),
     leggi_par(Car2, Nnw, Nc),
     mcon(Nww, '_', Nw),
     Type=8
     ;
     NLc=45,
     get0(Car2),
     leggi_par(Car2, Nn, Noc),
     mcon(Nww, '-', Ncc),
     mcon(Ncc, Nn, Ny),
     (Noc=45,
      get0(Car3),
      leggi_par(Car3, Nun, Nyc),
      mcon(Ny, '-', Cc),
      mcon(Cc, Nun, Nwu),
      (Nyc=45,
       get0(Car4),
       leggi_par(Car4, Nen, Nc),
       mcon(Nwu, '-', Yc),
       mcon(Yc, Nen, Nw), Type=7
       ;
       Nc=Nyc,
       Nw=Nwu, Type=7)
      ;
      Nc=Noc,
      Nw=Ny, Type=7)
     ;
     (car_lettere(NLc),
      leggi_par(NLc, Nn, Noc),
      mcon(Nww, '/', Ncc),
      mcon(Ncc, Nn, Nw),
      Nc=Noc, Type=76
      ;
      Nc=NLc,
      Nw=Nww, Type=7)
     )
    ),
    !.

contr_apice(T, 45, '-', Car, Nw, Type):- 
   get0(C),
   (interpunzione(C),
    name(Nw, [C]),
    get0(Car), Type=5
    ;
    fine_parola(C), 
    Nw='-',
    Car=C
    ;
    leggi_par(C, Np, Car),
    (integer(Np), Type=6, Nw=Np-minus
     ;
     Type=4, Nw=Np)
     ),
    !.

contr_apice(T, 45, P, NLc, Nww, Type):- 
   contr_ap(T, 45, P, Nc, Nw, Type),
    (
    (Nc=32;Nc=13), NLc=Nc,  Nww=Nw,
    !
    ;
    interpunz(Nc), Nww=Nw, NLc=Nc
    ;
    leggi_par(Nc, Pi, NLl),
    checkabbr(NLl, Pi, Nwo, NLc),    
    mcon(Nw, Pi, Nww)),
    !.

contr_apice(T, 95, P, NLc, Nww, Type):- 
   contr_ap(T, 45, P, Nc, Nw, Type),
    (
    (Nc=32;Nc=13), NLc=Nc, Nww=Nw,
    !
    ;
    leggi_par(Nc, Pi, NLl),
    checkabbr(NLl, Pi, Nwo, NLc),    
    mcon(Nw, Pi, Nww)),
    !.


contr_apice(T, 39, P, NLc, Np, Type):- 
    get0(Car),
    (
    Car=32, NLc=32,
    !
    ;
    leggi_par(Car, Pi, NLl),
    checkabbr(NLl, Pi, Nwo, NLc),    
    name(Pa, [Car]),
    mcon(P, '_', Ncc),
    mcon(Ncc, Pa, Np)),
     (checkt(Np), Type=4;Type=8),
    !.

contr_apice(T, 39, P, NLc, Np, T):- 
    !,
    Np=P,
    NLc=32, !.

contr_apice(T, 46, W, NLc, Nw, Type):- 
   \+ integer(W),
   W\='.',
   !,
   (
   checkabbr(46, W, Nww, NL),
   (var(NL), NLc=32, Nw=Nww; 
     nonvar(NL),
    (
     NL=45,
      get0(Car),
      leggi_par(Car, P, NLc),
%      checkabbr(NLl, P, Nwo, NLc),    
      mcon(Nww, '/', Cc),
      mcon(Cc, P, Nw)
    ;
     NL=46, get0(Car), 
        NLc=Car, Nw=Nww
    ;
     NL=39,
     get0(Car),
     leggi_par(Car, P, NLl),
    mcon(Nww, '-', NPp),
    P=s,
    mcon(NPp, 's', Npp),
    mcon(Npp, '_', Nw),
    NLc=NLl, Type=75
    ;
     NLc=NL, Nw=Nww)),
     (checkt(Nw), Type=4;Type=8;Type=75)
    ; 
    Nw=W, NLc=46),!.

contr_apice(T, 46, '.', NLc, Np, Typ):- 
    get0(Car1),
    (Car1=46,
     get0(Car2),
     (Car2=46,
      get0(Car3),
      fill_list(Car3, NLc),
      Np='...', Typ=5
      ;
      Np='§',
      NLc=Car2, Typ=5)
     ;
      Np='.',
     NLc=Car1, Typ=5),
    !.

contr_apice(6, 58, P, NLc, Np, Typ):- 
   integer(P), 
   get0(Car1),
    numb_char(Car1),
    assign_div(P, Div),
    mcon(P,Div,Par),
    name_conc(P, Par, Car1, Paro),
    get0(Car5),
    numb_char(Car5),
    collect_num(Paro, Car5, Np, NLc),
   !.

contr_apice(T, 46, P, NLc, Np, Typ):- 
   P\='.',
   get0(Car1),
   (
   fine_di_parola(Car1, NLc, P, Np, 5),
    assert(rm('.',1,5))
   ;
   P\='.',
   Car1\=46,
  (
   (\+ integer(P), 
    car_lettere(Car1)
    ;
    integer(P),
    numb_char(Car1)
    ),
    assign_div(P, Div),
    mcon(P,Div,Par),
    name_conc(P, Par, Car1, Paro),
    get0(Car2),
    (
     fine_di_parola(Car2, NLc, Paro, Np, 5)
    ;
     name_conc(P, Paro, Car2, NPar),
     get0(Car3),
     (
      fine_di_parola(Car3, NLc, NPar, Np, 5)
      ;
      (car_check(Car3, Ca3)
       ;
       Car3=46, 
       assign_div(P, Ca3)),
       name_conc(P, NPar, Ca3, NParo),
     get0(Car4),
     (
     fine_di_parola(Car4, NLc, NParo, Np, 5)
     ;
      Car4=46, Typ=6,
      get0(Car5),
      (numb_char(Car5),
       name_conc(P, NParo, 46, NPa),
       collect_num(NPa, Car5, Np, NLc)
       ;
       fine_di_parola(Car5, NLc, NParo, Np, 5)
       ;
       Car5\=46,
       Np=NParo,
       NLc=Car5 )
      ;
      numb_char(Car4),
      name_conc(P, NParo, Car4, NPa),
      get0(Car5),
      (numb_char(Car5),
       name_conc(P, NPa, Car5, NPA),
       get0(Car6), Carr=Car6
       ;
       Car5 =< 48, NPA=NPa, Carr=Car5),
       verify_date(NPA, Carr, Np, NLc), Typ=6
       ;
       Np=NParo, NLc=Car4, Typ=6))
       )    
      ;
    integer(P), Np=P, NLc=Car1, Typ=6
     )
   ),
 !.

contr_apice(Ty, 43, P, LC, Np, T):-
   get0(LC),   
   fine_di_parola(LC, LC, _, _, _),
   (integer(P),
    Np=P-plus, T=6
    ;
   mcon(P, '_', Cc),
   mcon(Cc, plus, Np),
    T=8
    ),
   !.    

contr_apice(Ty, 44, P, NLc, Np, T):-
   integer(P),
   get0(Car1),   
   numb_char(Car1),
   leggi_par(Car1, Nun, LC),
   mcon(P, '/', Cc),
   mcon(Cc, Nun, Pp),
   (fin_par(LC, NLc, Pp, Np)
    ;
    LC=44,
    get0(Car2),   
    leggi_par(Car2, Num, Ll),
    mcon(Pp, '/', Cp),
    mcon(Cp, Num, Ppp),
    (fin_par(Ll, NLc, Ppp, Np)
    ;
    Ll=44,
    get0(Car3),   
    leggi_par(Car3, Nump, Ll),
    mcon(Ppp, '/', Cpp),
    mcon(Cpp, Nump, Np)
    )
    ;
    LC=46, nonvar(Pp), integer(P), Np=Pp, T=Ty
    ;
    fine_di_parola(LC, NLc, Pp, Np, _)
    ;
    interpunzione(LC), Np=Pp, T=Ty
    ),
   !.        

contr_apice(4, 161, Np1, NLc, NW, 6):- 
     get0(Car),
     car_num(Car),   
     leggi_par(Car, Np2, Nc),
     mcon(Np1, '/', Ncw),
     mcon(Ncw, Np2, N),
    (
    (Nc=32;Nc=13), NLc=Nc, NW=N,
    !
    ;
    (Nc=44;Nc=46), 
    contr_ap(6, 45, N, NLc, NW, Type)),
     !.
contr_apice(4, 163, Np1, NLc, NW, 6):- 
     get0(Car),
     car_num(Car),   
     leggi_par(Car, Np2, Nc),
     mcon(Np1, '/', Ncw),
     mcon(Ncw, Np2, N),
    (
    (Nc=32;Nc=13), NLc=Nc, NW=N,
    !
    ;
    (Nc=44;Nc=46), 
    contr_ap(6, 45, N, NLc, NW, Type)),
     !.
contr_apice(4, 219, Np1, NLc, NW, 6):- 
     get0(Car),
     car_num(Car),   
     leggi_par(Car, Np2, Nc),
     mcon(Np1, '/', Ncw),
     mcon(Ncw, Np2, N),
    (
    (Nc=32;Nc=13), NLc=Nc, NW=N,
    !
    ;
    (Nc=44;Nc=46), 
    contr_ap(6, 45, N, NLc, NW, Type)),
     !.

contr_apice(4, 36, Np1, NLc, NW, 6):- 
     get0(Car),
     car_num(Car),   
     leggi_par(Car, Np2, NLc),
     mcon(Np1, '/', Ncw),
     mcon(Ncw, Np2, NW),
     !.
contr_apice(6, LastCar, Parol, NLc, NW, T):- 
  recov_quant(Parol, LastCar, NLc, NW, T), 
  !.

contr_apice(5, Car, '$', Nc, NW, 6):- 
     check_end_contr(Car),
%     not interpunz(Car), 
     get0(Car1),
     car_num(Car1),   
     leggi_par(Car1, Np, NLc),
     mcon('$', '/', Np1),
     mcon(Np1, Np, NWo),
     (
      (NLc=46;NLc=44),
      get0(Car2),
      numb_char(Car2),
      name_conc(P, NWo, NLc, NPa),
      collect_num(NPa, Car2, NW, Nc)
     ;
     check_end_contr_num(NLc), 
     Nc=NLc, NW=NWo
      ;NLc=45, 
     Nc=NLc, NW=NWo
      ),!.

contr_apice(5, Car, '£', Nc, NW, 6):- 
     check_end_contr(Car),
%     not interpunz(Car), 
     leggi_par(Car, Np, Car1),
     (
      (Car1=46;Car1=44),
      get0(Car2),
      numb_char(Car2),
      name_conc(P, Np, 46, NPa),
      collect_num(NPa, Car2, NW, Nc)
     ;
     check_end_contr_num(Car1), 
     Nc=Car1, NW=Np
     ;Car1=45, 
     Nc=Car1, NW=Np),!.

/*
contr_apice(6, Car, Num, Nc, NW, 6):- 
     stringof([Sim|_],Num),
     money_simb(Sim),
     check_end_contr(Car),
     not interpunz(Car), 
     leggi_par(Car, Np, Car1),
     (
      (Car1=46;Car1=44),
      get0(Car2),
      numb_char(Car2),
       mcon(Num, Np, Nu),
       mcon(Nu, '/', Num1),
      collect_num(Num1, Car2, NW, Nc)
     ;
     check_end_contr_num(Car1), 
     Nc=Car1, NW=Np
     ;
      Car1=45, 
      Nc=Car1, NW=Np),!.
*/

contr_apice(5, Car, '.', Nc, NWw, Typ):- 
     check_end_contr(Car),
     \+ interpunz(Car), 
     leggi_par(Car, Np, Car2),
     (checkab(Np),
      (checkt(Np), Typ=4;Typ=8),
       mcon(Np, '_', NW), Nc=Car2, NWw=NW
      ;
      mcon(Np, '_', NW),
     (Car2=64,Nc=Car2, NWw=NW,Typ=8
      ;
      (check_end_contr(Car2),
       leggi_par(Car2, Np1, Car3),
       (checkab(Np1),
        (checkt(Np1), Typ=4;Typ=8),
         mcon(NW, '_', NW1),
         mcon(NW1, Np1, NW2), Nc=Car3, NWw=NW2
        ;
        mcon(NW, '_', NW1),
        mcon(NW1, Np1, NW2),
       (Car3=64,Nc=Car3, NWw=NW2,Typ=8
         ;
        (Car3\=13, Car3\=32,
         leggi_par(Car2, Np2, Car3),Nc=Car3, 
         mcon(NW2, '_', NW3),
         mcon(NW3, Np2, NW4), NWw=NW4
        ))))
       )),
      !.

contr_apice(4, 64, W, NL, NW, 7):- 
     get0(Car),
     leggi_par(Car, Np, Nc),
     Nc=46,
     get0(Car1),
     leggi_par(Car1, Npp, NL0),
     mcon(W, '-', Ww),
     mcon(Ww, 'at', Nw),
     mcon(Nw, '-', Ncw),
     mcon(Ncw, Np, NWw),
     mcon(NWw, '_', Nn),
     mcon(Nn, Npp, NW1),
     (
     NL0\=46,NL=NL0,NW=NW1  
     ;
     NL0=46,
     get0(Car2),
     (fin_par(Car2,  NLc, NW1, NW);
     leggi_par(Car2, Npp1, NL1),
     mcon(NW1, '_', Nn1),
     mcon(Nn1, Npp1, NW2), 
/*     NL=NL1, NW=NW2, */
     (
     NL1\=46,NL=NL0,NW=NW1      
     ;
     NL1=46,
     get0(Car3),
     leggi_par(Car3, Npp2, NL),
     mcon(NW2, '_', Nn2),
     mcon(Nn2, Npp2, NW3), NW=NW3))
     ),
     !.

contr_apice(5, 63, '?', Car, '?', 5):- 
     get0(Car),
     !.

contr_apice(5, 33, '!', Car, '!', 5):- 
     get0(Car),
     !.
contr_apice(5, 58, ':', Car, ':', 5):- 
     get0(Car),
     !.

contr_apice(Ty, LC, P, LC, P, T):- !.

checkt(mr).
checkt(san).
checkt(sant).
checkt(saint).
checkt(sen).
checkt(sens).
checkt(gov).
checkt(govs).
checkt(ms).
checkt(mrs).
checkt('Mr').
checkt('Ms').
checkt('Mrs').
checkt(mr_).
checkt(ms_).
checkt(mrs_).
checkt(gov_).
checkt(gen_).
checkt(govs_).
checkt(sen_).
checkt(sens_).
checkt('San').
checkt('Sant').
checkt('Saint').
checkt('Mr_').
checkt('Ms_').
checkt('Mrs_').
checkt('Sen_').
checkt('Brig_').
checkt('Gen_').
checkt('St_').
checkt('Dr_').
checkt('Inc_').
checkt('Co_').
checkt('Corp_').
checkt('Ltd_').

check_end_contr(Car):-
     Car\=13, Car\=32, Car\=34, Car\=10,!.

check_end_contr_num(Car):-
     Car=13; Car=32; Car=10,!.


collect_num(Num, 32, Npp, 32):-
     stringof(Numb,Num),
     reverse(Numb,[Last|RevNum]),
    (name(Last,K),on(Car,K),      
     numb_char(Car), Npp=Num
       ;
       reverse(RevNum,Numm),
      stringof(Numm,Npp),
      assert(rm(',',1,5))),
    !.
collect_num(NPa, Car5, Np, Car8):-
   name_conc(_, NPa, Car5, NPaa),
   get0(Car6),
   collect_num(NPaa, Car6, Np, Car8),!.

/*
   name_conc(_, NPaa, Car6, NPp),
   get0(Car7),
   name_conc(_, NPp, Car5, Np),
   get0(Car8).  
*/

assign_div(P, Div):-
   (integer(P), Div='/'
    ;
    Div='_'),
   !.
numb_char(Num):-
   Num=36; /* $ */
   Num=163; /* £ */
   Num=219; /* € */
   Num=37. /* % */

numb_char(Num):-
    Num >= 48,
    Num =< 57,
    !.
name_conc(P, InputWord, 46, OutputWord):-   
    assign_div(P, Div),
    mcon(InputWord, Div, OutputWord),
    !.
name_conc(P, InputWord, 44, OutputWord):-   
    assign_div(P, Div),
    mcon(InputWord, Div, OutputWord),
    !.
name_conc(_, InputWord, /, OutputWord):-   
    (integer(InputWord),
     mcon('InputWord', /, OutputWord)
     ;
     mcon(InputWord, /, OutputWord)),
    !.

name_conc(_, InputWord, Car, OutputWord):-   
    name(Parola, [Car]),        
    mcon(InputWord, Parola, OutputWord),
    !.

verify_date(Np, Car, Np, Car) :-
   (fine_parola(Car)
    ;
    interpunz(Car)),!.

verify_date(NPa, C, Np1, NCar) :-
     C >= 48,
     C =< 57,
     name(Parol, [C]),
     mcon(NPa,Parol, Np),
     get0(Car),
     verify_date(Np, Car, Np1, NCar).

verify_date(NPa, C, Np, NLc) :-
     C >= 48,
     C =< 57,
     name(Parol, [C]),
     mcon(NPa,Parol, NP),
     get0(Car),
     (numb_char(Car),
      name(Paro, [Car]),
      mcon(NP,Paro, NP1),
      get0(Car6),
      verify_date(NP1, Car6, Np, NLc)
     ;
     Np=NP, NLc=C),!.


/**********
leggi_caratteri(+firstCar, -ASCIIList, -nextCar)
**********/

capital_e(Car, 39, 95) :-!.

/*
   (checkt(W);
    chabbr(W);
    charl(W);
    checkab(W))
*/

checkabbr(_, W, Nw, NL):-
   (W=p;W='P'),
   get0(Car),
   find_rest(Car, Nwa, NLc),
   mcon(W, '_', Nww),            
   mcon(Nww, Nwa, Nwo), 
   /* NLc=punto o spazio */           
   find_rest(NLc, Nwap, NL),
   (var(NL), 
   mcon(Nwo, '_', Nw)
   ;
   var(Nwap),
   Nw=Nwo
   ;
   nonvar(Nwap),
   mcon(Nwo, '_', Nwi),
   mcon(Nwi, Nwap, Npp),
   mcon(Npp, '_', Nw)              
   ),!.     
  
  
checkabbr(_, W, Nwab, Nc):-
  (checkab(W),
   mcon(W, '_', Nwab),
   get0(Nc)   
   ;
   charl(W),
   mcon(W, '_', Nwa),
   get0(Car1),
   leggi_par(Car1, Nn, Nca),
   mcon(Nwa, Nn, Nwaa),            
   get0(Ca),
   (Ca=46,
    mcon(Nwaa, '_', Nwab)
    ;
    Nwab=Nwaa, Nc=Ca)          
   ;
   (chabbr(W),
    mcon(W, '_', OutW),
    get0(NLc),
     /* seconda lettera */
    (name(Par, [NLc]),       
     (ck2(Par);chabbr(Par)),
     mcon(OutW, Par, Nwa),            
     get0(Ca),
     Ca=46,
     mcon(Nwa, '_', Nw),            
     /* terza lettera */
     get0(Ca1),
     (
     (fine_parola(Ca1);
      interpunzione(Ca1)),
      Nc=Ca1, Nwab=Nw
     ;
     get0(Ca2),
     (Ca2=46,
     name_conc(_, Nw, Ca1, Nww),
      mcon(Nww, '_', W3),            
      /* quarta lettera */
      get0(Ca3),
      name(Pa, [Ca3]),        
       (Pa=r,
        name_conc(_, W3, Ca3, W4),
        get0(Ca4),
        Ca4=46,
        mcon(W4, '_', Nwab)
        /* d.o.a.r. */
        ;
       Nwab=W3, Nc=Ca3))
      ;
       name_conc(_, Nw, Ca1, Nww),
       Nwab=Nww, Nc=Ca2)
     ;
   /* abbr a due componenti */
    ((
     fine_parola(NLc);
     interpunzione(NLc)),
     Nc=NLc, Nwab=W
    ;
     car_upper(NLc, C),
     leggi_par(NLc, Np1, Nc),
     mcon(OutW, Np1, Nwab)
     ;     
     name_conc(_, OutW, NLc, Nwa),
     get0(Ca),
     (Ca=46,
      mcon(Nwa, '_', Nwab)
      ;
      name(Pa, [Ca]),        
      chk2cm(Pa),
      mcon(Nwa, Pa, Nww),
      get0(Ca2),
      Ca2=46,
      mcon(Nww, '_', Nwab)
      ;
      Nc=Ca,
      Nwab=W))
      ))),!.

checkabbr(Car, W, W, Car):-
      findall(C, select_punct(W,C), Cs),
      Cs=[], !,
      stringof(Wl, W),
      length(Wl,L),
      L =< 3,
      verificaabbr(W),
      Wl=[First|_], name(First, Ascii),
      Ascii < 90.

verificaabbr(W):-
      findall(C, fct(W), Cs),
      Cs=[], !.

contr('mustn-t_', must).
contr('needn-t_', need).
contr('wouldn-t_', would).
contr('won-t_', will).
contr('shouldn-t_', should).
contr('shan-t_', shall).
contr('couldn-t_', could).
contr('can-t_', can).
contr('hadn-t_', had).
contr('haven-t_', have).
contr('hasn-t_', has).
contr('doesn-t_', does).
contr('didn-t_', did).
contr('don-t_', do).
contr('weren-t_', were).
contr('aren-t_', are).
contr('ain-t_', is).
contr('isn-t_', is).
contr('wasn-t_', was).
contr(cannot, can).
contr(shouldda, should).

leaf_pres(R, suffix(_, _, noun, _, Reg), Cat, s, Des):-
   stringof(R1,R),
   reverse(R1,[S|_]),
   S\=s,
   des(M, Feat),
   Feat=[F],
   w(F, M, desinence(des(M), Feats, noun, _, Reg)),
   !,
   Cat=(desinence(des(M), Feats, noun, _, Reg)),
   Des='',!.

leaf_pres(R, suffix(_, _, noun, _, Reg), Cat, M, Des):-
   M\=s,
   des(M, Feat),
   Feat=[F],
   w(F, M, desinence(des(M), Feats, noun, _, Reg)),
   !,
   Cat=(desinence(des(M), Feats, noun, _, Reg)),
   Des='',!.

leaf_pres(R, suffix(_, _, noun, _, Reg), Cat, M, Des):-
   M\=s,
   ddes(M, Feat,N),
   !,
   append([num=s], Feat, Feet),
   append([cat=n], Feet, Feats),
   Cat=(desinence(des(M), Feats, noun, _, Reg)),
   Des='',!.

leaf_pres(R, suffix(_, _, noun_pl, _, Reg), Cat, s_, Des):-
   w(s_, s_, desinence(des(s_), Feats, noun, _, Reg)),
   !,
   Cat=(desinence(des(s_), Feats, noun, _, Reg)),
   Des='',!.

leaf_pres(R, suffix(_, _, noun, _, Reg), Cat, s_, Des):-
   w(s_, s_, desinence(des(s_), Feats, noun, _, Reg)),
   !,
   Cat=(desinence(des(s_), Feats, noun, _, Reg)),
   Des='',!.

leaf_pres(R, suffix(_, _, noun, _, Reg), Cat, '', Des):-
   append([num=s], [], Feet),
   Cat=(desinence(des(M), Feet, noun, _, Reg)),
   Des='',!.

leaf_pres(R, suffix(_, _, agg, _, reg), Cat, M, Des):-
   des(M, Feat),
   Feat=[F],
   w(F, M, desinence(des(M), Feats, agg, _, Reg)),
   !,
   Cat=(desinence(des(M), Feats, agg, _, reg)),
   Des='', !.

leaf_pres(R, suffix(_, _, agg, _, Reg), Cat, M, Des):-
   ddes(M, Feat, N),
   Feat=[F],
   !,
   Cat=(desinence(des(M), [], agg, _, Reg)),
   Des='',!.


leaf_pres(R, suffix(_, _, agg, _, reg), Cat, '', Des):-
   append([num=s], [], Feet),
   Cat=(desinence(des(M), Feet, agg, _, reg)),
   Des='',!.

leaf_pres(R, suffix(_, _, pronoun, _, reg), Cat, M, Des):-
   !,
   des(M, Feat),
   Feat=[F],
   w(F, M, desinence(des(M), Feats, pronoun, _, Reg)),
   Cat=(desinence(des(M), Feats, pronoun, _, reg)),
   Des='', !.

leaf_pres(s_, suffix(_, _, verb, _, Reg), Cat, '', Des):-
   w(s_, s_, desinence(des(s_), Feats, auxiliary, _, Reg)),
   !,
   Cat=(desinence(des(s_), Feats, verb, _, Reg)),
   Des='',!.

leaf_pres(R, suffix(_, _, verb, _, Reg), Cat, d, Des):-
   des(d, Feat),
   on(F, Feat),
   w(F, M, desinence(des(M), Feats, verb, _, Reg)),
   Cat=(desinence(des(M), Feats, verb, _, reg)),
   Des=''.

leaf_pres(R, suffix(_, _, verb, _, Reg), Cat, ed, Des):-
   des(ed, Feat),
   on(F, Feat),
   w(F, M, desinence(des(M), Feats, verb, _, Reg)),
   Cat=(desinence(des(M), Feats, verb, _, reg)),
   Des=''.

leaf_pres(R, suffix(_, _, verb, _, Reg), Cat, M, Des):-
   des(M, Feat),
   Feat=[F],
   w(F, M, desinence(des(M), Feats, verb, _, Reg)),
   Cat=(desinence(des(M), Feats, verb, _, reg)),
   Des='', !.

leaf_pres(R, suffix(_, _, verb, _, Reg), Cat, M, Des):-
   ddes(M, Feat,N),
   Feat=[feat=F],
   w(F, M, desinence(des(M), Feats, verb, _, Reg)),
   Cat=(desinence(des(M), Feat, verb, _, reg)),
   Des='', !.

leaf_pres(R, suffix(_, decl, verb, _, reg), Cat, '', Des):-
   (
    (supporto(R)
     ; 
     R=be), Feat=[],
   Cat=(desinence(des(M), Feat, verb, _, reg)),
   Des=''    
   ;
   Feat=[mood=ind, tense=pres],
   append([num=sp], Feat, Feet),
   Cat=(desinence(des(M), Feet, verb, _, reg)),
   Des=''),!.

leaf_pres(R, suffix(_, decl, verb, _, reg), Cat, '', Des):-
   (
    (supporto(R)
     ; 
     R=be), Feat=[],
   Cat=(desinence(des(M), Feat, verb, _, reg)),
   Des=''    
   ;
   Feat=[mood=subj, tense=pres],
   append([num=sp], Feat, Feet),
   Cat=(desinence(des(M), Feet, verb, _, reg)),
   Des=''),!.

leaf_pres(R, suffix(_, _, adverbial, _, reg), Cat, M, Des):-
   nonvar(M),
   !,
   temp_pro_lex(M, Class),
   on(advdes, Class),
   Feats=[des=M, cat=adv, type=m],
   Cat=(desinence(des(M), Feats, adverbial, _, reg)),
   Des='', !.
look_ahead(cw(_, _), '').
look_ahead(cw(_, _), Des) :-
   des(Des, _).
look_ahead(suffix(_, _, _, _, _), '').


/*
word_cats(Pol, File, UpToken, Word, Cats, LCa, Type) :-
   sw(Word-Cats-LCa),!.
*/

word_cats(Pol, File, UpToken, Word, NCats, SAllCats, Type) :-
   findall(Cat-Lem, word_cat(File, Word, Cat, Lem), AllCats),
   AllCats \= [],
   decompose_cl(AllCats, AllCs, Lemmas, Ws),
   sort(AllCats, SAllCats),
   sort(Ws, Words),
   sort(Lemmas, Lems),
   sort(AllCs, Cats),
   promote_cat(Cats, NCats),
   !,
   (Pol=1, 
    asserisci_catq(File, Cats, SAllCats, Words, UpToken)
   ;
   asserisci_cat(File, Cats, SAllCats, Words, Word)).


word_cats(1, File, W, Word, [Cat], [L], _) :-
   (W=A-B,W1=A;W\=A-B,W1=W),
   upparse(Feats, W1, ''),
   countlems(File, W1, Feats, Cat, Lem, L),
   !,
   asserisci_cat(File, [Cat], [Cat-Lem], [L], Word),!.

word_cats(0, File, UpToken, Word, [v], AllCats, Type) :-
   v(Word, Cat),
   lemmatize_dic_v(Word, Lemma, Rest),
   check_irregulars(Word),
   (Rest=g, Mo=ger; (Rest=d;Rest=n;Rest=t), (Mo=ind;Mo=part),Te=pass; Mo=ind, Te=pres),
   AllCats=[v-Word-Lemma-v-[pred=Lemma, subcat=Cat, mood=Mo, tense=Te]],
   asserisci_cat(File, [v], AllCats, [], Word),!.

word_cats(Pol, File, UpToken, Word, Cats, AllCats, Type) :-
   nonvar(Word),
   up_wn(Word, Feat, Cats),
   Cats\=[],
   !, 
   lemmatize_dic(Word, Lemma, Rest),
   AllCats=[Cats-Word-Lemma-Cats-[pred=Lemma, feat=Feat]],
   asserisci_cat(File, Cats, AllCats, [], Word),!.


word_cat(File, Word, Cat, Lemma):-
   \+  grw(Word),
   integer(Word),
   num_cats(File, Word, Feats, Lemma),
   on(cat=Cat, Feats).

word_cat(File, Word, [v], AllCats) :-
   v(Word, Cat),
   lemmatize_dic_v(Word, Lemma, Rest),
   build_mult_lemm(Word,Lemma, Rest,NewLex,NWord),
   decide_mood_tense(NWord,Rest,Mo,Te),
   AllCats=[v-Word-NewLex-v-[pred=NewLex, subcat=Cat, mood=Mo, tense=Te]].

word_cat(File, Word, Cat, Lemma) :-
   mparse(Feats, Word, ''),
   countlems(File, Word, Feats, Cat, Lemma, _).

wordcat(File, Word, Cat, Lemma):-
   \+  grw(Word),
   integer(Word),
   num_cats(File, Word, Feats, Lemma),
   on(cat=Cat, Feats),!.

wordcat(File, Word, Cat, Lemma) :-
   mparse(Feats, Word, ''),
   countlems(File, Word, Feats, Cat, Lemma, _).

build_pre_catlems(W, [], [], [], []):-!.

build_pre_catlems(Word, [Feats|MoreF], [Cat-Lem|CatLems], [Cat|Cats], [L|Lems]):-
   countlems(File, Word, Feats, Cat, Lem, L),
   build_pre_catlems(Word, MoreF, CatLems, Cats, Lems).

wordcats(W, [Cat], [L], _) :-
   upparse(Feats, W, ''),
   countlems(File, W, Feats, Cat, Lem, L),
   !.

wordcats(Word, NCats, NLems) :-
   findall(Cat-Lem, wordcat(File, Word, Cat, Lem), AllCats),
   AllCats \= [],
   decompose_cl(AllCats, AllCs, Lemmas, Ws),
   sort(AllCats, SAllCats),
   sort(Ws, Words),
   sort(Lemmas, Lems),
   sort(AllCs, Cats),
   promote_cat(Cats, NCats),
   reduce_llems(1,Word,Lems,NLems),
   !.

wordcats(Word, NCats, NLems) :-
      spy_lower(Word, LWord, Pol),
      (LWord\=Word,
      (findall(Cat-Lem, word_cat(File, LWord, Cat, Lem), AllCats),
      AllCats \= [],
      decompose_cl(AllCats, AllCs, Lemmas, Ws),
      sort(Ws, Words),
      sort(Lemmas, Lems),
      sort(AllCs, Cats),
      reduce_llems(1,LWord,Lems,NLems),
      promote_cat(Cats, NCats)),
      !      
      ;
      Pol=1,
      up_wn(LWord, Feat, Cats),
      NCats=Cats
      ;
      up_wn(Word, Feat, Cats),
      NCats=Cats
      ;
      Pol=1,
      NCats=[npro]).

wordcats(Word, AllCats,Lemma) :-
   v(Word, Cat),
   lemmatize_dic_v(Word, Lemma, Rest),
   build_mult_lemm(Word,Lemma, Rest,NewLex,NWord),
   decide_mood_tense(NWord,Rest,Mo,Te),
  AllCats=[v-Word-NewLex-v-[pred=NewLex, subcat=Cat, mood=Mo, tense=Te]],
   !.

wordcats(Word, Cats, Lems) :-
   findall(Feats, pre_parse(cw(_, Feats), Word, ''), FF),
   build_pre_catlems(Word, FF, CatLems, AllCs, Lemmas),
   AllCs \= [],
   sort(Lemmas, Lems),
   sort(AllCs, Cats).

wordcats(Word, [Cat], [L]) :-
   (Type=10;Type=30;Type=3),
   suf_parse(cw(_, Feats), Word, ''),
   countlems(File, Word, Feats, Cat, Lem, L),
   nonvar(Cat).

wordcats(Word, [fw], [Word]) :-!.

pre_parse(cw(_, NFeat), PhraseIn, _) :-
   pre_leaf(cw(_, Feats), Cat, PhraseIn, M),
   parse_aff(M, Cat, Feats, NFeat).

pre_parse(cw(_, Feat), Pre, _):-
   is_pref(Pre, Code),
   (Code=el1;Code=el1el2),
   w(s:z:mf, Pre, Cat),
   Cat=root(root(R), Decl, Categ, Feats, Reg),
   append([pref=Pre], Feats, Feat),
   Cat1=root(root(R), Decl, Categ, Feat, Reg).  

suf_parse(cw(_, Feats), PhraseIn, PhraseOut) :-
   suf_leaf(PhraseIn, Feats), !.

suf_parse(cw(_, Feats), PhraseIn, PhraseOut) :-
   suf_nums(PhraseIn, Feats).

suf_parse(cw(_, Feats), PhraseIn, PhraseOut) :-
   \+ integer(PhraseIn),
   pref_name(PhraseIn, Pre+Rest),
   stringof(RString, Rest),
   stringof(PString, Pre),
   length(RString, L),
   length(PString, Lp),
   1 < L,
   1 < Lp, 
   suf_vname(Rest, Suffroots),
   nonvar(Suffroots), 
   Suffroots\=[],
   find_root_suff(Suffroots, Der, Root, PhOut),
   checkroot(Root, Der, String, NRoot),
   sfx(Der, SCodes),
   stringof(DString, Der),
   length(DString, La),
   2 < La,
   analyzeroot(Root, String, Der, SCodes, PhOut, Feat, Pred, T),
   append([pre=Pre], Feat, Feats),
   !.

pre_leaf(TopDown, Cat2, PhraseIn, PhraseOut) :-
   \+ integer(PhraseIn),
   \+ up_wn(PhraseIn,_,_),
   nonvar(PhraseIn),
   pref_name(PhraseIn, Pre+Root),
   stringof(String, Root),
   length(String, L),
   1 < L,
   ana_morpho(Root, String, '', TopDown, Morpho, Code, PhraseOut),
   nonvar(Code),
   w(Code, Morpho, Cat),
   Cat=root(root(R), Decl, Categ, Feats, Reg),
   append([pref=Pre], Feats, Feat),
   Cat1=root(root(R), Decl, Categ, Feat, Reg),
   lookfeat(PhraseOut, Cat1, Cat2, Feat, NFeat).  

lookfeat(M, Cat, Cat1, Feat, NFeat):-
   on(pref=un,Feat),
   Cat=root(root(R), Decl, Categ, Feat, Reg),
   remove(cat=C,Feat,NFea),
   Categ\=adverbial,
   append([cat=agg],NFea,NFeat),
   Cat1=root(root(R), Decl, agg, NFeat, Reg),
   !.

lookfeat(M, Cat, Cat1, Feat, NFeat):-
   parse_aff(M, Cat, Feat, NFeat),
   Cat=root(root(R), Decl, Categ, Feat, Reg),
   Cat1=root(root(R), Decl, Categ, NFeat, Reg),
   !.

lookfeat('', Cat, Cat, Feat, NFeat):-!.


sibil(s).
sibil(x).
sibil(z).
sibil(h).

spelllemm(Lem, Pred, C, F, W):-
   (Lem=[C-W-Pred-C-F]
    ;
    Lem=W-Pred-Root-C-F
    ;
    Lem=W-Pred-C-F
    ;
    Lem=W-Pred
    ; 
    Pred=Lem).


up_word_cat(Word, Num, Lemma, num):-
   \+  grw(Word),
   name(Word, W),
   on(C,W), car_num(C),
   num_cats(File, Word, Feats, Lemma),!.

up_word_cat(Word, Num, Word, Cat):-
   atomic(Word),
   word_cats(1, File, Word, Word, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lem, Feas),
   check_allnouns(Ct,Cat),
   !.

getnumlex(Lex,Res,Num):-
   var(Res),Num=sing
   ;
    nonvar(Res),
    (Res=s,Num=plur
    ;
    dc(Lex,K),
      (on(npl,K),Num=plur
       ;
      getnumlem(K,Num))
      )
    ;
    Num=sing,
    !.
    
nn_word_cat(Word, Num, Lemma, S):-
    atomic(Word),
    (spy_lower(Word, LowW, 1),Wrd=LowW
      ; Wrd=Word),
    sw(Wrd-Cat-Feat),
    nonvar(Cat),
    check_allnouns(Cat,Cats),
    search_categories(Word,Cat,S),
   explore_lems(Feat, Ct, Testa, Lems, Feas),
   (list(Lems), on(Lemma,Lems); atomic(Lems), Lem=Lems),
   !.

nn_word_cat(Word, Num, Lemma, num):-
   integer(Word),
   num_cats(File, Word, Feats, Lemma),!.

nn_word_cat(Word, Num, ULemma, Cat):-
   atomic(Word),
   spy_lower(Word, LowW, 1),
   lemmatize_dic(LowW, Lemma, Rest),
   getnumlex(LowW,Rest,Num),
   check_suff_root(LowW, Rest, Lemma),
   word_cats(1, File, Word, Lemma, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lem, Feas),
   check_allnouns(Ct,Cat),
   on(Lm,Lem),
   (on(np,Cats),
    toupper(Lm,ULemma)
    ;
    on(n,Cats),
    ULemma=Lm),
   !.

nn_word_cat(Word, Num, Lemma, Cat):-
   atomic(Word),
   lemmatize_dic(Word, Lemma, Rest),
   getnumlex(Word,Rest,Num),
   check_suff_root(Word, Rest, Lemma),
   word_cats(0, File, UpToken, Word, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lem, Feas),
   check_allnouns(Ct,Cat),
   !.

/*
nn_word_cat(Word, Num, Lemma,Cat):-
   pname(Word, NWord),
   lemmatize_dic(NWord, Lemma, Rest),
   getnumlex(NWord,Rest,Num),
   check_suff_root(Word, Rest, Lemma),
   word_cats(0, File, UpToken, Word, Cats, Lems, Type),
   explore_lems(Lems, Ct, Testa, Lem, Feas),
   check_allnouns(Ct,Cat),
   !.
*/

check_suff_root(Word, s, Lemma):-
   Word\=Lemma,
   \+ k(Word),!.
check_suff_root(Word, s, Word):-
   k(Word),!.
check_suff_root(Word, S, Word):-
   S\=s,!.

n_word_cat(Word, Num, Lemma):-
   integer(Word),
   num_cats(File, Word, Feats, Lemma),!.

n_word_cat(Word, Num, Lemma):-
   atomic(Word),
   lemmatize_dic(Word, Lemma, Rest),
   (Rest=s,Num=plur;Num=sing),
   word_cats(0, File, UpToken, Lemma, Cats, Lems, Type),
   check_allnouns(Cats),!.

n_word_cat(Word, Num, Lemma):-
   pname(Word, NWord),
   lemmatize_dic(NWord, Lemma, Rest),
   (Rest=s,Num=plur;Num=sing),
   word_cats(0, File, UpToken, Lemma, Cats, Lems, Type),
   check_allnouns(Cats),!.


check_allnouns(n,n):-!.
check_allnouns(V,V):-
  atomic(V),
  check_all_nouns(V),!.
check_allnouns(V,Vv):-
  list(V),
  on(Vv, V),
  check_all_nouns(Vv),!.


try_lemmas(N, s, Rest, Lemma, ss):-
   Rest=[s|R],
   append([s],Rest,Resto),
   reverse(Resto, Lemm), 
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmas(N, s, Rest, Lemma, s):-
   Rest=[e,i|R],
   Resto=[y|R],
   reverse(Resto, Lemm), 
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmas(N, s, Rest, Best, S):-
   Rest=[e|Resto],
   Resto=[S|R],
   sibil(S),
   reverse(Resto, Lemm), 
   reverse(Rest, Lemm1), 
   (cerca_lem_string(N, Lemm,Best)
    ;
   cerca_lem_string(N, Lemm1,Lemma1),
   mostfreq_wsj(Lemma1,Lemm1,Best)),
   !.

try_lemmas(N, s, Rest, Lemma, S1):-
   Rest=[e|Resto],
   Resto=[S|R],
   sibil(S),
   reverse(Resto, Lemm), S1=s,
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmas(N, s, Rest, Lemma, s):-
   reverse(Rest, Lemm), 
   Rest=[S|_], S\=s,
   \+ is_vow(S),
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmas(N, s, Rest, Lemma, s):-
   reverse(Rest, Lemm), 
   cerca_lem_string(N, Lemm,Lemma),
   !.

try_lemmas(N, d, Rest, Lemma, d):-
    Rest=[e,i,C|R],
   consonant(C),
   reverse(R, Le), 
   stringof(Le, Lem),
   mcon(Lem, C, Lemm),
   mcon(Lemm, y, Lemma),
   cercalemma(N,Lemma),
   !.

try_lemmas(N, d, Rest, Lemma, d):-
   (Rest=[i|R],
    Resto=[y|R]
    ;
    Rest=[e|R],
    (Resto=Rest
      ;
     R=[C,C|R1],
     \+ is_vow(C),
     R2=[C|R1],
     Resto=R2
      ;
     Resto=R
      )),
   reverse(Resto, Lemm), 
   stringof(Lemm, Lemma),
   cercalemma(N,Lemma),
   !.

try_lemmas(N, d, Rest, Lemma, d):-
    Rest\=[i|R],
    Rest\=[e|R],
    Resto=Rest,
   reverse(Resto, Lemm), 
   stringof(Lemm, Lemmas),
   cercalemmav(Lemmas,Lemma,S),
   reverse([d|Resto], Lemm), 
   once(inf_v(Lemm,I)),
   !.

try_lemmas(N, g, Rest, Lemma, g):-
   Rest=[n,i,C,C|R],
   reverse(R, Lemm), 
   append(Lemm,[C],Lemms),
   stringof(Lemms, Lemmas),
   cercalemmav(Lemmas,Lemma,S),
   once(inf_v(Lemma,I)),
   !.

try_lemmas(N, g, Rest, Lemma, g):-
   Rest=[n,i|R],
   append([e],R,Restt),
    (Resto=Restt
      ;
     Resto=R),
   reverse(Resto, Lemm), 
   stringof(Lemm, Lemmas),
   cercalemmav(Lemmas,Lemma,S),
   once(inf_v(Lemma,I)),
   !.

try_lemmas(N, S, Resto, Lemma, S1):-
   append([S],Resto,Rest),
   reverse(Rest, Lemm), 
   stringof(Lemm, Lemmas),
   cercalemmav(Lemmas,Lemma,S1),
   once(inf_v(Lemma,I)),
   !.

try_lemmas(N, S, Resto, Word, S):-
   append([S],Resto,Rest),
   reverse(Rest, Lemm), 
   stringof(Lemm, Word),
   (once(inf_v(Word,I))
     ;
     n_wn(Word,C)
     ;
     ht(Word,C)
     ;
     nwn(Word,C)
     ;
     wsu(Word,C,_)
     ;
     up_wn(Word, Feat, Cats)
     ),
    !.

/*
try_lemmas(N, S, Resto, Word, S):-
   nonvar(S),
   append([S],Resto,Rest),
   reverse(Rest, Lemm), 
   stringof(Lemm, Word1),
   downcase_atom(Word1,Loww),
   (Word1\=Loww,
    stringof(Nrest, Loww),
    reverse(Nrest,[S|Nresto]),
    try_lemmasf(N, S, Nresto, Word, S)
    ;
    Word1=Loww,
    Word=Word1),
    !.
*/

get_lem(File, Word, Feats, Category, Lem) :-
   getcat(Word, Feats, Category, Features, Lemma),
   (Lemma=Word-Pred,
    lemmatization(File, Word, Category, Features, Word-Pred),
    Fea=Features
     ;
    Features\=[],
    remove(pred=Pred, Features, Fea),
    lemmatization(File, Word, Category, _, Word)
     ;
    lemmatization(File, Word, Category, _, Word),
    Lemma=Word, Pred=Word, Fea=Feats),
    Lem=Word-Pred-Category-Fea, 
    !.

get_lem(File, Word, Feats, Cat, Lem) :-
     nonvar(Cat),
     Lem=Word-Word-Cat-Feats,
     assertlem(File, ls(Word-Word-Cat-Feats)), 
    !.

find_lem(File, Word, Feats, clit, Lem) :-
   nonvar(Feats),
   on(encl:Clit, Feats),
   NWord=Clit,
   lemmatization(File, Clit, clit, Features, Clit),
   Lem=[lemma(Clit, clit, Features, Clit)].

find_lem(File, Word, Feats, Category, Lem) :-
   remove(cat=Category, Feats, Feat),
   find_pred(Word, Feat, Pred, Features),
   lemmatization(File, Word, Category, Features, Word-Pred),
   Lem=Word-Pred-Category-Features.

find_pred(_, Feat, Pred, Features) :-
   on(pred=Pr+Root+Des, Feat),
   mcon(Pr, Root, Pred1),
   mcon(Pred1, Des, Pred),
   remove(pred=Pr+Root+Des, Feat, Features), !.

find_pred(_, Feat, Pred, Features) :-
   on(pred=Root+Des, Feat),
   mcon(Root, Des, Pred),
   remove(pred=Root+Des, Feat, Features),!.

find_pred(_, Feat, Pred, Features) :-
   on(pred=Pred, Feat),
   on(feat=Fea, Feat),
   remove(pred=Pred, Fea, Features),!.

find_pred(_, Feat, Pred, Features) :-
   on(pred=Pred, Feat),
   remove(pred=Pred, Feat, Features),!.

find_pred(Word, Feat, Word, []) :- !.
 
/***********************
LEMMATIZATION
***********************/
lemmatization(File, Word, Category, Features, Word-Pred):-
    Features\=[],
     !,
    assertlem(File, ls(Word-Pred-Category-Features)),
    !.

lemmatization(File, Word, Category, _, Word):-!.

assertlem(File, ls(Word-Pred-Category-Features)):-!.

w(pre, _285, prefix):-true.
w(conj, _285, root(root(_285), indecl, conjunction, [cat=conj], _1212)):-true.
w(cong:T, _285, root(root(_285), indecl, conjunction, [cat=conj, type=T], _1212)):-true.
w(congf:T, _285, root(root(_285), indecl, conjunction, [cat=conj, type=T], _1212)):-true.
w(cosu:T, _285, root(root(_285), indecl, conjunction, [cat=conj, type=T], _1212)):-true.
w(loc:avv, _285, root(root(_285), indecl, adverbial, [cat=avvl], _1212)):-true.
w(vc:loc, _285, root(root(_285), indecl, preposition, [cat=phl], _1212)):-true.
w(vc:loc:_, _285, root(root(_285), indecl, preposition, [cat=phl], _1212)):-true.
w(loc:cong, _285, root(root(_285), indecl, conjunction, [cat=conjl], _1212)):-true.
w(loc:cong:comp, _285, root(root(_285), indecl, conjunction, [cat=ccom, type=compar], _1212)):-true.
w(loc:cong:Cat, _285, root(root(_285), indecl, conjunction, [cat=conjl, type=Cat], _1212)):-true.
w(loc:inter, _285, root(root(_285), indecl, interjection, [cat=intjl], _1212)):-true.
w(loc:inter:aff, _285, root(root(_285), indecl, interjection, [cat=intal], _1212)):-true.
w(loc:inter:neg, _285, root(root(_285), indecl, interjection, [cat=intnl], _1212)):-true.
w(loc:prep, _285, root(root(_285), indecl, preposition, [cat=php], _1248)):-true.
w(prep, _285, root(root(_285), indecl, preposition, [cat=p], _1248)):-true.
w(art, _285, root(root(_285), indecl, article, [cat=art, type=Type], _1284)):- (_285=the, Type=def,!; Type=ind).
w(posspron, _285, root(root(_285), indecl, pron, [cat=pron], _1320)):-true.
w(punt, _285, root(root(_285), indecl, punt, [cat=punt], _1374)):-true.
w(par, _285, root(root(_285), indecl, par, [cat=par], _1428)):-true.
w(doll, _285, root(root(_285), indecl, par, [cat=doll], _1428)):-true.
w(pound, _285, root(root(_285), indecl, par, [cat=pound], _1428)):-true.
w(euro, _285, root(root(_285), indecl, par, [cat=euro], _1428)):-true.
w(and, _285, root(root(_285), indecl, par, [cat=and], _1428)):-true.
w(dirs, _285, root(root(_285), indecl, par, [cat=dirs], _1428)):-true.
w(int, _285, root(root(_285), indecl, interjection, [cat=inter], _1482)):-true.
w(inter, _285, root(root(_285), indecl, interjection, [cat=inter], _1482)):-true.
w(inter:aff, _285, root(root(_285), indecl, interjection, [cat=inta], _1482)):-true.
w(inter:neg, _285, root(root(_285), indecl, interjection, [cat=intn], _1482)):-true.
w(puntint, _285, root(root(_285), indecl, puntint, [cat=puntint], _1482)):-true.
w(punto, _285, root(root(_285), indecl, punto, [cat=punto], _1536)):-true.
w(n, _285, root(root(_285), decl, noun, [cat=noun, pred=_285], reg)):-true.
w(nh, _285, root(root(_285), decl, noun, [cat=noun, pred=_285, type=human], reg)):-true.
w(np, _285, root(root(_285), decl, noun, [cat=noun, pred=_285, type=proper], reg)):-true.
w(nadj, _285, root(root(_285), decl, noun, [cat=nh, pred=_285], reg)):-true.
w(n:i, _285, root(root(_285), decl, noun, [cat=noun, pred=_285], irreg)):-true.
w(n:f, _285, root(root(_285), decl, noun_f, [cat=noun, pred=_285], reg)):-true.
w(npl, _285, root(root(_285), indecl, noun_pl, [cat=noun, pred=Lemma, num=plur], irreg)):-
     lemmatize_dic(_285, Lemma, S).
w(npl:_1731, _285, root(root(_285), indecl, noun_pl, [cat=noun, pred=_1731, num=plur], irreg)):-
     true.
w(n:t:T, _285, root(root(_285), indecl, noun, [cat=nt, pred=_285, feat=time, type=T], reg)):-true.
w(adj, _285, root(root(_285), decl, agg, [cat=agg], _1806)):-true.
w(agg:z, _285, root(root(_285), decl, agg, [cat=agg], _1806)):-true.
w(nadj, _285, root(root(_285), decl, agg, [cat=agg], _1806)):-true.
w(a, _285, root(root(_285), decl, agg, [cat=agg], _1848)):-true.
w(v:r:_1911, _285, root(root(_285), decl, verb, [cat=verb, pred=_285, subcat=vc], reg)):-copl(_285).
w(v:pp:_2403, _285, root(root(_285), indecl, verb, [cat=verb, pred=_2403, subcat=vc, tense=past, mood=part], reg)):-copl(_2403).
w(v:i:_2079, _285, root(root(_285), decl, verb, [cat=verb, pred=_285, subcat=vc], irreg)):-copl(_285).
w(v:ii:_2247, _285, root(root(_285), decl, verb, [cat=verb, pred=_285, subcat=vc], irreg)):-copl(_285).
w(v:pr:_2832, _285, root(root(_285), indecl, verb, [cat=verb, pred=_2832, subcat=vc, tense=pres, mood=ind-subj], reg)):-
copl(_2832).
w(v:pr:_2928, _285, root(root(_285), indecl, auxiliary, [cat=aux, pred=_2928, subcat=vc, tense=pres, mood=ind], aux)):-
copl(_2928).
w(v:pt:_2550, _285, root(root(_285), indecl, verb, [cat=verb, pred=_2550, subcat=vc, tense=past, mood=ind-subj], reg)):-
copl(_2550).
w(v:pt:_2697, _285, root(root(_285), indecl, auxiliary, [cat=aux, pred=_2697, tense=past, mood=ind], aux)):-
copl(_2697).
w(verb, _285, root(root(_2331), decl, verb, [cat=verb, pred=_2331, tense=pres, mood=ind, pers=3, num=sing], reg)):-
 lemmatize_dic_v(_285, _2331, S), S=s.
w(verb, _285, root(root(_2331), decl, verb, [cat=verb, pred=_2331, tense=pres, mood=ind], reg)):-
 lemmatize_dic_v(_285, _2331, S),S\=s.

w(v:g, _285, root(root(_2331), indecl, verb, [cat=verb, pred=_2331, tense=pres, mood=part], reg)):-lemmatize_dic_v(_285, _2331, S).
w(v:g:_2403, _285, root(root(_285), indecl, verb, [cat=verb, pred=_2403, tense=pres, mood=part], reg)):-true.
w(v:3, _285, root(root(_2331), decl, verb, [cat=verb, pred=_2331, tense=pres, mood=ind, pers=3, num=sing], reg)):-lemmatize_dic_v(_285, _2331, S).
w(v:pp, _285, root(root(_285), indecl, verb, [cat=verb, pred=_285, tense=past, mood=part], reg)):-true.
w(v:pp, _285, root(root(_285), indecl, verb, [cat=verb, pred=_2331, tense=past, mood=ind], reg)):-lemmatize_dic_v(_285, _2331, S).
w(v:b, _285, root(root(_285), indecl, verb, [cat=verb, pred=_285], reg)):-true.
w(v:s:_2331, _285, root(root(_2331), indecl, modal, [cat=modal, pred=_2331], modal)):-true.
w(v:p-pp:_2331, _285, root(root(_2331), indecl, verb, [cat=verb, pred=_2331, tense=past, mood=part], reg)):-true.
w(v:p:_2331, _285, root(root(_2331), indecl, verb, [cat=verb, pred=_2331, tense=past, mood=part], reg)):-true.

w(v:r:_1911, _285, root(root(_285), decl, verb, [cat=verb, pred=_285, subcat=_1911], reg)):-true.
w(v:d:_1995, _285, root(root(_285), decl, verb, [cat=verb, pred=_285, subcat=_1995], reg)):-true.
w(v:i:_2079, _285, root(root(_285), decl, verb, [cat=verb, pred=_285, subcat=_2079], irreg)):- \+ coplbh(_285).
w(v:id:_2163, _285, root(root(_285), decl, verb, [cat=verb, pred=_285, subcat=_2163], irreg)):-true.
w(v:ii:_2247, _285, root(root(_285), decl, auxiliary, [cat=aux, pred=_285, subcat=x], aux)):-true.
w(aux:z:_2247:_2248, _285, root(root(_285), decl, auxiliary, [cat=aux, pred=_285, tense=_2247, pers=_2248, subcat=x], aux)):-true.
w(v:ii:_2247, _285, root(root(_285), decl, verb, [cat=verb, pred=_285, subcat=_2247], irreg)):- \+ coplbh(_285).
w(v:im:_2331, _285, root(root(_285), indecl, modal, [cat=modal, pred=_285, subcat=_2331], modal)):-true.
w(v:pp:_2403, _285, root(root(_285), indecl, verb, [cat=verb, pred=_2403, subcat=_2415, tense=past, mood=part], reg)):-is_in_lexicon(_2403, v:_2505:_2415, dizionario).
w(v:pt:_2550, _285, root(root(_285), indecl, verb, [cat=verb, pred=_2550, subcat=_2562, tense=past, mood=ind-subj], reg)):-is_in_lexicon(_2550, v:_2652:_2562, dizionario).
w(v:pr:_2832, _285, root(root(_285), indecl, verb, [cat=verb, pred=_2832, subcat=_2562, tense=pres, mood=ind-subj], reg)):-
is_in_lexicon(_2832, v:_2652:_2562, dizionario), \+ coplbh(_2832).
w(p:auxa:_2928, _285, root(root(_285), indecl, contrac, [cat=contr, pred=_2928, tense=pres, mood=ind], reg)):-true.
w(p:auxe:_2928, _285, root(root(_285), indecl, contrac, [cat=contr, pred=_2928, tense=pres, mood=ind], reg)):-true.
w(p:auxm:_2928, _285, root(root(_285), indecl, contrac, [cat=contr, pred=_2928, tense=pres, mood=ind], reg)):-true.
w(p:aump:_2928, _285, root(root(_285), indecl, contrac, [cat=contr, pred=_2928, tense=past, mood=cond], reg)):-true.
w(pron, _285, root(root(_285), indecl, pronoun, Feats, reg)):-find_pron(_285, T, Feats).
w(pron:z:C:_1731, _285, root(root(_285), indecl, pronoun, [cat=pron], reg)):-true.
w(s:ab:G, _285, root(root(_285), decl, title, [cat=abbr, gen=G], reg)):-true.
w(s:tit:G, _285, root(root(_285), decl, title, [cat=abbr, feat=hum, gen=G], reg)):-true.
w(s:tim:G, _285, root(root(_285), decl, title, [cat=abbr, feat=time, gen=G], reg)):-true.
w(s:geo:G:N, _285, root(root(_285), indecl, noun, [cat=np, feat=loc, type=G], reg)):-true.
w(n:geo:G, _285, root(root(_285), indecl, noun, [cat=np, feat=loc, type=G], reg)):-true.
w(s:p:G:N, _285, root(root(_285), indecl, noun, [cat=np, feat=coll, gen=G, num=N], reg)):-true.
w(s:h:G, _285, root(root(_285), indecl, noun, [cat=nh, feat=hum, gen=G], reg)):-true.
w(s:z:G, _285, root(root(_285), indecl, noun, [cat=noun, feat=com], reg)):-true.
w(s:z:G:N, _285, root(root(_285), indecl, noun, [cat=noun, feat=com, num=N], reg)):-true.
w(num:inv, _285, root(root(_285), indecl, adverbial, [cat=adv, pred=_285], _3081)):-true.
w(num:z, _285, root(root(_285), indecl, adverbial, [cat=num, pred=_285], _3081)):-true.
w(adv, _285, root(root(_285), indecl, adverbial, [cat=adv, pred=_285], _3081)):-true.
w(adv:T, _285, root(root(_285), indecl, adverbial, [cat=adv, pred=_285, type=T], _3081)):-true.
w(avv:T, _285, root(root(_285), indecl, adverbial, [cat=adv, pred=_285, type=T], _3081)):-true.
w(past, _285, desinence(des(_285), [tense=past, mood=ind], verb, [], reg)):-true.
w(past_part, _285, desinence(des(_285), [tense=past, mood=part], verb, [], reg)):-true.
w(ing, _285, desinence(des(_285), [tense=progr, mood=ind], verb, [], _3279)):-true.
w(ss_, _285, desinence(des(_285), [case=gen, num=plur], noun, [], reg)):-true.
w(s_, _285, desinence(des(_285), [tense=pres, mood=ind, num_pers=sing3], auxiliary, [], reg)):-true.
w(s_, _285, desinence(des(_285), [case=gen], noun, [], _)):-true.
w(s, _285, desinence(des(_285), [tense=pres, mood=ind, num_pers=sing3], verb, [], reg)):-true.
w(s, _285, desinence(des(_285), [tense=pres, mood=ind, num_pers=sing3], verb, [], irreg)):-true.
w(es, _285, desinence(des(_285), [tense=pres, mood=ind, num_pers=sing3], verb, [], reg)):-true.
w(es, _285, desinence(des(_285), [tense=pres, mood=ind, num_pers=sing3], verb, [], irreg)):-true.
w(plur, _285, desinence(des(_285), [num=plur], noun, _3642, reg)):-true.
w(more, _285, desinence(des(_285), [comp=more], agg, [], _3699)):-true.
w(most, _285, desinence(des(_285), [comp=most], agg, [], _3753)):-true.
w(advdes, _285, desinence(des(_285), [], adverbial, [], _3795)):-true.
w(adj, _285, desinence(des(_285), F, agg, [], _3753)):-true.
w(nadj, _285, desinence(des(_285), F, agg, [], _3753)):-true.
w(n, _285, desinence(des(_285), F, noun, [], _3753)):-true.
w(adj:c:Root, _285, root(root(Root), decl, agg, [pred=Root,cat=agg,comp=more], _1806)):-true.
w(adj:s:Root, _285, root(root(Root), decl, agg, [pred=Root,cat=agg,comp=most], _1806)):-true.


adj_rl('', r, o, _205434, [r,u,o| _205434], _205404):-
   _205434\=[].
adj_rl(d, e, r, [o| _205434], [r,u,o| _205434], _205404) :-!.
adj_rl(ing, r, o, _205434, [r,u,o| _205434], _205404).

adj_rl(ing, u, _208929, _205434, [e, u, _208929| _205434], _205404) :-true.

adj_rl(ed, u, _208929, _205434, [e, u, _208929| _205434], _205404) :-true.

adj_rl(ed, _208824, _208929, _205434, [e, _208824, _208929| _205434], _205404) :-
   consonant(_208824).

adj_rl(s, r, o, _205434, [r,u,o| _205434], _205404):-!.

adj_rl(s, e, _206196, [_206061| _205434], [_206196, _206061| _205434], _205404) :-
   es_consonants([_206061, _206196]).
adj_rl(ing, _206331, _206331, _205434, [_206331| _205434], _205404) :-
   monosyllable([_206331| _205434]).
adj_rl(d, e, _206742, [_206742| _205434], [_206742| _205434], _205404) :-
   monosyllable([_206742| _205434]).
adj_rl(d, e, _207600, [_207735| _207768], [_207600, _207735| _207768], v:r:_207177) :-
   ed_without_doubling([_207600, _207735| _207768]).
adj_rl(ing, _208422, _208422, [_208287| _205434], [_208422, _208287| _205434], v:d:_207864) :-
   doubling_ending([_208287, _208422]).
adj_rl(d, e, _209139, [_209139, _209004| _205434], [_209139, _209004| _205434], v:d:_208572) :-
   doubling_ending([_209004, _209139]).
adj_rl(ing, _209847, _209847, [_209712| _205434], [_209847, _209712| _205434], v:id:_209289) :-
   doubling_ending([_209712, _209847]).
adj_rl(d, e, y, [_209217| _205434], [y, _209217| _205434], _205404) :-
   vocal(_209217).
adj_rl(ing, _208824, _208929, _205434, [e, _208824, _208929| _205434], _205404) :-
   consonant(_208824).
adj_rl(ing, k, c, _205434, [c| _205434], _205404) :-
   true.
adj_rl(d, e, k, [c| _205434], [c| _205434], _205404) :-
   true.
adj_rl(er, _207762, _207867, _205434, [_207762, _207867| _205434], _205404) :-
   consonant(_207762).
adj_rl(r, _207762, _207867, _205434, [e, _207762, _207867| _205434], _205404) :-
   vocal(_207762).
adj_rl(st, _207369, _207474, _205434, [_207369, _207474| _205434], _205404) :-
   consonant(_207369).
adj_rl(r, e, _206742, [_206742| _205434], [_206742| _205434], _205404) :-
   consonant(_206742).
adj_rl(st, e, _206742, [_206742| _205434], [_206742| _205434], _205404) :-
   consonant(_206742).
adj_rl(ly, i, _206991, _205434, [y, _206991| _205434], _205404) :-
   consonant(_206991).
adj_rl(er, i, _206613, _205434, [y, _206613| _205434], _205404) :-
   consonant(_206613).
adj_rl(est, i, _206235, _205434, [y, _206235| _205434], _205404) :-
   consonant(_206235).
adj_rl(s, e, i, [_205848| _205434], [y, _205848| _205434], _205404) :-
   consonant(_205848).
adj_rl(d, e, i, [_205377| _205434], [y, _205377| _205434], _205404) :-
   consonant(_205377).
adj_rl(ed, i, _205377, _205434, [y,_205377| _205434], _205404) :-
   consonant(_205377).
adj_rl(ing, y, _204969, [], [e, i, _204969], _205404) :-
   ying_root(_204969).

tell_num(Testa,Num):-
     lemmatize_dic(Testa,Lemma,S),
     (S=s,Num=plur;Num=sing),
     !.
     